#
  Copyright (C) 2025 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

<using std-2.0>
<using tedi>

<require basic/io/css_colours>

<allow unused>

!context_help_functions(SH) sh_context_help

$is_a_builtin_command
  hash_set
    "alias"
    "bg"
    "bind"
    "break"
    "builtin"
    "cd"
    "command"
    "compgen"
    "complete"
    "compopt"
    "continue"
    "declare"
    "dirs"
    "disown"
    "echo"
    "enable"
    "eval"
    "exec"
    "exit"
    "export"
    "false"
    "fc"
    "fg"
    "getopts"
    "hash"
    "help"
    "history"
    "jobs"
    "kill"
    "let"
    "local"
    "logout"
    "popd"
    "printf"
    "pushd"
    "pwd"
    "read"
    "readonly"
    "return"
    "set"
    "shift"
    "shopt"
    "source"
    "suspend"
    "test"
    "times"
    "trap"
    "true"
    "type"
    "typeset"
    "ulimit"
    "umask"
    "unalias"
    "unset"
    "wait"
    #
    "case"
    "coproc"
    "function"
    "for"
    "if"
    "select"
    "time"
    "until"
    "while"
    "{"
    "[["

$is_a_builtin_keyword
  hash_set
    "do"
    "done"
    "elif"
    "else"
    "esac"
    "fi"
    "in"
    "then"
    "}"
    "]]"
    "!"
    #
    "case"
    "coproc"
    "function"
    "for"
    "if"
    "select"
    "time"
    "until"
    "while"
    "{"
    "[["

$shell_commands_of ()

$tedi_types::symbol_info
  .shell_commands_of undefined

$tedi_types::sh_page tedi_types::page
  .screens_of empty_list

$command_plugin std_types::object

$command_plugin/initialize: (_id io)
  log &io "
    retrieving shell commands
  run io retrieve_shell_commands_action split(environment("PATH") ':')

push &plugins command_plugin

!page_constructors("sh") create_sh_page
!page_constructors("#!/bin/bash") create_sh_page
!page_constructors("#!/bin/sh") create_sh_page

$create_sh_page: (io state lines filename)
  $page
    prepare
      tedi_types::sh_page
	.lines_of lines
	.kind_of SH
	.filename_of filename
	.commands_of commands_of(configuration_of(state))
      state
      undefined
  -> io state page

$tedi_types::sh_page/height_of: (page)
  max length_of(lines_of(page)) length_of(screens_of(page))

$tedi_types::sh_page/prepare: (page state line_range)
  if
    line_range.is_undefined:
      prepare_tedi_page page state line_range
    :
      !symbol_info symbol_info_of(state)
      line_range $from $to
      min &to height_of(page)
      $screens screens_of(page)
      $last length_of(screens)
      if
	to <= last
	-> page
	:
	  $new_screens create_screens(page last+1 to)
	  append screens &new_screens
	  -> page(.screens_of new_screens)

$tedi_types::sh_page/repair_screens: (page till from length)
  $lines lines_of(page)
  $entries screens_of(page)
  $n length_of(entries)
  loop !till !length: # search for start of a logical line
    if
      &&
	till > 0
	lines(till).is_defined
	stack_of(second(entries(till))).is_empty
      :
	dec &till
	inc &length
	next
      -> till length
  if
    n <= till
    -> page
    :
      if
	from > n
	-> page(.screens_of range(entries 1 till))
	:
	  $start range(entries 1 till)
	  if
	    length > 0:
	      $new_entries create_screens(page till+1 till+length)
	      $real_length length_of(new_entries)
	      plus &from real_length-length
	      get_sh_state $old_state entries from-1
	      get_sh_state $new_state new_entries -1
	      if
		from <= n && new_state == old_state

		->
		  page
		    .screens_of
		      append(start new_entries range(entries from -1))
		-> page(.screens_of append(start new_entries))
	    :
	      get_sh_state $old_state entries from-1
	      get_sh_state $new_state entries till
	      if
		new_state == old_state
		-> page(.screens_of append(start range(entries from -1)))
		-> page(.screens_of start)

$get_sh_state: (entries idx)
  if
    idx == 0
    -> empty_sh_state
    -> second(entries(idx))

$stack_of ()
$functions_of ()
$functions_string_of ()
$variables_of ()
$variables_string_of ()

$empty_stack list(NORMAL)

$tedi_types::sh_state std_types::object
  .stack_of empty_stack
  .functions_of empty_hash_table
  .functions_string_of ""
  .variables_of empty_hash_table
  .variables_string_of ""

$sh_state: (stack functions functions_string variables variables_string)
  tedi_types::sh_state
    .stack_of stack
    .functions_of functions
    .functions_string_of functions_string
    .variables_of variables
    .variables_string_of variables_string

$empty_sh_state tedi_types::sh_state

$tedi_types::sh_state/equal: (left right)
  $left_stack stack_of(left)
  $right_stack stack_of(right)
  if
    &&
      functions_string_of(left) == functions_string_of(right)
      variables_string_of(left) == variables_string_of(right)
      length_of(left_stack) == length_of(right_stack)
    :
      for_each left_stack
	: (idx item)
	  if
	    item == right_stack(idx)
	    next
	    -> false
	-> true
    -> false

$create_screens: (page first last)
  $lines lines_of(page)
  $template_screen template_screen_of(page)
  $empty_line create_text_screen(template_screen "")
  $created_entries empty_list
  $state get_sh_state(screens_of(page) first-1)
  $n length_of(lines)
  loop:
    if
      first <= last:
	$line lines(first)
	if
	  lines(first).is_defined:
	    create_sh_line $line_entries &state template_screen
	      range(lines first -1) first
	    append &created_entries line_entries
	    plus &first length_of(line_entries)
	    next
	  :
	    push &created_entries tuple(empty_line state)
	    inc &first
	    next
      -> created_entries

$tedi_types::sh_page/: (page^ idx)
  screens_of(page)(idx) $screen
  decorate page idx screen

$RETRIEVE_SHELL_COMMANDS .

$retrieve_shell_commands_action: (io paths)
  $shell_commands empty_hash_set
  for_each paths
    : (path)
      directory! $entries path
      if
	entries.is_an_error
	next
	:
	  for_each entries
	    : (entry)
	      case type_of(entry)
		REGULAR_FILE, SYMBOLIC_LINK:
		  !shell_commands(name_of(entry)) true
		  next!
		next
	    next
    -> io tuple(JOB_COMPLETED RETRIEVE_SHELL_COMMANDS shell_commands)

$RETRIEVE_SHELL_COMMANDS/job_completed: (_self io state shell_commands _context)
  !state.symbol_info_of.shell_commands_of shell_commands
  -> io state

$sh_context_help: (io state x y lines _info)
  $shell_commands shell_commands_of(symbol_info_of(state))
  $identifier get_identifier_at_xy(x y lines)
  if
    identifier.is_defined:
      if
	is_a_builtin_command(identifier):
	  call &io GET_HELP "bash" list("-c" "help @(identifier)") identifier
	  -> io state
	:
	  if
	    shell_commands(identifier):
	      call &io GET_HELP "man" list(identifier) identifier
	      -> io state
	    -> io state
    -> io state

$GET_HELP .

$GET_HELP/job_completed: (_self io state output topic)
  output $out $_err
  from_utf8 &out
  $lines split_into_indented_lines(out false tedi_types::line)
  $page create_page_from_text(lines state topic)
  !page.info_of.do_show_right_margin_of false
  create_window &state.window_manager_of
    CONTENT = page
    TITLE = topic
    USE_CURSOR
  -> io state

$GET_HELP/job_failed: (_self io state _error topic)
  show_error_message &state "
    failed to retrieve help text for "@(topic)"
  -> io state

$get_identifier_at_xy: (x y lines)
  $line lines(y)
  if
    line.is_undefined
    -> undefined
    :
      $text text_of(line)
      $indent indent_of(line)
      if
	x <= indent || x > indent+width_of(text)
	-> undefined
	:
	  $pos get_position(text x-indent)
	  $chr text(pos)
	  if
	    chr.is_a_letter || chr.is_a_digit || chr == '_':
	      $start pos
	      $end pos
	      loop:
		if
		  &&
		    start > 1
		    ||
		      text(start-1).is_a_letter
		      text(start-1).is_a_digit
		      text(start-1) == '_'
		  :
		    dec &start
		    next
		  :
		    loop:
		      if
			&&
			  end < length_of(text)
			  ||
			    text(end+1).is_a_letter
			    text(end+1).is_a_digit
			    text(end+1) == '_'
			:
			  inc &end
			  next
			-> range(text start end)
	    -> undefined

$REMARK .
$SINGLE_QUOTES .
$DOUBLE_QUOTES .
$EXPANSION . # after encountering "${"
$VAR_EXPANSION . # after the variable name
$ENV_EXPANSION . # after the variable name if it is an environment variable
$ERR_EXPANSION . # after an invalid variable name
$SUBSTITUION . # after encountering "$("
$TEST . # after encountering "["
$ARITHMETIC_EXPRESSION . # after encountering "$((
$OLD_SUBSTITUTION . # after encountering "`"
$EXPECT_BODY . # after encountering a function definition
$EXPECT_END_OF_BODY . # after encountering "{"
$EXPECT_DO .
$EXPECT_DONE .
$EXPECT_THEN .
$EXPECT_FI .
$EXPECT_IN .
$EXPECT_ESAC .
$EXPECT_IN_THEN_ESAC .

$attributes_table
  hash_table
    NORMAL = tuple(NORMAL BLACK)
    REMARK = tuple(ITALIC DARK_GREEN)
    #OLD_SUBSTITUTION = tuple(NORMAL BLACK)
    DOUBLE_QUOTES = tuple(ITALIC BLUE)
    SINGLE_QUOTES = tuple(ITALIC DARK_CYAN)
    EXPANSION = tuple(NORMAL RED)
    #VAR_EXPANSION = tuple(NORMAL BLACK)
    #ENV_EXPANSION = tuple(NORMAL BLACK)
    ERR_EXPANSION = tuple(NORMAL RED)

$tedi::create_sh_line: (state template_screen lines line_no)
  $stack stack_of(state)
  $functions functions_of(state)
  $functions_string functions_string_of(state)
  $variables variables_of(state)
  $variables_string variables_string_of(state)
  $shell_commands shell_commands_of(symbol_info)
  create_logical_line $text $line_count stack lines
  $screen create_screen(template_screen width_of(text) 1)
  $x 1
  $s 1
  $n length_of(text)
  $i 1
  $symbol
    case
      stack(-1)
      DOUBLE_QUOTES, SINGLE_QUOTES -> undefined
      -> ""
  $identifier undefined
  $level count(stack: (mode) -> mode == OLD_SUBSTITUTION || mode == SUBSTITUION)
  $quoting_level
    count(stack: (mode) -> mode == DOUBLE_QUOTES || mode == OLD_SUBSTITUTION || mode == SUBSTITUION)
  loop:
    if
      i > n:
	check_for_symbol:
	  draw:
	    handle_unclosed_line !stack
	    split_screen $entries !state
	      screen
	      sh_state
		stack
		functions
		functions_string
		variables
		variables_string
	      line_count lines
	    if
	      line_count == length_of(lines) && length_of(stack) > 1:
		handle_unclosed entries
	      -> entries state
      handle_character

    $handle_character:
      $chr text(i)
      $mode stack(-1)
      cond
	-> chr == '@quot;' && mode == DOUBLE_QUOTES:
	  inc &i
	  check_for_symbol:
	    draw:
	      range &stack 1 -2
	      dec &quoting_level
	      next
	-> chr == '@apos;' && mode == SINGLE_QUOTES:
	  inc &i
	  draw:
	    range &stack 1 -2
	    next
	-> chr == '`':
	  find_first $pos $_item stack: (item) -> item == OLD_SUBSTITUTION
	  if
	    pos.is_defined: # within a backquoted expression
	      case mode
		DOUBLE_QUOTES, SINGLE_QUOTES:
		  draw BOLD|ITALIC RED update_stack
		:
		  check_for_symbol update_stack

	      $update_stack:
		draw:
		  range &stack 1 pos-1 # remove OLD_SUBSTITUTION
		  dec &level
		  !quoting_level
		    count(stack: (m) -> m == DOUBLE_QUOTES || m == OLD_SUBSTITUTION)
		  inc &i
		  draw BOLD BLACK next
	    check_whether_within_string_or_remark
	-> true check_whether_within_string_or_remark

      $check_whether_within_string_or_remark:
	case mode
	  SINGLE_QUOTES, REMARK:
	    inc &i
	    next
	  DOUBLE_QUOTES:
	    if
	      chr == '$'
	      check_character
	      :
		inc &i
		next
	  check_character

      $check_character:
	case chr
	  'a'..'z', 'A'..'Z', '_':
	    if
	      symbol == "": # at start of command
		draw:
		  inc &i
		  skip_identifier !i
		  $name range(text s i-1)
		  if
		    i <= n && text(i) == '=':
		      if
			environment(name).is_defined:
			  draw NORMAL ORANGE handle_assignment
			:
			  !variables(name) line_no
			  append &variables_string "|" name
			  draw NORMAL MAGENTA handle_assignment

		      $handle_assignment:
			!symbol undefined
			inc &i
			draw BOLD BLACK next
		    :
		      if
			followed_by('('):
			  skip !i '('
			  if
			    followed_by(')'):
			      skip !i ')'
			      !functions(name) line_no
			      !symbol undefined
			      append &functions_string "|" name
			      push &stack EXPECT_BODY
			      draw BOLD BLACK next
			    :
			      draw BOLD RED next
			:
			  handle_identifier name next
	      :
		inc &i
		if
		  &&
		    i <= n && chr == 'i' && text(i) == 'n'
		    i == n || text(i+1) == ' '
		  :
		    $name "in"
		    case mode
		      EXPECT_IN:
			range &stack 1 -2
			push &stack EXPECT_DO
			draw_identifier
		      EXPECT_IN_THEN_ESAC:
			range &stack 1 -2
			push &stack EXPECT_ESAC
			draw_identifier
		      :
			if
			  stack .contains. EXPECT_IN:
			    unwind_stack !stack EXPECT_IN
			    push &stack EXPECT_DO
			    draw_error
			  draw_error

		    $draw_identifier:
		      $curr_i i
		      minus &i length_of(name)
		      draw:
			!identifier undefined
			!i curr_i
			draw BOLD DIMGREY next

		    $draw_error:
		      !identifier undefined
		      draw BOLD RED next
		  :
		    if
		      symbol.is_defined:
			push &symbol chr
			next
		      next
	  ' ':
	    if
	      symbol == "":
		inc &i
		next
	      :
		if
		  symbol.is_defined && mode == EXPANSION:
		    draw BOLD|ITALIC RED:
		      !symbol undefined
		      inc &i
		      next
		  :
		    if
		      &&
			symbol.is_defined
			followed_by('(')
		      :
			skip !i '('
			handle_function_definition
		      :
			$orig_i i
			check_for_symbol:
			  if
			    i > orig_i # maybe it was keyword
			    next
			    :
			      inc &i
			      next
	  '#':
	    case mode
	      VAR_EXPANSION, ENV_EXPANSION:
		inc &i
		next
	      :
		draw:
		  update_if symbol == "" &symbol -> undefined
		  push &stack REMARK
		  inc &i
		  next
	  '@quot;':
	    case mode
	      "()":
		inc &i
		draw BOLD RED next
	      :
		draw:
		  inc &i
		  push &stack DOUBLE_QUOTES
		  inc &quoting_level
		  next
	  '@apos;':
	    case mode
	      "()":
		inc &i
		draw BOLD RED next
	      :
		draw:
		  inc &i
		  push &stack SINGLE_QUOTES
		  next
	  '`':
	    draw:
	      inc &i
	      draw BOLD BLACK:
		push &stack OLD_SUBSTITUTION
		inc &level
		inc &quoting_level
		!symbol ""
		next
	  '$':
	    if
	      i < n:
		case text(i+1)
		  '{':
		    draw:
		      if
			i+2 <= n:
			  case text(i+2)
			    'a'..'z', 'A'..'Z', '_':
			      !symbol undefined
			      plus &i 2
			      skip_identifier !i
			      $name range(text s i-1)
			      if
				environment(name).is_defined:
				  draw NORMAL ORANGE:
				    push &stack ENV_EXPANSION
				    next
				:
				  draw NORMAL MAGENTA:
				    push &stack VAR_EXPANSION
				    next
			    :
			      !symbol undefined
			      plus &i 2
			      draw BOLD RED next
			:
			  !symbol undefined
			  plus &i 2
			  draw BOLD RED next
		  '0'..'9', '*', '@@', '#', '?', '-', '$', '!':
		    draw:
		      plus &i 2
		      draw ITALIC MAGENTA next
		  'a'..'z', 'A'..'Z', '_':
		    draw:
		      inc &i
		      skip_identifier !i
		      $name range(text s+1 i-1)
		      cond
			-> environment(name).is_defined:
			  draw ITALIC ORANGE next
			-> variables(name).is_defined:
			  draw ITALIC MAGENTA next
			-> name == "REPLY":
			  draw ITALIC DARKSALMON next
			-> true:
			  draw BOLD|ITALIC RED next
		  '(':
		    !symbol undefined
		    draw:
		      if
			i+2 <= n && text(i+2) == '(':
			  plus &i 3
			  draw BOLD BLACK:
			    push &stack ARITHMETIC_EXPRESSION
			    next
			:
			  plus &i 2
			  draw BOLD BLACK:
			    push &stack SUBSTITUION
			    inc &level
			    !symbol ""
			    next
		  :
		    draw:
		      !symbol ""
		      inc &i
		      next
	      :
		inc &i
		next
	  '(':
	    if
	      symbol.is_defined:
		inc &i
		handle_function_definition
	      :
		inc &i
		next
	  ')':
	    case mode
	      SUBSTITUION:
		draw:
		  range &stack 1 -2
		  dec &level
		  inc &i
		  draw BOLD BLACK next
	      :
		check_for_symbol:
		  if
		    &&
		      i+1 <= n
		      text(i+1) == ')'
		      mode == ARITHMETIC_EXPRESSION
		    :
		      draw:
			range &stack 1 -2
			plus &i 2
			draw BOLD BLACK next
		    :
		      inc &i
		      next
	  '[':
	    if
	      &&
		i == 1 || text(i-1) == ' '
		i == n || text(i+1) == ' '
	      :
		draw:
		  push &stack TEST
		  inc &i
		  draw BOLD BLACK next
	      :
		inc &i
		next
	  ']':
	    if
	      &&
		i > 1 && text(i-1) == ' '
		i == n || text(i+1) == ' ' || text(i+1) == ';'
	      :
		if
		  mode == TEST:
		    range &stack 1 -2
		    draw:
		      inc &i
		      draw BOLD BLACK next
		  :
		    if
		      stack .contains. TEST:
			unwind_stack !stack TEST
			draw BOLD RED:
			  inc &i
			  draw BOLD BLACK next
		      :
			draw:
			  inc &i
			  draw BOLD RED next
	      :
		inc &i
		next
	  '{':
	    case mode
	      EXPECT_BODY:
		draw:
		  range &stack 1 -2
		  push &stack EXPECT_END_OF_BODY
		  inc &i
		  draw BOLD BLACK next
	      :
		inc &i
		next
	  '}':
	    case mode
	      EXPECT_END_OF_BODY:
		draw:
		  range &stack 1 -2
		  inc &i
		  draw BOLD BLACK next
	      EXPANSION:
		inc &i
		if
		  &&
		    symbol.is_defined
		    length_of(symbol) == 1
		    symbol(1).is_a_special_variable
		  :
		    draw ITALIC MAGENTA:
		      !symbol undefined
		      next
		  :
		    check_for_symbol:
		      draw:
			range &stack 1 -2
			next
	      VAR_EXPANSION:
		draw:
		  range &stack 1 -2
		  inc &i
		  draw ITALIC MAGENTA next
	      ENV_EXPANSION:
		draw:
		  range &stack 1 -2
		  inc &i
		  draw ITALIC ORANGE next
	      ERR_EXPANSION:
		range &stack 1 -2
		inc &i
		draw BOLD|ITALIC RED next
	      :
		draw:
		  inc &i
		  draw BOLD RED next
	  '&', '|', ';':
	    check_for_symbol:
	      draw:
		inc &i
		draw BOLD TURQUOISE:
		  !symbol ""
		  next
	  '\':
	    if
	      i == n || (mode == OLD_SUBSTITUTION && text(i+1) == '`'):
		draw:
		  inc &i
		  draw BOLD RED next
	      :
		if
		  symbol.is_defined:
		    if
		      i > 1 && text(i-1) == '\':
			push &symbol chr
			inc &i
			next
		      :
			inc &i
			next
		  :
		    draw:
		      inc &i
		      draw BOLD TURQUOISE:
			inc &i
			next
	  :
	    if
	      &&
		symbol.is_defined
		chr.is_an_expansion_character
		mode == EXPANSION
	      :
		check_for_symbol:
		  inc &i
		  next
	      :
		update_if symbol.is_defined &symbol: push symbol chr
		inc &i
		next

    $handle_function_definition:
      skip_whitespace !i
      if
	i <= n && text(i) == ')':
	  push &stack "()"
	  !functions(symbol) line_no
	  append &functions_string "|" symbol
	  !symbol undefined
	  inc &i
	  draw BOLD BLACK next
	:
	  draw BOLD RED:
	    !symbol undefined
	    next

    $handle_unclosed_line:
      from_to_by length_of(stack) 2 -1
	: (idx)
	  case stack(idx)
	    REMARK, TEST:
	      !stack append(range(stack 1 idx-1) range(stack idx+1 -1))
	      next
	    next
	-> stack

    $handle_unclosed: (entries)
      $error_message "missing"
      from_to_by length_of(stack) 2 -1
	: (idx)
	  append &error_message
	    case
	      stack(idx)
	      SINGLE_QUOTES -> " @apos;"
	      DOUBLE_QUOTES -> " @quot;"
	      SUBSTITUION -> " )"
	      OLD_SUBSTITUTION -> " `"
	      EXPECT_BODY -> " {"
	      EXPECT_END_OF_BODY -> " }"
	      EXPECT_THEN -> " 'then'"
	      EXPECT_FI -> " 'fi'"
	      EXPECT_DONE -> " 'done'"
	      EXPECT_DO -> " do"
	      EXPECT_IN -> " 'in'"
	      EXPECT_IN_THEN_ESAC -> " 'in'"
	      EXPECT_ESAC -> " 'esac'"
	      :
		debug::dump `stack(-1)
		-> " ?"
	  next
	:
	  push &entries tuple(template_screen state)
	  set_clear_colour &template_screen RED
	  set_draw_colour &template_screen WHITE
	  $error_screen create_text_screen(template_screen error_message)
	  push &entries tuple(error_screen state)
	  -> entries state

  $followed_by: (chr)
    loop:
      if
	i > n
	-> false
	:
	  case text(i)
	    chr -> true
	    ' ':
	      inc &i
	      next
	    -> false

  $skip: (chr)
    loop:
      if
	i > n
	-> i
	:
	  if
	    text(i) == chr
	    -> i+1
	    :
	      inc &i
	      next

  $skip_whitespace:
    loop:
      if
	i <= n && text(i) == ' ':
	  inc &i
	  next
	-> i

  $skip_identifier:
    loop:
      if
	i > n
	-> i
	:
	  case text(i)
	    'a'..'z', 'A'..'Z', '_', '0'..'9':
	      inc &i
	      next
	    -> i

  $handle_identifier: (name continuation)
    $mode stack(-1)
    case name
      "if":
	push &stack EXPECT_THEN
	draw_identifier
      "then":
	if
	  mode == EXPECT_THEN:
	    range &stack 1 -2
	    push &stack EXPECT_FI
	    draw_identifier
	  :
	    if
	      stack .contains. EXPECT_THEN:
		unwind_stack !stack EXPECT_THEN
		push &stack EXPECT_FI
		draw_error
	      draw_error
      "else":
	if
	  mode == EXPECT_FI
	  draw_identifier
	  :
	    if
	      stack .contains. EXPECT_FI:
		unwind_stack !stack EXPECT_FI
		push &stack EXPECT_FI
		draw_error
	      draw_error
      "elif":
	if
	  mode == EXPECT_FI:
	    range &stack 1 -2
	    push &stack EXPECT_THEN
	    draw_identifier
	  :
	    if
	      stack .contains. EXPECT_FI:
		unwind_stack !stack EXPECT_FI
		push &stack EXPECT_THEN
		draw_error
	      draw_error
      "fi":
	if
	  mode == EXPECT_FI:
	    range &stack 1 -2
	    draw_identifier
	  :
	    if
	      stack .contains. EXPECT_FI:
		unwind_stack !stack EXPECT_FI
		draw_error
	      draw_error
      "do":
	if
	  mode == EXPECT_DO:
	    range &stack 1 -2
	    push &stack EXPECT_DONE
	    draw_identifier
	  :
	    if
	      stack .contains. EXPECT_DO:
		unwind_stack !stack EXPECT_DO
		push &stack EXPECT_DONE
		draw_error
	      draw_error
      "done":
	if
	  mode == EXPECT_DONE:
	    range &stack 1 -2
	    draw_identifier
	  :
	    if
	      stack .contains. EXPECT_DONE:
		unwind_stack !stack EXPECT_DONE
		draw_error
	      draw_error
      "for":
	push &stack EXPECT_IN
	draw_identifier:
	  skip_whitespace !i
	  if
	    i > n
	    continuation
	    :
	      case text(i)
		'a'..'z', 'A'..'Z', '_':
		  draw:
		    !s i
		    skip_identifier !i
		    $var range(text s i-1)
		    if
		      environment(var).is_defined:
			draw NORMAL ORANGE continuation
		      :
			!variables(var) line_no
			append &variables_string "|" var
			draw NORMAL MAGENTA:
			  continuation
		continuation
      "select":
	push &stack EXPECT_IN
	draw_identifier:
	  skip_whitespace !i
	  if
	    i > n
	    continuation
	    :
	      case text(i)
		'a'..'z', 'A'..'Z', '_':
		  draw:
		    !s i
		    skip_identifier !i
		    $var range(text s i-1)
		    if
		      environment(var).is_defined:
			draw NORMAL ORANGE continuation
		      :
			!variables(var) line_no
			append &variables_string "|" var
			draw NORMAL MAGENTA:
			  continuation
		continuation
      "case":
	push &stack EXPECT_IN_THEN_ESAC
	draw_identifier
      "esac":
	if
	  mode == EXPECT_ESAC:
	    range &stack 1 -2
	    draw_identifier
	  :
	    if
	      stack .contains. EXPECT_ESAC:
		unwind_stack !stack EXPECT_ESAC
		draw_error
	      draw_error
      "while":
	push &stack EXPECT_DO
	draw_identifier
      "until":
	push &stack EXPECT_DO
	draw_identifier
      "read":
	draw_identifier:
	  skip_whitespace !i
	  if
	    i > n
	    continuation
	    :
	      case text(i)
		'a'..'z', 'A'..'Z', '_':
		  draw:
		    !s i
		    skip_identifier !i
		    $var range(text s i-1)
		    if
		      environment(var).is_defined:
			draw NORMAL ORANGE continuation
		      :
			!variables(var) line_no
			append &variables_string "|" var
			draw NORMAL MAGENTA:
			  continuation
		continuation
      :
	!symbol name
	continuation

    $draw_identifier: (cont = continuation)
      $curr_i i
      minus &i length_of(name)
      draw:
	!identifier undefined
	!symbol undefined
	!i curr_i
	draw BOLD DIMGREY cont

    $draw_error:
      !identifier undefined
      !symbol undefined
      draw BOLD RED continuation

  #
      :
	case identifier
	  "then":
	    unwind_stack !stack EXPECT_THEN
	    dropped_compound
	  :
	    !identifier undefined
	    continuation

	$dropped_compound:
	  debug::println "
	    dropped compound "@(identifier)"
	  !identifier undefined
	  draw BOLD RED continuation

  $unwind_stack: (mode)
    $idx length_of(stack)
    loop:
      if
	idx == 0
	-> stack
	:
	  if
	    stack(idx) == mode
	    -> range(stack 1 idx-1)
	    :
	      dec &idx
	      next

  $check_for_symbol: (continuation)
    if
      symbol.is_defined && symbol != "":
	if $text_attributes $draw_colour
	  functions(symbol).is_defined
	  -> BOLD BLACK
	  :
	    if
	      is_a_builtin_command(symbol)
	      -> BOLD BLUEVIOLET
	      :
		if
		  shell_commands(symbol)
		  -> BOLD OLIVE
		  -> BOLD RED
	draw_symbol

	$draw_symbol:
	  !symbol undefined
	  draw text_attributes draw_colour continuation

	$draw_error:
	  !symbol undefined
	  draw BOLD RED continuation

      continuation

  $draw:
    (
      text_attributes = undefined
      draw_colour = undefined
      continuation
    )
    if
      i > s:
	update_if text_attributes.is_undefined &text_attributes &draw_colour:
	  $attributes attributes_table(stack(-1))
	  $idx -1
	  loop
	    :
	      if
		attributes.is_undefined:
		  dec &idx
		  !attributes attributes_table(stack(idx))
		  next
		break
	    :
	      attributes # we need to revaluate it!
	update_if (level & 1) == 1 &draw_colour
	  -> colour_mixture(draw_colour WHITE)
	set_draw_colour &screen draw_colour
	set_text_attributes &screen text_attributes
	$part range(text s i-1)
	draw_text &screen x 1 part
	plus &x width_of(part)
	!s i
	continuation
      continuation

  $get_identifier: (continuation)
    skip_whitespace !i
    !symbol ""
    loop
      :
	if
	  i > n
	  break
	  :
	    $chr text(i)
	    case chr
	      'a'..'z', 'A'..'Z', '_':
		push &symbol chr
		inc &i
		next
	      '0'..'9':
		if
		  symbol.is_empty
		  break
		  :
		    push &symbol chr
		    inc &i
		    next
	      break
      continuation

$create_logical_line: (stack lines)
  $idx 1
  $line lines(idx)
  $indent indent_of(line)
  $text text_of(line)
  append spaces(indent) &text
  $n length_of(text)
  $i 0
  loop:
    inc &i
    if
      i > n
      -> text idx
      :
	$chr text(i)
	$mode stack(-1)
	case chr
	  '#':
	    case mode
	      DOUBLE_QUOTES, SINGLE_QUOTES next
	      :
		push &stack REMARK
		next
	  '@quot;':
	    case mode
	      DOUBLE_QUOTES:
		range &stack 1 -2
		next
	      SINGLE_QUOTES, REMARK next
	      :
		push &stack DOUBLE_QUOTES
		next
	  '@apos;':
	    case mode
	      SINGLE_QUOTES:
		range &stack 1 -2
		next
	      DOUBLE_QUOTES, REMARK:
		next
	      :
		push &stack SINGLE_QUOTES
		next
	  '`':
	    case mode
	      OLD_SUBSTITUTION:
		range &stack 1 -2
		next
	      :
		push &stack OLD_SUBSTITUTION
		next
	  '\':
	    if
	      i == n:
		case mode
		  SINGLE_QUOTES, REMARK
		  -> text idx
		  :
		    range &text 1 -2
		    inc &idx
		    if
		      idx > length_of(lines)
		      -> text idx
		      :
			$next_line lines(idx)
			if
			  next_line.is_undefined
			  -> text idx
			  :
			    $next_line_indent indent_of(next_line)
			    $next_line_text text_of(next_line)
			    append &text spaces(next_line_indent) next_line_text
			    !n length_of(text)
			    next
	      :
		inc &i # skip escaped character
		next
	  next




$split_screen: (screen state line_count lines)
  $entries empty_list
  $x 1
  $idx 1
  loop:
    $line lines(idx)
    $indent indent_of(line)
    $text text_of(line)
    $line_width indent+width_of(text)
    if
      idx < line_count:
	$part range(screen x 1 x+line_width-2 1)
	set_text_attributes &part BOLD
	set_draw_colour &part TURQUOISE
	adjoin &part create_text_screen(part "\")
	push &entries tuple(part empty_sh_state)
	plus &x line_width-1 # the '\' is not part of the screen
	inc &idx
	next
      ->
	push(entries tuple(range(screen x 1 width_of(screen) 1) state))
	state

$is_a_special_variable hash_set('*' '@@' '#' '?' '-' '$' '!')

$is_an_expansion_character hash_set(':' '-' '#' '/' '^' ',' '@@')
