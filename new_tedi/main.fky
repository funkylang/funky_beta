#
  Copyright (C) 2025 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

<namespace tedi>
<namespace tedi_types>

<require basic/stdlib>
<require basic/uuid>
<require basic/export/json>
<require basic/import/json>
<require terminal/terminal>
<require terminal/widgets>
<require terminal/window_manager>

<require ai/llama>
<require web/server>

<require ./editor>
<require ./c>
<require ./sh>
<require ./html_page>

<using std>
<using ai>
<using tedi>

$tedi::application_name "TEDI"
$tedi::version "0.13.4"
$tedi::author "Michael Niederle"

$tedi::tty_filename undefined

$tedi::main:
  $io std_types::io
  program_parameters!
    $config_path
    list
      VALUED_OPTION "config-path" "
	the path where to look for "tedi.cfg"
    $log_filename
    list
      VALUED_OPTION "log-file" "
	the name of the log file
    !tedi::tty_filename
    list
      VALUED_OPTION "tty" "
	a terminal device
    $text_filenames
    list
      SOME_PARAMETERS "filename" "
	the name(s) of the text file(s) to edit

  !default_configuration.commands_of(CURSOR_UP) "cursor_up"
  !default_configuration.commands_of(CURSOR_DOWN) "cursor_down"
  !default_configuration.commands_of(CURSOR_LEFT) "cursor_left"
  !default_configuration.commands_of(CURSOR_RIGHT) "cursor_right"
  !default_configuration.commands_of(HELP) "show_help"
  !default_configuration.commands_of(SAVE) "save_contents"

  tedi_types::state $state
    .files_to_load_of text_filenames

  # Initialize Logging

  on log_filename.is_defined:
    open! $log_fd log_filename "w+"
    dup2! log_fd STDERR_FILENO
    close! log_fd

  fstat! $stdout_info STDOUT_FILENO
  fstat! $stderr_info STDERR_FILENO
  $do_log
    ||
      inode_number_of(stderr_info) != inode_number_of(stdout_info)
      device_of(stderr_info) != device_of(stdout_info)
  $log_level if(do_log (-> 4) (-> 0))

  enable_logging &io log_level
  log &io -> "started logging (log-level: @(log_level))"

  generate_uuid &io UUID RANDOM_BASED_UUID

  $configuration_filename
    if
      config_path.is_defined
      -> append(config_path "/tedi")
      -> append(environment("HOME") "/.config/tedi/tedi")

  !default_configuration.commands_of(ACTIVATE_SOFT_BREAKS)
    tuple(toggle_soft_line_break UPDATE_STATE)
  !default_configuration.commands_of(DEACTIVATE_SOFT_BREAKS)
    tuple(toggle_soft_line_break UPDATE_STATE)

  !default_configuration.commands_of(RIGHT_MARGIN)
    tuple(toggle_right_margin_display OTHER)
  !default_configuration.commands_of(CURSOR_LINE)
    tuple(toggle_cursor_line_highlighting OTHER)
  !default_configuration.commands_of(SOFT_LINE_BREAKS)
    tuple(toggle_soft_line_break UPDATE_STATE)
  !default_configuration.commands_of(LINE_NUMBERS)
    tuple(toggle_line_numbers OTHER)

  load_configuration &io LOAD_CONFIGURATION
    default_configuration configuration_filename
    "ai-model" = ai_model_name_of
    "ai-batch-size" = ai_batch_size_of
    "ai-context-size" = ai_context_size_of
    "ai-model-path" = ai_model_path_of
    "ai-server-address" = ai_server_address_of
    "ai-server-port" = ai_server_port_no_of
    "ai-server-name" = ai_server_name_of
    "ai-log-file" = ai_server_log_file_of
    "start-ai-server" = do_start_ai_server_of
    name_to_key = commands_of

  initialize_plugins &io

  initialize_terminal &io TERMINAL
    RECEIVE_CTRL_C_AND_CTRL_Z
    RECEIVE_CTRL_Q_AND_CTRL_S
    MAP_CR
    MOUSE_REPORTING = CLICKS

  # Main Loop

  loop:
    get_events! &io $events
    do:
      handle_everything $new_io !state
      cond
	-> new_io.is_an_error:
	  shutdown! new_io
	-> state.is_an_error:
	  shutdown! state
	-> true:
	  !io new_io
	  next!

    $shutdown: (err)
      debug::dump_object 50 err
      log &io "crashed: @(err.to_error_message_string) - exiting"
      exit &io EXIT_FAILURE
      loop:
	get_events! &io $_events
	next!

    $handle_everything:
      handle_events &io &events # preprocess events
      if
	window_manager_of(state).is_defined:
	  set_time &state.window_manager_of current_time_of(io)
	  for_each events
	    : (event)
	      handle_event &state.window_manager_of &event STDIN_FILENO
	      if
		event.is_defined:
		  handle_tedi_event $updated_io $updated_state event
		  if
		    updated_io.is_defined:
		      !io updated_io
		      !state updated_state
		      next
		    :
		      handle_window_event &state.window_manager_of &event
			STDIN_FILENO
		      if
			event.is_defined:
			  log_unhandled_event &io event
			  next
			next
		next
	    update_terminal
	:
	  for_each events
	    : (event)
	      handle_tedi_event $updated_io $updated_state event
	      if
		updated_io.is_defined:
		  !io updated_io
		  !state updated_state
		  next
		:
		  log_unhandled_event &io event
		  next
	    update_terminal

    $handle_tedi_event: (event)
      event $type $id $data $context
      case type
	JOB_COMPLETED:
	  job_completed id io state data context
	JOB_FAILED:
	  job_failed id io state data context
	KEY_PRESS, PASTE_STRING, MOUSE_CLICK:
	  $window_manager window_manager_of(state)
	  if
	    id == STDIN_FILENO && window_manager.is_defined:
	      case type
		KEY_PRESS:
		  $key data
		  case key
		    CTRL_Q, QUIT:
		      $changed_files ""
		      for_each window_manager
			: (window_id page)
			  if
			    page.is_a_text_page:
			      $info info_of(page)
			      if
				version_of(info) != saved_version_of(info):
				  $name get_title(window_manager window_id)
				  without_prefix &name '*'
				  append &changed_files name "@nl;"
				  next
				next
			    next
			:
			  if
			    changed_files.is_empty:
			      log &io "exiting"
			      exit &io EXIT_SUCCESS
			      -> io state
			    :
			      initialize_rendering template_screen_of(state):
				yes_no_dialog &window_manager QUIT "
				  The following files have unsaved changes:

				  @(changed_files)
				  Do you really want to quit without saving?
				!state.window_manager_of window_manager
				-> io state
		    CTRL_D:
		      move_window_down &window_manager
		      !state.window_manager_of window_manager
		      -> io state
		    CTRL_U:
		      move_window_up &window_manager
		      !state.window_manager_of window_manager
		      -> io state
		    CTRL_W, CLOSE:
		      close &window_manager context # window_id
		      !state.window_manager_of window_manager
		      -> io state
		    ABOUT:
		      initialize_rendering template_screen_of(state):
			create_dialog &window_manager undefined
			  vertical_group
			    CENTER
			    text_box(application_name)
			    table_group
			      list
				text_box("Version:")
				text_box(version)
			      list
				text_box("Author:")
				text_box(author)
			    push_button
			      "Ok" = OKAY
			!state.window_manager_of window_manager
			-> io state
		    YES:
		      case context
			QUIT:
			  log &io "exiting"
			  exit &io EXIT_SUCCESS
			  -> io state
			-> io state
		    :
		      $page get_content(window_manager)
		      if
			page.is_defined:
			  handle_key_press page io state key
			-> io state
		PASTE_STRING:
		  $page get_content(window_manager)
		  if
		    page.is_defined:
		      handle_paste_string page io state data
		    -> io state
		MOUSE_CLICK:
		  data $mouse_x $mouse_y $button
		  get_window_at window_manager
		    $window_id $page &mouse_x &mouse_y
		  if
		    window_id.is_defined:
		      handle_mouse_click page io state mouse_x mouse_y button
		    -> undefined undefined
	    -> undefined undefined
	FOCUS_CHANGED:
	  handle_changed_focus get_content(window_manager_of(state)) &state
	  -> io state
	-> undefined undefined

    $update_terminal:
      !global_info global_info_of(state)
      if
	window_manager_of(state).needs_updating:
	  set_status_line &state
	  prepare_update &state.window_manager_of &state.terminal_of
	    $update_ranges
	  map $updates update_ranges: (update_range)
	    update_range $range $id $content
	    tuple id prepare(content state range)
	  for_each updates
	    : (update)
	      update $id $content
	      set_content &state.window_manager_of id content
	      next
	    :
	      update &state.window_manager_of &state.terminal_of
	      update &state.terminal_of $output
	      if
		output.is_empty
		-> io state
		:
		  print_to &io STDOUT_FILENO output
		  -> io state
	-> io state

$tedi::plugins empty_list

$initialize_plugins: (io)
  for_each plugins
    : (plugin)
      initialize plugin &io
      next
    -> io

$tedi::uuid_of ()
$config_path_of ()
$tedi::configuration_of ()
$terminal_of ()
$tedi::template_screen_of ()
$tedi::window_manager_of ()
$tedi::files_to_load_of () # a list of filenames
$tedi::files_to_save_of () # a list of window ids
$tedi::text_window_id_of ()
$tedi::clipboard_contents_of ()
$tedi::global_info_of ()
$tedi::symbol_info_of ()

$tedi::handle_key_press ()
$tedi::handle_paste_string ()
$tedi::handle_mouse_click ()
$tedi::handle_changed_focus ()
$tedi::prepare ()
$tedi::replace ()

$tedi_types::basic_state std_types::object
  # all base methods are defined here; this allows "overwriting" of methods

$tedi_types::state tedi_types::basic_state
  .uuid_of undefined
  .config_path_of undefined
  .configuration_of undefined
  .terminal_of undefined
  .template_screen_of undefined
  .window_manager_of undefined
  .files_to_load_of empty_list
  .files_to_save_of empty_list
  .text_window_id_of undefined # the target window of the current command box
  .clipboard_contents_of undefined
  .global_info_of tedi_types::global_info
  .symbol_info_of tedi_types::symbol_info


$tedi_types::global_info std_types::object

$tedi::global_info undefined # read-only global information

$tedi_types::symbol_info std_types::object

$tedi::symbol_info undefined # read-only symbol information

# Job Methods

$tedi::job_completed ()
$tedi::job_failed ()

$std_types::object/job_completed: (id _io _state data context)
  debug::dump `id
  debug::dump 3 `data
  debug::dump `context
  debug::exit

$std_types::object/job_failed: (id io state err _context)
  debug::dump `id
  debug::dump 99 `err
  log &io "exiting"
  exit &io EXIT_SUCCESS
  -> io state

$UUID/job_completed: (_id io state uuid _context)
  !state.uuid_of uuid
  log &io -> "got uuid: @(uuid)"
  -> io state

$tedi::main_menu
  list
    "File" =
      list
	"Load" = LOAD
	"Save" = SAVE
	"Save as" = SAVE_AS
	"Quit application" = QUIT
    "View" =
      list
	"Right margin" = RIGHT_MARGIN
	"Cursor line" = CURSOR_LINE
	"Soft line breaks" = SOFT_LINE_BREAKS
	"Line numbers" = LINE_NUMBERS
	"Plain text (F3)" = PLAIN_TEXT

    "Help" =
      list
	"About" = ABOUT
	"Help" = HELP

$RIGHT_MARGIN .
$CURSOR_LINE .
$SOFT_LINE_BREAKS .
$LINE_NUMBERS .
$PLAIN_TEXT .

$TERMINAL/job_completed: (_id io state terminal _context)
  log &io 4 -> "initialized terminal"
  register_resource &io TERMINAL terminal
  start_reading_from &io STDIN_FILENO
  register_handlers &io STDIN_FILENO READ = create_terminal_events
  start_injecting_window_change_events &io
  $window_manager create_window_manager(terminal)
  set_menu &window_manager main_menu
  ->
    io
    state
      .terminal_of terminal
      .template_screen_of create_screen(terminal 0 0)
      .window_manager_of window_manager

$LOAD_CONFIGURATION .

$LOAD_CONFIGURATION/job_completed: (_id io state data _context)
  data $configuration $_errors
  !state.configuration_of configuration
  log &io 4 -> "successfully loaded configuration"
  if
    files_to_load_of(state).is_empty
    -> io state
    :
      load_files io state

$tedi::load_files: (io state)
  $files_to_load files_to_load_of(state)
  if
    files_to_load.is_empty
    -> io state
    :
      $info files_to_load(1)
      range &state.files_to_load_of 2 -1
      $filename
	if
	  info.is_a_tuple
	  -> first(info)
	  -> info
      log &io 4 -> "
	load file "@(filename)"
      load &io LOAD_FILE filename undefined info
      -> io state

$LOAD_FILE .

$LOAD_FILE/job_completed: (_self io state text info)
  $filename
    if
      info.is_a_tuple
      -> first(info)
      -> info
  log &io 4 -> "
    loaded file "@(filename)" with @(length_of(text)) bytes
  create_or_update_page io state text.from_utf8 info

$LOAD_FILE/job_failed: (_self io state err info)
  $filename
    if
      info.is_a_tuple
      -> first(info)
      -> info
  log &io 2 -> "
    failed to load file "@(filename)": @(err.to_error_message_string)
  show_error_message &state "
    could not load file "@(filename)"
  create_or_update_page io state "" info

$tedi::create_or_update_page: (io state text info)
  if $filename $do_focus $line_no $column_no
    info.is_a_tuple
    info
    -> info false undefined undefined
  $new_page create_page_from_text(text state filename)
  for_each window_manager_of(state)
    : (id page)
      if
	&&
	  page.is_a_text_page
	  filename_of(page) == filename
	:
	  set_content &state.window_manager_of id new_page
	  if
	    do_focus:
	      focus_window &state.window_manager_of id
	      update_cursor
	    update_cursor

	  $update_cursor:
	    if
	      line_no.is_defined:
		set_content &state.window_manager_of id page
		goto_xy &page &state.window_manager_of id line_no column_no
		-> io state
	      -> io state
	next
    create_new_window

  $create_new_window:
    $is_first_window get_id(window_manager_of(state)).is_undefined
    $buttons
      case
	kind_of(new_page)
	TEDI -> list(ACTIVATE_SOFT_BREAKS)
	-> empty_list
    create_window &state.window_manager_of $window_id
      TITLE = filename
      CONTENT = new_page
      USE_CURSOR
      SIZE = MINIMIZED
      BUTTONS = buttons
      DO_NOT_FOCUS = not(do_focus)
    if
      line_no.is_defined:
	goto_xy &new_page &state.window_manager_of window_id line_no column_no
	set_content &state.window_manager_of window_id new_page
	check_status_line
      check_status_line

    $check_status_line:
      if
	is_first_window:
	  set_status_line &state
	  load_more_files
	load_more_files

      $load_more_files:
	if
	  files_to_load_of(state).is_empty
	  -> io state
	  :
	    load_files io state

$tedi::save_files: (io state continuation = undefined)
  # only called if there is at least one file to save
  $files_to_save files_to_save_of(state)
  $window_id files_to_save(1)
  range &state.files_to_save_of 2 -1
  $page get_content(window_manager_of(state) window_id)
  $filename filename_of(page)
  $text lines_to_text(range(lines_of(page) 1 -1))
  log &io 4 -> "
    save file "@(filename)"
  save &io SAVE_FILE filename text tuple(window_id continuation)
  -> io state

$SAVE_FILE .

$SAVE_FILE/job_completed: (_self io state _dummy context)
  context $window_id $continuation
  $page get_content(window_manager_of(state) window_id)
  !page.info_of.saved_version_of version_of(info_of(page))
  set_content &state.window_manager_of window_id page
  $filename filename_of(page)
  set_title &state.window_manager_of filename
  log &io 4 -> "
    saved file "@(filename)"
  if
    files_to_save_of(state).is_empty:
      continuation io state
    :
      save_files io state continuation

$SAVE_FILE/job_failed: (_self io state err context)
  context $window_id $_continuation
  $page get_content(window_manager_of(state) window_id)
  $filename filename_of(page)
  log &io 2 -> "
    failed to save file "@(filename)": @(err.to_error_message_string)
  show_error_message &state "
    could not save file "@(filename)"
  if
    files_to_save_of(state).is_empty
    -> io state
    :
      save_files io state undefined # cancel continuation

$tedi::show_status_message:
  (
    state
    msg_id = undefined
    message
  )
  show_message &state.window_manager_of msg_id
    create_text_screen
      create_screen
	template_screen_of(state) 0 0
	DRAW_COLOUR = WHITE
	CLEAR_COLOUR = DARK_GREY
      message
  -> state

$tedi::show_progress_message:
  (
    state
    msg_id = undefined
    current
    total
    message
  )
  $width width_of(window_manager_of(state))
  !current (current*width/total).to_integer
  pad_right &message width
  create_screen $screen
    template_screen_of(state) width 1
    DRAW_COLOUR = WHITE
    CLEAR_COLOUR = DARK_GREY
  set_clear_colour &screen DARK_GREEN
  draw_text &screen 1 1 range(message 1 current)
  set_clear_colour &screen DARK_GREY
  draw_text &screen current+1 1 range(message current+1 -1)
  show_message &state.window_manager_of msg_id screen
  -> state

$tedi::show_error_message:
  (
    state
    msg_id = undefined
    message
  )
  show_message &state.window_manager_of msg_id
    create_text_screen
      create_screen
	template_screen_of(state) 0 0
	DRAW_COLOUR = WHITE
	CLEAR_COLOUR = RED
      message
  -> state

$tedi::show_warning_message:
  (
    state
    msg_id = undefined
    message
  )
  show_message &state.window_manager_of msg_id
    create_text_screen
      create_screen
	template_screen_of(state) 0 0
	DRAW_COLOUR = BLACK
	CLEAR_COLOUR = YELLOW
      message
  -> state

$tedi::show_success_message:
  (
    state
    msg_id = undefined
    message
  )
  show_message &state.window_manager_of msg_id
    create_text_screen
      create_screen
	template_screen_of(state) 0 0
	DRAW_COLOUR = WHITE
	CLEAR_COLOUR = DARK_GREEN
      message
  -> state

$tedi::LOAD .
$tedi::SAVE .
$tedi::SAVE_AS .
$tedi::QUIT .
$tedi::ABOUT .
$tedi::HELP .

$tedi::ai_model_name_of (!)
$tedi::ai_batch_size_of (!)
$tedi::ai_context_size_of (!)
$tedi::ai_model_path_of (!)
$tedi::ai_server_address_of (!)
$tedi::ai_server_port_no_of (!)
$tedi::ai_server_name_of (!)
$tedi::ai_server_log_file_of (!)
$tedi::do_start_ai_server_of (!)
$tedi::commands_of (!)

$tedi::default_configuration std_types::object
  .ai_model_name_of "sauerkrautlm-una-solar-instruct.Q5_K_M.gguf"
  .ai_batch_size_of 16
  .ai_context_size_of 4096
  .ai_model_path_of "/var/models"
  .ai_server_address_of "127.0.0.1"
  .ai_server_port_no_of 8080
  .ai_server_name_of "funky_server"
  .ai_server_log_file_of "/tmp/funky_server.log"
  .do_start_ai_server_of false
  .commands_of empty_hash_table

$tedi::context_help_functions empty_hash_table

# Resources

$TERMINAL .

$tedi::ACTIVATE_SOFT_BREAKS .
$tedi::DEACTIVATE_SOFT_BREAKS .

$tedi::ACTIVATE_SOFT_BREAKS.to_string "-"
$tedi::DEACTIVATE_SOFT_BREAKS.to_string "≡"

# TEDI Functions

$argument_of ()

$tedi_types::function std_types::function

$tedi_types::function.argument_of undefined
