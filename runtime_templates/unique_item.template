#
  Copyright (C) 2021 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Topic: Basics

CODE
  static long unique_idx = 1;
  static const char **my_unique_item_names;

TYPE std_types::unique_item -> std_types::object
  #
    this is the prototype object for all unique items
  long id

FUNCTION NODE *register_unique_item
  (
    const char *name
  )
  {
    if (unique_idx == 0) {
      my_unique_item_names = allocate_memory(sizeof(const char *));
    } else if (is_a_power_of_two(unique_idx)) {
      my_unique_item_names =
	reallocate_memory(
	  my_unique_item_names,
	  2*unique_idx*sizeof(const char *));
    }
    my_unique_item_names[unique_idx] = name;
    return CREATE(std_types::unique_item, unique_idx++);
  }

METHOD std_types::unique_item/_type
  {
    RUNTIME_ERROR("Attempt to call a unique item as a function!")
  }

METHOD long std_types::unique_item/_debug_string
  (
    NODE *node,
    int indent,
    int max_depth,
    char *buf
  )
  {
    return debug_print(
      indent, buf,
      node->unique_item.id == 0 ? "<unique_item>" :
      my_unique_item_names[node->unique_item.id]);
  }

METHOD std_types::unique_item/to_string
  {
    CHECK_ARGUMENTS(1)
    RETURN_SINGLE_RESULT(
      from_c_string(my_unique_item_names[ARGUMENTS(0)->unique_item.id]))
  }

METHOD std_types::unique_item/equal
  #
    compares two unique items for equality
  {
    CHECK_ARGUMENTS(2)
    NODE *right = ARGUMENTS(1);
    if (TYPEOF(right) == TYPE(std_types::unique_item)) {
      RETURN_SINGLE_RESULT(
	from_bool(ARGUMENTS(0)->unique_item.id == right->unique_item.id))
    } else if (TYPEOF(right) == TYPE(std_types::error)) {
      INVALID_ARGUMENTS
    } else {
      RETURN_FALSE
    }
  }

METHOD std_types::unique_item/hash
  #
    returns a numerical hash value
  {
    CHECK_ARGUMENTS(1)
    uint32_t hash = ARGUMENTS(0)->unique_item.id;
    hash *= 1893456841;
    hash ^= hash >> 25 | hash << 7;
    RETURN_SINGLE_RESULT(from_uint32(hash));
  }

FUNCTION std::unique_item
  #
    returns the specified unique item

    This function should be used for deserialization only!

    Only namespaced unique items can be retrieved.
  {
    CHECK_ARGUMENTS(1)
    char *name;
    CHECK(to_c_string(ARGUMENTS(0), &name))
    long i;
    for (i = 1; i < unique_idx; ++i) {
      if (strcmp(name, my_unique_item_names[i]) == 0) {
	PREPARE_SINGLE_RESULT(CREATE(std_types::unique_item, i))
	goto cleanup;
      }
    }
    RUNTIME_ERROR("NO SUCH UNIQUE ITEM")

    cleanup:

    deallocate_memory(name);
  }
