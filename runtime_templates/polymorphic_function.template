#
  Copyright (C) 2021 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Topic: Functions

TYPE std_types::polymorphic_function -> std_types::object
  #
    the prototype object for all polymorphic functions

TYPE std_types::polymorphic_function_with_setter -> std_types::polymorphic_function
  #
    the prototype object for all polymorphic functions with a setter

METHOD std_types::polymorphic_function/_type
  {
    RUNTIME_ERROR(
      "Attempt to call the polymorphic-function protoype object!")
  }

METHOD std_types::polymorphic_function_with_setter/_type
  {
    RUNTIME_ERROR(
      "Attempt to call the polymorphic-function-with-setter protoype object!")
  }

FUNCTION NODE *create_polymorphic_function
  (
    int poly_idx
  )
  {
    NODE *node = allocate(sizeof(SIMPLE_NODE));
    node->type =
      (FUNC)(unsigned long)
      (POLYMORPHIC_FUNCTION_TAG|(poly_idx << 3));
    node->attributes =
      std_types::polymorphic_function.attributes;
    return node;
  }

FUNCTION NODE *create_polymorphic_function_with_setter
  (
    int poly_idx
  )
  {
    NODE *node = allocate(sizeof(SIMPLE_NODE));
    node->type =
      (FUNC)(unsigned long)
      (POLYMORPHIC_FUNCTION_WITH_SETTER_TAG|(poly_idx << 3));
    node->attributes =
      std_types::polymorphic_function_with_setter.attributes;
    return node;
  }

POLY std::subtype_of
  #
    used to define the subtypes of tuples and lists

    Topic: Collections

    See also: std_types::tuple, std_types::list
