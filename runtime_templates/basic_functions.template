#
  Copyright (C) 2020 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Topic: Basics

OBJECT std::EXIT_SUCCESS -> builtin_types::positive_integer
  #
    status code for successful termination

    Topic: Primitives

    See also: EXIT_FAILURE

  EXIT_SUCCESS

OBJECT std::EXIT_FAILURE -> builtin_types::positive_integer
  #
    status code for unsuccessful termination

    Topic: Primitives

    See also: EXIT_SUCCESS

  EXIT_FAILURE

FUNCTION std::pass
  #
    does nothing

    <pass> must be called without any arguments expecting no results

    Topic: Primitives

    See also: assign, spread

    Example:

      $items list("apples" "bananas" "cherries")
      for_each items
	: (item)
	  println! item
	  next!
	pass

    Output:

      apples
      bananas
      cherries
  {
    CHECK_ARGUMENTS(0)
    CHECK_RESULTS(0)
    RETURN
  }

FUNCTION std::result_count
  #
    returns the expected number of results

    When a function is called then the caller supplies the number of expected
    results as an invisible argument.

    Topic: Primitives

    See also: parameter_count_of
  {
    CHECK_ARGUMENTS(0)
    CHECK_RESULTS(1)
    RETURN_SINGLE_RESULT(from_int(*TLS_frame->link->code))
  }
