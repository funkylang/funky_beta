#
  Copyright (C) 2020 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Topic: Lists

TYPE std_types::generic_list -> std_types::object
  #
    the prototype object for all kind of lists (including strings)

    Topic: Collections

    See also: std_types::list, std_types::string

METHOD std_types::generic_list/_type
  {
    RUNTIME_ERROR("Attempt to call the generic list prototype object as a function!")
  }

DATA
  typedef struct {
    long size;
    long length;
    NODE *items[];
  } LIST_DATA;

PUBLIC TYPE std_types::list -> std_types::generic_list
  #
    an ordered, enumerated sequence of items

    Topic: Collections

    See also: std_types::generic_list, std_types::string

  long offset # usually zero
  long length
  LIST_DATA *data

METHOD std_types::list/_type
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    long length = MYSELF->list.length;
    long idx;
    CHECK(to_long(ARGUMENTS(0), &idx))
    if (idx < 0) idx = length+idx+1;
    if (idx < 1 || idx > length) INVALID_INDEX(MYSELF);
    long offset = MYSELF->list.offset;
    if (ARGUMENT_COUNT == 1)
      RETURN_SINGLE_RESULT(MYSELF->list.data->items[offset+idx-1])
    NODE *item = ARGUMENTS(1);
    LIST_DATA *new_data = allocate_large(sizeof(LIST_DATA)+length*sizeof(NODE *));
    memcpy(
      new_data->items, MYSELF->list.data->items+offset, length*sizeof(NODE *));
    new_data->items[idx-1] = item;
    new_data->size = length;
    new_data->length = length;
    NODE *node = CREATE(std_types::list, 0, length, new_data);
    node->type = MYSELF->type;
    node->attributes = MYSELF->attributes;
    RETURN_SINGLE_RESULT(node)
  }

METHOD long std_types::list/_debug_string
  (
    NODE *node,
    int indent,
    int max_depth,
    char *buf
  )
  {
    /*NODE *subtype = get_attribute(node, poly_idx__std__subtype_of);
    if (CONTAINS_AN_ATTRIBUTE_VALUE(subtype)) {
      subtype = RETRIEVE_ATTRIBUTE_VALUE(subtype);
      if (TYPEOF(subtype) == TYPE(std_types::undefined)) {
	subtype = NULL;
      }
    } else {
      subtype = NULL;
    }*/
    long n, len;
    if (node->list.length == 0) {
      /*if (subtype) {
	n = 0;
	if (indent < 0) {
	  if (buf) *buf++ = ' ';
	  n = 1;
	}
	n += print(&buf, "<empty_list-");
	len = debug_string(subtype, 0, max_depth, buf);
	--len; // remove trailing newline
	if (buf) buf += len;
	n += len;
	n += print(&buf, ">\n");
	return n;
      } else {*/
	return debug_print(indent, buf, "<empty_list>", node);
      /*}*/
    } else {
      if (max_depth <= 1) {
	n = 0;
	if (indent < 0) {
	  if (buf) *buf++ = ' ';
	  ++n;
	}
	n += print(&buf, "<list");
	/*if (subtype) {
	  if (buf) *buf++ = '-';
	  ++n;
	  len = debug_string(subtype, 0, max_depth, buf);
	  --len; // remove trailing newline
	  if (buf) buf += len;
	  n += len;
	}*/
	if (node->list.length == 1) {
	  n += print(&buf, " of 1 item>\n", node);
	} else {
	  n += print(&buf, " of %ld items>\n", node->list.length);
	}
	return n;
      } else {
	long i;
	n = debug_print_indent(&indent, &buf);
	n += print(&buf, "list");
	/*if (subtype) {
	  if (buf) *buf++ = '-';
	  ++n;
	  len = debug_string(subtype, 0, max_depth, buf);
	  if (buf) buf += len;
	  n += len;
	} else {*/
	  if (buf) *buf++ = '\n';
	  ++n;
	/*}*/
	const char *contents_indent = indent_to_string(indent);
	long offset = node->list.offset;
	for (i = 0; i < node->list.length; ++i) {
	  n += print(&buf, contents_indent);
	  len =
	    debug_string(
	      node->list.data->items[offset+i], indent, max_depth-1, buf);
	  if (buf) buf += len;
	  n += len;
	}
	return n;
      }
    }
  }

METHOD int std_types::list/_get_item_of
  (
    NODE *node,
    long idx,
    NODE **result_p
  )
  {
    long length = node->list.length;
    if (idx < 0 || idx >= length) {
      invalid_index(node);
      return false;
    }
    *result_p = node->list.data->items[node->list.offset+idx];
    return true;
  }

PUBLIC OBJECT std::empty_list -> std_types::list
  #
    an empty list
  0, 0, NULL

FUNCTION NODE *create_list
  #
    To be used from the runtime linker only!

    This function returns a partially uninitialized object!
  (
    long count
  )
  {
    if (count ==  0) return VAR(std::empty_list);
    LIST_DATA *data = allocate_large(sizeof(LIST_DATA)+count*sizeof(NODE *));
    data->size = count;
    data->length = count;
    return CREATE(std_types::list, 0, count, data);
  }

FUNCTION void set_list_item
  #
    To be used from the runtime linker only!

    The index is zero based!

    This function does a destructive update!
  (
    NODE *list,
    long idx,
    NODE *value
  )
  {
    list->list.data->items[list->list.offset+idx] = value;
  }

METHOD int std_types::list/_unfold
  (
    NODE *list
  )
  {
    long offset = list->list.offset;
    int i;
    for (i = 0; i < list->list.length; ++i) {
      ARGUMENTS(ARGUMENT_COUNT++) = list->list.data->items[offset+i];
    }
    return true;
  }

#METHOD std_types::list/new
  #
    clones the specified list and replace its contents

    Both arguments are lists. The first argument is used as a prototype which
    supplies the methods for the newly created list. Any list items of the
    prototype list are discarded. Instead all list items of the second argument
    are used as the contents of the newly created list.

    Parameters:
      prototype # the prototype for the new list
      contents # a list containing the new list's items

    See also: list
  {
    CHECK_ARGUMENTS(2)
    if (TYPEOF(ARGUMENTS(1)) != TYPE(std_types::list)) INVALID_ARGUMENTS
    NODE *prototype = ARGUMENTS(0);
    NODE *clone =
      CREATE(
	std_types::list,
	ARGUMENTS(1)->list.offset,
	ARGUMENTS(1)->list.length,
	ARGUMENTS(1)->list.data
      );
    clone->attributes = prototype->attributes;
    RETURN_SINGLE_RESULT(clone)
  }

FUNCTION std::list
  #
    constructs a list from its arguments
  {
    MIN_ARGUMENTS(0)
    if (ARGUMENT_COUNT == 0) RETURN_SINGLE_RESULT(VAR(std::empty_list))
    LIST_DATA *data =
      allocate_large(sizeof(LIST_DATA)+ARGUMENT_COUNT*sizeof(NODE *));
    data->size = ARGUMENT_COUNT;
    data->length = ARGUMENT_COUNT;
    int i = 0;
    for (i = 0; i < ARGUMENT_COUNT; ++i) {
      data->items[i] = ARGUMENTS(i);
    }
    RETURN_SINGLE_RESULT(CREATE(std_types::list, 0, ARGUMENT_COUNT, data))
  }

METHOD int std_types::list/_length_of
  (
    NODE *node,
    long *result_p
  )
  {
    *result_p = node->list.length;
    return true;
  }

METHOD std_types::list/length_of
  #
    returns the number of items within the list
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    RETURN_SINGLE_RESULT(from_long(ARGUMENTS(0)->list.length))
  }

METHOD std_types::list/is_empty
  #
    returns whether the list is empty or not
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    RETURN_BOOLEAN(ARGUMENTS(0)->list.length == 0)
  }

METHOD std_types::list/is_not_empty
  #
    returns whether the list is empty or not
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    RETURN_BOOLEAN(ARGUMENTS(0)->list.length > 0)
  }

METHOD std_types::list/push
  #
    adds a single item at the end of the list

    All attributes of the original list are maintained.
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    NODE *self = ARGUMENTS(0);
    NODE *value = ARGUMENTS(1);
    long start_offset = self->list.offset;
    long left_length = self->list.length;
    long end_offset = start_offset+left_length;
    long new_length = left_length+1;
    LIST_DATA *data = self->list.data;
    if (!data || data->size < end_offset+1 || data->length != end_offset) {
      long new_size = ALLOCATION_SIZE(2*new_length);
      LIST_DATA *new_data = allocate_large(sizeof(LIST_DATA)+new_size*sizeof(NODE *));
      if (data) memcpy(new_data->items, data->items+start_offset, left_length*sizeof(NODE *));
      start_offset = 0;
      end_offset = left_length;
      new_data->size = new_size;
      data = new_data;
    }
    data->items[end_offset] = value;
    data->length = end_offset+1;
    NODE *result = CREATE(std_types::list, start_offset, new_length, data);
    result->attributes = self->attributes; // maintain attributes
    RETURN_SINGLE_RESULT(result);
  }

METHOD std_types::list/drop
  #
    removes the last item of a non-empty list

    It is an error to attempt to drop an item from an empty list.

    The returned list maintains all attributes of the original list.
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    NODE *list = ARGUMENTS(0);
    long length = list->list.length;
    if (length == 0) RUNTIME_ERROR("Attempt to drop an element from an empty list!")
    NODE *result =
      CREATE(std_types::list, list->list.offset, length-1, list->list.data);
    result->attributes = list->attributes; // maintain attributes
    RETURN_SINGLE_RESULT(result);
  }

METHOD std_types::list/pop
  #
    removes and returns the last item of a non-empty list

    It is an error to attempt to pop an item from an empty list.

    The returned list maintains all attributes of the original list.
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(2)
    if (RESULT_COUNT != 2) RUNTIME_ERROR("Invalid number of expected results!")
    NODE *list = ARGUMENTS(0);
    long offset = list->list.offset;
    long length = list->list.length;
    if (length == 0) RUNTIME_ERROR("Attempt to pop an element from an empty list!")
    NODE *new_list = CREATE(std_types::list, offset, length-1, list->list.data);
    new_list->attributes = list->attributes; // maintain attributes
    START_ARGUMENTS(2)
    ARGUMENTS(0) = new_list;
    ARGUMENTS(1) = list->list.data->items[offset+length-1];
    RETURN
  }

METHOD std_types::list/peek
  #
    returns the last item of a non-empty list

    It is an error to attempt to peek an item of an empty list.
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    NODE *list = ARGUMENTS(0);
    long length = list->list.length;
    if (length == 0) RUNTIME_ERROR("Attempt to peek an element of an empty list!")
    RETURN_SINGLE_RESULT(list->list.data->items[list->list.offset+length-1])
  }

METHOD std_types::list/append
  #
    appends two or more lists

    All attributes of the original list are maintained.
  {
    MIN_ARGUMENTS(2)
    CHECK_RESULTS(1)
    NODE *left = ARGUMENTS(0);
    long left_length = left->list.length;
    long new_length = left_length;
    int i;
    for (i = 1; i < ARGUMENT_COUNT; ++i) {
      NODE *right = ARGUMENTS(i);
      if (TYPEOF(right) != TYPE(std_types::list)) INVALID_ARGUMENTS
      new_length += right->list.length;
    }
    if (new_length == left_length) RETURN_SINGLE_RESULT(left)
    if (left_length == 0 && ARGUMENT_COUNT == 2) {
      NODE *right = ARGUMENTS(1);
      NODE *result =
	CREATE(std_types::list,
	  right->list.offset, right->list.length, right->list.data);
      result->attributes = left->attributes; // maintain attributes
      RETURN_SINGLE_RESULT(result);
    }
    long left_offset = left->list.offset;
    LIST_DATA *data = left->list.data;
    if (
      !data || data->size < left_offset+new_length ||
      data->length != left_offset+left_length
    ) {
      long new_size = 2*new_length;
      LIST_DATA *new_data =
	allocate_large(sizeof(LIST_DATA)+new_size*sizeof(NODE *));
      if (data) {
	memcpy(
	  new_data->items, data->items+left_offset, left_length*sizeof(NODE *));
      }
      left_offset = 0;
      new_data->size = new_size;
      data = new_data;
    }
    long offset = left_offset+left_length;
    for (i = 1; i < ARGUMENT_COUNT; ++i) {
      NODE *right = ARGUMENTS(i);
      long right_offset = right->list.offset;
      long right_length = right->list.length;
      if (right_length > 0) {
	memcpy(
	  data->items+offset,
	  right->list.data->items+right_offset,
	  right_length*sizeof(NODE *));
	offset += right_length;
      }
    }
    data->length = left_offset+new_length;
    NODE *result = CREATE(std_types::list, left_offset, new_length, data);
    result->attributes = left->attributes; // maintain attributes
    RETURN_SINGLE_RESULT(result);
  }

METHOD std_types::list/range
  #
    returns the specified subrange of the specified list

    The first item has the index 1, the second item the index 2 and so on.

    Negative indices start at the end of the list.

    The last item has the index -1, the next to last item the index -s and so
    on.

    Both indices are *inclusive*. So a range starting at index 4 and ending at
    index 5 contains two items.

    A range can be empty. An example for an empty range would be start index
    8 and end index 7.

    It is an error for any index to lie outside the list's index range. It is
    also an error if the resulting range would contain a negative number of
    items.

    If the range spans the whole list then the list is returned unchanged.

    Otherwise a new list (with fresh attributes) is created and returned.

    Parameters:
      self # the list
      first # the index of the first item to include in the range
      last # the index of the last item to include in the range
  {
    CHECK_ARGUMENTS(3)
    CHECK_RESULTS(1)
    NODE *self = ARGUMENTS(0);
    long first_idx, last_idx;
    CHECK(to_long(ARGUMENTS(1), &first_idx))
    CHECK(to_long(ARGUMENTS(2), &last_idx))
    long length = self->list.length;
    if (first_idx < 0) first_idx = length+first_idx+1;
    if (last_idx < 0) last_idx = length+last_idx+1;
    if (first_idx < 1 || first_idx > length+1) INVALID_INDEX(self);
    if (last_idx < 0 || last_idx > length) INVALID_INDEX(self);
    if (first_idx > last_idx+1) INVALID_ARGUMENTS
    if (first_idx == 1 && last_idx == length) RETURN_SINGLE_RESULT(self)
    long new_len = last_idx-first_idx+1;
    if (new_len == 0) RETURN_SINGLE_RESULT(VAR(std::empty_list))
    RETURN_SINGLE_RESULT(
      CREATE(
	std_types::list,
	self->list.offset+first_idx-1,
	new_len, self->list.data))
  }

METHOD std_types::list/spread
  {
    CHECK_ARGUMENTS(1)
    NODE *self = ARGUMENTS(0);
    long length = self->list.length;
    CHECK_RESULTS(length)
    START_ARGUMENTS(length)
    int i;
    for (i = 0; i < length; ++i) {
      ARGUMENTS(i) = self->list.data->items[i];
    }
    RETURN
  }
