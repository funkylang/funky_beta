#
  Copyright (C) 2020 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Topics: POSIX, Input-Output

#TYPE std_types::file_descriptor -> std_types::object
  #
    a POSIX file descriptor

    Topic: POSIX
  int value

#OBJECT std::STDIN_FILENO -> std_types::file_descriptor
  #
    the respective POSIX file descriptor number

    Topic: Input-Output

    See also: open_file, close_file
  {STDIN_FILENO}

#OBJECT std::STDOUT_FILENO -> std_types::file_descriptor
  #
    the respective POSIX file descriptor number

    Topic: Input-Output

    See also: open_file, close_file
  {STDOUT_FILENO}

#OBJECT std::STDERR_FILENO -> std_types::file_descriptor
  #
    the respective POSIX file descriptor number

    Topic: Input-Output

    See also: open_file, close_file
  {STDERR_FILENO}

CODE
  static int flags_to_int
  (
    NODE *node,
    int *result_p
  )
  {
    char *flags_str = NULL;
    int flags = 0;
    if (!to_c_string(node, &flags_str)) return false;
    switch (flags_str[0]) {
      case 'R':
	flags = O_NONBLOCK;
      case 'r':
	if (flags_str[1] == '+') {
	  if (flags_str[2] == 0) {
	    flags |= O_CLOEXEC|O_RDWR;
	    break;
	  } else {
	    goto err;
	  }
	} else if (flags_str[1] == 0) {
	  flags |= O_CLOEXEC|O_RDONLY;
	  break;
	} else {
	  goto err;
	  goto err;
	}
      case 'W':
	flags = O_NONBLOCK;
      case 'w':
	if (flags_str[1] == '+') {
	  if (flags_str[2] == 0) {
	    flags |= O_CLOEXEC|O_RDWR|O_CREAT|O_TRUNC;
	    break;
	  } else {
	    goto err;
	  }
	} else if (flags_str[1] == 0) {
	  flags |= O_CLOEXEC|O_WRONLY|O_CREAT|O_TRUNC;
	  break;
	} else {
	  goto err;
	}
      case 'A':
	flags = O_NONBLOCK;
      case 'a':
	if (flags_str[1] == '+') {
	  if (flags_str[2] == 0) {
	    flags |= O_CLOEXEC|O_RDWR|O_CREAT|O_APPEND;
	    break;
	  } else {
	    goto err;
	  }
	} else if (flags_str[1] == 0) {
	  flags |= O_CLOEXEC|O_WRONLY|O_CREAT|O_APPEND;
	  break;
	} else {
	  goto err;
	}
      default:
	goto err;
    }
    deallocate_memory(flags_str);
    *result_p = flags;
    return true;

    err:
    deallocate_memory(flags_str);
    CREATE_RUNTIME_ERROR("Conversion to open flags failed!")
    return false;
  }

CODE
  static int mode_to_int
  (
    NODE *node,
    int *result_p
  )
  {
    char *mode_str = NULL;
    int mode = 0;
    if (!to_c_string(node, &mode_str)) return false;
    if (strlen(mode_str) != 9) goto err;
    switch (mode_str[0]) {
      case 'r':
	mode |= 0400;
	break;
      case '-':
	break;
      default:
	goto err;
    }
    switch (mode_str[1]) {
      case 'w':
	mode |= 0200;
	break;
      case '-':
	break;
      default:
	goto err;
    }
    switch (mode_str[2]) {
      case 'x':
	mode |= 0100;
	break;
      case 's':
	mode |= 0100|S_ISUID;
	break;
      case 'S':
	mode |= S_ISUID;
	break;
      case '-':
	break;
      default:
	goto err;
    }
    switch (mode_str[3]) {
      case 'r':
	mode |= 040;
	break;
      case '-':
	break;
      default:
	goto err;
    }
    switch (mode_str[4]) {
      case 'w':
	mode |= 020;
	break;
      case '-':
	break;
      default:
	goto err;
    }
    switch (mode_str[5]) {
      case 'x':
	mode |= 010;
	break;
      case 's':
	mode |= 010|S_ISGID;
	break;
      case 'S':
	mode |= S_ISGID;
	break;
      case '-':
	break;
      default:
	goto err;
    }
    switch (mode_str[6]) {
      case 'r':
	mode |= 04;
	break;
      case '-':
	break;
      default:
	goto err;
    }
    switch (mode_str[7]) {
      case 'w':
	mode |= 02;
	break;
      case '-':
	break;
      default:
	goto err;
    }
    switch (mode_str[8]) {
      case 'x':
	mode |= 01;
	break;
      case 't':
	mode |= 01|S_ISVTX;
	break;
      case 'T':
	mode |= S_ISVTX;
	break;
      case '-':
	break;
      default:
	goto err;
    }
    deallocate_memory(mode_str);
    *result_p = mode;
    return true;

    err:
    deallocate_memory(mode_str);
    CREATE_RUNTIME_ERROR("Conversion to file mode failed!")
    return false;
  }

CODE
  static NODE *mode_from_int
  (
    int value
  )
  {
    char mode[12];
    if (S_ISREG(value)) {
      mode[0] = '-';
    } else if (S_ISBLK(value)) {
      mode[0] = 'b';
    } else if (S_ISCHR(value)) {
      mode[0] = 'c';
    } else if (S_ISDIR(value)) {
      mode[0] = 'd';
    } else if (S_ISLNK(value)) {
      mode[0] = 'l';
    } else if (S_ISFIFO(value)) {
      mode[0] = 'p';
    } else {
      mode[0] = 0;
    }
    if (value & 0400) {
      mode[1] = 'r';
    } else {
      mode[1] = '-';
    }
    if (value & 0200) {
      mode[2] = 'w';
    } else {
      mode[2] = '-';
    }
    if (value & 0100) {
      if (value & S_ISUID) {
	mode[3] = 's';
      } else {
	mode[3] = 'x';
      }
    } else {
      if (value & S_ISUID) {
	mode[3] = 'S';
      } else {
	mode[3] = '-';
      }
    }
    if (value & 040) {
      mode[4] = 'r';
    } else {
      mode[4] = '-';
    }
    if (value & 020) {
      mode[5] = 'w';
    } else {
      mode[5] = '-';
    }
    if (value & 010) {
      if (value & S_ISGID) {
	mode[6] = 's';
      } else {
	mode[6] = 'x';
      }
    } else {
      if (value & S_ISGID) {
	mode[6] = 'S';
      } else {
	mode[6] = '-';
      }
    }
    if (value & 04) {
      mode[7] = 'r';
    } else {
      mode[7] = '-';
    }
    if (value & 02) {
      mode[8] = 'w';
    } else {
      mode[8] = '-';
    }
    if (value & 01) {
      if (value & S_ISVTX) {
	mode[9] = 't';
      } else {
	mode[9] = 'x';
      }
    } else {
      if (value & S_ISVTX) {
	mode[9] = 'T';
      } else {
	mode[9] = '-';
      }
    }
    mode[10] = 0;
    return from_c_string(mode[0] ? mode : mode+1);
  }

POLY std::get_terminal_size
  #
    retrieves the current width and height of the specified terminal

    Topic: Terminal

    Parameters:
      fd # the file descriptor of the terminal

    Results:
      width # the width of the terminal
      height # the height of the terminal

    Example:

      get_terminal_size! STDIN_FILENO $width $height

METHOD std_types::file_descriptor/get_terminal_size
  #
    retrieves the current width and height of the terminal

    If the file descriptor is not connected to a terminal then the behaviour
    is undefined.
  {
    CHECK_ARGUMENTS(1)
    CHECK_IO_ACCESS_RIGHTS

    int fd = ARGUMENTS(0)->file_descriptor.value;
    int success, width, height;
    struct winsize winsize;

    EVENT(get_terminal_size)
      success = ioctl(fd, TIOCGWINSZ, &winsize);
      width = winsize.ws_col;
      height = winsize.ws_row;
    DATA
      INT(success)
      INT(width)
      INT(height)
    END
    if (success == 0) {
      NODE *width_node = from_int(width);
      NODE *height_node = from_int(height);
      START_ARGUMENTS(2);
      ARGUMENTS(0) = width_node;
      ARGUMENTS(1) = height_node;
      RETURN
    } else {
      create_error_message(
	module__builtin.constants_base[unique__std__IO_ERROR-1],
	"IOCTL FAILED", errno, 0, NULL);
    }
  }

FUNCTION std::exitstatus
  #
    extract the exit status from a status value
  {
    CHECK_ARGUMENTS(1)
    int status;
    CHECK(to_int(ARGUMENTS(0), &status))
    PREPARE_SINGLE_RESULT(from_int(WEXITSTATUS(status)))
  }

CODE
  static int initialize_fd_set
    (
      fd_set *set,
      NODE *descriptors,
      long *descriptor_count_p,
      int *last_fd_p
    )
    {
      long descriptor_count;
      if (!length_of(descriptors, &descriptor_count)) return false;
      FD_ZERO(set);
      int last_fd = *last_fd_p;
      long i;
      for (i = 0; i < descriptor_count; ++i) {
	NODE *descriptor;
	if (!get_item_of(descriptors, i, &descriptor)) return false;
	if (TYPEOF(descriptor) != TYPE(std_types::file_descriptor)) {
	  CREATE_RUNTIME_ERROR("Invalid arguments!")
	  return false;
	}
	int fd = descriptor->file_descriptor.value;
	FD_SET(fd, set);
	if (fd > last_fd) last_fd = fd;
      }
      *descriptor_count_p = descriptor_count;
      *last_fd_p = last_fd;
      return true;
    }

  static NODE *create_descriptor_list
    (
      fd_set *set,
      int fd_count,
      NODE *descriptors,
      long descriptor_count
    )
    {
      LIST_DATA *data =
	allocate_large(sizeof(LIST_DATA)+fd_count*sizeof(NODE *));
      data->size = fd_count;
      data->length = fd_count;
      int n = 0;
      long i;
      for (i = 0; i < descriptor_count; ++i) {
	NODE *descriptor;
	get_item_of(descriptors, i, &descriptor);
	int fd = descriptor->file_descriptor.value;
	if (FD_ISSET(fd, set)) {
	  data->items[n++] = descriptor;
	}
      }
      return CREATE(std_types::list, 0, fd_count, data);
    }

FUNCTION std::pselect
  #
    waits for one or more file descriptors to become ready
  {
    MIN_ARGUMENTS(3)
    MAX_ARGUMENTS(4)
    CHECK_RESULTS(4)
    CHECK_IO_ACCESS_RIGHTS
    NODE *read_descriptors = ARGUMENTS(0);
    NODE *write_descriptors = ARGUMENTS(1);
    NODE *except_descriptors = ARGUMENTS(2);
    double timeout = 0.0;
    struct timespec timeout_data;
    struct timespec *timeout_ptr = NULL;

    if (
      ARGUMENT_COUNT > 3 &&
      TYPEOF(ARGUMENTS(3)) != TYPE(std_types::undefined)
    ) {
      CHECK(to_double(ARGUMENTS(3), &timeout))
      if (timeout < 0.0) timeout = 0.0;
      timeout_data.tv_sec = timeout;
      timeout_data.tv_nsec = 1000000000*(timeout-floor(timeout));
      timeout_ptr = &timeout_data;
    }
    long read_descriptor_count, write_descriptor_count, except_descriptor_count;
    fd_set read_set, write_set, except_set;
    int last_fd = 0;
    CHECK(
      initialize_fd_set(
	&read_set, read_descriptors, &read_descriptor_count, &last_fd))
    CHECK(
      initialize_fd_set(
	&write_set, write_descriptors, &write_descriptor_count, &last_fd))
    CHECK(
      initialize_fd_set(
	&except_set, except_descriptors, &except_descriptor_count, &last_fd))
    int ret;
    int caught_hup = false;
    int caught_kill = false;
    int caught_usr1 = false;
    int caught_usr2 = false;
    int chld_changed_state = false;
    int win_changed_size = false;
    EVENT(pselect)
      sigset_t set;
      sigprocmask(0, NULL, &set);
      sigdelset(&set, SIGHUP);
      sigdelset(&set, SIGUSR1);
      sigdelset(&set, SIGUSR2);
      sigdelset(&set, SIGCHLD);
      sigdelset(&set, SIGWINCH);
      retry:;
      ret = pselect(last_fd+1, &read_set, &write_set, &except_set, timeout_ptr, &set);
      if (ret < 0 && errno == EINTR) {
	if (caught_sighup) {
	  caught_sighup = false;
	  caught_hup = true;
	} else if (caught_sigusr1) {
	  caught_sigusr1 = false;
	  caught_usr1 = true;
	} else if (caught_sigusr2) {
	  caught_sigusr2 = false;
	  caught_usr2 = true;
	} else if (child_changed_state) {
	  child_changed_state = false;
	  chld_changed_state = true;
	} else if (window_changed_size) {
	  window_changed_size = false;
	  win_changed_size = true;
	} else {
	  goto retry;
	}
      }
    DATA
      INT(ret)
      INT(caught_hup)
      INT(caught_kill)
      INT(caught_usr1)
      INT(caught_usr2)
      INT(chld_changed_state)
      INT(win_changed_size)
    END
    // INT(read_count)
    // INT(write_count)
    // INT(except_count)
    // INT_ARRAY(descriptors, descriptor_count)
    if (ret == -1 && errno != EINTR) {
      create_error_message(
	module__builtin.constants_base[unique__std__IO_ERROR-1],
	"PSELECT FAILED", errno, 0, NULL);
      return;
    }
    NODE *signals = VAR(std::empty_list);
    int read_count = 0;
    int write_count = 0;
    int except_count = 0;
    if (ret > 0) { // success
      int fd;
      for (fd = 0; fd <= last_fd; ++fd) {
	if (FD_ISSET(fd, &read_set)) ++read_count;
	if (FD_ISSET(fd, &write_set)) ++write_count;
	if (FD_ISSET(fd, &except_set)) ++except_count;
      }
      if (read_count != read_descriptor_count) {
	if (read_count == 0) {
	  read_descriptors = VAR(std::empty_list);
	} else {
	  read_descriptors =
	    create_descriptor_list(
	      &read_set, read_count,
	      read_descriptors, read_descriptor_count);
	}
      }
      if (write_count != write_descriptor_count) {
	if (write_count == 0) {
	  write_descriptors = VAR(std::empty_list);
	} else {
	  write_descriptors =
	    create_descriptor_list(
	      &write_set, write_count,
	      write_descriptors, write_descriptor_count);
	}
      }
      if (except_count != except_descriptor_count) {
	if (except_count == 0) {
	  except_descriptors = VAR(std::empty_list);
	} else {
	  except_descriptors =
	    create_descriptor_list(
	      &except_set, except_count,
	      except_descriptors, except_descriptor_count);
	}
      }
    } else {
      read_descriptors = VAR(std::empty_list);
      write_descriptors = VAR(std::empty_list);
      except_descriptors = VAR(std::empty_list);
    }
    int signal_count =
      caught_hup+caught_kill+caught_usr1+caught_usr2+
      chld_changed_state+win_changed_size;
    if (signal_count > 0) {
      LIST_DATA *data =
	allocate_large(sizeof(LIST_DATA)+signal_count*sizeof(NODE *));
      data->size = signal_count;
      data->length = signal_count;
      int n = 0;
      if (caught_hup) {
	data->items[n++] = VAR(std::SIGHUP);
      }
      if (caught_usr1) {
	data->items[n++] = VAR(std::SIGUSR1);
      }
      signals = CREATE(std_types::list, 0, signal_count, data);
      if (caught_usr2) {
	data->items[n++] = VAR(std::SIGUSR2);
      }
      if (chld_changed_state) {
	data->items[n++] = VAR(std::SIGCHLD);
      }
      if (win_changed_size) {
	data->items[n++] = VAR(std::SIGWINCH);
      }
      signals = CREATE(std_types::list, 0, signal_count, data);
    }
    START_ARGUMENTS(4);
    ARGUMENTS(0) = signals;
    ARGUMENTS(1) = read_descriptors;
    ARGUMENTS(2) = write_descriptors;
    ARGUMENTS(3) = except_descriptors;
    RETURN
  }

FUNCTION std::do_not_close
  {
    CHECK_ARGUMENTS(1)
    CHECK_IO_ACCESS_RIGHTS
    int fd;
    int result;
    if (!file_descriptor_to_int(ARGUMENTS(0), &fd)) return;
    ACTION(do_not_close)
      do {
	result = fcntl(fd, F_GETFD);
      } while (result == -1 && errno == EINTR);
      if (result != -1) {
	int flags = result&~FD_CLOEXEC;
	do {
	  result = fcntl(fd, F_SETFD, flags);
	} while (result == -1 && errno == EINTR);
      }
    INFO
      INT(fd)
      INT(result)
    DATA
      INT(result)
    END
    if (result == -1) {
      create_error_message(
	module__builtin.constants_base[unique__std__IO_ERROR-1],
	"DO_NO_CLOSE FAILED", errno, 0, NULL);
    } else {
      PREPARE_NO_RESULT
    }
  }

#
  FUNCTION std::disable_ctrl_c
    {
      CHECK_ARGUMENTS(0)
      CHECK_IO_ACCESS_RIGHTS
      signal(SIGINT, SIG_IGN);
      RETURN_NOTHING
    }


  FUNCTION std::enable_ctrl_c
    {
      CHECK_ARGUMENTS(0)
      CHECK_IO_ACCESS_RIGHTS
      signal(SIGINT, SIG_DFL);
      RETURN_NOTHING
    }

  FUNCTION std::disable_ctrl_z
    {
      CHECK_ARGUMENTS(0)
      CHECK_IO_ACCESS_RIGHTS
      signal(SIGTSTP, SIG_IGN);
      RETURN_NOTHING
    }


  FUNCTION std::enable_ctrl_z
    {
      CHECK_ARGUMENTS(0)
      CHECK_IO_ACCESS_RIGHTS
      signal(SIGTSTP, SIG_DFL);
      RETURN_NOTHING
    }

  FUNCTION std::disable_sigusr1
    {
      CHECK_ARGUMENTS(0)
      CHECK_IO_ACCESS_RIGHTS
      signal(SIGUSR1, SIG_IGN);
      RETURN_NOTHING
    }


  FUNCTION std::enable_sigusr1
    {
      CHECK_ARGUMENTS(0)
      CHECK_IO_ACCESS_RIGHTS
      signal(SIGUSR1, SIG_DFL);
      RETURN_NOTHING
    }

  FUNCTION std::disable_sigusr2
    {
      CHECK_ARGUMENTS(0)
      CHECK_IO_ACCESS_RIGHTS
      signal(SIGUSR2, SIG_IGN);
      RETURN_NOTHING
    }


  FUNCTION std::enable_sigusr2
    {
      CHECK_ARGUMENTS(0)
      CHECK_IO_ACCESS_RIGHTS
      signal(SIGUSR2, SIG_DFL);
      RETURN_NOTHING
    }

#FUNCTION std::pipe
  {
    CHECK_ARGUMENTS(0)
    CHECK_RESULTS(2)
    CHECK_IO_ACCESS_RIGHTS
    int result;
    int fd[2];
    ACTION(pipe)
      result = pipe(fd);
    INFO
      INT(result)
    DATA
      INT(result)
    END
    if (result == -1) {
      create_error_message(
	module__builtin.constants_base[unique__std__IO_ERROR-1],
      "PIPE FAILED", errno, 0, NULL);
    } else {
      START_ARGUMENTS(2);
      ARGUMENTS(0) = file_descriptor_from_int(fd[0]);
      ARGUMENTS(1) = file_descriptor_from_int(fd[1]);
      RETURN
    }
  }

FUNCTION std::waitpid
  #
    waits for a child process to terminate

    Using "waitpid" to do it in a non-blocking way.

    Returns <undefined>/<undefined> if no child terminated

    Parameters: none

    Topic: POSIX
  {
    CHECK_ARGUMENTS(1)
    CHECK_IO_ACCESS_RIGHTS
    int status;
    int result;
    int pid;
    if (!process_id_to_int(ARGUMENTS(0), &pid)) return;
    EVENT(waitpid)
      do {
	result = waitpid(pid, &status, WNOHANG);
      } while (result == -1 && errno == EINTR);
    INFO
      INT(result)
      INT(status)
    DATA
      INT(result)
      INT(status)
    END
    if (result == -1) {
      create_error_message(
	module__builtin.constants_base[unique__std__IO_ERROR-1],
      "WAIT FAILED", errno, 0, NULL);
    } else {
      START_ARGUMENTS(2)
      ARGUMENTS(0) = process_id_from_int(result);
      ARGUMENTS(1) = from_int(status);
    }
  }

FUNCTION std::open_unix_socket
  #
    opens a UNIX domain socket

    The optional mode parameter is a string of the form "rwxrwxrwx". The
    default value is "rw-r--r--".

    Parameters:
      filename # the path and name of the socket

    Topic: POSIX

    See also: open_tcp_client_socket, open_tcp_server_socket, open, close,
	      read, write
  {
    CHECK_ARGUMENTS(1)
    CHECK_IO_ACCESS_RIGHTS
    char *filename = NULL;
    int result;
    int sock;
    struct sockaddr_un addr;
    if (!to_c_string(ARGUMENTS(0), &filename)) goto cleanup;
    EVENT(open_tcp_socket)
      sock = socket(AF_UNIX, SOCK_STREAM, 0);
      if (sock == -1) goto error;
      memset(&addr, 0, sizeof(struct sockaddr_un));
      addr.sun_family = AF_UNIX;
      strcpy(addr.sun_path, filename);
      do {
	result = connect(sock, (const struct sockaddr *)&addr, sizeof(addr));
      } while (result == -1 && errno == EINTR);
    INFO
      C_STRING(filename)
      INT(sock)
    DATA
      INT(sock)
    END
    if (result == -1) {
      error:
      create_error_message(
	module__builtin.constants_base[unique__std__IO_ERROR-1],
	"OPEN SOCKET FAILED", errno, 0, NULL);
    } else {
      PREPARE_SINGLE_RESULT(file_descriptor_from_int(sock))
    }
    cleanup:
    deallocate_memory(filename);
  }

FUNCTION std::send_file_descriptor
  #
    sends a message and a file descriptor over a socket
  {
    CHECK_ARGUMENTS(3)
    CHECK_IO_ACCESS_RIGHTS
    int sock;
    int fd;
    char *message = NULL;
    int result;
    if (!file_descriptor_to_int(ARGUMENTS(0), &sock)) return;
    if (TYPEOF(ARGUMENTS(1)) != TYPE(std_types::octet_string)) {
      invalid_arguments();
      return;
    }
    if (!file_descriptor_to_int(ARGUMENTS(2), &fd)) return;
    struct iovec iov;
    struct msghdr msg;
    struct cmsghdr *cmsg;
    char cmsgbuf[CMSG_SPACE(sizeof(int))];
    iov.iov_base =
      ARGUMENTS(1)->octet_string.data->buffer+ARGUMENTS(1)->octet_string.offset;
    iov.iov_len = ARGUMENTS(1)->octet_string.length;
    memset(&msg, 0, sizeof(struct msghdr));
    msg.msg_iov = &iov;
    msg.msg_iovlen = 1;
    msg.msg_control = cmsgbuf;
    msg.msg_controllen = sizeof(cmsgbuf);
    cmsg = CMSG_FIRSTHDR(&msg);
    cmsg->cmsg_level = SOL_SOCKET;
    cmsg->cmsg_type = SCM_RIGHTS;
    cmsg->cmsg_len = CMSG_LEN(sizeof(int));
    *((int *)CMSG_DATA(cmsg)) = fd;
    EVENT(send_file_descriptor)
      do {
	result = sendmsg(sock, &msg, 0);
      } while (result == -1 && errno == EINTR);
    INFO
      INT(sock)
      C_STRING(message)
      INT(fd)
      INT(result)
    DATA
      INT(result)
    END
    if (result == -1) {
      create_error_message(
	module__builtin.constants_base[unique__std__IO_ERROR-1],
	"SEND FILE DESCRIPTOR FAILED", errno, 0, NULL);
    } else {
      PREPARE_NO_RESULT
    }
  }

FUNCTION std::open_tcp_client_socket
  #
    opens a TCP socket and connects to the given host and port

    Parameters:
      uri # the universal resource identifier of the socket
      port_no # the port number to connect to
      no_delay # boolean (optional)

    Result:
      socket # the opened and connected socket

    Topic: POSIX

    See also: open_tcp_server_socket, open, close, read, write

    Example:

      open_tcp_client_socket! $fd "funkylang.org" 80
      write! $_bytes_written fd "
	GET / HTTP/1.1@cr;
	Host: funkylang.org@cr;
	Connection: close@cr;
	@cr;
      loop
	:
	  read! fd $buf 4096
	  if
	    buf.is_empty:
	      close! fd
	      println!
	    :
	      print! buf
	      next!

    Output:

      HTTP/1.1 200 OK
      Date: Thu, 01 Feb 2024 17:21:29 GMT
      Server: Apache
      Last-Modified: Tue, 16 Jan 2024 13:46:22 GMT
      ETag: "edd-60f105b18c05f"
      Accept-Ranges: bytes
      Content-Length: 3805
      Vary: Accept-Encoding
      Connection: close
      Content-Type: text/html

      <html>
      <head>
      <title>Funky</title>
      <link rel="stylesheet" href="style.css"/>
      </head>
      <body>
      ...
  {
    MIN_ARGUMENTS(2)
    MAX_ARGUMENTS(3)
    CHECK_IO_ACCESS_RIGHTS
    char *uri = NULL;
    int port_no;
    int no_delay = false;
    int result;
    int sock;
    struct hostent *server;
    struct sockaddr_in addr;
    if (!to_c_string(ARGUMENTS(0), &uri)) goto cleanup;
    if (!to_int(ARGUMENTS(1), &port_no)) goto cleanup;
    if (ARGUMENT_COUNT == 3) {
      if (!to_bool(ARGUMENTS(2), &no_delay)) return;
    }
    EVENT(open_tcp_client_socket)
      sock = socket(AF_INET, SOCK_STREAM, 0);
      if (sock == -1) goto error;
      int flags = fcntl(sock, F_GETFL, 0);
      if (flags == -1) goto error;
      if (fcntl(sock, F_SETFL, flags|O_NONBLOCK) == -1) goto error;
      if (no_delay) {
	int opt = 1;
	if (
	  setsockopt(sock, IPPROTO_TCP, TCP_NODELAY, &opt, sizeof(opt)) == -1
	) {
	  goto error;
	}
      }
      server = gethostbyname(uri);
      if (!server) goto error;
      memset(&addr, 0, sizeof(addr));
      addr.sin_family = AF_INET;
      addr.sin_port = htons(port_no);
      memcpy(&addr.sin_addr.s_addr,server->h_addr,server->h_length);
      do {
	result = connect(sock, (const struct sockaddr *)&addr, sizeof(addr));
      } while (result == -1 && errno == EINTR);
      if (result == -1 && errno == EINPROGRESS) result = 0;
      if (result == 0) {
	result = fcntl(sock, F_SETFL, flags);
      }
    INFO
      C_STRING(uri)
      INT(port_no)
      INT(sock)
    DATA
      INT(sock)
    END
    if (result == -1) {
      error:
      create_error_message(
	module__builtin.constants_base[unique__std__IO_ERROR-1],
	"OPEN_TCP_CLIENT_SOCKET FAILED", errno, 0, NULL);
    } else {
      PREPARE_SINGLE_RESULT(file_descriptor_from_int(sock))
    }
    cleanup:
    deallocate_memory(uri);
  }

FUNCTION std::open_tcp_server_socket
  #
    opens a TCP socket to listen for incoming connections

    Parameters:
      port_no # the port number to listen on
      backlog_count # the maximum number of pending connections
      reuse = false # reuse the socket, even it is still in TIME_WAIT state

    Result:
      socket # the opened and listening socket

    Topic: POSIX

    See also: open_tcp_client_socket, open, close, accept, read, write

    Example:

      open_tcp_server_socket! $fd 80 5
      loop
	:
	  accept! fd $client_fd
	  print! "New connection from " client_fd.serialize
	  ...
  {
    MIN_ARGUMENTS(2)
    MAX_ARGUMENTS(3)
    CHECK_IO_ACCESS_RIGHTS
    int port_no;
    int backlog_count;
    int do_reuse = false;
    int sock;
    int result;
    struct sockaddr_in addr;
    if (!to_int(ARGUMENTS(0), &port_no)) return;
    if (!to_int(ARGUMENTS(1), &backlog_count)) return;
    if (ARGUMENT_COUNT == 3) {
      if (!to_bool(ARGUMENTS(2), &do_reuse)) return;
    }
    EVENT(open_tcp_server_socket)
      sock = socket(AF_INET, SOCK_STREAM, 0);
      if (sock == -1) goto error;
      if (do_reuse) {
	int opt = 1;
	if (
	  setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt)) == -1
	) {
	  goto error;
	}
      }
      addr.sin_family = AF_INET;
      addr.sin_addr.s_addr = htonl(INADDR_ANY);
      addr.sin_port = htons(port_no);
      if (bind(sock, (struct sockaddr *)&addr, sizeof(addr)) == -1) goto error;
      if (listen(sock, backlog_count) == -1) goto error;
    INFO
      INT(port_no)
      INT(backlog_count)
      INT(sock)
    DATA
      INT(sock)
    END
    if (result == -1) {
      error:
      create_error_message(
	module__builtin.constants_base[unique__std__IO_ERROR-1],
	"OPEN_TCP_SERVER_SOCKET FAILED", errno, 0, NULL);
    } else {
      PREPARE_SINGLE_RESULT(file_descriptor_from_int(sock))
    }
  }

FUNCTION std::accept
  #
    accepts an incoming connection on a socket

    Parameter:
      socket # the socket to accept the connection on

    Returns:
      socket # a new socket for the accepted connection

    Topic: POSIX

    See also: open_tcp_server_socket, read, write, close

    Example:

      open_tcp_server_socket! $sockd 8080 5
      accept $conn sockd
      write! conn ...
  {
    CHECK_ARGUMENTS(1)
    CHECK_IO_ACCESS_RIGHTS
    int sock;
    int result;
    int conn;
    if (!file_descriptor_to_int(ARGUMENTS(0), &sock)) return;
    EVENT(accept)
      do {
	conn = accept(sock, NULL, 0);
      } while (conn == -1 && errno == EINTR);
      if (conn == -1) {
	create_error_message(
	  module__builtin.constants_base[unique__std__IO_ERROR-1],
	  "ACCEPT FAILED", errno, 0, NULL);
      }
    INFO
      INT(sock)
      INT(conn)
    DATA
      INT(conn)
    END
    if (conn != -1) {
      PREPARE_SINGLE_RESULT(file_descriptor_from_int(conn))
    }
  }

FUNCTION std::is_listening
  #
    checks if a socket is listening for incoming connections

    Parameters:
      socket # the socket to check

    Returns:
      bool # true if the socket is listening, false otherwise

    Topic: POSIX

    See also: open_tcp_socket, accept, read, write, close

    Example:

      open_tcp_server_socket! $sock 8080 5
      is_listening! $does_listen sock
      if does_listen ...
  {
    CHECK_ARGUMENTS(1)
    CHECK_IO_ACCESS_RIGHTS
    int sock;
    if (!file_descriptor_to_int(ARGUMENTS(0), &sock)) return;
    int result;
    int does_listen;
    socklen_t len = sizeof(does_listen);
    result = getsockopt(sock, SOL_SOCKET, SO_ACCEPTCONN, &does_listen, &len);
    if (result == -1) {
      create_error_message(
	module__builtin.constants_base[unique__std__IO_ERROR-1],
	"GETSOCKOPT FAILED", errno, 0, NULL);
    } else {
      RETURN_BOOLEAN(does_listen ? true : false)
    }
  }

FUNCTION std::get_first_mac_address
  #
    returns the first available MAC address of the system

    Returns:
      string # the MAC address as a 6-byte binary string
  {
    CHECK_ARGUMENTS(0)
    CHECK_IO_ACCESS_RIGHTS
    #ifndef __CYGWIN__
      struct ifaddrs *addrs, *ifa;
      getifaddrs(&addrs);
      for (ifa = addrs; ifa != NULL; ifa = ifa->ifa_next) {
	if (ifa->ifa_addr == NULL) continue;
	if (ifa->ifa_addr->sa_family != AF_PACKET) continue;
	if (ifa->ifa_name[0] == 'l' && ifa->ifa_name[1] == 'o') continue;
	struct sockaddr_ll *sdl = (struct sockaddr_ll *)ifa->ifa_addr;
	NODE *result = from_latin_1_string(
	  ((struct sockaddr_ll *)ifa->ifa_addr)->sll_addr, 6);
	freeifaddrs(addrs);
	RETURN_SINGLE_RESULT(result)
      }
      freeifaddrs(addrs);
    #endif
    RETURN_UNDEFINED
  }

TYPE std_types::shared_memory -> std_types::object
  int fd
  long size
  void *buf

METHOD std_types::shared_memory/_type
  {
    RUNTIME_ERROR("Attempt to call a shared memory object as a function!")
  }

METHOD long std_types::shared_memory/_debug_string
  (
    NODE *node,
    int indent,
    int max_depth,
    char *buf
  )
  {
    return debug_print(
      indent, buf, "<shared_memory %d: %ld>",
      node->shared_memory.fd, node->shared_memory.size);
  }

METHOD std_types::shared_memory/size_of
  {
    CHECK_ARGUMENTS(1)
    RETURN_SINGLE_RESULT(from_long(ARGUMENTS(0)->shared_memory.size))
  }

POLY std::file_descriptor_of

METHOD std_types::shared_memory/file_descriptor_of
  {
    CHECK_ARGUMENTS(1)
    RETURN_SINGLE_RESULT(
      file_descriptor_from_int(ARGUMENTS(0)->shared_memory.fd))
  }

POLY std::write_at

METHOD std_types::shared_memory/write_at
  {
    CHECK_ARGUMENTS(3)
    CHECK_IO_ACCESS_RIGHTS
    long position;
    if (!to_long(ARGUMENTS(1), &position)) return;
    if (TYPEOF(ARGUMENTS(2)) != TYPE(std_types::octet_string)) {
      invalid_arguments();
      return;
    }
    long length = ARGUMENTS(2)->octet_string.length;
    if (position < 1 || position+length-1 > ARGUMENTS(0)->shared_memory.size) {
      RUNTIME_ERROR("Invalid offset or length!")
      return;
    }
    memcpy(
      ARGUMENTS(0)->shared_memory.buf+position-1,
      ARGUMENTS(2)->octet_string.data->buffer+ARGUMENTS(2)->octet_string.offset,
      length);
    RETURN_NOTHING
  }

FUNCTION std::create_shared_memory
  #
    creates a block of shared memory

    Parameters:
      filename # the name of the shared memory block
      size # the size of the shared memory block

    Returns:
      shm # the shared memory block
  {
    CHECK_ARGUMENTS(2)
    CHECK_IO_ACCESS_RIGHTS
    #ifdef __ANDROID__
      RUNTIME_ERROR("Shared memory is not supported on Android!")
    #else
      char *filename = NULL;
      long size;
      int fd;
      if (!to_c_string(ARGUMENTS(0), &filename)) goto cleanup;
      if (!to_long(ARGUMENTS(1), &size)) goto cleanup;
      fd = shm_open(filename, O_RDWR|O_CREAT|O_TRUNC|O_EXCL, 0600);
      if (fd == -1) {
	create_error_message(
	  module__builtin.constants_base[unique__std__IO_ERROR-1],
	  "SHM_OPEN FAILED", errno, 0, NULL);
	goto cleanup;
      }
      if (ftruncate(fd, size) == -1) {
	create_error_message(
	  module__builtin.constants_base[unique__std__IO_ERROR-1],
	  "FTRUNCATE FAILED", errno, 0, NULL);
	goto cleanup;
      }
      void *buf = mmap(NULL, size, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);
      if (buf == MAP_FAILED) {
	create_error_message(
	  module__builtin.constants_base[unique__std__IO_ERROR-1],
	  "MMAP FAILED", errno, 0, NULL);
	goto cleanup;
      }
      PREPARE_SINGLE_RESULT(CREATE(std_types::shared_memory, fd, size, buf))
      cleanup:
      deallocate_memory(filename);
    #endif
  }
