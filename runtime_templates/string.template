#
  Copyright (C) 2020 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Topics: Strings

POLY std::to_utf8
  #
    returns an utf8-encoded octet string

    Topic: Strings

TYPE std_types::string -> std_types::generic_list
  #
    the prototype object for all strings

    Topic: Collections

METHOD std_types::string/_type
  {
    RUNTIME_ERROR("Attempt to call the string prototype object as a function!")
  }

DATA
  typedef struct {
    long size; // in octets
    long length; // in 8-bit-characters (which is the same as octets)
    uint8_t buffer[];
  } OCTET_DATA;

TYPE std_types::octet_string -> std_types::string
  #
    a string where all characters fit into an octet

    This kind of string can be used for input/output-operations.

    Topic: Collections
  long offset # usually zero
  long length
  OCTET_DATA *data

DATA
  typedef struct {
    long size; // in bytes
    long length;  // in (32-bit) characters
    uint32_t buffer[];
  } WIDE_DATA;

TYPE std_types::wide_string -> std_types::string
  long offset # usually zero
  long length
  WIDE_DATA *data

OBJECT std::empty_string -> std_types::octet_string
  #
    the empty string
  0, 0, NULL

METHOD std_types::octet_string/_type
  #
    a string of zero or more 8-bit characters

    The type function supports positive and negative indices from
    1 to the length of the sequence starting at the left or form -1 to
    -length of the sequence starting at the right.

    Replacing any character of the string with a 32-bit character will
    produce a <std_types::wide_string>.
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    CHECK_RESULTS(1)
    long idx;
    CHECK(to_long(ARGUMENTS(0), &idx))
    long length = MYSELF->octet_string.length;
    if (idx < 0) idx = length+idx+1;
    if (idx < 1 || idx > length) INVALID_INDEX(MYSELF);
    long offset = MYSELF->octet_string.offset;
    if (ARGUMENT_COUNT == 1)
      RETURN_SINGLE_RESULT(
	from_uchar32(MYSELF->octet_string.data->buffer[offset+idx-1]))
    uint32_t chr;
    CHECK(to_uchar32(ARGUMENTS(1), &chr));
    OCTET_DATA *data = MYSELF->octet_string.data;
    if (data->buffer[idx-1] == chr) RETURN_SINGLE_RESULT(MYSELF)
    if (chr > 0xff) {
      long size = ALLOCATION_SIZE(4*length);
      WIDE_DATA *new_data = allocate_large(sizeof(WIDE_DATA)+size);
      long i;
      for (i = 0; i < length; ++i) {
	new_data->buffer[i] = data->buffer[offset+i];
      }
      new_data->size = size;
      new_data->length = length;
      new_data->buffer[idx-1] = chr;
      RETURN_SINGLE_RESULT(CREATE(std_types::wide_string, 0, length, new_data))
    } else {
      long size = ALLOCATION_SIZE(length);
      OCTET_DATA *new_data = allocate_large(sizeof(OCTET_DATA)+size);
      memcpy(new_data->buffer, data->buffer+offset, length);
      new_data->size = size;
      new_data->length = length;
      new_data->buffer[idx-1] = chr;
      RETURN_SINGLE_RESULT(CREATE(std_types::octet_string, 0, length, new_data))
    }
  }

METHOD std_types::wide_string/_type
  #
    a sequence of zero or more 32-bit characters

    The type function supports positive and negative indices from
    1 to the length of the sequence starting at the left or form -1 to
    -length of the sequence starting at the right.

    If due to replacement there is no more 32-character in the string it is
    automatically replaced with a <std_types::wide_string>.
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    CHECK_RESULTS(1)
    long idx;
    CHECK(to_long(ARGUMENTS(0), &idx))
    long length = MYSELF->wide_string.length;
    if (idx < 0) idx = length+idx+1;
    if (idx < 1 || idx > length) INVALID_INDEX(MYSELF);
    long offset = MYSELF->wide_string.offset;
    if (ARGUMENT_COUNT == 1)
      RETURN_SINGLE_RESULT(
	from_uchar32(MYSELF->wide_string.data->buffer[offset+idx-1]))
    uint32_t chr;
    CHECK(to_uchar32(ARGUMENTS(1), &chr));
    WIDE_DATA *data = MYSELF->wide_string.data;
    if (data->buffer[idx-1] == chr) RETURN_SINGLE_RESULT(MYSELF)
    if (chr <= 0xff && data->buffer[offset+idx-1] > 0xff) {
      long i;
      for (i = 0; i < length; ++i) {
	if (i != idx-1 && data->buffer[offset+i] > 0xff) goto quad;
      }
      long size = ALLOCATION_SIZE(length);
      OCTET_DATA *new_data = allocate_large(sizeof(OCTET_DATA)+size);
      for (i = 0; i < length; ++i) {
	new_data->buffer[i] = data->buffer[offset+i];
      }
      new_data->size = size;
      new_data->length = length;
      new_data->buffer[idx-1] = chr;
      RETURN_SINGLE_RESULT(CREATE(std_types::octet_string, 0, length, new_data))
    }
    quad:;
    long size = ALLOCATION_SIZE(4*length);
    WIDE_DATA *new_data = allocate_large(sizeof(WIDE_DATA)+size);
    memcpy(new_data->buffer, data->buffer+offset, 4*length);
    new_data->size = size;
    new_data->length = length;
    new_data->buffer[idx-1] = chr;
    RETURN_SINGLE_RESULT(CREATE(std_types::wide_string, 0, length, new_data))
  }

METHOD long std_types::octet_string/_debug_string
  (
    NODE *node,
    int indent,
    int max_depth,
    char *buf
  )
  {
    long len = 0;
    if (indent < 0) {
      if (buf) *buf++ = ' ';
      ++len;
    }
    if (buf) *buf++ = '\"';
    ++len;
    long i;
    long s = node->octet_string.offset;
    long e = s+node->octet_string.length;
    for (i = s; i < e; ++i) {
      uint8_t chr = node->octet_string.data->buffer[i];
      if (chr >= 0x20 && chr <= 0x7e) {
	if (chr == '\"') {
	  len += print(&buf, "@quot;");
	} else if (chr == '@') {
	  len += print(&buf, "@@");
	} else {
	  if (buf) *buf++ = chr;
	  ++len;
	}
      } else {
	len += print(&buf, "@0x%x;", chr);
      }
    }
    len += print(&buf, "\"\n");
    return len;
  }

METHOD long std_types::wide_string/_debug_string
  (
    NODE *node,
    int indent,
    int max_depth,
    char *buf
  )
  {
    long len = 0;
    if (indent < 0) {
      if (buf) *buf++ = ' ';
      ++len;
    }
    if (buf) *buf++ = '\"';
    ++len;
    long i;
    long s = node->wide_string.offset;
    long e = s+node->wide_string.length;
    for (i = s; i < e; ++i) {
      uint32_t chr = node->wide_string.data->buffer[i];
      if (chr >= 0x20 && chr <= 0x7e) {
	if (chr == '\"') {
	  len += print(&buf, "@quot;");
	} else if (chr == '@') {
	  len += print(&buf, "@@");
	} else {
	  if (buf) *buf++ = chr;
	  ++len;
	}
      } else {
	len += print(&buf, "@0x%x;", chr);
      }
    }
    len += print(&buf, "\"\n");
    return len;
  }

METHOD int std_types::octet_string/_get_item_of
  (
    NODE *node,
    long idx,
    NODE **result_p
  )
  {
    long length = node->octet_string.length;
    if (idx < 0 || idx >= length) {
      invalid_index(node);
      return false;
    }
    *result_p =
      from_uchar32(
	node->octet_string.data->buffer[node->octet_string.offset+idx]);
    return true;
  }

METHOD int std_types::wide_string/_get_item_of
  (
    NODE *node,
    long idx,
    NODE **result_p
  )
  {
    long length = node->wide_string.length;
    if (idx < 0 || idx >= length) {
      invalid_index(node);
      return false;
    }
    *result_p =
      from_uchar32(
	node->wide_string.data->buffer[node->wide_string.offset+idx]);
    return true;
  }

METHOD int std_types::octet_string/_to_c_string
  (
    NODE *node,
    char **result_p
  )
  {
    long offset = node->octet_string.offset;
    long size = node->octet_string.length;
    char *buf = allocate_memory(size+1);
    memcpy(buf, node->octet_string.data->buffer+offset, size);
    buf[size] = 0;
    *result_p = buf;
    return true;
  }

METHOD int std_types::octet_string/_to_octets
  (
    NODE *node,
    const uint8_t **buf_p,
    long *size_p
  )
  {
    long offset = node->octet_string.offset;
    long size = node->octet_string.length;
    uint8_t *buf = allocate_memory(size);
    memcpy(buf, node->octet_string.data->buffer+offset, size);
    *buf_p = buf;
    *size_p = size;
    return true;
  }

FUNCTION NODE *from_latin_1_string
  (
    const uint8_t *str,
    long len
  )
  {
    if (len == 0) return VAR(std::empty_string);
    long size = ALLOCATION_SIZE(len);
    OCTET_DATA *data = allocate_large(sizeof(OCTET_DATA)+size);
    data->size = size;
    data->length = len;
    memcpy(data->buffer, str, len);
    return CREATE(std_types::octet_string, 0, len, data);
  }

FUNCTION NODE *from_uint32_string
  (
    const uint32_t *str,
    long len
  )
  {
    long size = ALLOCATION_SIZE(4*len);
    WIDE_DATA *data = allocate_large(sizeof(WIDE_DATA)+size);
    data->size = size;
    data->length = len;
    memcpy(data->buffer, str, 4*len);
    return CREATE(std_types::wide_string, 0, len, data);
  }

FUNCTION NODE *from_c_string
  (
    const char *str
  )
  {
    return from_latin_1_string((const uint8_t *)str, strlen(str));
  }

METHOD int std_types::octet_string/_length_of
  (
    NODE *node,
    long *result_p
  )
  {
    *result_p = node->octet_string.length;
    return true;
  }

METHOD int std_types::wide_string/_length_of
  (
    NODE *node,
    long *result_p
  )
  {
    *result_p = node->wide_string.length;
    return true;
  }

METHOD std_types::octet_string/length_of
  #
    returns the number of items within the list
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    RETURN_SINGLE_RESULT(from_long(ARGUMENTS(0)->octet_string.length))
  }

METHOD std_types::wide_string/length_of
  #
    returns the number of items within the list
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    RETURN_SINGLE_RESULT(from_long(ARGUMENTS(0)->wide_string.length))
  }

METHOD std_types::octet_string/is_empty
  #
    returns whether the octet string is empty or not
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    RETURN_BOOLEAN(ARGUMENTS(0)->octet_string.length == 0)
  }

METHOD std_types::octet_string/is_not_empty
  #
    returns whether the octet string is empty or not
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    RETURN_BOOLEAN(ARGUMENTS(0)->octet_string.length > 0)
  }

METHOD std_types::wide_string/is_empty
  #
    returns whether the quad-octet string is empty or not
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    RETURN_BOOLEAN(ARGUMENTS(0)->wide_string.length == 0)
  }

METHOD std_types::wide_string/is_not_empty
  #
    returns whether the quad-octet string is empty or not
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    RETURN_BOOLEAN(ARGUMENTS(0)->wide_string.length > 0)
  }

#METHOD std_types::octet_string/new
  {
    CHECK_ARGUMENTS(2)
    if (TYPEOF(ARGUMENTS(1)) != TYPE(std_types::octet_string)) INVALID_ARGUMENTS
    NODE *prototype = ARGUMENTS(0);
    NODE *clone =
      CREATE(
	std_types::octet_string,
	ARGUMENTS(1)->octet_string.offset,
	ARGUMENTS(1)->octet_string.length,
	ARGUMENTS(1)->octet_string.data
      );
    clone->attributes = prototype->attributes;
    RETURN_SINGLE_RESULT(clone)
  }

#METHOD std_types::wide_string/new
  {
    CHECK_ARGUMENTS(2)
    if (TYPEOF(ARGUMENTS(1)) != TYPE(std_types::wide_string)) INVALID_ARGUMENTS
    NODE *prototype = ARGUMENTS(0);
    NODE *clone =
      CREATE(
	std_types::wide_string,
	ARGUMENTS(1)->wide_string.offset,
	ARGUMENTS(1)->wide_string.length,
	ARGUMENTS(1)->wide_string.data
      );
    clone->attributes = prototype->attributes;
    RETURN_SINGLE_RESULT(clone)
  }

METHOD std_types::octet_string/push
  #
    adds a single character at the front of the string
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    uint32_t chr_code;
    CHECK(to_uchar32(ARGUMENTS(1), &chr_code));
    NODE *self = ARGUMENTS(0);
    long left_start_offset = self->octet_string.offset;
    long length = self->octet_string.length;
    long end_offset = left_start_offset+length;
    long new_length = length+1;
    OCTET_DATA *data = self->octet_string.data;
    if (chr_code <= 0xff) {
      if (!data || data->size < end_offset+1 || data->length != end_offset) {
	long new_size = ALLOCATION_SIZE(2*new_length);
	OCTET_DATA *new_data = allocate_large(sizeof(OCTET_DATA)+new_size);
	if (data) {
	  memcpy(
	    new_data->buffer,
	    data->buffer+left_start_offset,
	    length);
	}
	left_start_offset = 0;
	end_offset = length;
	new_data->size = new_size;
	data = new_data;
      }
      data->buffer[end_offset] = (uint8_t)chr_code;
      data->length = end_offset+1;
      RETURN_SINGLE_RESULT(
	CREATE(std_types::octet_string, left_start_offset, new_length, data))
    } else {
      long new_size = ALLOCATION_SIZE(4*2*new_length);
      WIDE_DATA *new_data = allocate_large(sizeof(WIDE_DATA)+new_size);
      new_data->size = new_size;
      new_data->length = new_length;
      if (data) {
	long idx;
	for (idx = 0; idx < length; ++idx) {
	  new_data->buffer[idx] = data->buffer[left_start_offset+idx];
	}
      }
      new_data->buffer[length] = chr_code;
      RETURN_SINGLE_RESULT(
	CREATE(std_types::wide_string, 0, new_length, new_data))
    }
  }

METHOD std_types::wide_string/push
  #
    adds a single character at the front of the string
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    uint32_t chr_code;
    CHECK(to_uchar32(ARGUMENTS(1), &chr_code));
    NODE *self = ARGUMENTS(0);
    long start_offset = self->wide_string.offset;
    long length = self->wide_string.length;
    long end_offset = start_offset+length;
    long new_length = length+1;
    WIDE_DATA *data = self->wide_string.data;
    if (!data || data->size < 4*(end_offset+1) || data->length != end_offset) {
      long new_size = ALLOCATION_SIZE(4*2*new_length);
      WIDE_DATA *new_data = allocate_large(sizeof(WIDE_DATA)+new_size);
      if (data) {
	memcpy(
	  new_data->buffer,
	  data->buffer+start_offset,
	  4*length);
      }
      start_offset = 0;
      end_offset = length;
      new_data->size = new_size;
      data = new_data;
    }
    data->buffer[end_offset] = chr_code;
    data->length = end_offset+1;
    RETURN_SINGLE_RESULT(
      CREATE(std_types::wide_string, start_offset, new_length, data))
  }

METHOD std_types::octet_string/append
  #
    appends two or more strings
  {
    MIN_ARGUMENTS(2)
    CHECK_RESULTS(1)
    NODE *left = ARGUMENTS(0);
    long left_length = left->octet_string.length;
    long new_length = left_length;
    int is_a_std_types::wide_string = false;
    int i;
    for (i = 1; i < ARGUMENT_COUNT; ++i) {
      NODE *right = ARGUMENTS(i);
      if (TYPEOF(right) == TYPE(std_types::wide_string)) {
	is_a_std_types::wide_string = true;
      } else if (TYPEOF(right) != TYPE(std_types::octet_string)) {
	INVALID_ARGUMENTS
      }
      new_length += right->octet_string.length;
    }
    if (new_length == left_length) RETURN_SINGLE_RESULT(left)
    if (left_length == 0 && ARGUMENT_COUNT == 2) {
      RETURN_SINGLE_RESULT(ARGUMENTS(1))
    }
    long left_offset = left->octet_string.offset;
    OCTET_DATA *data = left->octet_string.data;
    if (is_a_std_types::wide_string) {
      long new_size = ALLOCATION_SIZE(4*2*new_length);
      WIDE_DATA *new_data =
	allocate_large(sizeof(WIDE_DATA)+new_size);
      new_data->size = new_size;
      new_data->length = new_length;
      long idx;
      for (idx = 0; idx < left_length; ++idx) {
	new_data->buffer[idx] = data->buffer[left_offset+idx];
      }
      long offset = left_length;
      for (i = 1; i < ARGUMENT_COUNT; ++i) {
	NODE *right = ARGUMENTS(i);
	long right_offset = right->octet_string.offset;
	long right_length = right->octet_string.length;
	if (TYPEOF(right) == TYPE(std_types::wide_string)) {
	  memcpy(
	    new_data->buffer+offset,
	    right->wide_string.data->buffer+right_offset,
	    4*right_length);
	} else {
	  for (idx = 0; idx < right_length; ++idx) {
	    new_data->buffer[offset+idx] =
	      right->octet_string.data->buffer[right_offset+idx];
	  }
	}
	offset += right_length;
      }
      RETURN_SINGLE_RESULT(
	CREATE(std_types::wide_string, 0, new_length, new_data))
    } else {
      if (
	!data || data->size < left_offset+new_length ||
	data->length != left_offset+left_length
      ) {
	long new_size = ALLOCATION_SIZE(2*new_length);
	OCTET_DATA *new_data = allocate_large(sizeof(OCTET_DATA)+new_size);
	if (data) {
	  memcpy(new_data->buffer, data->buffer+left_offset, left_length);
	}
	left_offset = 0;
	new_data->size = new_size;
	data = new_data;
      }
      long offset = left_offset+left_length;
      for (i = 1; i < ARGUMENT_COUNT; ++i) {
	NODE *right = ARGUMENTS(i);
	long right_length = right->octet_string.length;
	memcpy(
	  data->buffer+offset,
	  right->octet_string.data->buffer+right->octet_string.offset,
	  right_length);
	offset += right_length;
      }
      data->length = left_offset+new_length;
      RETURN_SINGLE_RESULT(
	CREATE(std_types::octet_string, left_offset, new_length, data))
    }
  }

METHOD std_types::wide_string/append
  #
    appends two or more strings
  {
    MIN_ARGUMENTS(2)
    CHECK_RESULTS(1)
    NODE *left = ARGUMENTS(0);
    long left_length = left->wide_string.length;
    long new_length = left_length;
    int i;
    for (i = 1; i < ARGUMENT_COUNT; ++i) {
      NODE *right = ARGUMENTS(i);
      if (
	TYPEOF(right) == TYPE(std_types::octet_string) ||
	TYPEOF(right) == TYPE(std_types::wide_string)
      ) {
	new_length += right->octet_string.length;
      } else {
	INVALID_ARGUMENTS
      }
    }
    if (new_length == left_length) RETURN_SINGLE_RESULT(left)
    if (left_length == 0 && ARGUMENT_COUNT == 2) {
      RETURN_SINGLE_RESULT(ARGUMENTS(1))
    }
    long left_offset = left->wide_string.offset;
    WIDE_DATA *data = left->wide_string.data;
    if (
      data->size < 4*(left_offset+new_length) ||
      data->length != left_offset+left_length
    ) {
      long new_size = ALLOCATION_SIZE(4*2*new_length);
      WIDE_DATA *new_data =
	allocate_large(sizeof(WIDE_DATA)+new_size);
      memcpy(new_data->buffer, data->buffer+left_offset, 4*left_length);
      left_offset = 0;
      new_data->size = new_size;
      data = new_data;
    }
    long offset = left_offset+left_length;
    for (i = 1; i < ARGUMENT_COUNT; ++i) {
      NODE *right = ARGUMENTS(i);
      long right_offset = right->octet_string.offset;
      long right_length = right->octet_string.length;
      if (TYPEOF(right) == TYPE(std_types::wide_string)) {
	memcpy(
	  data->buffer+offset,
	  right->wide_string.data->buffer+right_offset,
	  4*right_length);
      } else {
	long idx;
	for (idx = 0; idx < right_length; ++idx) {
	  data->buffer[offset+idx] =
	    right->octet_string.data->buffer[right_offset+idx];
	}
      }
      offset += right_length;
    }
    data->length = left_offset+new_length;
    RETURN_SINGLE_RESULT(
      CREATE(std_types::wide_string, left_offset, new_length, data))
  }

METHOD std_types::octet_string/range
  #
    returns a string containing the specified subrange
  {
    CHECK_ARGUMENTS(3)
    CHECK_RESULTS(1)
    NODE *self = ARGUMENTS(0);
    long first_idx, last_idx;
    CHECK(to_long(ARGUMENTS(1), &first_idx))
    CHECK(to_long(ARGUMENTS(2), &last_idx))
    long length = self->octet_string.length;
    if (first_idx < 0) first_idx = length+first_idx+1;
    if (last_idx < 0) last_idx = length+last_idx+1;
    if (first_idx < 1 || first_idx > length+1) INVALID_INDEX(self);
    if (last_idx < 0 || last_idx > length) INVALID_INDEX(self);
    if (first_idx > last_idx+1) INVALID_ARGUMENTS
    if (first_idx == 1 && last_idx == length) RETURN_SINGLE_RESULT(self)
    long new_len = last_idx-first_idx+1;
    if (new_len == 0) RETURN_SINGLE_RESULT(VAR(std::empty_string))
    RETURN_SINGLE_RESULT(
      CREATE(
	std_types::octet_string,
	self->octet_string.offset+first_idx-1,
	new_len, self->octet_string.data))
  }

METHOD std_types::wide_string/range
  #
    returns a string containing the specified subrange
  {
    CHECK_ARGUMENTS(3)
    CHECK_RESULTS(1)
    NODE *self = ARGUMENTS(0);
    long first_idx, last_idx;
    CHECK(to_long(ARGUMENTS(1), &first_idx));
    CHECK(to_long(ARGUMENTS(2), &last_idx));
    long length = self->octet_string.length;
    if (first_idx < 0) first_idx = length+first_idx+1;
    if (last_idx < 0) last_idx = length+last_idx+1;
    if (first_idx < 1 || first_idx > length+1) INVALID_INDEX(self);
    if (last_idx < 0 || last_idx > length) INVALID_INDEX(self);
    if (first_idx > last_idx+1) INVALID_ARGUMENTS
    if (first_idx == 1 && last_idx == length) RETURN_SINGLE_RESULT(self)
    long new_len = last_idx-first_idx+1;
    if (new_len == 0) RETURN_SINGLE_RESULT(VAR(std::empty_string))
    long idx;
    long offset = self->wide_string.offset;
    WIDE_DATA *data = self->wide_string.data;
    for (idx = first_idx-1; idx < last_idx; ++idx) {
      if (data->buffer[offset+idx] > 0xff) {
	RETURN_SINGLE_RESULT(
	  CREATE(
	    std_types::wide_string, offset+first_idx-1, new_len, data))
      }
    }
    long new_size = ALLOCATION_SIZE(new_len);
    OCTET_DATA *new_data = allocate_large(sizeof(OCTET_DATA)+new_size);
    new_data->size = new_size;
    new_data->length = new_len;
    offset += first_idx-1;
    for (idx = 0; idx < new_len; ++idx) {
      new_data->buffer[idx] = data->buffer[idx+offset];
    }
    RETURN_SINGLE_RESULT(CREATE(std_types::octet_string, 0, new_len, new_data))
  }

METHOD std_types::octet_string/hash
  #
    returns a numerical hash value
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    NODE *self = ARGUMENTS(0);
    uint8_t *buf = self->octet_string.data->buffer+self->octet_string.offset;
    long length = self->octet_string.length;
    uint32_t hash = 0x7890abcd;
    long i;
    if (length > 16) {
      for (i = length-8; i < length; ++i) {
	hash = (hash << 7) | (hash >> 25);
	hash ^= buf[i];
      }
      length = 8;
    }
    for (i = 0; i < length; ++i) {
      hash = (hash << 7) | (hash >> 25);
      hash ^= buf[i];
    }
    hash *= 234256597;
    hash ^= hash >> 26 | hash << 6;
    RETURN_SINGLE_RESULT(from_uint32(hash))
  }

METHOD std_types::wide_string/hash
  #
    returns a numerical hash value
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    NODE *self = ARGUMENTS(0);
    uint32_t *buf =
      self->wide_string.data->buffer+self->wide_string.offset;
    long length = self->wide_string.length;
    uint32_t hash = 0x3456789a;
    long i;
    if (length > 16) {
      for (i = length-8; i < length; ++i) {
	hash = (hash << 13) | (hash >> 19);
	hash ^= buf[i];
      }
      length = 8;
    }
    for (i = 0; i < length; ++i) {
      hash = (hash << 13) | (hash >> 19);
      hash ^= buf[i];
    }
    hash *= 234256597;
    hash ^= hash >> 22 | hash << 10;
    RETURN_SINGLE_RESULT(from_uint32(hash))
  }

METHOD std_types::octet_string/equal
  #
    returns <true> if both strings have the same contents
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    NODE *left = ARGUMENTS(0);
    NODE *right = ARGUMENTS(1);
    if (left == right) RETURN_TRUE
    if (TYPEOF(right) != TYPE(std_types::octet_string)) {
      if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::error)) {
	INVALID_ARGUMENTS
      } else {
	RETURN_FALSE
      }
    }
    OCTET_DATA *left_data = left->octet_string.data;
    OCTET_DATA *right_data = right->octet_string.data;
    long left_offset = left->octet_string.offset;
    long right_offset = right->octet_string.offset;
    long length = left->octet_string.length;
    if (length != right->octet_string.length) RETURN_FALSE
    if (left_offset == right_offset && left_data == right_data) RETURN_TRUE
    long i;
    for (i = 0; i < length; ++i) {
      if (left_data->buffer[left_offset+i] != right_data->buffer[right_offset+i]) RETURN_FALSE
    }
    if (left_offset == right_offset) {
      // join the two versions of the string data to simplify future comparisons
      join_nodes(&left->octet_string.data, &right->octet_string.data);
    }
    RETURN_TRUE
  }

METHOD std_types::wide_string/equal
  #
    returns <true> if both strings have the same contents
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    NODE *left = ARGUMENTS(0);
    NODE *right = ARGUMENTS(1);
    if (left == right) RETURN_TRUE
    if (TYPEOF(right) != TYPE(std_types::wide_string)) RETURN_FALSE
    WIDE_DATA *left_data = left->wide_string.data;
    WIDE_DATA *right_data = right->wide_string.data;
    long left_offset = left->wide_string.offset;
    long right_offset = right->wide_string.offset;
    long length = left->wide_string.length;
    if (length != right->wide_string.length) RETURN_FALSE
    if (left_offset == right_offset && left_data == right_data) RETURN_TRUE
    long i;
    for (i = 0; i < length; ++i) {
      if (left_data->buffer[left_offset+i] != right_data->buffer[right_offset+i]) RETURN_FALSE
    }
    if (left_offset == right_offset) {
      // join the two versions of the string data to simplify future comparisons
      join_nodes(&left->wide_string.data, &right->wide_string.data);
    }
    RETURN_TRUE
  }

METHOD std_types::octet_string/less
  #
    compares the two strings character by character
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    NODE *left = ARGUMENTS(0);
    NODE *right = ARGUMENTS(1);
    if (left == right) RETURN_FALSE
    if (TYPEOF(right) == TYPE(std_types::octet_string)) {
      OCTET_DATA *left_data = left->octet_string.data;
      OCTET_DATA *right_data = right->octet_string.data;
      long left_offset = left->octet_string.offset;
      long right_offset = right->octet_string.offset;
      long left_length = left->octet_string.length;
      long right_length = right->octet_string.length;
      if (left_offset == right_offset && left_length == right_length && left_data == right_data)
	RETURN_FALSE
      long length = left_length;
      if (right_length < length) length = right_length;
      long i;
      for (i = 0; i < length; ++i) {
	uint8_t left_chr = left_data->buffer[left_offset+i];
	uint8_t right_chr = right_data->buffer[right_offset+i];
	if (left_chr < right_chr) RETURN_TRUE
	if (left_chr > right_chr) RETURN_FALSE
      }
      if (left_length < right_length) RETURN_TRUE
      if (left_offset == right_offset && left_length == right_length) { // both strings are equal!
	// join the two versions of the string data to simplify future comparisons
	join_nodes(&left->octet_string.data, &right->octet_string.data);
      }
      RETURN_FALSE
    } else if (TYPEOF(right) == TYPE(std_types::wide_string)) {
      OCTET_DATA *left_data = left->octet_string.data;
      WIDE_DATA *right_data = right->wide_string.data;
      long left_offset = left->octet_string.offset;
      long right_offset = right->wide_string.offset;
      long left_length = left->octet_string.length;
      long right_length = right->wide_string.length;
      long length = left_length;
      if (right_length < length) length = right_length;
      long i;
      for (i = 0; i < length; ++i) {
	uint32_t left_chr = left_data->buffer[left_offset+i];
	uint32_t right_chr = right_data->buffer[right_offset+i];
	if (left_chr < right_chr) RETURN_TRUE
	if (left_chr > right_chr) RETURN_FALSE
      }
      if (left_length < right_length) RETURN_TRUE
      RETURN_FALSE
    } else {
      INVALID_ARGUMENTS
    }
  }

METHOD std_types::wide_string/less
  #
    compares the two strings character by character
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    NODE *left = ARGUMENTS(0);
    NODE *right = ARGUMENTS(1);
    if (left == right) RETURN_FALSE
    if (TYPEOF(right) == TYPE(std_types::octet_string)) {
      WIDE_DATA *left_data = left->wide_string.data;
      OCTET_DATA *right_data = right->octet_string.data;
      long left_offset = left->wide_string.offset;
      long right_offset = right->octet_string.offset;
      long left_length = left->wide_string.length;
      long right_length = right->octet_string.length;
      long length = left_length;
      if (right_length < length) length = right_length;
      long i;
      for (i = 0; i < length; ++i) {
	uint32_t left_chr = left_data->buffer[left_offset+i];
	uint32_t right_chr = right_data->buffer[right_offset+i];
	if (left_chr < right_chr) RETURN_TRUE
	if (left_chr > right_chr) RETURN_FALSE
      }
      if (left_length < right_length) RETURN_TRUE
      RETURN_FALSE
    } else if (TYPEOF(right) == TYPE(std_types::wide_string)) {
      WIDE_DATA *left_data = left->wide_string.data;
      WIDE_DATA *right_data = right->wide_string.data;
      long left_offset = left->wide_string.offset;
      long right_offset = right->wide_string.offset;
      long left_length = left->wide_string.length;
      long right_length = right->wide_string.length;
      if (left_offset == right_offset && left_length == right_length && left_data == right_data)
	RETURN_FALSE
      long length = left_length;
      if (right_length < length) length = right_length;
      long i;
      for (i = 0; i < length; ++i) {
	uint32_t left_chr = left_data->buffer[left_offset+i];
	uint32_t right_chr = right_data->buffer[right_offset+i];
	if (left_chr < right_chr) RETURN_TRUE
	if (left_chr > right_chr) RETURN_FALSE
      }
      if (left_length < right_length) RETURN_TRUE
      if (left_offset == right_offset && left_length == right_length) { // both strings are equal!
	// join the two versions of the string data to simplify future comparisons
	join_nodes(&left->octet_string.data, &right->octet_string.data);
      }
      RETURN_FALSE
    } else {
      INVALID_ARGUMENTS
    }
  }

METHOD std_types::octet_string/width_of
  #
    returns the number of character positions needed to print the string
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    RETURN_SINGLE_RESULT(from_long(ARGUMENTS(0)->octet_string.length))
  }

METHOD std_types::wide_string/width_of
  #
    returns the number of character positions needed to print the string
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    long width = 0;
    NODE *string = ARGUMENTS(0);
    WIDE_DATA *data = string->wide_string.data;
    long offset = string->wide_string.offset;
    long length = string->wide_string.length;
    for (long i = 0; i < length; ++i) {
      uint32_t chr = data->buffer[offset+i];
      if (is_a_wide_character(chr)) {
	width += 2;
      } else {
	++width;
      }
    }
    RETURN_SINGLE_RESULT(from_long(width))
  }

METHOD std_types::octet_string/from_utf8
  #
    converts a string from utf-8 encoding to code points
  {
    CHECK_ARGUMENTS(1)
    NODE *self = ARGUMENTS(0);
    long offset = self->octet_string.offset;
    long length = self->octet_string.length;
    uint8_t *buf = self->octet_string.data->buffer+offset;
    int is_latin_1 = true;
    uint8_t chr;
    long src_idx, dest_idx;
    // check vor valid utf-8 encoding
    // the allowed maximum size is 32 bits instead of 21 bits!
    long new_length = 0;
    src_idx = 0;
    while (src_idx < length) {
      int n; // number of continuation octets
      chr = buf[src_idx++];
      if (chr >= 0x80) {
	if ((chr & 0xe0) == 0xc0) { // 2 byte code
	  if (chr & 0x3c) is_latin_1 = false; // more than 8 bits
	  n = 1;
	} else if ((chr & 0xf0) == 0xe0) { // 3 byte code
	  is_latin_1 = false;
	  n = 2;
	} else if ((chr & 0xf8) == 0xf0) { // 4 byte code
	  is_latin_1 = false;
	  n = 3;
	} else if ((chr & 0xfc) == 0xf8) { // 5 byte code
	  is_latin_1 = false;
	  n = 4;
	} else if ((chr & 0xfe) == 0xfc) { // 6 byte code
	  is_latin_1 = false;
	  n = 5;
	} else if (chr == 0xfe) { // 7 byte code
	  if (buf[src_idx] & 0x3e) INVALID_ARGUMENTS // more than 32 bits
	  is_latin_1 = false;
	  n = 6;
	} else INVALID_ARGUMENTS
	if (src_idx+n > length) INVALID_ARGUMENTS
	while (--n >= 0) {
	  chr = buf[src_idx++];
	  if ((chr & 0xc0) != 0x80) INVALID_ARGUMENTS
	}
      }
      ++new_length;
    }
    if (is_latin_1) {
      long new_size = ALLOCATION_SIZE(new_length);
      OCTET_DATA *data = allocate_large(sizeof(OCTET_DATA)+new_size);
      data->size = new_size;
      data->length = new_length;
      src_idx = 0;
      for (dest_idx = 0; dest_idx < new_length; ++dest_idx) {
	uint8_t chr;
	chr = buf[src_idx++];
	if (chr >= 0x80) {
	  chr = ((chr & 0x1f) << 6) | (buf[src_idx++] & 0x3f);
	}
	data->buffer[dest_idx] = chr;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::octet_string, 0, new_length, data))
    } else {
      long new_size = ALLOCATION_SIZE(4*new_length);
      WIDE_DATA *data = allocate_large(sizeof(WIDE_DATA)+new_size);
      data->size = new_size;
      data->length = new_length;
      src_idx = 0;
      for (dest_idx = 0; dest_idx < new_length; ++dest_idx) {
	uint32_t chr;
	chr = buf[src_idx++];
	if (chr >= 0x80) {
	  int n; // number of continuation octets
	  if ((chr & 0xe0) == 0xc0) { // 2 byte code
	    chr &= 0x1f;
	    n = 1;
	  } else if ((chr & 0xf0) == 0xe0) { // 3 byte code
	    chr &= 0x0f;
	    n = 2;
	  } else if ((chr & 0xf8) == 0xf0) { // 4 byte code
	    chr &= 0x07;
	    n = 3;
	  } else if ((chr & 0xfc) == 0xf8) { // 5 byte code
	    chr &= 0x03;
	    n = 4;
	  } else if ((chr & 0xfe) == 0xfc) { // 6 byte code
	    chr &= 0x01;
	    n = 5;
	  } else { // 7 byte code
	    chr = 0;
	    n = 6;
	  }
	  while (--n >= 0) {
	    chr = (chr << 6) | (buf[src_idx++] & 0x3f);
	  }
	}
	data->buffer[dest_idx] = chr;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::wide_string, 0, new_length, data))
    }
  }

METHOD std_types::octet_string/to_utf8
  #
    converts a string from code points to utf-8 encoding
  {
    CHECK_ARGUMENTS(1)
    NODE *self = ARGUMENTS(0);
    long offset = self->octet_string.offset;
    long length = self->octet_string.length;
    long new_len = length;
    uint8_t *src = self->octet_string.data->buffer+offset;
    long i;
    for(i = 0; i < length; ++i) {
      uint8_t chr = src[i];
      if (chr >= 0x80) {
	++new_len;
      }
    }
    long size = ALLOCATION_SIZE(new_len);
    OCTET_DATA *data = allocate_large(sizeof(OCTET_DATA)+size);
    data->size = size;
    data->length = new_len;
    uint8_t *dst = data->buffer;
    for(i = 0; i < length; ++i) {
      uint8_t chr = src[i];
      if (chr >= 0x80) {
	*dst++ = chr >> 6 | 0xc0;
	*dst++ = chr & 0x3f | 0x80;
      } else {
	*dst++ = chr;
      }
    }
    RETURN_SINGLE_RESULT(CREATE(std_types::octet_string, 0, new_len, data))
  }

#
  encoding:

  7 bit:  0xxxxxxx
  11 bit: 110xxxxx 10xxxxxx
  16 bit: 1110xxxx 10xxxxxx 10xxxxxx
  21 bit: 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
  26 bit: 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
  31 bit: 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
  36 bit: 11111110 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx

METHOD std_types::wide_string/to_utf8
  #
    converts a string from code points to utf-8 encoding
  {
    CHECK_ARGUMENTS(1)
    NODE *self = ARGUMENTS(0);
    long offset = self->wide_string.offset;
    long length = self->wide_string.length;
    long new_len = length;
    uint32_t *src = self->wide_string.data->buffer+offset;
    long i;
    for(i = 0; i < length; ++i) {
      uint32_t chr = src[i];
      if (chr >= 0x80) {
	if (chr >= 0x800) {
	  if (chr >= 0x10000) {
	    if (chr >= 0x200000) {
	      if (chr >= 0x4000000) {
		if (chr >= 0x80000000) {
		  new_len += 6;
		} else {
		  new_len += 5;
		}
	      } else {
		new_len += 4;
	      }
	    } else {
	      new_len += 3;
	    }
	  } else {
	    new_len += 2;
	  }
	} else {
	  ++new_len;
	}
      }
    }
    long size = ALLOCATION_SIZE(new_len);
    OCTET_DATA *data = allocate_large(sizeof(OCTET_DATA)+size);
    data->size = size;
    data->length = new_len;
    uint8_t *dst = data->buffer;
    for(i = 0; i < length; ++i) {
      uint32_t chr = src[i];
      if (chr >= 0x80) {
	if (chr >= 0x800) {
	  if (chr >= 0x10000) {
	    if (chr >= 0x200000) {
	      if (chr >= 0x4000000) {
		if (chr >= 0x80000000) {
		  *dst++ = 0xfe;
		  *dst++ = (chr >> 30) & 0x3f | 0x80;
		  *dst++ = (chr >> 24) & 0x3f | 0x80;
		  *dst++ = (chr >> 18) & 0x3f | 0x80;
		  *dst++ = (chr >> 12) & 0x3f | 0x80;
		  *dst++ = (chr >> 6) & 0x3f | 0x80;
		  *dst++ = chr & 0x3f | 0x80;
		} else {
		  *dst++ = chr >> 30 | 0xfc0;
		  *dst++ = (chr >> 24) & 0x3f | 0x80;
		  *dst++ = (chr >> 18) & 0x3f | 0x80;
		  *dst++ = (chr >> 12) & 0x3f | 0x80;
		  *dst++ = (chr >> 6) & 0x3f | 0x80;
		  *dst++ = chr & 0x3f | 0x80;
		}
	      } else {
		*dst++ = chr >> 24 | 0xf8;
		*dst++ = (chr >> 18) & 0x3f | 0x80;
		*dst++ = (chr >> 12) & 0x3f | 0x80;
		*dst++ = (chr >> 6) & 0x3f | 0x80;
		*dst++ = chr & 0x3f | 0x80;
	      }
	    } else {
	      *dst++ = chr >> 18 | 0xf0;
	      *dst++ = (chr >> 12) & 0x3f | 0x80;
	      *dst++ = (chr >> 6) & 0x3f | 0x80;
	      *dst++ = chr & 0x3f | 0x80;
	    }
	  } else {
	    *dst++ = chr >> 12 | 0xe0;
	    *dst++ = (chr >> 6) & 0x3f | 0x80;
	    *dst++ = chr & 0x3f | 0x80;
	  }
	} else {
	  *dst++ = chr >> 6 | 0xc0;
	  *dst++ = chr & 0x3f | 0x80;
	}
      } else {
	*dst++ = chr;
      }
    }
    RETURN_SINGLE_RESULT(CREATE(std_types::octet_string, 0, new_len, data))
  }
