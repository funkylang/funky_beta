#!/usr/bin/env fkyrun

  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

<require basic/stdlib>
<require web/server>
<require terminal/terminal>

program_parameters!
  $server_address
  list
    MANDATORY_PARAMETER "uri" "
      the URI of the server to connect to (can include a port no.)


$universal_server_address server_address .truncate_from. ':'
$universal_server_port
  if
    server_address .contains. ':'
    -> (server_address .behind. ':').to_integer
    -> 80

current_time! $t

$rng mersenne_twister((1'000'000'000*second_of(t)).to_integer)

$websocket_id ""
repeat !websocket_id 20
  :
    next_value &rng $r 256
    push &websocket_id character(r-1)
    next
  -> websocket_id

$io std_types::io
enable_logging &io 3

!io.random_seed_of (1'000'000'000*second_of(t)).to_integer

open_tcp_client_socket! $conn_fd universal_server_address universal_server_port
on conn_fd.is_an_error conn_fd

upgrade_to_websocket &io conn_fd

initialize_terminal!
  RECEIVE_CTRL_C_AND_CTRL_Z
  RECEIVE_CTRL_Q_AND_CTRL_S
  CURSOR_OFF
  main

$main: (terminal)
  $terminal_width width_of(terminal)
  $terminal_height height_of(terminal)
  start_reading_from &io STDIN_FILENO
  start_reading_from &io conn_fd
  loop:
    get_events! &io $events
    handle_web_client_events &io &events conn_fd
    for_each events
      : (event)
	event $type $fd $argument
	case type
	  READ: # stdin
	    $keys extract_keys(argument)
	    for_each keys
	      : (key)
		update_if_not key.is_a_character &key -> key_to_name(key)
		send_websocket_text_message &io conn_fd "KEY_PRESS: @(key)"
		next!
	      next
	  CLOSED pass
	  UPGRADED_TO_WEBSOCKET:
	    send_websocket_text_message &io fd "
	      VT:
	      width: @(terminal_width)
	      height: @(terminal_height)
	      character_width: 1
	      ascent: 1
	      descent: 1
	      character_height: 1
	      line_spacing: 0
	      line_height: 1
	      baseline: 1
	    next!
	  WEBSOCKET_MESSAGE:
	    write &io STDOUT_FILENO argument
	    next!
	  :
	    log_unhandled_event &io event
	    next!
      next
