#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Topic: Network Clients and Servers

$std_types::web_terminal std_types::generic_terminal

$std::WEB .
$std::CONNECT_TERMINAL .

$std_types::web_terminal.type_of WEB

$script_of ()

$script_start "
  {
  canvas.getContext('2d')

$std_types::web_terminal.script_of script_start

$std_types::web_terminal/set_draw_colour: (self colour)
  append &self.script_of "
    draw_colour=@(dom_colour(colour))
  -> self

$std_types::web_terminal/set_clear_colour: (self colour)
  if
    colour.is_undefined:
      append &self.script_of "
	clear_colour=null
      -> self
    :
      append &self.script_of "
	clear_colour=@(dom_colour(colour))
      -> self

$dom_colour: (colour)
  to_integer &colour
  $red colour >> 16
  $green (colour >> 8) & 0xFF
  $blue colour & 0xFF
  -> "
    "rgb(@(red),@(green),@(blue))"@

$std_types::web_terminal/draw_text: (self x y text)
  replace_all
    &text
    '\' = "\\"
    '@nl;' = "\n"
  append &self.script_of "
    draw_text(@(x),@(y),"@(text)")
  -> self

$std_types::web_terminal/draw_character: (self x y chr)
  !chr
    case
      chr
      '\' -> "\\"
      '@nl;' -> "\n"
      -> chr
  append &self.script_of "
    draw_text(@(x),@(y),"@(chr)")
  -> self

$std_types::web_terminal/plot_line: (self x1 y1 x2 y2)
  append &self.script_of "
    plot_line(@(x1),@(y1),@(x2),@(y2))
  -> self

$std_types::web_terminal/clear:
  (
    self
    x = 1
    y = 1
    width = "null"
    height = "null"
  )
  append &self.script_of "
    clear(@(x),@(y),@(width),@(height))
  -> self

$std_types::web_terminal/copy:
  #
    copies a rectangular area from one screen to another

    This function can also copy a rectangular area within a single screen.

    Topic: Terminal

    See also: std_types::screen/clear

  (
    destination
    _source
    x
    y
    sx
    sy
    width
    height
  )
  append &destination.script_of "
    copy(@(x),@(y),@(sx),@(sy),@(width),@(height))
  -> destination

$std_types::web_terminal/update: (self)
  $script script_of(self)
  if
    script == script_start
    -> self ""
    :
      $command append(script_of(self) "}@nl;")
      !self.script_of script_start
      -> self command

$websocket_message_handler_of ()
$websocket_message_handlers_of ()

$std_types::io.websocket_message_handler_of undefined
$std_types::io.websocket_message_handlers_of empty_hash_table

$std::on_websocket_message:
  (
    io
    fd = undefined
    handler
  )
  if
    fd.is_undefined
    -> io(.websocket_message_handler_of handler)
    :
      $websocket_message_handlers websocket_message_handlers_of(io)
      !websocket_message_handlers(fd) handler
      -> io(.websocket_message_handlers_of websocket_message_handlers)

$std::handle_websocket_terminal_events: (io events)
  $new_events empty_list
  for_each events
    : (event)
      event $type $fd $argument
      case type
	UPGRADE_TO_WEBSOCKET:
	  $fields argument
	  accept_upgrade_to_websocket &io fd fields
	  next
	WEBSOCKET_MESSAGE:
	  handle_websocket_message &io $new_event fd argument
	  if
	    new_event.is_defined:
	      push &new_events new_event
	      next
	    next
	WEBSOCKET_CLOSED:
	  handle_close &io fd
	  next!
	:
	  push &new_events event
	  next
    -> io new_events

#$handle_websocket_message: (io fd message)
  $websocket_message_handler websocket_message_handlers_of(io)(fd)
  update_if websocket_message_handler.is_undefined &websocket_message_handler
    -> websocket_message_handler_of(io)
  if
    websocket_message_handler.is_defined:
      websocket_message_handler io fd message
    :
      log io 2 "No websocket message handler defined for @(fd.serialize)"

$handle_websocket_message: (io fd message)
  from_utf8 &message
  log &io 4 "got dom event for @(fd.serialize.trim): @(message)"
  $type message .before. ':'
  $data (message .behind. ':').trim
  case type
    "KEY_PRESS":
      $key
	if
	  length_of(data) == 1
	  -> data(1)
	  -> name_to_key(data)
      if
	key.is_defined
	-> io tuple(KEY_PRESS fd key)
	:
	  log &io 2 "
	    No key defined for string "@(data)"
	  -> io undefined
    "DOM", "VT":
      $attributes build_attributes_table(type data)
      -> io tuple(CONNECT_TERMINAL fd attributes)
    :
      log &io 2 "
	Unhandled websocket message type: "@(type)"
      -> io undefined

$build_attributes_table: (type data)
  $attributes insert_order_table("type" = type)
  for_each split(data '@nl;')
    : (line)
      $key line .before. ':'
      $value (line .behind. ':').trim
      !attributes(key) value
      next
    -> attributes

$std::create_web_terminal: (io fd vt_info)
  $type vt_info("type")
  $width vt_info("width").to_number
  $height vt_info("height").to_number
  $vt
    case
      type
      "DOM":
	std_types::web_terminal
	  .width_of width
	  .height_of height
      "VT":
	create_terminal width height
  for_each vt_info
    : (key value)
      case key
	"character_width":
	  !vt.character_width_of value.to_number
	  next
	"ascent":
	  !vt.ascent_of value.to_number
	  next
	"descent":
	  !vt.descent_of value.to_number
	  next
	"character_height":
	  !vt.character_height_of value.to_number
	  next
	"line_spacing":
	  !vt.line_spacing_of value.to_number
	  next
	"line_height":
	  !vt.line_height_of value.to_number
	  next
	"baseline":
	  !vt.baseline_of value.to_number
	  next
	next
    :
      log &io 3 "
	create web terminal for @(fd.serialize)@
	width: @(width)
	height: @(height)
	character_width: @(character_width_of(vt))
	character_height: @(character_height_of(vt))
      -> io vt

$std::handle_dom_input_event: (io fd message)
  from_utf8 &message
  log &io 4 "got dom input event for @(fd.serialize.trim): @(message)"
  $type message .before. ':'
  $value (message .behind. ':').trim
  case type
    "KEY_PRESS":
      $key
	if
	  length_of(value) == 1
	  -> value(1)
	  -> name_to_key(value)
      if
	key.is_defined:
	  #$key_press_handler key_press_handlers_of(io)(fd)
	  $key_press_handler undefined
	  if
	    key_press_handler.is_defined:
	      key_press_handler io fd key
	    :
	      log io 2 "No key press handler defined for @(fd.serialize)"
	:
	  log io 2 "
	    No key defined for string "@(value)"
    -> io

$handle_close: (io fd)
  log &io 4 "close web terminal for @(fd.serialize)"
  !io.websocket_message_handlers_of(fd) undefined
  #!io.key_press_handlers_of(fd) undefined
  #!io.mouse_click_handlers_of(fd) undefined
  -> io
