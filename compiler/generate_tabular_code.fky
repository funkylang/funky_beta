#
  Copyright (C) 2023 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

<using std>
<using funky>

$mangled_literals empty_hash_table
$mangling_counter empty_hash_table

$funky::generate_tabular_code: (top_level_statements is_a_main_module)
  #!variables("std::assign") undefined
  #!variables("assign") undefined
  to_list &literals
  filter &literals: (literal)
    not
      &&
	node_type_of(literal) == TYPE_FUNCTION
	parameters_of(literal).is_empty
	length_of(statements_of(literal)) == 1
	arguments_of(statements_of(literal)(1)).is_empty

  for_each literals
    : (literal)
      add_literal !mangled_literals !mangling_counter literal
      next!
    :
      $types collect_types(empty_insert_order_table top_level_statements)
      filter &top_level_statements is_a_valid_statement
      on is_a_main_module && top_level_statements.is_empty:
	syntax_error "Main module does not contain any statements"
      #on not(is_a_main_module) && top_level_statements.is_not_empty:
	syntax_error "Module should only contain definitions"
	  top_level_statements(1)
      $constant_count
	+
	  length_of(literals)
	  if
	    top_level_statements.is_empty
	    -> 0
	    -> 1
      $variable_count
	count(variables: (info) -> not(first(info).is_local_or_constant))
      $ref_constants_table
	if
	  constant_count > 0
	  -> "  constants_table,"
	  -> "  NULL, // no constants"
      $ref_variables_table
	if
	  variable_count > 0
	  -> "  variables_table,"
	  -> "  NULL, // no variables"
      $feature_flags "FEAT_POSITIONS|FEAT_FUNCTION_INFO"
      update_if top_level_statements.is_not_empty && not(is_a_main_module)
	&feature_flags: append feature_flags "|FEAT_INITIALIZER"
      append
	"
	  @(require())@
	  #include <stddef.h>
	  #include <stdint.h>

	  #include "runtime/common.h"
	  #include "runtime/builtins.h"
	  #include "runtime/fko.h"
	  #include "runtime/memory.h"

	  @(constants_enum())
	  @(variables_enum())@

	  @(tabular_functions())@
	  @(main_function())@
	  @(compound_constants())@
	  @(constants_table())@
	  @(attributes_tables())@
	  @(variables_table())@
	  @(required_modules_table())@
	  @(defined_namespaces_table())@
	  @(used_namespaces_table())@

	  FUNKY_MODULE module__@(current_module_name) = {
	    "_@(current_module_name)", // module name
	    "@(current_filename)", // module filename
	    .major_version = 0,
	    .minor_version = 0,
	    .feature_flags = @(feature_flags),
	    .marker = 0,
	    @(length_of(required_modules)), // number of required modules
	    @(length_of(defined_namespaces)), // number of defined namespaces
	    @(length_of(used_namespaces)), // number of used namespaces
	    @(constant_count), // number of constants
	    @(variable_count), // number of variables
	    @(reference_required_modules())
	    @(reference_defined_namespaces())
	    used_namespaces,
	  @(ref_constants_table)
	  @(ref_variables_table)
	  };

	if
	  is_a_main_module
	  -> "

	    int main(int argc, char **argv) {
	      main_argc = argc;
	      main_argv = argv;
	      run(&module__@(current_module_name));
	    }
	  -> ""

      $require:
	if
	  required_modules.is_empty
	  -> ""
	  :
	    append
	      map_reduce
		required_modules
		: (name)
		  update_if name .has_prefix. "./" &name:
		    without_prefix &name "./"
		    without_prefix &name until(current_filename '/' -1)
		    append "./" &name
		    -> name
		  -> "
		    /// require @(name)
	      "@nl;"

      $constants_enum:
	if
	  literals.is_empty
	  -> ""
	  :
	    $buf "
	      enum {
	    $idx 0
	    for_each literals
	      # we use literals because it is an *insert order* set!
	      : (literal)
		$mangled_name mangled_literals(literal)
		dec &idx
		append &buf "
		  @
		    @(mangled_name) = @(idx),
		next
	      -> append(range(buf 1 -3) "@nl;};@nl;")

      $compound_constants:
	$buf ""
	for_each literals
	  : (literal)
	    append &buf literal.to_compound
	    next
	  -> buf

      $constants_table:
	if
	  literals.is_empty && top_level_statements.is_empty
	  -> ""
	  :
	    $buf "

	      static FUNKY_CONSTANT constants_table[] = {
	    !buf
	      if
		literals.is_empty
		-> buf
		:
		  for_each literals
		    : (literal)
		      append &buf literal.to_table_entry
		      next
		    -> buf
	    if
	      top_level_statements.is_empty
	      -> append(range(buf 1 -3) "@nl;};@nl;")
	      :
		append buf "
		  @
		    {FLT_FUNCTION, 0, {.func_info = &i_module_entry}}
		  };

      $variables_enum:
	map_reduce $buf variables
	  : (name info)
	    mangle_identifier &name
	    $kind first(info)
	    if
	      kind.is_local_or_constant
	      -> ""
	      :
		$remark
		  replace_all
		    (kind.to_string .truncate_until. "::").to_lower_case
		    '_' = " "
		-> "  var_@(name), // @(remark)@nl;"
	  append
	  ""
	if
	  buf.is_empty
	  -> ""
	  -> "
	    enum {
	      var__START = FIRST_VAR-1,
	    @(buf)@
	    @
	      var__END
	    };

      $variables_table:

	map_reduce $buf variables
	  : (name info)
	    info $kind $value
	    if
	      kind.is_local_or_constant:
		#debug::dump `name `kind
		-> ""
	      :
		retrieve_base_and_method_count $base $method_count name
		$namespace name .before. "::"
		truncate_until &name "::"
		$type
		  case
		    kind
		    EXTERN -> "UNKNOWN"
		    EXTERN_POLYMORPHIC -> "UNKNOWN_POLYMORPHIC"
		    ATTRIBUTE, ATTRIBUTE_WITH_SETTER -> "POLYMORPHIC"
		    INITIALIZED, INITIALIZED_COMPOUND -> "INITIALIZED"
		    DYNAMIC -> "UNINITIALIZED"
		    DERIVED -> "DERIVED"
		    :
		      debug::dump `kind
		      -> "???"
		$initialization
		  case
		    kind
		    INITIALIZED, INITIALIZED_COMPOUND:
		      $idx mangled_literals(value)
		      -> "
			,
			    {.const_idx = -@(idx)}@
		    DERIVED:
		      $identifier identifier_of(value)
		      $dname identifier .truncate_until. "::"
		      $dnamespace identifier .before. "::"
		      -> "
			,
			    {"@(dname)\000@(dnamespace)"}@
		    ATTRIBUTE -> "
		      ,
			  {.has_a_setter = false}@
		    ATTRIBUTE_WITH_SETTER -> "
		      ,
			  {.has_a_setter = true}@
		    EXTERN, EXTERN_POLYMORPHIC -> "
		      ,
			  {.position = @(get_source_position(second(info)))}@
		    -> ""
		-> "
		  @
		    {
		      FOT_@(type), 0, @(method_count),
		      "@(name)\000@(namespace)", @(base)@(initialization)
		    },
	  append
	  ""
	if
	  buf.is_empty
	  -> ""
	  -> "

	    static FUNKY_VARIABLE variables_table[] = {
	    @(range(buf 1 -3))
	    };

      $retrieve_base_and_method_count: (identifier)
	$mangled_name mangle_identifier(identifier)
	$type types(mangled_name)
	if
	  type.is_defined
	  -> append(mangled_name "__attributes") length_of(type)
	  -> "NULL" "0"

      $attributes_tables:
	$buf ""
	for_each types
	  : (type methods)
	    append &buf "

	      static ATTRIBUTE_DEFINITION @(type)__attributes[] = {
	    for_each methods
	      : (item)
		item $method $value
		append &buf "
		  @
		    {@(method), -@(value)},
		next
	      :
		append !buf range(buf 1 -3) "@nl;};@nl;"
		next
	  -> buf

      $required_modules_table:
	if
	  required_modules.is_empty
	  -> ""
	  :
	    append
	      "@nl;"
	      map_reduce
		required_modules: (name)
		  -> "
		    extern FUNKY_MODULE module__@(mangled_name(name));
	      "

		static FUNKY_MODULE *required_modules[] = {
	      range
		map_reduce
		  required_modules: (name)
		    -> "
		      @
			&module__@(mangled_name(name)),
		1 -3
	      "@nl;};@nl;"

	$mangled_name: (name)
	  update_if name .has_prefix. "./" &name:
	    without_prefix &name "./"
	    without_prefix &name base_directory
	    -> name
	  -> replace_all(name '/' = "__")

      $reference_required_modules:
	if
	  required_modules.is_empty
	  -> "NULL, // required modules"
	  -> "required_modules,"

      $defined_namespaces_table:
	if
	  defined_namespaces.is_empty
	  -> ""
	  :
	    append
	      "

		static FUNKY_NAMESPACE defined_namespaces[] = {
	      range
		map_reduce
		  defined_namespaces: (name version)
		    truncate_from &name '-'
		    -> "
		      @
			{"@(name)", @(first(version)), @(second(version))},
		1 -3
	      "@nl;};@nl;"

      $reference_defined_namespaces:
	if
	  defined_namespaces.is_empty
	  -> "NULL, // defined namespaces"
	  -> "defined_namespaces,"

      $used_namespaces_table:
	append
	  "

	    static FUNKY_NAMESPACE used_namespaces[] = {
	  range
	    map_reduce
	      used_namespaces: (name version)
		-> "
		  @
		    {"@(name)", @(first(version)), @(second(version))},
	    1 -3
	  "@nl;};@nl;"

      $tabular_functions:
	map_reduce literals
	  : (body)
	    case node_type_of(body)
	      BODY, TYPE_FUNCTION:
		if
		  &&
		    node_type_of(body) == TYPE_FUNCTION
		    parameters_of(body).is_empty
		    length_of(statements_of(body)) == 1
		    arguments_of(statements_of(body)(1)).is_empty
		  -> ""
		  :
		    $mangled_name mangled_literals(body)
		    #debug::dump 2 `get_source_position(body)
		    $statements filter(statements_of(body) is_a_valid_statement)
		    tabular_function
		      mangled_name parameters_of(body) statements
	      -> ""
	  append ""

      $main_function
	-> tabular_function("module_entry" empty_list top_level_statements)

  $tabular_function: (name parameters statements)
    if
      statements.is_empty
      -> ""
      :
	!temp_count 0
	!local_mapping empty_hash_table # maps variable names to local indices
	for_each !local_mapping !temp_count
	  parameters
	  : (parameter)
	    if
	      node_type_of(parameter) == REDEFINITION: # dummy parameter
		!temp_count 1
		next
	      :
		$parameter_name funky::name_of(parameter)
		if
		  first(variables(parameter_name)) == LOCAL:
		    !local_mapping(parameter_name) length_of(local_mapping)+1
		    next
		  next
	  -> local_mapping temp_count
	for_each !local_mapping !temp_count
	  statements
	  : (statement)
	    if
	      node_type_of(statement) == STATEMENT:
		check_for_locals !local_mapping !temp_count head_of(statement)
		for_each arguments_of(statement)
		  : (argument)
		    check_for_locals !local_mapping !temp_count argument
		    next
		  next

		$check_for_locals: (node)
		  cond
		    ->
		      &&
			node_type_of(node) == REDEFINITION
			kind_of(node) == TEMPORARY
		      -> local_mapping max(temp_count no_of(node))
		    -> node_type_of(node) == DEFINITION:
		      $identifier identifier_of(node)
		      ->
			if
			  first(variables(identifier)) == LOCAL
			  -> local_mapping(identifier length_of(local_mapping)+1)
			  -> local_mapping
			temp_count
		    -> true
		      -> local_mapping temp_count
	      next
	  -> local_mapping temp_count
	$n length_of(statements)
	$local_count length_of(local_mapping)
	$local_positions
	  map_reduce
	    local_mapping
	    : (_identifier idx) -> ",@nl;  LOCAL(@(temp_count+idx))"
	    append
	    ""
	$locals
	  map_reduce
	    local_mapping
	    : (identifier _idx) -> "@quot;@(identifier)\000@quot;"
	    concatenate(", ")
	    ""
	-> "

	  static TAB_NUM t_@(name)[] = {
	    @(temp_count+length_of(local_mapping)), // locals
	  @(add_parameters())@
	  @(map_reduce(statements: (idx statement) compile statement idx == n))@
	  @(range(map_reduce(statements add_source_positions) 1 -3))@
	  @(local_positions)
	  };

	  static FUNCTION_INFO i_@(name) = {
	    t_@(name), NULL, @(n), @(local_count),
	    {@(locals)}
	  };

	$add_parameters:
	  $parameter_count length_of(parameters)
	  if
	    any_of(parameters: (parameter) -> option_of(parameter).is_defined):
	      append
		"
		  @
		    -@(parameter_count), // parameters
		map_reduce(parameters add_parameter_with_option append "")
	    :
	      append
		"
		  @
		    @(parameter_count), // parameters
		map_reduce(parameters add_parameter append "")

	$add_parameter: (parameter)
	  append "  " parameter_to_index(parameter)

	$add_parameter_with_option: (parameter)
	  append
	    "  "
	    option_of(parameter).to_option
	    ", "
	    parameter_to_index(parameter)

	$parameter_to_index: (parameter)
	  if
	    node_type_of(parameter) == REDEFINITION
	    -> "LOCAL(@(no_of(parameter))),@nl;"
	    :
	      $parameter_name funky::name_of(parameter)
	      $idx local_mapping(parameter_name)
	      if
		idx.is_defined
		-> "LOCAL(@(temp_count+idx)), // @(parameter_name)@nl;"
		-> "var_@(parameter_name),@nl;"

    $compile: (self is_last)
      $head head_of(self)
      $arguments arguments_of(self)
      $input_arguments filter(arguments is_an_input)
      $output_arguments filter(arguments is_an_output)
      $invalid_last_statement
	is_last && not(all_of(output_arguments is_a_dummy_definition))
      on
	&&
	  invalid_last_statement
	  is_a_main_module || name != "module_entry"
	:
	  syntax_error "Last statement is not a tail call" self
      $input_count length_of(input_arguments)
      $output_count length_of(output_arguments)
      $is_a_tail_call (is_last && output_arguments.is_empty)
      !output_count
	if
	  self.is_an_io_call:
	    if
	      is_a_tail_call
	      -> "IO_TAIL_CALL"
	      -> "IO_CALL(@(output_count))"
	  :
	    if
	      is_a_tail_call
	      -> "TAIL_CALL"
	      -> output_count
      $inputs map_reduce(input_arguments to_separated_index append "")
      $outputs map_reduce(output_arguments to_separated_index append "")
      append
	"
	  @
	    // @(source_position_of(self))@
	if
	  node_type_of(head) == FUNCTOR:
	    case identifier_of(head)
	      "std::assign", "assign":
		on output_count == 0 && not(is_last):
		  syntax_error "Return statement not allowed within function body"
		    self
		-> "
		  @
		    LET, @
		    @(input_count)@(inputs), @(output_count)@(outputs),
	      "_assign_attributes" -> "
		@
		  LET, @
		  -@(input_count-1)@(inputs)@(outputs),
	      :
		$statement "
		  @
		    @(head.to_index), @
		    @(input_count)@(inputs), @(output_count)@(outputs),
		if
		  is_last && not(is_a_tail_call):
		    if
		      invalid_last_statement # "return" from initializer
		      -> "
			@(statement)@
			  LET, 1, 0, TAIL_CALL,
		      -> "
			@(statement)@
			  LET, 0, TAIL_CALL,
		  -> statement
	  -> "
	    @
	      LET, 1@(inputs), 1, @(head.to_index),

      $to_separated_index ()

      $funky_types::node/to_separated_index: (self) -> append(", " self.to_index)

      $funky_types::inline_attribute_value_pair/to_separated_index: (self)
	-> ", @(retrieve_name(self)), @(expression_of(self).to_index)"

      $funky_types::inline_method_value_pair/to_separated_index: (self)
	-> ", -@(retrieve_name(self)), @(expression_of(self).to_index)"

      $funky_types::attribute_value_pair/to_separated_index: (self)
	-> ", @(retrieve_name(self)), @(argument_of(self).to_index)"

      $funky_types::method_value_pair/to_separated_index: (self)
	-> ", -@(retrieve_name(self)), @(argument_of(self).to_index)"

      $funky_types::type_function/to_separated_index: (self)
	-> ", 0, @(mangled_literals(self))"

  $add_literal ()

  $funky_types::numeric_literal/add_literal: (self)
    !mangled_literals(self) funky::key_of(self)
    -> mangled_literals mangling_counter

  $funky_types::character_sequence/add_literal: (self)
    $mangled ""
    for_each characters_of(self)
      : (chr)
	cond
	  -> length_of(mangled) >= 16 break
	  -> chr.is_a_letter || chr.is_a_digit || chr == '_':
	    push &mangled chr
	    next
	  -> chr == ' ':
	    push &mangled '_'
	    next
	  -> true next
      :
	remove_trailing_underscores_and_digits &mangled
	if
	  mangled.is_empty:
	    check_mangling $n !mangling_counter "string"
	    add_mangled "string_@(n)"
	  :
	    append "str_" &mangled
	    check_mangling $n !mangling_counter mangled
	    if
	      n > 1:
		add_mangled "@(mangled)_@(n)"
	      :
		add_mangled mangled

    $add_mangled: (mangled_name)
      #debug::print "
	@(mangled_name): @(debug::string(characters_of(self)))@
      !mangled_literals(self) mangled_name
      -> mangled_literals mangling_counter

  $funky_types::unique/add_literal: (self)
    !mangled_literals(self) funky::key_of(self)
    -> mangled_literals mangling_counter

  $funky_types::statement/add_literal: (self)
    $type identifier_of(head_of(self)) .truncate_until. "::"
    $mangled_name append(type "_" mangle_position(self))
    -> mangled_literals(self mangled_name) mangling_counter

  $funky_types::body/add_literal: (self)
    $source_group source_group_of(self)
    $line_text second(source_group)
    $column_no length_of(line_text)-length_of(source_position_of(self))
    $text range(line_text 1 column_no)
    without_suffix &text ':'
    without_suffix &text "->"
    trim_right &text
    if
      text.is_empty || text .contains. ' ':
	add_lambda ""
      :
	if
	  text(1) == '$':
	    add_function
	      append
		"func_"
		mangle_versioned_identifier(range(text 2 -1))
	  :
	    replace_all &text '.' = "_"
	    remove_non_identifier_characters &text
	    add_lambda text

    $add_lambda: (name)
      if
	name.is_empty:
	  check_mangling $n !mangling_counter "lambda"
	  add_mangled "lambda_@(n)"
	:
	  add_function append("lambda_" name)

    $add_function: (name)
      check_mangling $n !mangling_counter name
      if
	n > 1:
	  add_mangled
	    string
	      name .until. '_'
	      n
	      name .from. '_'
	:
	  add_mangled name

    $add_mangled: (name)
      -> mangled_literals(self name) mangling_counter

    $mangle_versioned_identifier: (name)
      $rest name .behind. "-"
      if
	rest.is_empty
	-> replace(name)
	:
	  if
	    rest(1).is_a_digit
	    -> append(replace(name .before. '.') "__" replace(name .behind. '.'))
	    -> replace(name)

      $replace: (part)
	replace_all
	  part .without_suffix. '/'
	  '.' = "___"
	  '/' = "___"
	  "::" = "__"
	  '-' = "__"

  $to_option ()

  $std_types::undefined.to_option "MANDATORY_PARAMETER"
  $funky_types::myself.to_option "MYSELF_PARAMETER"
  $funky_types::rest.to_option "REST_PARAMETER"
  $funky_types::initial_value/to_option: (self) -> operand_of(self).to_index

  $add_source_positions ()

  $funky_types::node/add_source_positions: (_self) -> ""

  $funky_types::statement/add_source_positions: (self)
    -> "  @(get_source_position(self)),@nl;"

  $get_source_position: (node)
    $source_group source_group_of(node)
    # ATTENTION: Why can <source_group> be undefined?
    if
      source_group.is_defined:
	source_group $indent $text
	$line_no line_no_of(source_group)
	$column_no indent+length_of(text)+1-length_of(source_position_of(node))
	-> "POS(@(line_no), @(column_no))"
      -> "POS(0, 0)"

  $to_compound ()

  $funky_types::node.to_compound ""

  $funky_types::statement/to_compound: (self)
    $mangled_name mangled_literals(self)
    map_reduce $indices
      filter(arguments_of(self) is_an_input)
      to_negative_index
      concatenate(", ")
      ""
    -> "

      static int @(mangled_name)_arguments[] = {
	@(indices)
      };

    $to_negative_index: (node) -> "-@(to_index(node))"

  $to_table_entry ()

  $funky_types::node.to_table_entry "???"

  $funky_types::numeric_literal/to_table_entry: (self)
    $digits digits_of(self)
    if
      digits .contains. '.'
      -> "
	@
	  {FLT_REAL, 0, {.real_value = @(digits)}},
      :
	if $sign !digits
	  digits(1) == '-'
	  -> "NEGA" range(digits 2 -1)
	  -> "POSI" digits
	update_if digits .has_prefix. "0b" || digits .has_prefix. "0o"
	  &digits -> digits.to_integer
	-> "
	  @
	    {FLT_@(sign)TIVE_INT64, 0, {.value = @(digits)}},

  $funky_types::numeric_character_literal/to_table_entry: (self)
    -> "
      @
	{FLT_CHARACTER, 0, {.value = @(digits_of(self))}},

  $funky_types::character_sequence/to_table_entry: (self)
    $characters characters_of(self)
    $length length_of(characters)
    if
      characters.is_an_octet_string:
	$text characters.to_c_string
	-> "
	  @
	    {FLT_STRING_8, @(length), {.str_8 = "@(text)"}},
      :
	$text characters.to_c_string_32
	-> "
	  @
	    {FLT_STRING_32, @(length), {.str_32 = U"@(text)"}},

  $funky_types::statement/to_table_entry: (self)
    $head head_of(self)
    $kind (identifier_of(head) .truncate_until. "::").to_upper_case
    $count length_of(arguments_of(self))-1
    $mangled_name mangled_literals(self)
    -> "
      @
	{FLT_@(kind), @(count), {.arguments = @(mangled_name)_arguments}},

  $funky_types::unique/to_table_entry: (self)
    $identifier replace_first(identifier_of(self) "__" = "::")
    -> "
      @
	{FLT_UNIQUE, 0, {.str_8 = "@(identifier)"}},

  $funky_types::body/to_table_entry: (self)
    $mangled_name mangled_literals(self)
    -> "
      @
	{FLT_FUNCTION, 0, {.func_info = &i_@(mangled_name)}},

$is_a_valid_statement: (statement)
  if
    node_type_of(statement) == STATEMENT && not(statement.is_a_definition)
    ->
      &&
	head_of(statement).is_a_valid_argument
	all_of(arguments_of(statement) is_a_valid_argument)
    -> false

  $is_a_valid_argument: (argument)
    case node_type_of(argument)
      DEFINITION:
	check_destination variables(identifier_of(argument))
      REDEFINITION:
	if
	  kind_of(argument) == TEMPORARY:
	    $info variables(identifier_of(argument))
	    if
	      info.is_defined:
		check_destination info
	      -> true
	  -> true
      -> true

    $check_destination: (info)
      case first(info)
	sequence
	  CONSTANT
	  CONSTANT_COMPOUND
	  INITIALIZED
	  INITIALIZED_COMPOUND
	  DERIVED
	  ATTRIBUTE
	  ATTRIBUTE_WITH_SETTER
	-> false
	-> true

$temp_count undefined
  #
    ATTENTION: temporar workaround;
    will be removed when local method definitions become available

$local_mapping undefined
  #
    ATTENTION: temporar workaround;
    will be removed when local method definitions become available

$to_index ()

$funky_types::node/to_index: (self)
  debug::print "/to_index failed: "
  debug::dump `self
  -> "?"

$funky_types::functor/to_index retrieve_name
$funky_types::definition/to_index retrieve_name
$funky_types::redefinition/to_index retrieve_name
$funky_types::update/to_index retrieve_name

$retrieve_name: (self)
  case kind_of(self)
    TEMPORARY:
      $info variables(identifier_of(self))
      if
	info.is_defined && second(info).is_defined
	-> mangled_literals(second(info))
	-> "LOCAL(@(no_of(self)))"
    CONSTANT -> mangled_literals(self)
    :
      $identifier identifier_of(self)
      variables(identifier) $kind $value
      case kind
	LOCAL -> "LOCAL(@(temp_count+local_mapping(identifier)))"
	sequence
	  DERIVED
	  DYNAMIC
	  EXTERN
	  EXTERN_POLYMORPHIC
	  INITIALIZED, INITIALIZED_COMPOUND
	  ATTRIBUTE
	  ATTRIBUTE_WITH_SETTER
	->
	  append("var_" mangle_identifier(identifier))
	CONSTANT, CONSTANT_COMPOUND -> mangled_literals(value)
	:
	  debug::dump `kind
	  debug::dump `value
	  debug::exit

$funky_types::numeric_literal/to_index get_literal

$funky_types::character_literal/to_index get_literal

$funky_types::character_sequence/to_index get_literal

$funky_types::unique/to_index get_literal

$funky_types::body/to_index get_literal

$get_literal: (self)
  -> mangled_literals(self)

$check_mangling: (name)
  $n mangling_counter(name)
  !n
    if
      n.is_defined
      -> n+1
      -> 1
  -> n mangling_counter(name n)

$remove_trailing_underscores_and_digits: (str)
  $n length_of(str)
  loop:
    if
      n == 0
      -> ""
      :
	if
	  str(n) == '_' || str(n).is_a_digit:
	    dec &n
	    next
	  -> range(str 1 n)

$remove_non_identifier_characters: (str)
  $buf ""
  for_each str
    : (chr)
      cond
	-> chr.is_a_letter:
	  push &buf chr
	  next
	-> chr.is_a_digit || chr == '_':
	  if
	    buf.is_empty # prevent leading digits!
	    next
	    :
	      push &buf chr
	      next
	-> true next
    -> buf

### Types

$is_local_or_constant: (kind)
  -> kind == LOCAL || kind == CONSTANT || kind == CONSTANT_COMPOUND

$collect_types: (types statements)
  for_each statements
    : (statement)
      if
	node_type_of(statement) == STATEMENT:
	  for_each arguments_of(statement)
	    : (argument)
	      case node_type_of(argument)
		BODY:
		  collect_types &types statements_of(argument)
		  next
		METHOD_VALUE_PAIR, ATTRIBUTE_VALUE_PAIR:
		  if
		    node_type_of(argument_of(argument)) == BODY:
		      collect_types &types statements_of(argument_of(argument))
		      next
		    next
		next
	    check_types
	next

      $check_types:
	$arguments arguments_of(statement)
	$functor_name identifier_of(head_of(statement))
	if
	  &&
	    arguments.is_not_empty
	    node_type_of(arguments(-1)) == DEFINITION
	    functor_name == "std::assign"
	  :
	    for_each range(arguments 1 -2)
	      : (argument)
		case node_type_of(argument)
		  TYPE_FUNCTION:
		    $value_idx
		      if
			&&
			  parameters_of(argument).is_empty
			  length_of(statements_of(argument)) == 1
			  arguments_of(statements_of(argument)(1)).is_empty
			:
			  $reference head_of(statements_of(argument)(1))
			  $identifier identifier_of(reference)
			  variables(identifier) $kind $constant_value
			  case kind
			    CONSTANT, CONSTANT_COMPOUND
			    -> mangled_literals(constant_value)
			    -> append("var_" mangle_identifier(identifier))
			-> mangled_literals(argument)
		    add "TYPE_FUNCTION" value_idx
		  ATTRIBUTE_VALUE_PAIR:
		    add_method "-"
		  METHOD_VALUE_PAIR:
		    add_method
		  next

		$add_method: (prefix = "")
		  $method mangle_identifier(identifier_of(argument))
		  $value argument_of(argument)
		  $value_idx
		    if
		      node_type_of(value) == FUNCTOR:
			$identifier identifier_of(value)
			variables(identifier) $kind $constant_value
			case kind
			  CONSTANT, CONSTANT_COMPOUND
			  -> mangled_literals(constant_value)
			  -> append("var_" mangle_identifier(identifier))
		      -> mangled_literals(value)
		  add append(prefix "var_" method) value_idx

		$add: (method value_idx)
		  $type mangle_identifier(identifier_of(arguments(-1)))
		  $methods default_value(types(type) empty_list)
		  !types(type) push(methods tuple(method value_idx))
		  next
	      next
	  next
    -> types

### Generate C code

$funky::mangle_identifier: (identifier)
  replace_all
    identifier
    "::" = "__"
    '-' = "__"
    '.' = "__"

$to_c_string: (str)
  $buf ""
  $s 1
  for_each str
    : (idx chr)
      if
	chr < ' ' || chr > '~' || chr == '@quot;' || chr == '\':
	  append &buf range(str s idx-1)
	  append &buf "\" pad_left(oct(chr.to_integer) 3 "0")
	  !s idx+1
	  next
	next
    :
      if
	s <= length_of(str)
	-> append(buf range(str s -1))
	-> buf

$to_c_string_32: (str)
  $buf ""
  $s 1
  for_each str
    : (idx chr)
      if
	chr < ' ' || chr > '~' || chr == '@quot;' || chr == '\':
	  append &buf range(str s idx-1)
	  $val chr.to_integer
	  !s idx+1
	  if
	    val <= 0xff:
	      append &buf "\" oct(val 3)
	      next
	    :
	      if
		val <= 0xffff:
		  append &buf "\u" hex(val 4)
		  next
		:
		  append &buf "\U" hex(val 8)
		  next
	next
    :
      if
	s <= length_of(str)
	-> append(buf range(str s -1))
	-> buf
