#!/usr/bin/env fkyrun

  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

<allow unused>

program_parameters!
  $filename
  list
    MANDATORY_PARAMETER "filename" "
      the name of the source (.sml) file

$title_of ()
$links_of ()

$std_types::list
  .title_of undefined
  .links_of undefined

$image_data empty_hash_table

do:
  load! $text filename
  from_utf8 &text

  text_to_indented_lines text $indented_lines

  load_image_data! !image_data indented_lines

  print! "
    <!doctype html>
    <html>
    <head>
    <meta charset="utf-8">
    <style>
      body {
	font-family: Palatino, Times New Roman, Times;
	font-size: 13pt;
	color: #222;
	background-color: white;
	padding-left: 3pt;
	padding-right: 3pt;
      }
      h1 {
	font-family: Arial, Helvetica;
	font-size: 20pt;
	color: #333;
	margin-top: 6pt;
	margin-bottom: 8pt;
      }
      h2 {
	font-family: Arial, Helvetica;
	font-size: 16pt;
	color: #222;
	margin-top: 12pt;
	margin-bottom: 7pt;
      }
      h3 {
	font-family: Arial, Helvetica;
	font-size: 14pt;
	color: #222;
	margin-top: 10pt;
	margin-bottom: 6pt;
      }
      h4 {
	font-family: Arial, Helvetica;
	font-size: 13pt;
	color: #222;
	margin-top: 9pt;
	margin-bottom: 5pt;
      }
      h1.index {
	font-size: 16pt;
	font-weight: normal;
	margin-top: 2pt;
	margin-bottom: 3pt;
      }
      h2.index {
	font-size: 14pt;
	font-weight: normal;
	margin-top: 2pt;
	margin-bottom: 3pt;
	margin-left: 12pt;
      }
      h3.index {
	font-size: 12pt;
	font-weight: normal;
	margin-top: 2pt;
	margin-bottom: 3pt;
	margin-left: 36pt;
      }
      h4.index {
	font-size: 12pt;
	font-weight: normal;
	margin-top: 2pt;
	margin-bottom: 3pt;
	margin-left: 60pt;
      }
      dt {
	font-size: 14pt;
	margin-bottom: 2pt;
      }
      dd {
	font-style: italic;
	font-size: 11pt;
	padding-left: 0pt;
	margin-left: 16pt;
	margin-top: 0pt;
	margin-bottom: 4pt;
      }
      p {
	margin-top: 0pt;
	margin-bottom: 8pt;
	text-align: justify;
      }
      p.source {
	font-style: italic;
	text-align: right;
      }
      p.remark {
	font-style: italic;
      }
      p.created {
	font-style: italic;
	float: right;
      }
      pre {
	font-size: 12pt;
      }
      figure {
	text-align: center;
      }
      a {
	text-decoration: none;
      }
      a:visited {
	color: #80f;
      }
      grey {
       color: #555;
      }
    </style>

  on title_of(indented_lines).is_defined:
    print! "
      <title>@(title_of(indented_lines))</title>

  for_each links_of(indented_lines)
    : (link)
      if
	link .has_suffix. ".css":
	  print! "
	    <link rel="stylesheet" href="@(link)">
	  next
	next
    pass

  print! "
    </head>
    <body>

  current_time! $t
  $created "@(day_of(t)).@(month_of(t)).@(year_of(t))"
  print! "
    <p class="created">(letzte Ã„nderung: @(created))</p>

  on title_of(indented_lines).is_defined:
    print! "
      <h1>@(title_of(indented_lines))</h1>

  print! indented_lines_to_index(indented_lines)
  println! "<br>"
  print! indented_lines_to_html(indented_lines)

  print! "
    </body>

$load_image_data: (indented_lines)
  for_each indented_lines
    : (line)
      if
	line.is_a_tuple:
	  line $_indent $lines
	  load_image_data! !image_data lines
	  next!
	:
	  if
	    line .has_prefix. "IMAGE:":
	      $image_name between(line ' ' ' ')
	      if
		image_data(image_name).is_defined
		next
		:
		  load! $buf "images/@(image_name)"
		  !image_data(image_name) split_into_lines(buf.to_base64 72)
		  next!
	    next
    -> image_data

$split_into_lines: (text line_size)
  $lines ""
  $s 1
  $n length_of(text)
  loop:
    $e s+line_size-1
    if
      e >= n
      -> append(lines "  " range(text s n))
      :
	append &lines "  " range(text s e) "@nl;"
	plus &s line_size
	next

$text_to_indented_lines: (text)
  $i 1
  $n length_of(text)
  $lines empty_list
  $empty_lines empty_list
  $indent_stack list(0)
  $lines_stack empty_list
  $links empty_list
  $title undefined

  do:
    (
      next_line^
    )
    $add: (line)
      if
	line == "":
	  push &empty_lines ""
	  next_line
	:
	  do:
	    (
	      pop_stack^
	    )
	    $top_indent indent_stack(-1)
	    cond
	      -> indent > top_indent
		:
		  push &indent_stack indent
		  push &lines_stack lines
		  !lines empty_lines
		  !empty_lines empty_list
		  push &lines line
		  next_line
	      -> indent < top_indent
		:
		  range &indent_stack 1 -2
		  pop &lines_stack $popped_lines
		  push !lines popped_lines
		    top_indent-indent_stack(-1) = lines
		  pop_stack
	      -> true
		:
		  append &lines empty_lines
		  !empty_lines empty_list
		  push &lines line
		  next_line

    $indent 0
    if
      i > n
      :
	do:
	  (
	    pop_stack^
	  )
	  if
	    lines_stack.is_empty
	    ->
	      lines
		.title_of title
		.links_of links
	    :
	      pop &indent_stack $popped_indent
	      pop &lines_stack $popped_lines
	      push !lines popped_lines
		popped_indent-indent_stack(-1) = lines
	      pop_stack
      :
	do:
	  (
	    next_tab^
	  )
	  if
	    text(i) == '@ht;'
	    :
	      plus &indent 8
	      inc &i
	      next_tab
	    :
	      do:
		(
		  next_space^
		)
		if
		  text(i) == ' '
		  :
		    inc &indent
		    inc &i
		    next_space
		  :
		    $s i
		    do:
		      (
			next_character^
		      )
		      if
			i <= n
			:
			  if text(i) != '@nl;'
			    :
			      inc &i
			      next_character
			    :
			      $line range(text s i-1)
			      inc &i
			      if
				indent == 0:
				  cond
				    -> line .has_prefix. "LINK:":
				      push &links range(line 6 -1).trim
				      next_line
				    -> line .has_prefix. "TITLE:":
				      !title range(line 7 -1).trim
				      next_line
				    -> true:
				      add line
				:
				  add line
			:
			  $line range(text s i-1)
			  add line

$insert_tags: (text)
  $tagged ""
  $n length_of(text)
  $i 0
  $within_bold false
  $within_italic false
  $within_preformatted false
  $in_math_mode false
  loop:
    inc &i
    if
      i > n
      -> tagged
      :
	$chr text(i)
	case chr
	  '*':
	    if
	      i < n && text(i+1) == '*': # bold
		inc &i
		if
		  within_bold:
		    !within_bold false
		    append &tagged "</b>"
		    next
		  :
		    !within_bold true
		    append &tagged "<b>"
		    next
	      : # italics
		if
		  within_italic:
		    !within_italic false
		    append &tagged "</i>"
		    next
		  :
		    !within_italic true
		    append &tagged "<i>"
		    next
	  '`':
	    if
	      within_preformatted:
		!within_preformatted false
		append &tagged "</code>"
		next
	      :
		!within_preformatted true
		append &tagged "<code>"
		next
	  '$':
	    if
	      in_math_mode:
		!in_math_mode false
		append &tagged "</i>"
		next
	      :
		!in_math_mode true
		append &tagged "<i>"
		next
	  '_': # subscript
	    if
	      in_math_mode:
		append &tagged "<sub>"
		loop
		  :
		    inc &i
		    if
		      i > n
		      -> tagged
		      :
			$subscripted_chr text(i)
			if
			  subscripted_chr == ' ' || subscripted_chr == '$'
			  break
			  :
			    push &tagged subscripted_chr
			    next
		  :
		    dec &i
		    append &tagged "</sub>"
		    next
	      :
		push &tagged '_'
		next
	  '^': # superscript
	    if
	      in_math_mode:
		append &tagged "<sup>"
		loop
		  :
		    inc &i
		    if
		      i > n
		      -> tagged
		      :
			$superscripted_chr text(i)
			if
			  superscripted_chr == ' ' || superscripted_chr == '$'
			  break
			  :
			    push &tagged superscripted_chr
			    next
		  :
		    dec &i
		    append &tagged "</sup>"
		    next
	      :
		push &tagged '^'
		next
	  '\': # escape next character
	    if
	      i < n:
		inc &i
		push &tagged text(i)
		next
	      next
	  '<':
	    append &tagged "&lt;"
	    next
	  :
	    push &tagged chr
	    next

$lines_to_text: (lines)
  $buf ""
  for_each lines
    : (line)
      if
	line.is_a_key_value_pair:
	  line $_offset $contents
	  append &buf lines_to_text(contents)
	  next
	:
	  append &buf insert_tags(line)
	  push &buf '@nl;'
	  next
    -> buf

$indented_lines_to_text:
  (
    lines
    indent = 0
  )
  $buf ""
  $indentation spaces(indent)
  for_each lines
    : (line)
      if
	line.is_a_key_value_pair:
	  line $offset $contents
	  append &buf indented_lines_to_text(contents indent+offset)
	  next
	:
	  append &buf indentation
	  append &buf insert_tags(line)
	  push &buf '@nl;'
	  next
    -> buf

$std_types::key_value_pair.is_empty true

$indented_lines_to_index: (lines section = "")
  $buf ""
  $no 0
  $total length_of(lines)
  for_each lines
    : (idx line)
      if
	line.is_a_key_value_pair || line.is_empty
	next
	:
	  $contents
	    if
	      idx < total && lines(idx+1).is_a_key_value_pair
	      -> value_of(lines(idx+1))
	      -> undefined
	  if
	    contents.is_defined && line != "`" && line(1) != '*':
	      cond
		-> line == "PREFACE" || line == "GLOSSARY":
		  next
		-> line .has_prefix. "APPENDIX:":
		  next
		-> true:
		  inc &no
		  $subsection
		    if
		      section.is_empty
		      -> no.to_string
		      -> append(section "." no.to_string)
		  $title line
		  $ref replace_all(title.to_lower_case ' ' = "_")
		  $level count_occurrences(subsection ".")+1
		  $tag "h@(level)"
		  append &buf "
		    <@(tag) class="index">@
		      <a href="#@(ref)">@(subsection) @(title)</a></@(tag)>
		  append &buf indented_lines_to_index(contents subsection)
		  next
	    next
    -> buf

$indented_lines_to_html: (lines section = "")
  $buf ""
  $no 0
  $total length_of(lines)
  for_each lines
    : (idx line)
      $contents
	if
	  idx < total && lines(idx+1).is_a_key_value_pair
	  -> value_of(lines(idx+1))
	  -> undefined
      cond
	-> line.is_empty
	  next
	-> line.is_a_key_value_pair
	  next
	-> line .has_prefix. "* ":
	  range &line 3 -1
	  append &buf
	    if
	      contents.is_defined
	      ->
		append
		  maybe_start_unordered_list()
		  "<li>@nl;"
		  insert_tags(line) "@nl;"
		  lines_to_text(contents)
		  "</li>@nl;"
		  maybe_end_unordered_list()
	      ->
		append
		  maybe_start_unordered_list()
		  "<li>" insert_tags(line) "</li>@nl;"
		  maybe_end_unordered_list()
	  next
	-> line == "`":
	  append &buf
	    "<pre>@nl;"
	    indented_lines_to_text(contents)
	    "</pre>@nl;"
	  next
	#-> line(-1) == '=':
	  append &buf
	    maybe_start_definition_list()
	    "<dt>"
	    range(line 1 -2).trim
	    "</dt>@nl;<dd>@nl;"
	    lines_to_text(contents)
	    "</dd>@nl;"
	    maybe_end_definition_list()
	  next
	-> length_of(line) >= 2 && line(1) == '[' && line(-1) == ']':
	  $replace_bars: (idx chr)
	    if
	      chr == '|' && (idx == 1 || line(idx-1) != '\')
	      -> "</td><td>"
	      -> chr.to_string
	  range &line 2 -2
	  append &buf
	    maybe_start_table()
	    "<tr><td>"
	    map_reduce(line replace_bars append)
	    "</td></tr>@nl;"
	    maybe_end_table()
	  next
	-> line .has_prefix. "IMAGE:":
	  $image_name between(line ' ' ' ')
	  $mime_type image_name .behind. '.'
	  update_if mime_type == "svg" &mime_type -> "svg+xml"

	  $image_description behind(line ' ' 2)
	  $data image_data(image_name)
	  append &buf "
	    <figure>
	    <img src="data:image/@(mime_type);base64,
	    @(data)">
	    <figcaption>@(image_description)</figcaption>
	    </figure>
	  next
	-> line .has_prefix. "SOURCE:":
	  $source trim(line .behind. ':')
	  append &buf "
	    <p class="source">
	    (Quelle: @(source))
	    </p>
	  next
	-> line .has_prefix. "REMARK:":
	  $remark trim(line .behind. ':')
	  append &buf "
	    <p class="remark">
	    (Anmerkung: @(remark))
	    </p>
	  next
	-> true:
	  if
	    contents.is_defined:
	      cond
		-> line == "PREFACE" || line == "GLOSSARY":
		  next
		-> line .has_prefix. "APPENDIX:":
		  next
		-> true:
		  inc &no
		  $subsection
		    if
		      section.is_empty
		      -> no.to_string
		      -> append(section "." no.to_string)
		  $title line
		  $ref replace_all(title.to_lower_case ' ' = "_")
		  $level count_occurrences(subsection ".")+1
		  $tag "h@(level)"
		  $anchor
		    string
		      "<a name=@quot;"
		      ref
		      "@quot;>"
		      "<grey>" subsection "</grey> " title
		      "</a>"
		  append &buf
		    "<@(tag)>@(anchor)</@(tag)>@nl;"
		    indented_lines_to_html(contents subsection)
		  next
	    :
	      append &buf
		maybe_start_paragraph()
		insert_tags(line) "@nl;"
		maybe_end_paragraph()
	      next

      $behind_empty_line -> idx == 1 || lines(idx-1).is_empty

      $before_empty_line -> idx == total || lines(idx+1).is_empty

      $maybe_start_paragraph:
	if
	  behind_empty_line()
	  -> "<p>@nl;"
	  -> ""

      $maybe_end_paragraph:
	if
	  before_empty_line()
	  -> "</p>@nl;"
	  -> ""

      $maybe_start_unordered_list:
	if
	  idx > 1 && lines(idx-1) .has_prefix. "* "
	  -> ""
	  -> "<ul>@nl;"

      $maybe_end_unordered_list:
	if
	  idx < total && lines(idx+1) .has_prefix. "* "
	  -> ""
	  -> "</ul>@nl;"

      $maybe_start_definition_list:
	if
	  idx > 1 && lines(idx-1) .has_suffix. '='
	  -> ""
	  -> "<dl>@nl;"

      $maybe_end_definition_list:
	if
	  idx < total && lines(idx+1) .has_suffix. '='
	  -> ""
	  -> "</dl>@nl;"

      $maybe_start_table:
	if
	  idx > 1 && lines(idx-1) .has_prefix. '['
	  -> ""
	  -> "<table>@nl;"

      $maybe_end_table:
	if
	  idx < total && lines(idx+1) .has_prefix. '['
	  -> ""
	  -> "</table>@nl;"

    -> buf
