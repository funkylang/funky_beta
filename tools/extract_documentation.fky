#!/usr/bin/env fkyrun

  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

<require basic/stdlib>
<require basic/export/html>

<using std>
<using html>

<allow unused>

# Kinds

$TOPIC .
$TYPE .
$POLYMORPHIC_FUNCTION .
$POLYMORPHIC_FUNCTION_WITH_SETTER .
$ATTRIBUTE .
$OBJECT .
$DERIVED .
$FUNCTION .
$TYPE_FUNCTION .
$LITERAL .
$UNIQUE .
$METHOD .
$UNIQUE_ITEM .

program_parameters!
  list
    COPYRIGHT "
      Copyright (C) 2024 by
      Dipl.-Ing. Michael Niederle

      This program is free software; you can redistribute it and/or modify
      it under the terms of the GNU General Public License, version 2, or
      (at your option) version 3.

      This program is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
      GNU General Public License for more details.

      For details of the GNU General Public License see the accompanying
      files GPLv2.txt and GLPv3.txt or
      http://www.gnu.org/licenses/gpl-2.0.html
      http://www.gnu.org/licenses/gpl-3.0.html
      or write to the
      Free Software Foundation, Inc.,
      51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
  $libraries
  list
    MANY_PARAMETERS "libraries" "
      one or more libraries from which to extract documentation
  $be_verbose
  list
    "verbose" "
      output detailed information about the build process

$topics empty_key_order_table
  #
    key: topic name
    value:
      tuple:
	kind
	undefined
	undefined
	undefined
	list of paragraphs
	filename

$definitions empty_hash_table
  #
    key: name of defined entity
    value:
      tuple:
	kind
	short description
	list of parameters
	list of results
	list of paragraphs
	filename

$kind_of_definition
  hash_table
    "TYPE" = TYPE
    "FUNCTION" = FUNCTION
    "METHOD" = METHOD
    "OBJECT" = OBJECT
    "UNIQUE" = UNIQUE_ITEM
    "POLY" = POLYMORPHIC_FUNCTION
    "ATTR" = POLYMORPHIC_FUNCTION_WITH_SETTER

$is_a_private_namespace
  hash_set
    "basic_collections"

$current_filename undefined

for_each libraries
  : (library)
    traverse_files! library !topics !definitions
    next!
  :
    for_each topics
      : (topic info)
	save! "html/@(topic.to_filename)" create_html_page(topic info)
	next!
      :
	for_each definitions
	  : (definition info)
	    save! "html/@(definition.to_filename)"
	      create_html_page(definition info).to_utf8
	    next!
	  :
	    save! "html/topics.html" create_topics_page()
	    save! "html/symbols.html" create_symbols_page()
	    save! "html/types.html" create_types_page()
	    save! "html/index.html" create_index_page()
	    save! "html/style.css" style

$traverse_files: (library)
  directory! $entries library
  for_each entries
    : (entry)
      $name std::name_of(entry)
      case type_of(entry)
	DIRECTORY:
	  if
	    name .has_prefix. '.'
	    next
	    :
	      traverse_files! append(library "/" name) !topics !definitions
	      next!
	REGULAR_FILE:
	  cond
	    -> name .has_suffix. ".fky":
	      extract_from_funky! append(library "/" name) !topics !definitions
	      next!
	    -> name .has_suffix. ".template":
	      extract_from_template! append(library "/" name) !definitions
	      next!
	    -> true
	      next
	next
    -> topics definitions

$extract_from_funky: (filename)
  on be_verbose: println! filename
  !current_filename filename
  load_groups! $groups filename
  handle_groups groups

$extract_from_template: (filename)
  on be_verbose: println! filename
  !current_filename filename
  load_groups! $groups filename
  handle_template_groups groups

$handle_groups: (groups)
  for_each groups
    : (group)
      if
	group.is_undefined
	next
	:
	  group $indent $text
	  if
	    indent != 0
	    next
	    :
	      cond
		-> text(1) == '#' && is_a_topic(group):
		  handle_topic group !topics
		  next
		-> is_a_namespaced_definition(text):
		  handle_definition group !definitions
		  next
		-> true next
    -> topics definitions

$is_a_topic: (group)
  $subgroups subgroups_of(group)
  if
    subgroups.is_undefined
    -> false
    :
      $head subgroups(1)
      if
	head.is_undefined
	-> false
	:
	  head $_indent $text
	  -> text .has_prefix. "Topic:" || text .has_prefix. "Topics:"

$GLOBAL_DEFINITION '$', FUNKY_IDENTIFIER, "::", FUNKY_IDENTIFIER

$is_a_namespaced_definition: (text)
  -> match(GLOBAL_DEFINITION text).is_defined

$handle_template_groups: (groups)
  for_each groups
    : (group)
      group $_indent $text
      $keyword text .truncate_from. ' '
      update_if keyword == "PUBLIC" &keyword
	-> (text .behind. ' ') .truncate_from. ' '
      $kind kind_of_definition(keyword)
      if
	kind.is_undefined
	next
	:
	  behind &text keyword
	  trim &text
	  case kind
	    FUNCTION:
	      if
		text .contains. ' '
		next
		: add_definition text
	    METHOD:
	      if
		text .contains. ' ' || text .contains. "/_"
		next
		: add_definition text
	    TYPE, OBJECT:
	      $name (text .truncate_from. ' ')
	      $base (text .behind. "->").trim
	      update_if base.is_empty &base -> undefined
	      add_definition name base
	    POLYMORPHIC_FUNCTION, POLYMORPHIC_FUNCTION_WITH_SETTER:
	      add_definition text
	    next

      $add_definition: (name extra_info = undefined)
	if
	  name .has_prefix. "builtin::"
	  next
	  :
	    maybe_add_namespace &name
	    $subgroups subgroups_of(group)
	    if
	      subgroups.is_undefined || subgroups(1).is_undefined
	      missing_documentation
	      :
		split_into_groups &subgroups
		$first_group subgroups(1)
		if
		  first_group.is_undefined
		  missing_documentation
		  :
		    first_group $_indent $remark
		    if
		      remark(1) != '#'
		      missing_documentation
		      :
			!subgroups subgroups_of(subgroups(1))
			if
			  subgroups.is_defined:
			    !definitions(name)
			      collect_info(kind extra_info subgroups)
			    next
			  missing_documentation

	$missing_documentation:
	  #debug::print "
	    MISSING DOCUMENTATION: @(name)
	  next

    -> definitions

$handle_topic: (group)
  $subgroups subgroups_of(group)
  $head subgroups(1)
  head $_indent $text
  $topic trim(text .behind. ':')
  -> topics(topic collect_info(TOPIC range(subgroups 2 -1)))

$handle_definition: (group)
  group $_indent $text
  $namespace between(text '$' "::")
  $rest behind(text "::")
  $id_len match(FUNKY_IDENTIFIER rest)
  $name range(rest 1 id_len)
  range &rest id_len+1 -1
  $identifier append(namespace "::" name)
  if
    rest.is_empty:
      debug::print "
	@(namespace)::@(name) ???
      -> definitions
    :
      case rest(1)
	' ':
	  trim_left &rest
	  case rest(1)
	    '.': handle UNIQUE_ITEM
	    '(':
	      cond
		-> rest .has_prefix. "()": handle POLYMORPHIC_FUNCTION
		-> rest .has_prefix. "(!)": handle POLYMORPHIC_FUNCTION_WITH_SETTER
		-> true: handle undefined
	    '@apos;': handle LITERAL
	    '@quot;': handle LITERAL
	    '0'..'9': handle LITERAL
	    :
	      $derived_len match(FUNKY_IDENTIFIER rest)
	      if
		derived_len.is_defined: handle DERIVED
		: handle undefined
	':': handle FUNCTION
	'/':
	  if
	    rest(2) == ':':
	      handle TYPE_FUNCTION
	    :
	      handle_slot_definition METHOD
	'.': handle_slot_definition ATTRIBUTE
	: handle OBJECT

  $handle_slot_definition: (kind)
    $separator range(rest 1 1)
    range &rest 2 -1
    $slot_len match(FUNKY_IDENTIFIER rest)
    if
      slot_len.is_undefined:
	handle undefined
      :
	$slot_name range(rest 1 slot_len)
	range &rest slot_len+1 -1
	if
	  rest .has_prefix. "::":
	    range &rest 3 -1
	    $slot_name_len match(FUNKY_IDENTIFIER rest)
	    if
	      slot_name_len.is_undefined:
		handle undefined
	      :
		$real_slot_name range(rest 1 slot_name_len)
		append &identifier separator slot_name "::" real_slot_name
		handle kind
	  :
	    append &identifier separator "std::" slot_name
	    handle kind

  $handle: (kind)
    cond
      -> (identifier .before. "::").is_a_private_namespace
	-> definitions
      -> kind.is_undefined:
	debug::print "
	  CANNOT DETERMINE TYPE: @(identifier)
	-> definitions
      -> true:
	$subgroups subgroups_of(group)
	if
	  subgroups.is_undefined
	  missing_documentation
	  :
	    split_into_groups &subgroups
	    $description find_first(subgroups is_a_remark)
	    if
	      description.is_undefined
	      missing_documentation
	      :
		$descriptions subgroups_of(description)
		if
		  descriptions.is_undefined
		  missing_documentation
		  :
		    if
		      ||
			kind == FUNCTION
			kind == METHOD
			kind == TYPE_FUNCTION
		      :
			$parameters find_first(subgroups is_a_parameter_list)
			update_if parameters.is_defined &parameters
			  -> split_into_groups(subgroups_of(parameters))
			->
			  definitions
			    identifier
			    collect_info(kind parameters descriptions)
		      -> definitions(identifier collect_info(kind descriptions))

  $missing_documentation:
    #debug::print "
      MISSING DOCUMENTATION: @(identifier)
    -> definitions

$is_a_remark: (line) -> line.is_defined && second(line)(1) == '#'

$is_a_parameter_list: (line) -> line.is_defined && second(line)(1) == '('

$PARAMETER .
$RESULT .

$collect_info:
  (
    kind
    extra_info = undefined # parameters, derived or value
    description_groups
  )
  $paragraph ""
  $paragraphs empty_list
  $is_preformatted false
  $base_indent undefined
  $parameters
    case
      kind
      sequence
	FUNCTION
	METHOD
	TYPE_FUNCTION
	POLYMORPHIC_FUNCTION
	POLYMORPHIC_FUNCTION_WITH_SETTER
      :
	!parameters empty_list
	if
	  extra_info.is_defined:
	    for_each extra_info
	      : (group)
		add_result_or_parameter &parameters group
		next
	      -> parameters
	  -> parameters
      -> undefined
  $results
    case
      kind
      sequence
	FUNCTION
	METHOD
	TYPE_FUNCTION
	POLYMORPHIC_FUNCTION
	POLYMORPHIC_FUNCTION_WITH_SETTER
      -> empty_list
      -> undefined

  $mode undefined
  for_each description_groups
    : (group)
      if
	group.is_undefined:
	  !mode undefined
	  if
	    paragraph.is_empty
	    next
	    :
	      if
		base_indent.is_defined:
		  push &paragraph '@nl;'
		  next
		:
		  push &paragraphs paragraph
		  !paragraph ""
		  next
	:
	  cond
	    -> mode == PARAMETER:
	      add_result_or_parameter &parameters group
	      next
	    -> mode == RESULT:
	      add_result_or_parameter &results group
	      next
	    -> true:
	      group $indent $text
	      if !is_preformatted !base_indent !paragraphs !paragraph
		is_preformatted:
		  if
		    base_indent.is_undefined
		    -> true indent paragraphs paragraph
		    :
		      if
			indent < base_indent
			-> false undefined push(paragraphs paragraph) ""
			-> true base_indent paragraphs paragraph
		-> false undefined paragraphs paragraph
	      range &text 1 -2 # remove trailing newline
	      update_if is_preformatted &text:
		append spaces(indent-base_indent) replace_all(text '<' = "&lt;")
	      if
		paragraph.is_empty:
		  cond
		    ->
		      ||
			text .has_prefix. "Parameter:"
			text .has_prefix. "Parameters:"
		      :
			!mode PARAMETER
			next
		    ->
		      ||
			text .has_prefix. "Result:"
			text .has_prefix. "Results:"
		      :
			!mode RESULT
			next
		    -> true:
		      !paragraph text
		      if
			||
			  text .has_prefix. "Example:"
			  text .has_prefix. "Output:"
			  text .has_prefix. "Error output:"
			:
			  !is_preformatted true
			  next
			next
		:
		  push &paragraph
		    if
		      is_preformatted
		      -> '@nl;'
		      -> ' '
		  append &paragraph text
		  next
    :
      update_if paragraph.is_not_empty &paragraphs -> push(paragraphs paragraph)
      if
	kind == TOPIC
	-> tuple(kind undefined undefined undefined paragraphs current_filename)
	->
	  tuple
	    kind
	    paragraphs(1)
	    if
	      parameters.is_defined
	      -> parameters
	      -> extra_info
	    results
	    range(paragraphs 2 -1)
	    current_filename

$add_result_or_parameter: (parameters group)
  $text second(group)
  $parameter (text .truncate_from. '#').trim
  $subgroups subgroups_of(group)
  update_if subgroups.is_defined &text -> second(subgroups(1))
  $remark (text .behind. '#').trim
  push parameters tuple(parameter remark)

$create_topics_page:
  HTML
    : HEAD
      : TITLE "Topics"
      : LINK "rel" = "stylesheet" "href" = "style.css"
    : BODY
      : header
      : H1 "Topics"
      : TABLE
	:
	  FOR_EACH topics: (topic info)
	    TR: TD: A "href" = to_filename(topic) topic

$create_symbols_page:
  $symbols retrieve_symbols()
  HTML
    : HEAD
      : TITLE "Symbols"
      : LINK "rel" = "stylesheet" "href" = "style.css"
    : BODY
      : header
      : H1 "Symbols"
      : TABLE
	:
	  FOR_EACH symbols: (symbol) identifier_description symbol

$retrieve_symbols:
  sort
    filter
      keys_of(definitions): (key)
	-> not(key .contains. '/' || key .contains. '.')

$create_types_page:
  $types retrieve_types()
  HTML
    : HEAD
      : TITLE "Types"
      : LINK "rel" = "stylesheet" "href" = "style.css"
    : BODY
      : header
      : H1 "Types"
      : TABLE
	:
	  FOR_EACH types: (type) identifier_description type true

$create_index_page:
  HTML
    : HEAD
      : TITLE "Funky"
      : LINK "rel" = "stylesheet" "href" = "style.css"
    : BODY
      : header
      : H1 "Funky"
      : MDP "
	Funky is an all-purpose (pure) functional and object oriented programming
	language. It can be used to write small scripts, application programs and just
	about any software that does not rely on direct access to hardware.
      : MDP "
	One of the design goals was to create a language suited to create large
	software projects in the realm of classical artificial intelligence (e.g.
	"expert systems").
      : MDP "
	But meanwhile AI systems based on neural networks had an unimaginable boost.
	To accomodate this new development an interface to use LLMs (Large Language
	Models) is planned for the near future.
      : MDP "
	Funky makes it easy to write comprehensible software and at the same time
	allows the utilization of the vast amount of execution units of modern
	computers. The logical flow of control is always sequential. The functional
	design of the language makes it easy for the compiler and runtime system to
	exploit the lack of side effects to compute function results in parallel at
	a very fine grained level.
      : MDP "
	Funky uses an indentation based syntax for *all* multi-line language
	constructs including string literals and remarks.
      : MDP "
	It has a very simple syntax for defining anonymous functions which are widely
	used. There are no keywords and no "special forms".
      : MDP "
	Function calls (the only kind of "statement" in Funky) can be written in
	several ways that make their semantic intention more clear.
      : MDP "
	There are no loop- or branch-statements; they are replaced by recursion and
	polymorphic function calls.
      : MDP "
	Variables have lexical scope but dynamic lifetime.
      : MDP "
	To ease arithmetic and logic operations, C-style operators (+, -, &&, >>, etc.)
	are supported as *syntactic sugar*.
      : MDP "
	Funky supports completely separate compilation of source code modules. To
	compile a module no other file than the module's source code file has to be
	consulted.
      : MDP "
	As a functional language Funky uses value semantics. So no object can ever be
	modified, but new objects can be derived from existing ones. This prevents problems
	like deep vs. shallow copies, equality vs. identity and offers uniform semantics
	for copying and updating.
      : MDP "
	The typing discipline of Funky is dynamic but it does not support duck typing and
	arguments are not converted automatically (so Funky uses strong typing). Funky
	compilers should test for potential runtime errors at compile time wherever possible.
      : MDP "
	The use of dynamic variables makes Funky well suited for parallel execution.
      : MDP "
	Funky offers uniform access to functions, data structures, methods and attributes -
	they are all function calls in Funky. So the implementation can be changed later on
	without the need to change the interface.
      : MDP "
	The definitions of methods and attributes for any specific object can be distributed
	over several source code modules. An application program can add (private or global)
	methods and attributes to a prototype object defined in a library.
      : MDP "
	Funky guarantees determinism: a program run on the same stream of input data will
	always produce the same stream of output data. This makes debugging Funky programs
	quite easy. All input events can be logged and a post mortem debugger can replay
	these events and allow the user to run his program forwards and backwards in small
	or large steps.
      : MDP "
	Funky allows defining objects and their parts in any order. Everything that can be
	resolved will be resolved!

  $MDP: (text) P convert(text)

$retrieve_types:
  $types empty_hash_set
  for_each definitions
    : (name definition)
      $type name .before. '/'
      if
	type.is_empty:
	  definition $kind
	  if
	    kind == TYPE:
	      !types(name) true
	      next
	    next
	:
	  !types(type) true
	  next
    -> sort(types.to_list)

$create_html_page: (title info)
  info $kind $short_descripition $extra_info $results $paragraphs $filename
  $parameters
    case
      kind
      sequence
	FUNCTION
	METHOD
	TYPE_FUNCTION
	POLYMORPHIC_FUNCTION
	POLYMORPHIC_FUNCTION_WITH_SETTER
      -> extra_info
      -> undefined
  HTML
    : HEAD
      : TITLE title
      : LINK "rel" = "stylesheet" "href" = "style.css"
    : BODY
      : header
      : if
	  kind == TOPIC:
	    H1 title
	  :
	    H1 "class" = "pre" title
      :
	$description empty_list
	$associated_topics empty_list
	$preformatted empty_list
	$see_also empty_list
	$already_consumed false
	for_each paragraphs
	  : (idx paragraph)
	    cond
	      ->
		||
		  paragraph .has_prefix. "Topic:"
		  paragraph .has_prefix. "Topics:"
		:
		  !associated_topics map(split(paragraph .behind. ':' ',') trim)
		  next
	      -> paragraph .has_prefix. "See also:":
		!see_also
		  map
		    split(paragraph .behind. ':' ','): (item)
		      maybe_add_namespace item.trim
		next
	      -> paragraph .has_prefix. "Example:":
		push &preformatted "Example" = paragraphs(idx+1)
		!already_consumed true
		next
	      -> paragraph .has_prefix. "Output:":
		push &preformatted "Output" = paragraphs(idx+1)
		!already_consumed true
		next
	      -> paragraph .has_prefix. "Error output:":
		push &preformatted "Error output" = paragraphs(idx+1)
		!already_consumed true
		next
	      -> true:
		if
		  already_consumed:
		    !already_consumed false
		    next
		  :
		    push &description paragraph
		    next
	  :
	    GROUP
	      : if
		  short_descripition.is_undefined
		  -> ""
		  : P "class" = "short" short_descripition
	      :
		if
		  parameters.is_undefined
		  -> ""
		  : GROUP
		    : H2
		      if
			length_of(parameters) == 1
			-> "Parameter"
			-> "Parameters"
		    :
		      if
			parameters.is_empty:
			  P: I "None"
			: DL
			  :
			    FOR_EACH parameters: (parameter)
			      parameter $parameter_name $parameter_description
			      !parameter_name
				cond
				  -> parameter_name .has_suffix. '?':
				    append
				      range(parameter_name 1 -2)
				      " (optional)"
				  -> parameter_name .contains. '=':
				    append
				      (parameter_name .before. '=').trim
				      " (default: "
				      (parameter_name .behind. '=').trim
				      ")"
				  -> true -> parameter_name
			      GROUP
				: DT parameter_name
				: DD parameter_description
	      :
		if
		  results.is_undefined
		  -> ""
		  : GROUP
		    : H2
		      if
			length_of(results) == 1
			-> "Result"
			-> "Results"
		    :
		      if
			results.is_empty:
			  P: I "None"
			: DL
			  :
			    FOR_EACH results: (result)
			      result $result_name $result_description
			      GROUP
				: DT result_name
				: DD result_description
	      :
		if
		  description.is_empty
		  -> ""
		  : GROUP
		    : H2 "Description"
		    : FOR_EACH description: (paragraph) P convert(paragraph)
	      :
		map_reduce
		  preformatted
		  : (inf)
		    inf $class $paragraph
		    GROUP
		      : H2 class
		      : DIV "class" = replace_all(class ' ' = "_") paragraph
		  append
		  ""
	      :
		if
		  associated_topics.is_empty
		  -> ""
		  : GROUP
		    : H2
		      if
			length_of(associated_topics) == 1
			-> "Topic"
			-> "Topics"
		    : P
		      : FOR_EACH associated_topics: (item)
			P: A "href" = to_filename(item) item
	      :
		if
		  kind == TYPE && extra_info.is_defined:
		    GROUP
		      : H2 "Derived from"
		      : TABLE: link_to extra_info
		  -> ""
	      :
		$method title .behind. set('/' '.')
		if
		  method.is_empty
		  -> ""
		  : GROUP
		    : H2 "Implements"
		    : TABLE: link_to method
	      :
		if
		  see_also.is_empty
		  -> ""
		  : GROUP
		    : H2 "See also"
		    : TABLE
		      :
			FOR_EACH see_also: (item)
			  link_to item
	      :
		case kind
		  TOPIC:
		    $names empty_list
		    for_each definitions
		      : (name definition)
			definition
			  $_kind $_short_descripition $_parameters $_results
			  $definition_paragraphs
			for_each definition_paragraphs
			  : (paragraph)
			    if
			      ||
				paragraph .has_prefix. "Topic:"
				paragraph .has_prefix. "Topics:"
			      :
				if
				  paragraph .contains. title:
				    push &names name
				    next
				  next
			      next
			  next
		      :
			sort &names
			GROUP
			  : TABLE:
			    FOR_EACH names: (name)
			      link_to name
		  TYPE:
		    $names empty_list
		    for_each definitions
		      : (name definition)
			if
			  (name .before. set('/' '.')) == title:
			    push &names name
			    next
			  next
		      :
			if
			  names.is_empty
			  -> ""
			  :
			    sort &names
			    GROUP
			      : H2 "Supported polymorphic functions"
			      : TABLE:
				FOR_EACH names: (name)
				  link_to name METHOD
		  POLYMORPHIC_FUNCTION, POLYMORPHIC_FUNCTION_WITH_SETTER:
		    $names empty_list
		    for_each definitions
		      : (name definition)
			if
			  (name .behind. set('/' '.')) == title:
			    push &names name
			    next
			  next
		      :
			if
			  names.is_empty
			  -> ""
			  :
			    sort &names
			    GROUP
			      : H2 "Implemented by"
			      : TABLE:
				FOR_EACH names: (name)
				  link_to name TYPE
		  -> ""
	      : DIV "class" = "footer" "(defined in @(filename))"

$header:
  P
    : A "class" = "Button" "href" = "index.html" "Home"
    -> " "
    : A "class" = "Button" "href" = "manual.html" "Manual"
    -> " "
    : A "class" = "Button" "href" = "topics.html" "Topics"
    -> " "
    : A "class" = "Button" "href" = "types.html" "Types"
    -> " "
    : A "class" = "Button" "href" = "symbols.html" "Symbols"

$identifier_description: (identifier do_hide_namespace = false)
  TR
    : TD:
      A "href" = to_filename(identifier)
	if
	  do_hide_namespace
	  -> identifier .behind. "::"
	  -> identifier
    :
      $definition definitions(identifier)
      if
	definition.is_undefined
	-> ""
	:
	  definition $_kind $description
	  TD description

$link_to: (item mode = FUNCTION)
  $name
    case
      mode
      METHOD -> item .behind. set('/' '.')
      TYPE -> item .before. set('/' '.')
      -> item
  TR
    : TD : A "href" = to_filename(item) name
    :
      $item_definition definitions(item)
      if
	item_definition.is_undefined
	-> ""
	:
	  item_definition $_item_kind $item_description
	  TD "class" = "description": I item_description

$maybe_add_namespace: (name)
  if
    name .has_prefix. '@@'
    -> range(name 2 -1)
    :
      cond
	-> name .contains. '.':
	  append
	    handle(name .before. '.' "std_types")
	    "."
	    handle(name .behind. '.')
	-> name .contains. '/':
	  append
	    handle(name .before. '/' "std_types")
	    "/"
	    handle(name .behind. '/')
	-> true:
	  handle name

      $handle: (part default_namespace = "std")
	if
	  part .contains. "::"
	  -> part
	  -> "@(default_namespace)::@(part)"

$convert: (text)
  $buf ""
  if
    text .has_prefix. "* "
    insert_list_item
    convert_rest

  $insert_list_item:
    !buf "<li>"
    range &text 3 -1
    convert_rest

  $convert_rest:
    $i 0
    $n length_of(text)
    $s 1
    $within_italics false
    $within_bold false
    $within_link false
    loop:
      inc &i
      if
	i > n
	-> append(buf range(text s n))
	:
	  case text(i)
	    '*':
	      if
		i < n && text(i+1) == '*':
		  if
		    within_bold:
		      append &buf range(text s i-1)
		      append &buf "</b>"
		      inc &i
		      !s i+1
		      !within_bold false
		      next
		    :
		      append &buf range(text s i-1)
		      append &buf "<b>"
		      inc &i
		      !s i+1
		      !within_bold true
		      next
		:
		  if
		    within_italics:
		      append &buf range(text s i-1)
		      append &buf "</i>"
		      !s i+1
		      !within_italics false
		      next
		    :
		      append &buf range(text s i-1)
		      append &buf "<i>"
		      !within_italics true
		      !s i+1
		      next
	    '<':
	      append &buf range(text s i-1)
	      !within_link true
	      !s i+1
	      next
	    '>':
	      if
		within_link:
		  $link range(text s i-1)
		  maybe_add_namespace &link
		  append &buf "
		    <a href="@(link.to_filename)">@(link)</a>@
		  !within_link false
		  !s i+1
		  next
		next
	    next

$load_groups: (filename)
  load! $source filename
  cond
    -> source.is_empty:
      Error! "
	Empty source file "@(filename)"!@
    -> source(-1) != '@nl;':
      Error! "
	Missing trailing newline character in "@(filename)"!@
  from_utf8 &source
  split_into_indented_lines $lines source
  split_into_groups lines

$to_filename: (name)
  replace_all &name
    ' ' = "_"
    "::" = "__"
    '.' = "___"
    '/' = "___"
  -> "@(name).html"

$style "
  body {
    font-family: Arial, Helvetica;;
    font-size: 12pt;
    color: #222;
    background-color: white;
  }
  h1 {
    font-family: Arial, Helvetica;
    font-size: 20pt;
    color: #333;
    margin-top: 0pt;
    margin-bottom: 8pt;
  }
  h2 {
    font-family: Arial, Helvetica;
    font-size: 16pt;
    color: #222;
    margin-top: 6pt;
    margin-bottom: 7pt;
  }
  h1.pre {
    font-family: Courier New, Courier; Typewriter;
    font-size: 22pt;
    color: black;
    margin-top: 5pt;
    margin-bottom: 11pt;
  }
  dt {
    font-size: 14pt;
    margin-bottom: 2pt;
  }
  dd {
    font-style: italic;
    font-size: 11pt;
    padding-left: 0pt;
    margin-left: 16pt;
    margin-top: 0pt;
    margin-bottom: 4pt;
  }
  p {
    margin-top: 0pt;
    margin-bottom: 8pt;
  }
  p.short {
    font-style: italic;
    font-size: 14pt;
  }
  a {
    font-family: Times New Roman, Times;
    font-size: 13pt;
    text-decoration: none;
  }
  a:visited {
    color: #80f;
  }
  i {
    font-family: Times New Roman, Times;
    font-size: 14pt;
  }
  a.Button {
    display: inline-block;
    padding-top: 2pt;
    padding-bottom: 3pt;
    padding-left: 3pt;
    padding-right: 3pt;
    margin-right: 5pt;
    border-radius: 8pt;
    border-width: 2pt;
    border-style: solid;
  }
  div.Example {
    font-family: Courier New, Courier, Typewriter;
    font-size: 13pt;
    background-color: #ffc;
    border: solid 1pt;
    margin-top: 6pt;
    margin-bottom: 8pt;
    padding: 2pt;
    white-space: pre;
    border-radius: 6pt;
  }
  div.Output {
    font-family: Courier New, Courier, Typewriter;
    font-size: 13pt;
    background-color: #dfd;
    border: solid 1pt;
    margin-top: 6pt;
    margin-bottom: 8pt;
    padding: 2pt;
    white-space: pre;
    border-radius: 6pt;
  }
  div.Error_output {
    font-family: Courier New, Courier, Typewriter;
    font-size: 13pt;
    background-color: #fdd;
    border: solid 1pt;
    margin-top: 6pt;
    margin-bottom: 8pt;
    padding: 2pt;
    white-space: pre;
    border-radius: 6pt;
  }
  div.footer {
    padding-top: 10pt;
    font-size: 10pt;
  }
  pre {
    font-family: Courier New, Courier, Typewriter;
    font-size: 13pt;
    padding-top: 0pt;
    padding-bottom: 0pt;
    margin-top: 2pt;
    margin-bottom: 2pt;
  }
  td.description {
    padding-left: 10pt;
  }

  @@media (prefers-color-scheme: dark) {
    body {
      color: #eee;
      background-color: #222;
    }
    h1 {
      color: #ddd;
    }
    h1.pre {
      color: white;
    }
    h2 {
      color: #ccc;
    }
    a {
      color: #aaf;
    }
    a:visited {
      color: #faf;
    }
    div.Example, div.Output {
      color: #222;
    }
  }
