# Input-Output Events

  Events are the Funky way to handle multiple input/output streams in a
  parallel way.

  The event system is based on the concept of an event "loop". The event "loop"
  is part of the application program.                                                  ▆▆

  Before entering the event loop, the application program must create an
  input-output object and register all input-output streams that should be
  handled by the event loop.

  To create an input-output object, simply clone the object <std_types::io>.

  The event loop then waits for an event to occur (using <std::get_events>.
  When one or more events occurs, the event loop processes them and then
  continues to wait for the next event(s).

  Possible events can be registered or unregistered at any time.

  To register an event call

  <start_reading_from> - for reading from a stream

  <start_catching_signals> - for catching signals like SIGINT

  <start_injecting_window_change_events> - for catching window change events

  To unregister an event call

  <stop_reading_from> - to stop reading from a stream

  <stop_catching_signals> - to stop catching signals

  <stop_injecting_window_change_events> - to stop injecting window change events

  Actual input operations are performed by <get_events>. Write operations are
  initiated by the application program and performed by <get_events>.

  Related topics: Input-Output, Input-Output Task Manager

  Example:

    $io std_types::io # create an input-output object
    start_reading_from &io STDIN_FILENO # register reading from STDIN
    write &io STDOUT_FILENO "Please enter some text:@nl;"
      # write a prompt text to STDOUT
    $input_buffer "" # create an initially empty input buffer


    loop: # the event loop
      get_events! &io $events # get one or more events
      for_each events # handle all received events
	: (event)
	  event $type $fd $argument # destructure the event
	  case type # check the event type
	    READ: # event is a read event
	      case fd # check the file descriptor
		STDIN_FILENO: # it was a read event from STDIN
		  append &input_buffer argument
		    # append the received data to the input buffer
		  handle_input !io &input_buffer # call the input handler
		  if
		    io.is_undefined:
		      #
			the input handler returned undefined to indicate
			that the input processing is finished
		      terminate! # terminate the program
		    next # otherwise continue processing the events
		next # ignore read events for other file descriptors
	    READ_FAILED: # event is a read error
	      Error! "Error reading from standard input!"
	    WRITE_PENDING: # event is a write pending event
	      # ignore
	      next! # continue processing the events
	    WRITE_COMPLETED: # event is a write completed event
	      # ignore
	      next! # continue processing the events
	    next # ignore all other events
	next # check for more events

    $handle_input: (buffer)
      loop:
	if
	  buffer .contains. '@nl;':
	    # the input buffer contains at least one complete line
	    $line buffer .before. '@nl;' # extract the line
	    if
	      line == "quit" # the user entered "quit"
	      -> undefined undefined
		#
		  return undefined to indicate that the input processing is
		  finished
	      : # Output the line
		write &io STDOUT_FILENO "
		  You entered: "@(line)"
		behind &buffer '@nl;'
		  # remove the processed line from the input buffer
		next # continue processing the buffer
	  -> io buffer
	    # return the (maybe) modified input-output object and buffer

((defined in basic/io/io_events.fky))
