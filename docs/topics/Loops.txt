# Loops

  There are **no** *loop* instructions in Funky and it isn't really possible to
  "loop" over some code.

  But there are a lot of functions that offer anonymous recursion that look and
  work a lot like loops.

  The make use of the dynamic variables of Funky that can be redefined in inner
  scopes.

  A "loop" consists of a *body* and a *finally* function. The
  *finally* function is called after the last "iteration" of the loop and is
  responsible to return any results from the "loop". Due to the fact that the
  "loop" is a normal function it cannot make any changes to its caller's
  variables directly.

  All "loops" redefine the function <next> to start the next iteration of the
  "loop". This <next> function must be called at the end of each "iteration".

  Some loops also offer a <break> function which can be used to stop
  "iterating" and calls the *finally* function immediately.

  Some "loops" define the no-op function <pass> as the default function for
  *finally*.

  Instead of calling <next> or <break> a loop's body can direct return one or
  more results.

  Due to some clever context saving and restoring "loops" can be nested to any
  level.

  The most basic "loop" is <loop>.

  Practically all <@Collections> support <for_each>.

  Related topics: Control Flow, Branches

((defined in basic/loops.fky))
