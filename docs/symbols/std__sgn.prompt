[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std::wrap_words:
  (
    text
    width
  )
  $lines empty_list
  $n length_of(text)
  $s 1 # start of line
  $b undefined # possible break position
  $i 0
  loop:
    inc &i
    if
      i > n:
        if
          s > n
          -> lines
          -> push(lines range(text s n))
      :
        $chr text(i)
        case chr
          '
':
            push &lines range(text s i-1)
            !s i+1
            !b undefined
            next
          :
            if
              chr == ' ':
                if
                  i-s == width: # break
                    push &lines range(text s i-1)
                    !s i+1
                    !b undefined
                    next
                  :
                    !b i
                    next
              :
                if
                  i-s < width
                  next
                  :
                    if
                      b.is_defined: # wrap
                        push &lines range(text s b-1)
                        !s b+1
                        !b undefined
                        next
                      : # hard break
                        push &lines range(text s i-1)
                        !s i
                        next

[documentation remark]

# std::wrap_words (a function)

  wraps a string consisting of words onto multiple lines

  Parameters:
    text: the text to wrap
    width: the maximum width of a line

  Result:
    lines: a list of (wrapped) lines

  The string is split into multiple lines according to the specified line
  width.

  Topic: Strings

  See also: std::indented

  Example:

    $str "This is a very long string that should be wrapped onto multiple lines"
    $lines wrap_words(str 30)
    dump! 2 `lines

  Output:

    lines:
      list
        "This is a very long string"
        "that should be wrapped"
        "onto multiple lines"

[EXERCISE]

[symbols]


# Topic: Numbers

$std::bin:
$std::oct:
$std::hex:
$std::inc:
$std::dec:
$std::abs:
$std::sgn:
$std::is_odd:
$std::is_even:
$std::sqr:
$std::min:
$std::max:
$std::min_max:
$std::isqrt:
$std::PI 3.1415926535897932846

#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Topic: Numbers

$std::bin:
  #
    converts a positive integer value into a string consisting of binary digits

    Result:
      string # a string consisting of binary digits

    The optional second parameter specifies the minimum length of the resulting
    string. If there are fewer binary digits than the specified length, the
    strint is left-padded with zeros.

    Topic: Math, Strings

    See also: hex, oct, to_string

    Example:

      println! bin(123)

    Output:

      1111011

    Example:

      println! bin(123 8)

    Output:

      01111011
  (
    val # the value to convert
    size = undefined # the optional minimum length
  )
  if
    val == 0:
      if
        size.is_defined
        -> dup("0" size)
        -> "0"
    :
      $str ""
      loop !str:
        if
          val > 0:
            put &str '0'+(val & 1)
            !val val >> 1
            next
          -> str
      if
        size.is_defined
        -> pad_left(str size "0")
        -> str

$std::oct:
  #
    converts a positive integer value into a string consisting of octal digits

    The optional second parameter specifies the minimum length of the resulting
    string. If there are fewer octal digits than the specified length, the
    string is left-padded with zeros.

    Result:
      string # a string consisting of octal digits

    Topic: Math, Strings

    See also: bin, hex, to_string

    Example:

      println! oct(123)

    Output:

      173

    Example:

      println! oct(123 4)

    Output:

      0173
  (
    val # the value to convert
    size = undefined # the optional minimum length
  )
  if
    val == 0:
      if
        size.is_defined
        -> dup("0" size)
        -> "0"
    :
      $str ""
      loop !str:
        if
          val > 0:
            put &str '0'+(val & 0x07)
            !val val >> 3
            next
          -> str
      if
        size.is_defined
        -> pad_left(str size "0")
        -> str

$std::hex:
  #
    converts a positive integer value into a string consisting of hexadecimal
    digits

    Result:
      string # a string consisting of hexadecimal digits

    The optional second parameter specifies the minimum length of the resulting
    string. If there are fewer hexadecimal digits than the specified length,
    the string is left-padded with zeros.

    Topic: Math, Strings

    See also: bin, oct, to_string

    Example:

      println! hex(123)

    Output:

      7b

    Example:

      println! hex(123 4)

    Output:

      007b
  (
    val # the value to convert
    size = undefined # the optional minimum length
  )
  if
    val == 0:
      if
        size.is_defined
        -> dup("0" size)
        -> "0"
    :
      $str ""
      loop !str:
        if
          val > 0:
            $hex_digit val & 0x0f
            put &str
              if
                hex_digit >= 10
                -> 'a'+hex_digit-10
                -> '0'+hex_digit
            !val val >> 4
            next
          -> str
      if
        size.is_defined
        -> pad_left(str size "0")
        -> str

$std::inc:
  #
    adds the number 1 to the specified value

    Result:
      value # the value increased by 1

    Topic: Math

    See also: dec, plus

    Example:

      println! inc(123)

    Output:

      124
  (
    value # the value to increase
  )
  plus value 1

$std::dec:
  #
    subtracts the number 1 from the specified value

    Result:
      value # the value decreased by 1

    Topic: Math

    See also: inc, minus

    Example:

      println! dec(123)

    Output:

     122
  (
    value # the value to decrease
  )
  minus value 1

$std::abs:
  #
    returns the absolute value of its (numerical) argument

    Topic: Math

    See also: sgn

    Example:

      println! abs(-123)

    Output:

      123
  (
    value # the value to take the absolute value of
  )
  if
    value < 0
    -> negate(value)
    -> value

$std::sgn:
  #
    returns the sign of its (numerical) argument

    Result:
      result # -1, 0, or 1

    If the argument is less than zero then *-1* is returned.

    If the argument equals zero then *0* is returned.

    If the argument is greater than zero then *1* is returned.

    Topic: Math

    See also: abs

    Example:

      println! sgn(-123)

    Output:

      -1

    Example:

      println! sgn(0)

    Output:

      0

    Example:

      println! sgn(123)

    Output:

      1
  (
    value # the value to determine the sign of
  )
  cond
    -> value > 0 -> 1
    -> value < 0 -> -1
    -> true -> 0

$std::is_odd:
  #
    returns true if the specified value is odd, false otherwise

    Result:
      success # true or false

    Topic: Math

    See also: is_even

    Example:

      dump! `is_odd(123)

    Output:

      is_odd(123): <true>

    Example:

      dump! `is_odd(124)

    Output:

      is_odd(124): <false>
  (
    n # the value to check
  )
  -> n & 1 == 1

$std::is_even:
  #
    returns true if the specified value is even, false otherwise

    Result:
      success # true or false

    Topic: Math

    See also: is_odd

    Example:

      dump! `is_even(124)

    Output:

      is_even(124): <true>

    Example:

      dump! `is_even(123)

    Output:

      is_even(123): <false>
  (
    n # the value to check
  )
  -> n & 1 == 0

$std::sqr:
  #
    returns the square of its (numerical) argument

    Result:
      value # the square of the argument

    Topic: Math

    See also: pow, sqrt, isqrt

    Example:

      println! sqr(4)

    Output:

      16
  (
    value # the value to square
  )
  -> value*value

$std::min:
  #
    returns the smallest of its (potentially) many arguments

    Result:
      value # the smallest of the arguments

    Topic: Math

    See also: max, min_max

    Example:

      println! min(47 11 32)

    Output:

      11
  (
    args* # the arguments to compare
  )
  $result args(1)
  for_each range(args 2 -1)
    : (arg)
      if
        arg < result:
          !result arg
          next
        next
    -> result

$std::max:
  #
    returns the largest of its (potentially) many arguments

    Result:
      value # the largest of the arguments
    Topic: Math

    See also: min, min_max

    Example:

      println! max(47 11 32)

    Output:

      47
  (
    args* # the arguments to compare
  )
  $result args(1)
  for_each range(args 2 -1)
    : (arg)
      if
        arg > result:
          !result arg
          next
        next
    -> result

$std::min_max:
  #
    returns the smaller and the larger of its two arguments

    Result:
      min # the smaller of the arguments
      max # the larger of the arguments

    Topic: Math

    See also: min, max

    Example:

      $a 47
      $b 11
      min_max &a &b
      println! "min: " a
      println! "max: " b

    Output:

      min: 11
      max: 47
  (
    first_value # the first argument
    second_value # the second argument
  )
  if
    first_value <= second_value
    -> first_value second_value
    -> second_value first_value

$std::isqrt:
  #
    returns the integer square root of its argument

    Topic: Math

    See also: sqr, pow
  (
    n
  )
  if
    n < 0
    -> undefined
    :
      $x n
      $y 1
      loop:
        if
          x > y
          :
            !x (x+y) >> 1
            !y n .div. x
            next
          -> x

$std::PI 3.1415926535897932846
  #
    the mathematical constant PI

    Topic: Math

    See also: cos, sin, tan, asin, acos, atan

[source]

$std::sgn:
  #
    returns the sign of its (numerical) argument

    Result:
      result # -1, 0, or 1

    If the argument is less than zero then *-1* is returned.

    If the argument equals zero then *0* is returned.

    If the argument is greater than zero then *1* is returned.

    Topic: Math

    See also: abs

    Example:

      println! sgn(-123)

    Output:

      -1

    Example:

      println! sgn(0)

    Output:

      0

    Example:

      println! sgn(123)

    Output:

      1
  (
    value # the value to determine the sign of
  )
  cond
    -> value > 0 -> 1
    -> value < 0 -> -1
    -> true -> 0

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Numbers

# std::sgn (a function)

