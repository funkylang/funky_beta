[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std::hexdump_to:
  (
    fd
    str
  )
  $i 0
  $n length_of(str)
  loop:
    if
      i >= n:
        on (i .mod. 16) != 0: print_to! fd "@nl;"
      :
        on (i .mod. 16) == 0:
          print_to! fd hex(i 8)
          print_to! fd ":"
        inc &i
        print_to! fd " "
        print_to! fd hex(str(i).to_integer 2)
        on (i .mod. 16) == 0: print_to! fd "@nl;"
        next!

[documentation remark]

# std::hexdump_to (an I/O-function)

  writes a hexdump of the specified string to the specified file descriptor

  Parameters:
    fd: the file descriptor to write to
    str: the string to hexdump

  Results:
    none

  **Attention**: This function must be called with I/O-access rights!

  The function displays the string's hexadecimal representation.

  Topic: Debugging

  See also: std::hexdump, std::ehexdump, debug::hexdump, std::dump_to

  Example:

    $data "Hello, world!"
    hexdump_to! STDOUT_FILENO data

  Output:

    00000000: 48 65 6c 6c 6f 2c 20 77 6f 72 6c 64 21

[EXERCISE]

#
  Topic: Input-Output Task Manager

  **ATTENTION**: This module might be deprecated!

  Related topics: Input-Output, Input-Output Events

[symbols]

$std::log_level 1

# for tasks in phase 1 (compute)


# the following functions end the compute phase

$std::perform_io () # self body arguments continuation
$std::pause () # self continuation
$std::wait_for_message () # self continuation

# the following functions can be called within the compute phase

$std::fork () # &self task start_function
$std::send () # &self destination message
$std::receive () # &self !message
$std::on_error () # &self handler
$std::on_cancel () # &self handler

# for tasks in phase 4 (start I/O)

$std::check_io () # self io body arguments
$std::on_exit () # &self handler arguments

# for tasks in phase 4 & 6 (start & complete I/O)

$std::performed_io () # self io arguments

#  for tasks in phase 5 (check I/O)

$std::recheck_io () # self body arguments
$std::complete_io () # self body arguments
$std::checked_io () # self arguments

# I/O actions


# the following actions call <perform_io>

$std::catch_signal ()

# public task methods

$std::task_id_of ()
$std::parent_of ()
$std::children_of ()

# private task fields


# Modes

$std::additional_error_information_of ()
$std_types::error.additional_error_information_of undefined
$std::generate_error_message ()
$std_types::error/generate_error_message: (self)
$std_types::io_task std_types::object
$std_types::io_task.log_messages_of empty_list
$std_types::io_task.exit_handlers_of empty_list
$std_types::io_task.error_handler_of undefined
$std_types::io_task.cancel_handler_of undefined
$std_types::io_task.parent_id_of 0
$std_types::io_task.child_ids_of empty_list
$std_types::io_task.inbound_messages_of empty_list
$std_types::io_task.outbound_messages_of empty_list
$std_types::io_task.fork_requests_of empty_list
$std_types::io_task.cancel_requests_of empty_list
$std_types::io_task.is_cancelled false
$std_types::io_task/task_id_of: (self) -> id_of(self)
$std_types::io_task/parent_of: (self)
$std_types::io_task/children_of: (self) -> child_ids_of(self)
$std_types::io_task/perform_io:
$std_types::io_task/pause: (self continuation)
$std_types::io_task/wait_for_message: (self continuation)
$std_types::io_task/check_io: (self io body argument)
$std_types::io_task/performed_io:
$std_types::io_task/recheck_io: (self body argument)
$std_types::io_task/complete_io: (self body argument)
$std_types::io_task/checked_io: (self argument)
$std_types::io_task/log: (self argument*)
$std_types::io_task/send: (self receiver message)
$std_types::io_task/receive: (self)
$std_types::io_task/cancel:
$std_types::io_task/on_exit:
$std_types::io_task/on_error: (self handler)
$std_types::io_task/on_cancel: (self handler)
$std_types::io_task/load: (self my_filename continuation)
$std_types::io_task/save: (self my_filename my_data continuation)
$std_types::io_task/read:
$std_types::io_task/write: (self my_fd my_text continuation)
$std_types::io_task/join_process: (self my_pid continuation)
$std_types::io_task/catch_signal: (self continuation)
$std_types::io_task/fork:
$std_types::io_task/exit:
$std::io_task_manager:

$std_types::io_task/read:
  #
    reads at least the specified number of octets
  (
    self
    my_fd
    my_length
    continuation
  )
  perform_io self start_read_request tuple(my_fd my_length) continuation

  $start_read_request: (task io argument)
    if
      task.is_cancelled: # we must not start an I/O operation!
        performed_io task io "" # we didn't read a single byte ...
      :
        argument $fd $length
        start_reading_from &io fd
        check_io task io check_read_request tuple(fd length "")

  $check_read_request: (task events argument)
    argument $fd $length $buf
    if
      task.is_cancelled: # we are called as a start-I/O-handler!
        $io events
        stop_reading_from &io fd
        performed_io task io buf # return the partial read data
      :
        for_each events
          : (event)
            event $type $efd $data
            if_not
              type == READ && efd == fd next:
                if
                  data == "":
                    complete_io task complete_read_request tuple(fd buf)
                  :
                    append &buf data
                    if
                      length_of(buf) >= length:
                        complete_io task complete_read_request tuple(fd buf)
                      :
                        recheck_io task check_read_request tuple(fd length buf)
          :
            recheck_io task check_read_request argument

  $complete_read_request: (task io argument)
    argument $fd $buf
    stop_reading_from &io fd
    performed_io task io buf

$std_types::io_task/write: (self my_fd my_text continuation)
  perform_io self write_request tuple(my_fd my_text) continuation

  $write_request: (task io argument)
    argument $fd $text
    if
      task.is_cancelled: # we must not start an I/O operation!
        performed_io task io text # we didn't write a single byte ...
      :
        write &io fd text
        check_io task io check_write_request fd

  $check_write_request: (task events fd)
    if
      task.is_cancelled: # we are called as a start-I/O-handler!
        $io events
        cancel_write &io $unwritten_text fd
        performed_io task io unwritten_text # return the not yet written text
      :
        for_each events
          : (event)
            event $type $efd $_data
            if
              type == WRITE_COMPLETED && efd == fd:
                checked_io task undefined
              next
          :
            recheck_io task check_write_request fd

$std_types::io_task/join_process: (self my_pid continuation)
  perform_io self join_process_request my_pid continuation

  $join_process_request: (task io pid)
    join_process &io pid
    check_io task io join_process_request_pending pid

  $join_process_request_pending: (task events pid)
    for_each events
      : (event)
        event $type $epid $status
        if
          type == PROCESS_JOINED && epid == pid:
            checked_io task status
          next
      :
        recheck_io task join_process_request_pending pid

$std_types::io_task/catch_signal: (self continuation)
  perform_io self catch_signal_request undefined continuation

  $catch_signal_request: (task io _arguments)
    start_catching_signals &io
    check_io task io catch_signal_request_pending undefined

  $catch_signal_request_pending: (task events _arguments)
    if
      task.is_cancelled:
        complete_io task cancel_catch_signal_request undefined
      :
        $signals empty_list
        for_each events
          : (event)
            event $type $_dummy $signal
            if
              type == SIGNAL:
                push &signals signal
                next
              next
          :
            if
              signals.is_empty:
                recheck_io task catch_signal_request_pending undefined
              :
                complete_io task catch_signal_request_completed signals

  $cancel_catch_signal_request: (task io _arguments)
    stop_catching_signals &io
    performed_io task io

  $catch_signal_request_completed: (task io signals)
    stop_catching_signals &io
    performed_io task io signals

$std_types::io_task/fork:
  (
    self
    task
    continuation
    argument = undefined
  )
  push &self.fork_requests_of tuple(task continuation argument)
  -> self

$std_types::io_task/exit:
  (
    self
    status = EXIT_SUCCESS
  )
  tuple self EXIT undefined status undefined

[source]

$std::io_task_manager:
  #
    starts the main loop of the io-task manager

  (
    first_task
    start
    start_arguments = undefined
  )
  $exit_status EXIT_SUCCESS
  $io std_types::io
  $updated_requests empty_list
  $new_requests empty_list
  $cancellations empty_key_order_set
  $sent_messages empty_key_order_table
  $removed_children empty_key_order_table
  $log_message ""
  $events empty_list
  $requests
    list(tuple(first_task(.id_of 1) COMPUTE undefined start_arguments start))
  $current_task_id 1
  $iteration_no 0

  # Main Loop

  loop:
    # Phase 1

    inc &iteration_no
    map &requests compute
    update_if log_level >= 4 && removed_children.is_not_empty &log_message:
      for_each removed_children
        : (parent_id children)
          for_each children: (child_id)
            $parent
              if
                parent_id != 0
                -> " (parent: @(parent_id))@nl;"
                -> "@nl;"
            append &log_message "REMOVED TASK @(child_id)@(parent)"
            next
        -> log_message
    !removed_children empty_key_order_table

    # Phase 2

    for_each &requests
      !current_task_id
      !new_requests
      !sent_messages
      !cancellations
      !log_message
      : (request)
        request $task $mode $body $argument $continuation
        collect_messages &task !sent_messages
        collect_cancel_requests &task !cancellations
        collect_log_messages &task !log_message
        create_new_tasks &task !current_task_id !new_requests
        push &updated_requests tuple(task mode body argument continuation)
        next
      ->
        updated_requests
        current_task_id
        new_requests
        sent_messages
        cancellations
        log_message

    # Phase 3

    $do_receive_messages not(sent_messages.is_empty)
    $do_cancel_tasks not(cancellations.is_empty)
    map &requests: (request)
      update_if do_receive_messages &request -> receive_messages(request)
      update_if do_cancel_tasks &request -> maybe_mark_as_cancelled(request)
      -> request
    !sent_messages empty_key_order_table
    !cancellations empty_key_order_set

    # Phase 4

    queue_log_message_write !io
    !log_message ""
    for_each &requests !io
      : (request)
        start_io_operation! &request !io
        push &updated_requests request
        next!
      -> updated_requests io
    !updated_requests empty_list

    # Phase 5

    $something_to_do
      ||
        new_requests.is_not_empty
        any_of(requests has_something_to_do)
    maybe_exit! something_to_do
    get_and_check_events! !requests !io something_to_do

    # Phase 6

    for_each &requests !io !removed_children !log_message !exit_status
      : (request)
        request $task $mode $body $argument $continuation
        case mode
          COMPLETE_IO: # a task in the complete-I/O phase cannot be cancelled!
            complete_io_operation!
          EXIT:
            update_if argument == EXIT_FAILURE &exit_status -> EXIT_FAILURE
            exit_task! task !io !exit_status !removed_children
            next!
          COMPUTE:
            if
              argument.is_an_error:
                handle_error!
              :
                maybe_cancel_task!
          :
            maybe_cancel_task!

        $complete_io_operation:
          if
            parameter_count_of(body) == 3:
              body! !mode &task &io !body &argument
              check_for_error!
            :
              body! !mode &task &io !body !argument
              check_for_error!

        $check_for_error:
          if
            argument.is_an_error:
              handle_error!
            :
              push &updated_requests tuple(task mode body argument continuation)
              next!

        $handle_error:
          $error_handler error_handler_of(task)
          if
            error_handler.is_defined:
              push &updated_requests
                tuple(task COMPUTE undefined argument error_handler)
              next!
            :
              !exit_status EXIT_FAILURE
              $message generate_error_message(argument)
              append_log_entry !log_message task push(message '@nl;')
              exit_task! task !io !exit_status !removed_children
              next!

        $maybe_cancel_task:
          if
            task.is_cancelled:
              $cancel_handler cancel_handler_of(task)
              if
                cancel_handler.is_defined:
                  request !task !mode !body !argument !continuation
                  !task.is_cancelled false
                  push &updated_requests
                    tuple(task COMPUTE undefined argument cancel_handler)
                  next!
                :
                  exit_task! task !io !exit_status !removed_children
                  next!
            :
              push &updated_requests request
              next!

      -> updated_requests io removed_children log_message exit_status
    append &requests new_requests
    !new_requests empty_list

    # restart with phase 1

    next!

  ##########

  # Phase 1 Functions

  $compute: (request)
    request $task $mode $body $argument $continuation
    $removed removed_children(id_of(task))
    update_if removed.is_defined &request &task:
      filter &task.child_ids_of: (id) -> not(removed(id))
      -> tuple(task mode body argument continuation) task
    if
      mode == COMPUTE:
        if
          parameter_count_of(continuation) == 2:
            !request continuation(task argument)
            check_request
          :
            !request continuation(task)
            check_request

        $check_request:
          if
            request.is_an_error:
              log &task generate_error_message(request)
              -> tuple(task EXIT undefined EXIT_FAILURE undefined)
            -> request
      -> request

  # Phase 2 Functions

  $collect_messages: (task)
    for_each outbound_messages_of(task)
      : (entry)
        entry $receiver $message
        if
          receiver.is_an_integer:
            send_message! receiver
          :
            for_each! receiver send_message

        $send_message: (the_receiver)
          $messages default_value(sent_messages(the_receiver) empty_list)
          push &messages message
          !sent_messages(the_receiver) messages
          next!
      :
        !task.outbound_messages_of empty_list
        -> task sent_messages

  $collect_cancel_requests: (task)
    for_each cancel_requests_of(task)
      : (id)
        !cancellations(id) true
        next!
      :
        !task.cancel_requests_of empty_list
        -> task cancellations

  $collect_log_messages: (task)
    if
      log_level == 0
      -> task log_message
      :
        for_each log_messages_of(task)
          : (message)
            append_log_entry !log_message task message
            !task.log_messages_of empty_list
            next!
          -> task log_message

  $append_log_entry: (task message)
    append log_message
      if
        log_level >= 2
        -> string(id_of(task) ": " message)
        -> message

  $create_new_tasks: (task)
    if
      fork_requests_of(task).is_empty
      -> task current_task_id new_requests
      :
        for_each fork_requests_of(task)
          : (fork_request)
            fork_request $new_task $continuation $argument

            # clean the new task (might be a clone of an existing one)

            !new_task.log_messages_of empty_list
            !new_task.exit_handlers_of empty_list
            !new_task.error_handler_of undefined
            !new_task.cancel_handler_of undefined
            !new_task.child_ids_of empty_list
            !new_task.inbound_messages_of empty_list
            !new_task.outbound_messages_of empty_list
            !new_task.fork_requests_of empty_list
            !new_task.cancel_requests_of empty_list
            !new_task.is_cancelled false

            # now initialize the task

            inc &current_task_id
            !new_task.id_of current_task_id
            !new_task.parent_id_of id_of(task)

            # update the parent task

            push &task.child_ids_of current_task_id

            # add a compute-request for the new task

            push &new_requests
              tuple(new_task COMPUTE undefined argument continuation)
            next
          :
            !task.fork_requests_of empty_list
            -> task current_task_id new_requests

  # Phase 3 Functions

  $receive_messages: (request)
    request $task $mode $body $argument $continuation
    $messages sent_messages(id_of(task))
    if
      messages.is_defined:
        append &task.inbound_messages_of messages
        update_if mode == WAIT &mode -> COMPUTE
        -> tuple(task mode body argument continuation)
      -> request

  $maybe_mark_as_cancelled: (request)
    request $task $mode $body $argument $continuation
    if
      cancellations(id_of(task)):
        !task.is_cancelled true
        -> tuple(task mode body argument continuation)
      -> request

  # Phase 4 Functions

  $queue_log_message_write:
    update_if log_level >= 4 &log_message:
      for_each new_requests
        : (request)
          request $task $_mode $_body $_arguments $_continuation
          append &log_message "
            CREATED TASK @(id_of(task)) (parent: @(parent_id_of(task)))
          next
        -> log_message
    if
      log_message.is_empty
      -> io
      : # any events caused by these writes are ignored
        update_if log_level >= 3 &io:
          write io STDERR_FILENO "
            ---[@(iteration_no)]---------------------------
        write &io STDERR_FILENO log_message.to_utf8
        -> io

  $start_io_operation: (request)
    request $task $mode $body $argument $continuation
    if
      ||
        mode == START_IO
        task.is_cancelled && mode == CHECK_IO
      :
        if
          parameter_count_of(body) == 3:
            body! !mode &task &io !body &argument
            -> tuple(task mode body argument continuation) io
          :
            body! !mode &task &io !body !argument
            -> tuple(task mode body argument continuation) io
      -> request io

  # Phase 5 Functions

  $has_something_to_do: (request)
    request $_task $mode $_body $_arguments $_continuation
    -> mode == COMPUTE || mode == EXIT

  $maybe_exit: (something_to_do)
    if
      io.is_empty:
        if
          requests.is_empty:
            exit! exit_status # no more requests and no more pending log-writes
          :
            if
              something_to_do
              pass
              :
                write! $_bytes_written STDERR_FILENO "
                  NO TASK IS READY AND NO I/O OPERATIONS ARE PENDING!
                exit! EXIT_FAILURE
      pass

  $get_and_check_events: (something_to_do)
    if
      io.is_empty
      -> requests io
      :
        $timeout
          if
            something_to_do
            -> 0 # poll
            -> undefined # wait "forever"
        get_events! &io !events timeout
        map &requests check_events
        !events empty_list
        -> requests io

  $check_events: (request)
    request $task $mode $body $argument $continuation
    if
      mode == CHECK_IO:
        body !mode &task events !body &argument
        -> tuple(task mode body argument continuation)
      -> request

  # Phase 6 Functions

  $exit_task: (task)
    $parent_id parent_id_of(task)
    $removed default_value(removed_children(parent_id) empty_key_order_set)
    !removed(id_of(task)) true
    !removed_children(parent_id) removed
    for_each exit_handlers_of(task)
      : (item)
        item $handler $handler_arguments
        if
          parameter_count_of(handler) == 3:
            handler! task &io $success handler_arguments
            update_if success.is_an_error &exit_status -> EXIT_FAILURE
            next!
          :
            handler! task &io $success
            update_if success.is_an_error &exit_status -> EXIT_FAILURE
            next!
      -> io exit_status removed_children

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Do not create completely new examples on your own

### Use only one of the following topics: Input-Output Task Manager, Input-Output

# std::io_task_manager (an I/O-function)

