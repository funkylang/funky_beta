# std::truncate_from (a polymorphic function)

  returns the substring before the specified expression

  Parameters:
    str: the string to truncate
    expr: the expression to look for
    nth: look for the nth occurrence of *expr* instead for the first one

  Result:
    str: the truncated string

  If the specified expression is found within the string the substring
  before the expression is returned. Otherwise the string is returned
  unaltered.

  If *nth* is specified then the nth occurence of the expression *expr*
  is looked for. If there are not at least *n* matches for *expr* within *str*
  then the string is returned una lte red.

  A very similar function is <string/before>. It behaves differently only when
  the expression is *not* found.

  Topic: Collections

  See also: string/before, string/behind, string/between, string/until

  Example:

    $identifier "std::truncate_from"
    $namespace identifier .truncate_from. "::"
    println! namespace

  Output:

    std

  Example:

    $identifier "std::truncate_from"
    $first_part identifier .truncate_from. '.'
    println! '[' first_part '] '

  Output:

    [std::truncate_from]




((defined in basic/types/collections/collection.fky))
((generated by gemma-2-27b-it.Q5_K.gguf))
((2024-07-03 21:35:43))
