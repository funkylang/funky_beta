# std::loop (an I/O-function)

  a simple "loop"

  Parameters:
    body: the function to execute for each "iteration" of the "loop"
    finally: the function to execute after the last "iteration"

  Results:
    the result of the *finally* function

  This function supports I/O-access rights!

  The *finally* function is called after the last "iteration" of the loop and is
  responsible to return any results from the "loop". Due to the fact that the
  "loop" is a normal function it cannot make any changes to its caller's
  variables directly.

  All "loops" redefine the function <next> to start the next iteration of the
  "loop". This <next> function must be called at the end of each "iteration".

  Some loops also offer a <break> function which can be used to stop
  "iterating" and calls the *finally* function immediately.

  Some "loops" define the no-op function <pass> as the default function for
  *finally*.

  Instead of calling <next> or <break> a loop's body can direct return one or
  more results.

  Due to some clever context saving and restoring "loops" can be nested to any
  level.

  The most basic "loop" is <loop>.

  Practically all <@Collections> support <for_each>.

  The "loop" construct replaces loops like *while*, *do_while* and *forever*.

  To start the next iteration of the "loop" use the <next>-function.

  <next> and <break> **must** be called in tail position!

  A "loop" is exited via <break> or through returning one or more results.

  Topic: Loops

  See also: std::repeat, std::from_to, std::from_to_by, std::next, std::break

  Example:

    $buf ""
    $a 1
    loop !buf
      : # "while" style
	if
	  a <= 3:
	    $b 1
	    loop
	      : # "do while" style
		append &buf "
		  @(a) * @(b) = @(a*b)
		inc &b
		if
		  b <= 2
		  next
		  break
	      :
		inc &a
		next
	  -> buf

    print! buf

  Output:

    1*1 = 1
    1*2 = 2
    2*1 = 2
    2*2 = 4
    3*1 = 3
    3*2 = 6

  Example:

    $sum 0
    $i 0
    println! "sum = "
      loop
	:
	  inc &i
	  plus &sum i
	  if
	    i < 5
	    next
	    break
	-> sum

  Output:

    sum = 15

((defined in basic/loops.fky))
((generated manually))
((2024-07-13 19:10:40))
