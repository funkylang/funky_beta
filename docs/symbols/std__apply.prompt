[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std::hexdump_to:
  (
    fd
    str
  )
  $i 0
  $n length_of(str)
  loop:
    if
      i >= n:
        on (i .mod. 16) != 0: print_to! fd "@nl;"
      :
        on (i .mod. 16) == 0:
          print_to! fd hex(i 8)
          print_to! fd ":"
        inc &i
        print_to! fd " "
        print_to! fd hex(str(i).to_integer 2)
        on (i .mod. 16) == 0: print_to! fd "@nl;"
        next!

[documentation remark]

# std::hexdump_to (an I/O-function)

  writes a hexdump of the specified string to the specified file descriptor

  Parameters:
    fd: the file descriptor to write to
    str: the string to hexdump

  Results:
    none

  **Attention**: This function must be called with I/O-access rights!

  The function displays the string's hexadecimal representation.

  Topic: Debugging

  See also: std::hexdump, std::ehexdump, debug::hexdump, std::dump_to

  Example:

    $data "Hello, world!"
    hexdump_to! STDOUT_FILENO data

  Output:

    00000000: 48 65 6c 6c 6f 2c 20 77 6f 72 6c 64 21

[EXERCISE]

[symbols]


# Topic: Collections

$std::count:
$std::any_of:
$std::all_of:
$std::apply:

#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Topic: Collections

$NONE .

$std::count:
  #
    counts items in a collection

    Returns the number of items in the specified collection that fullfill the
    specified criterion.

    If no *test*-function is given the collection must contain boolean values.

    If an *argument* is given the *test*-function is called with the collection
    item as the first argument and the *argument* as the second argument.

    Topic: Collections

    See also: any_of, all_of

    Example:

      $persons
        hash_table
          "Gregory" = 39
          "Julia" = 37
          "Maria" = 33
          "James" = 41
          "Sarah" = 38

      println! count(persons less 40)

    Output:

      4
  (
    collection
    test = NONE
    argument = NONE
  )
  if
    NONE == test:
      map_reduce collection
        : (item)
          if
            item
            -> 1
            -> 0
        plus
        0
    :
      if
        NONE == argument:
          map_reduce collection
            : (item)
              if
                test(item)
                -> 1
                -> 0
            plus
            0
        :
          map_reduce collection
            : (item)
              if
                test(item argument)
                -> 1
                -> 0
            plus
            0

$std::any_of:
  #
    tests all items of a collection

    Returns <true> if at least one item in the specified collection fullfills
    the specified criterion.

    Topic: Collections

    See also: all_of, count

    Example:

      $persons
        hash_table
          "Gregory" = 39
          "Julia" = 37
          "Maria" = 33
          "James" = 41
          "Sarah" = 38

      if
        any_of(persons less 40):
          println! "true"
        :
          println! "false"

    Output:

      true
  (
    collection # the collection which items to check
    test # the test function
    argument = NONE # additional argument that is passed to the test function
  )
  if
    argument == NONE:
      for_each collection
        : (item)
          if
            test(item)
            -> true
            next
        -> false
    :
      for_each collection
        : (item)
          if
            test(item argument)
            -> true
            next
        -> false

$std::all_of:
  #
    tests all items of a collection

    Returns <true> if all items in the specified collection fullfill the
    specified criterion.

    Topic: Collections

    See also: any_of, count

    Example:

      $persons
        hash_table
          "Gregory" = 39
          "Julia" = 37
          "Maria" = 33
          "James" = 41
          "Sarah" = 38

      if
        all_of(persons less 40):
          println! "true"
        :
          println! "false"

    Output:

      false
  (
    collection # the collection which items to check
    test # the test function
    argument = NONE # additional argument that is passed to the test function
  )
  if
    argument == NONE:
      for_each collection
        : (item)
          if
            test(item)
            next
            -> false
        -> true
    :
      for_each collection
        : (item)
          if
            test(item argument)
            next
            -> false
        -> true

$std::apply:
  (
    function
    arguments*
  )
  if
    arguments.is_empty:
      function!
    :
      !arguments append(range(arguments 1 -2) arguments(-1))
      case length_of(arguments)
        1: function! arguments(1)
        2: function! arguments(1) arguments(2)
        3: function! arguments(1) arguments(2) arguments(3)
        4: function! arguments(1) arguments(2) arguments(3) arguments(4)
        5:
          function!
            arguments(1) arguments(2) arguments(3) arguments(4) arguments(5)
        6:
          function!
            arguments(1) arguments(2) arguments(3) arguments(4) arguments(5)
            arguments(6)
        7:
          function!
            arguments(1) arguments(2) arguments(3) arguments(4) arguments(5)
            arguments(6) arguments(7)
        8:
          function!
            arguments(1) arguments(2) arguments(3) arguments(4) arguments(5)
            arguments(6) arguments(7) arguments(8)
        :
          error "TOO MANY ARGUMENTS FOR APPLY"

[source]

$std::apply:
  (
    function
    arguments*
  )
  if
    arguments.is_empty:
      function!
    :
      !arguments append(range(arguments 1 -2) arguments(-1))
      case length_of(arguments)
        1: function! arguments(1)
        2: function! arguments(1) arguments(2)
        3: function! arguments(1) arguments(2) arguments(3)
        4: function! arguments(1) arguments(2) arguments(3) arguments(4)
        5:
          function!
            arguments(1) arguments(2) arguments(3) arguments(4) arguments(5)
        6:
          function!
            arguments(1) arguments(2) arguments(3) arguments(4) arguments(5)
            arguments(6)
        7:
          function!
            arguments(1) arguments(2) arguments(3) arguments(4) arguments(5)
            arguments(6) arguments(7)
        8:
          function!
            arguments(1) arguments(2) arguments(3) arguments(4) arguments(5)
            arguments(6) arguments(7) arguments(8)
        :
          error "TOO MANY ARGUMENTS FOR APPLY"

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Collections, Input-Output

# std::apply (an I/O-function)

