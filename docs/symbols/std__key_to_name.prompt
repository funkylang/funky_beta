[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std::DIGIT '0'..'9'

[documentation remark]

# std::DIGIT (an object)

  a value used to match a digit

  Topic: Grammar Objects

  See also: std::LETTER, std::ALPHANUMERIC

[EXERCISE]

[symbols]


# Topic: Terminals

$std::name_to_key undefined
$std::key_to_name undefined
$std::NEW_WINDOW_SIZE .
$std::initialize_terminal_keys: (body)
$std::get_key:
$std::extract_keys:
$std::ESCAPE .
$std::RETURN .
$std::CURSOR_LEFT .
$std::CURSOR_RIGHT .
$std::CURSOR_UP .
$std::CURSOR_DOWN .
$std::HOME .
$std::END .
$std::PAGE_UP .
$std::PAGE_DOWN .
$std::INSERT .
$std::DELETE .
$std::F1 .
$std::F2 .
$std::F3 .
$std::F4 .
$std::F5 .
$std::F6 .
$std::F7 .
$std::F8 .
$std::F9 .
$std::F10 .
$std::F11 .
$std::F12 .
$std::SHIFT_TABULATOR .
$std::SHIFT_CURSOR_LEFT .
$std::SHIFT_CURSOR_RIGHT .
$std::SHIFT_CURSOR_UP .
$std::SHIFT_CURSOR_DOWN .
$std::SHIFT_HOME .
$std::SHIFT_END .
$std::SHIFT_PAGE_UP .
$std::SHIFT_PAGE_DOWN .
$std::SHIFT_INSERT .
$std::SHIFT_DELETE .
$std::SHIFT_F1 .
$std::SHIFT_F2 .
$std::SHIFT_F3 .
$std::SHIFT_F4 .
$std::SHIFT_F5 .
$std::SHIFT_F6 .
$std::SHIFT_F7 .
$std::SHIFT_F8 .
$std::SHIFT_F9 .
$std::SHIFT_F10 .
$std::SHIFT_F11 .
$std::SHIFT_F12 .
$std::ALT_SPACE .
$std::ALT_BACKSPACE .
$std::ALT_RETURN .
$std::ALT_CURSOR_LEFT .
$std::ALT_CURSOR_RIGHT .
$std::ALT_CURSOR_UP .
$std::ALT_CURSOR_DOWN .
$std::ALT_HOME .
$std::ALT_END .
$std::ALT_PAGE_UP .
$std::ALT_PAGE_DOWN .
$std::ALT_INSERT .
$std::ALT_DELETE .
$std::ALT_A .
$std::ALT_B .
$std::ALT_C .
$std::ALT_D .
$std::ALT_E .
$std::ALT_F .
$std::ALT_G .
$std::ALT_H .
$std::ALT_I .
$std::ALT_J .
$std::ALT_K .
$std::ALT_L .
$std::ALT_M .
$std::ALT_N .
$std::ALT_O .
$std::ALT_P .
$std::ALT_Q .
$std::ALT_R .
$std::ALT_S .
$std::ALT_T .
$std::ALT_U .
$std::ALT_V .
$std::ALT_W .
$std::ALT_X .
$std::ALT_Y .
$std::ALT_Z .
$std::ALT_F1 .
$std::ALT_F2 .
$std::ALT_F3 .
$std::ALT_F4 .
$std::ALT_F5 .
$std::ALT_F6 .
$std::ALT_F7 .
$std::ALT_F8 .
$std::ALT_F9 .
$std::ALT_F10 .
$std::ALT_F11 .
$std::ALT_F12 .
$std::CTRL_CURSOR_LEFT .
$std::CTRL_CURSOR_RIGHT .
$std::CTRL_CURSOR_UP .
$std::CTRL_CURSOR_DOWN .
$std::CTRL_HOME .
$std::CTRL_END .
$std::CTRL_PAGE_UP .
$std::CTRL_PAGE_DOWN .
$std::CTRL_BACKSPACE .
$std::CTRL_INSERT .
$std::CTRL_DELETE .
$std::CTRL_F1 .
$std::CTRL_F2 .
$std::CTRL_F3 .
$std::CTRL_F4 .
$std::CTRL_F5 .
$std::CTRL_F6 .
$std::CTRL_F7 .
$std::CTRL_F8 .
$std::CTRL_F9 .
$std::CTRL_F10 .
$std::CTRL_F11 .
$std::CTRL_F12 .
$std::CTRL_ALT_A .
$std::CTRL_ALT_B .
$std::CTRL_ALT_C .
$std::CTRL_ALT_D .
$std::CTRL_ALT_E .
$std::CTRL_ALT_F .
$std::CTRL_ALT_G .
$std::CTRL_ALT_H .
$std::CTRL_ALT_I .
$std::CTRL_ALT_J .
$std::CTRL_ALT_K .
$std::CTRL_ALT_L .
$std::CTRL_ALT_M .
$std::CTRL_ALT_N .
$std::CTRL_ALT_O .
$std::CTRL_ALT_P .
$std::CTRL_ALT_Q .
$std::CTRL_ALT_R .
$std::CTRL_ALT_S .
$std::CTRL_ALT_T .
$std::CTRL_ALT_U .
$std::CTRL_ALT_V .
$std::CTRL_ALT_W .
$std::CTRL_ALT_X .
$std::CTRL_ALT_Y .
$std::CTRL_ALT_Z .
$std::CTRL_ALT_HOME .
$std::CTRL_ALT_END .
$std::CTRL_SPACE .
$std::CTRL_A .
$std::CTRL_B .
$std::CTRL_C .
$std::CTRL_D .
$std::CTRL_E .
$std::CTRL_F .
$std::CTRL_G .
$std::BACKSPACE .
$std::TABULATOR .
$std::CTRL_J .
$std::CTRL_K .
$std::CTRL_L .
$std::CTRL_M .
$std::CTRL_N .
$std::CTRL_O .
$std::CTRL_P .
$std::CTRL_Q .
$std::CTRL_R .
$std::CTRL_S .
$std::CTRL_T .
$std::CTRL_U .
$std::CTRL_V .
$std::CTRL_W .
$std::CTRL_X .
$std::CTRL_Y .
$std::CTRL_Z .
$std::SHIFT_CTRL_CURSOR_LEFT .
$std::SHIFT_CTRL_CURSOR_RIGHT .
$std::SHIFT_CTRL_CURSOR_UP .
$std::SHIFT_CTRL_CURSOR_DOWN .
$std::SHIFT_CTRL_HOME .
$std::SHIFT_CTRL_END .
$std::SHIFT_CTRL_PAGE_UP .
$std::SHIFT_CTRL_PAGE_DOWN .

# Topic: Terminals

$csi_table undefined

$std::name_to_key undefined

$std::key_to_name undefined

$std::NEW_WINDOW_SIZE .

$std::initialize_terminal_keys: (body)
  hash_table !csi_table
    "A" = CURSOR_UP
    "B" = CURSOR_DOWN
    "C" = CURSOR_RIGHT
    "D" = CURSOR_LEFT
    "F" = END
    "H" = HOME
    "2~" = INSERT
    "3~" = DELETE
    "5~" = PAGE_UP
    "6~" = PAGE_DOWN
    "15~" = F5
    "17~" = F6
    "18~" = F7
    "19~" = F8
    "20~" = F9
    "21~" = F10
    "23~" = F11
    "24~" = F12
    "Z" = SHIFT_TABULATOR
    "1;2A" = SHIFT_CURSOR_UP
    "1;2B" = SHIFT_CURSOR_DOWN
    "1;2C" = SHIFT_CURSOR_RIGHT
    "1;2D" = SHIFT_CURSOR_LEFT
    "1;2F" = SHIFT_END
    "1;2H" = SHIFT_HOME
    "5;2~" = SHIFT_PAGE_UP
    "6;2~" = SHIFT_PAGE_DOWN
    "3;2~" = SHIFT_DELETE
    "1;2P" = SHIFT_F1
    "1;2Q" = SHIFT_F2
    "1;2R" = SHIFT_F3
    "1;2S" = SHIFT_F4
    "15;2~" = SHIFT_F5
    "17;2~" = SHIFT_F6
    "18;2~" = SHIFT_F7
    "19;2~" = SHIFT_F8
    "20;2~" = SHIFT_F9
    "21;2~" = SHIFT_F10
    "23;2~" = SHIFT_F11
    "24;2~" = SHIFT_F12
    "1;3A" = ALT_CURSOR_UP
    "1;3B" = ALT_CURSOR_DOWN
    "1;3C" = ALT_CURSOR_RIGHT
    "1;3D" = ALT_CURSOR_LEFT
    "1;3F" = ALT_END
    "1;3H" = ALT_HOME
    "5;3~" = ALT_PAGE_UP
    "6;3~" = ALT_PAGE_DOWN
    "2;3~" = ALT_INSERT
    "3;3~" = ALT_DELETE
    "1;3P" = ALT_F1
    "1;3Q" = ALT_F2
    "1;3R" = ALT_F3
    "1;3S" = ALT_F4
    "15;3~" = ALT_F5
    "17;3~" = ALT_F6
    "18;3~" = ALT_F7
    "19;3~" = ALT_F8
    "20;3~" = ALT_F9
    "21;3~" = ALT_F10
    "23;3~" = ALT_F11
    "24;3~" = ALT_F12
    "1;5A" = CTRL_CURSOR_UP
    "1;5B" = CTRL_CURSOR_DOWN
    "1;5C" = CTRL_CURSOR_RIGHT
    "1;5D" = CTRL_CURSOR_LEFT
    "1;5F" = CTRL_END
    "1;5H" = CTRL_HOME
    "2;5~" = CTRL_INSERT
    "1;6A" = SHIFT_CTRL_CURSOR_UP
    "1;6B" = SHIFT_CTRL_CURSOR_DOWN
    "1;6C" = SHIFT_CTRL_CURSOR_RIGHT
    "1;6D" = SHIFT_CTRL_CURSOR_LEFT
    "5;6~" = SHIFT_CTRL_PAGE_UP
    "6;6~" = SHIFT_CTRL_PAGE_DOWN
    "1;6F" = SHIFT_CTRL_END
    "1;6H" = SHIFT_CTRL_HOME
    "5;5~" = CTRL_PAGE_UP
    "6;5~" = CTRL_PAGE_DOWN
    "3;5~" = CTRL_DELETE
    "1;7F" = CTRL_ALT_END
    "1;7H" = CTRL_ALT_HOME
    "1;5P" = CTRL_F1
    "1;5Q" = CTRL_F2
    "1;5R" = CTRL_F3
    "1;5S" = CTRL_F4
    "15;5~" = CTRL_F5
    "17;5~" = CTRL_F6
    "18;5~" = CTRL_F7
    "19;5~" = CTRL_F8
    "20;5~" = CTRL_F9
    "21;5~" = CTRL_F10
    "23;5~" = CTRL_F11
    "24;5~" = CTRL_F12

  hash_table !name_to_key
    "return" = RETURN
    "backspace" = BACKSPACE
    "tabulator" = TABULATOR
    "cursor-up" = CURSOR_UP
    "cursor-down" = CURSOR_DOWN
    "cursor-right" = CURSOR_RIGHT
    "cursor-left" = CURSOR_LEFT
    "home" = HOME
    "end" = END
    "insert" = INSERT
    "delete" = DELETE
    "page-up" = PAGE_UP
    "page-down" = PAGE_DOWN
    "f1" = F1
    "f2" = F2
    "f3" = F3
    "f4" = F4
    "f5" = F5
    "f6" = F6
    "f7" = F7
    "f8" = F8
    "f9" = F9
    "f10" = F10
    "f11" = F11
    "f12" = F12
    "shift-tabulator" = SHIFT_TABULATOR
    "shift-cursor-up" = SHIFT_CURSOR_UP
    "shift-cursor-down" = SHIFT_CURSOR_DOWN
    "shift-cursor-right" = SHIFT_CURSOR_RIGHT
    "shift-cursor-left" = SHIFT_CURSOR_LEFT
    "shift-home" = SHIFT_HOME
    "shift-end" = SHIFT_END
    "shift-page-up" = SHIFT_PAGE_UP
    "shift-page-down" = SHIFT_PAGE_DOWN
    "shift-insert" = SHIFT_INSERT
    "shift-delete" = SHIFT_DELETE
    "shift-f1" = SHIFT_F1
    "shift-f2" = SHIFT_F2
    "shift-f3" = SHIFT_F3
    "shift-f4" = SHIFT_F4
    "shift-f5" = SHIFT_F5
    "shift-f6" = SHIFT_F6
    "shift-f7" = SHIFT_F7
    "shift-f8" = SHIFT_F8
    "shift-f9" = SHIFT_F9
    "shift-f10" = SHIFT_F10
    "shift-f11" = SHIFT_F11
    "shift-f12" = SHIFT_F12
    "alt-cursor-up" = ALT_CURSOR_UP
    "alt-cursor-down" = ALT_CURSOR_DOWN
    "alt-cursor-right" = ALT_CURSOR_RIGHT
    "alt-cursor-left" = ALT_CURSOR_LEFT
    "alt-return" = ALT_RETURN
    "alt-home" = ALT_HOME
    "alt-end" = ALT_END
    "alt-page-up" = ALT_PAGE_UP
    "alt-page-down" = ALT_PAGE_DOWN
    "alt-insert" = ALT_INSERT
    "alt-delete" = ALT_DELETE
    "alt-space" = ALT_SPACE
    "alt-backspace" = ALT_BACKSPACE
    "alt-f1" = ALT_F1
    "alt-f2" = ALT_F2
    "alt-f3" = ALT_F3
    "alt-f4" = ALT_F4
    "alt-f5" = ALT_F5
    "alt-f6" = ALT_F6
    "alt-f7" = ALT_F7
    "alt-f8" = ALT_F8
    "alt-f9" = ALT_F9
    "alt-f10" = ALT_F10
    "alt-f11" = ALT_F11
    "alt-f12" = ALT_F12
    "ctrl-a" = CTRL_A
    "ctrl-b" = CTRL_B
    "ctrl-c" = CTRL_C
    "ctrl-d" = CTRL_D
    "ctrl-e" = CTRL_E
    "ctrl-f" = CTRL_F
    "ctrl-g" = CTRL_G
    "ctrl-j" = CTRL_J
    "ctrl-k" = CTRL_K
    "ctrl-l" = CTRL_L
    "ctrl-m" = CTRL_M
    "ctrl-n" = CTRL_N
    "ctrl-o" = CTRL_O
    "ctrl-p" = CTRL_P
    "ctrl-q" = CTRL_Q
    "ctrl-r" = CTRL_R
    "ctrl-s" = CTRL_S
    "ctrl-t" = CTRL_T
    "ctrl-u" = CTRL_U
    "ctrl-v" = CTRL_V
    "ctrl-w" = CTRL_W
    "ctrl-x" = CTRL_X
    "ctrl-y" = CTRL_Y
    "ctrl-z" = CTRL_Z
    "ctrl-cursor-up" = CTRL_CURSOR_UP
    "ctrl-cursor-down" = CTRL_CURSOR_DOWN
    "ctrl-cursor-right" = CTRL_CURSOR_RIGHT
    "ctrl-cursor-left" = CTRL_CURSOR_LEFT
    "ctrl-home" = CTRL_HOME
    "ctrl-end" = CTRL_END
    "ctrl-page-up" = CTRL_PAGE_UP
    "ctrl-page-down" = CTRL_PAGE_DOWN
    "ctrl-insert" = CTRL_INSERT
    "ctrl-delete" = CTRL_DELETE
    "ctrl-space" = CTRL_SPACE
    "ctrl-backspace" = CTRL_BACKSPACE
    "ctrl-f1" = CTRL_F1
    "ctrl-f2" = CTRL_F2
    "ctrl-f3" = CTRL_F3
    "ctrl-f4" = CTRL_F4
    "ctrl-f5" = CTRL_F5
    "ctrl-f6" = CTRL_F6
    "ctrl-f7" = CTRL_F7
    "ctrl-f8" = CTRL_F8
    "ctrl-f9" = CTRL_F9
    "ctrl-f10" = CTRL_F10
    "ctrl-f11" = CTRL_F11
    "ctrl-f12" = CTRL_F12
    "ctrl-alt-home" = CTRL_ALT_HOME
    "ctrl-alt-end" = CTRL_ALT_END
    "shift-ctrl-cursor-up" = SHIFT_CTRL_CURSOR_UP
    "shift-ctrl-cursor-down" = SHIFT_CTRL_CURSOR_DOWN
    "shift-ctrl-cursor-right" = SHIFT_CTRL_CURSOR_RIGHT
    "shift-ctrl-cursor-left" = SHIFT_CTRL_CURSOR_LEFT
    "shift-ctrl-page-up" = SHIFT_CTRL_PAGE_UP
    "shift-ctrl-page-down" = SHIFT_CTRL_PAGE_DOWN
    "shift-ctrl-end" = SHIFT_CTRL_END
    "shift-ctrl-home" = SHIFT_CTRL_HOME
    "alt-a" = ALT_A
    "alt-b" = ALT_B
    "alt-c" = ALT_C
    "alt-d" = ALT_D
    "alt-e" = ALT_E
    "alt-f" = ALT_F
    "alt-g" = ALT_G
    "alt-j" = ALT_J
    "alt-k" = ALT_K
    "alt-l" = ALT_L
    "alt-m" = ALT_M
    "alt-n" = ALT_N
    "alt-o" = ALT_O
    "alt-p" = ALT_P
    "alt-q" = ALT_Q
    "alt-r" = ALT_R
    "alt-s" = ALT_S
    "alt-t" = ALT_T
    "alt-u" = ALT_U
    "alt-v" = ALT_V
    "alt-w" = ALT_W
    "alt-x" = ALT_X
    "alt-y" = ALT_Y
    "alt-z" = ALT_Z
    "ctrl-alt-a" = CTRL_ALT_A
    "ctrl-alt-b" = CTRL_ALT_B
    "ctrl-alt-c" = CTRL_ALT_C
    "ctrl-alt-d" = CTRL_ALT_D
    "ctrl-alt-e" = CTRL_ALT_E
    "ctrl-alt-f" = CTRL_ALT_F
    "ctrl-alt-g" = CTRL_ALT_G
    "ctrl-alt-h" = CTRL_ALT_H
    "ctrl-alt-i" = CTRL_ALT_I
    "ctrl-alt-j" = CTRL_ALT_J
    "ctrl-alt-k" = CTRL_ALT_K
    "ctrl-alt-l" = CTRL_ALT_L
    "ctrl-alt-m" = CTRL_ALT_M
    "ctrl-alt-n" = CTRL_ALT_N
    "ctrl-alt-o" = CTRL_ALT_O
    "ctrl-alt-p" = CTRL_ALT_P
    "ctrl-alt-q" = CTRL_ALT_Q
    "ctrl-alt-r" = CTRL_ALT_R
    "ctrl-alt-s" = CTRL_ALT_S
    "ctrl-alt-t" = CTRL_ALT_T
    "ctrl-alt-u" = CTRL_ALT_U
    "ctrl-alt-v" = CTRL_ALT_V
    "ctrl-alt-w" = CTRL_ALT_W
    "ctrl-alt-x" = CTRL_ALT_X
    "ctrl-alt-y" = CTRL_ALT_Y
    "ctrl-alt-z" = CTRL_ALT_Z

  !key_to_name empty_hash_table
  for_each name_to_key
    : (name key)
      !key_to_name(key) name
      next!
    :
      if
        terminal_private::backspace_character == '@bs;':
          !ctrl_key(9) BACKSPACE
          body!
        body

$std::get_key:
  #
    wait for a keyboard input event or until the timeout expires

    See also: get_events
  (
    timeout = undefined # in seconds - a decimal number
  )
  $io std_types::io
  start_reading_from &io STDIN_FILENO
  if !io
    timeout.is_defined:
      current_time! $t
      set_timeout io t+timeout
    -> io
  get_events! &io $events
  if
    events.is_empty
    -> undefined
    :
      $event events(1)
      event $_type $_fd $input
      from_utf8 &input
      $keys extract_keys(input)
      -> keys(1)

[source]

$std::key_to_name undefined

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Terminals

# std::key_to_name (an object)

