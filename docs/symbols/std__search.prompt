[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std::clear_colour_of ()

[documentation remark]

# std::clear_colour_of (a polymorphic function)

  the clear colour to use

  Parameter:
    self: the object from which to get the clear colour

  Result:
    colour: the clear colour

  Returns the clear colour of the object.

  Topic: Terminal

  See also: std::draw_colour_of, std::set_clear_colour

[source]

$std_types::screen/clear:
  (
    self
    x = 1
    y = 1
    width = undefined
    height = undefined
  )
  update_if width.is_undefined &width -> width_of(self)-x+1
  update_if height.is_undefined &height -> height_of(self)-y+1
  std_private::clear self self x y width height

$std::clear ()

[documentation remark]

# std::clear (a polymorphic function)

  clears a rectangular area

  Parameters:
    screen # some kind of screen
    x: x-coordinate of the upper left corner
    y: y-coordinate of the upper left corner
    width: width of the area
    height: height of the area

  Result:
    screen: the updated screen

  The area is cleared using the current clear colour. Use
  <std::set_clear_colour> to change the current clear colour.

  The area is clipped at the screen's borders.

  Topic: Terminal

  See also: std_types::screen/std::clear, std::draw_text,
            std::set_clear_colour

  Example:

    $my_screen create_screen(terminal 40 25)
    set_clear_colour &my_screen GREEN
    clear &my_screen 11 6 20 15

[EXERCISE]

#
  Topic: Grammar Objects

  Grammar objects support methods for matching and searching.

[symbols]

$std::match ()
$std::match_back ()
$std::search ()
$std_types::FUNKY_IDENTIFIER std_types::object
$std::FUNKY_IDENTIFIER std_types::FUNKY_IDENTIFIER
$std_types::FUNKY_IDENTIFIER/match:
$std_types::FUNKY_IDENTIFIER/match_back:
$std_types::FUNKY_IDENTIFIER/search:
$std_types::WHITESPACE std_types::object
$std::WHITESPACE std_types::WHITESPACE
$std_types::WHITESPACE/match:
$std_types::WHITESPACE/match_back:
$std_types::WHITESPACE/search:
$std_types::many std_types::object # "many" means "one or more"
$std::many:
$std_types::many/match:
$std_types::many/match_back:
$std_types::many/search:
$std_types::some std_types::object # "some" means "zero or more"
$std::some:
$std_types::some/match:
$std_types::optional std_types::object
$std::optional:
$std_types::optional/match:
$std_types::anything std_types::object
$std::ANYTHING std_types::anything
$std_types::anything/match:
$std_types::anything/match_back:
$std_types::anything/search:
$std_types::any_character_but std_types::object
$std::any_character_but:
$std_types::any_character_but/match:
$std_types::capture std_types::object
$std::capture: (expr)
$std_types::capture/match:
$std::DIGIT '0'..'9'
$std::LETTER 'a'..'z', 'A'..'Z'
$std::alt std::hash_set

#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
  Topic: Grammar Objects

  Grammar objects support methods for matching and searching.

$std::match ()

$std::match_back ()

$std::search ()

$std_types::FUNKY_IDENTIFIER std_types::object

$std::FUNKY_IDENTIFIER std_types::FUNKY_IDENTIFIER

$std_types::FUNKY_IDENTIFIER/match:
  (
    _self
    str
  )
  $rc result_count()
  $i 1
  $n length_of(str)

  if
    n == 0
    fail
    :
      case str(1)
        'a' .. 'z', 'A' .. 'Z' within_word
        fail

  $within_word:
    inc &i
    if
      i > n:
        if
          rc == 1
          -> n
          -> n range(str 1 n)
      :
        case str(i)
          'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
          '_' word_start
          :
            if
              rc == 1
              -> i-1
              -> i-1 range(str 1 i-1)

  $word_start:
    inc &i
    if
      i > n:
        if
          rc == 1
          -> n
          -> n range(str 1 n)
      :
        case str(i)
          'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
          fail

  $fail:
    if
      rc == 1
      -> undefined
      -> undefined undefined

$std_types::FUNKY_IDENTIFIER/match_back:
  (
    _self
    str
  )
  $n length_of(str)
  $i n+1
  word_end

  $word_end:
    dec &i
    if
      i < 1
      -> undefined
      :
        case str(i)
          'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
          -> undefined

  $within_word:
    dec &i
    if
      i < 1
      check_start
      :
        case str(i)
          'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
          '_' word_end
          check_start

  $check_start:
    if
      str(i+1) >= '0' && str(i+1) <= '9'
      -> undefined
      -> n-i

$std_types::FUNKY_IDENTIFIER/search:
  (
    _self
    str
    nth = 1
  )
  $n length_of(str)
  if
    nth < 0
    search_backwards
    search_forwards

  $search_forwards:
    $i 0
    $s undefined
    search_for_word_start

    $search_for_word_start:
      inc &i
      if
        i > n
        -> undefined undefined
        :
          case str(i)
            'a' .. 'z', 'A' .. 'Z':
              if
                i == 1:
                  !s 1
                  within_word
                :
                  case str(i-1)
                    'a' .. 'z', 'A' .. 'Z', '0' .. '9', '_'
                    search_for_word_start
                    :
                      !s i
                      within_word
            search_for_word_start

    $within_word:
      inc &i
      if
        i > n:
          if
            nth > 1
            -> undefined undefined
            -> s i-s
        :
          case str(i)
            'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
            '_' word_start
            :
              if
                nth > 1:
                  dec &nth
                  search_for_word_start
                -> s i-s

    $word_start:
      inc &i
      if
        i > n
        -> undefined undefined
        :
          case str(i)
            'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
            search_for_word_start

  $search_backwards:
    $i n+1
    $e undefined
    search_for_word_end

    $search_for_word_end:
      dec &i
      if
        i < 1
        -> undefined undefined
        :
          case str(i)
            'a' .. 'z', 'A' .. 'Z', '0' .. '9':
              !e i
              within_word
            search_for_word_end

    $within_word:
      dec &i
      if
        i < 1:
          check_start -> undefined undefined
        :
          case str(i)
            'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
            '_' word_end
            :
              check_start search_for_word_end

    $word_end:
      dec &i
      if
        i < 1
        -> undefined undefined
        :
          case str(i)
            'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
            search_for_word_end

    $check_start: (continuation)
      $chr str(i+1)
      if
        chr >= '0' && chr <= '9'
        continuation
        :
          inc &nth
          if
            nth == 0
            -> i+1 e-i
            continuation

$std_types::WHITESPACE std_types::object

$std::WHITESPACE std_types::WHITESPACE

[source]

$std_types::FUNKY_IDENTIFIER/search:
  (
    _self
    str
    nth = 1
  )
  $n length_of(str)
  if
    nth < 0
    search_backwards
    search_forwards

  $search_forwards:
    $i 0
    $s undefined
    search_for_word_start

    $search_for_word_start:
      inc &i
      if
        i > n
        -> undefined undefined
        :
          case str(i)
            'a' .. 'z', 'A' .. 'Z':
              if
                i == 1:
                  !s 1
                  within_word
                :
                  case str(i-1)
                    'a' .. 'z', 'A' .. 'Z', '0' .. '9', '_'
                    search_for_word_start
                    :
                      !s i
                      within_word
            search_for_word_start

    $within_word:
      inc &i
      if
        i > n:
          if
            nth > 1
            -> undefined undefined
            -> s i-s
        :
          case str(i)
            'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
            '_' word_start
            :
              if
                nth > 1:
                  dec &nth
                  search_for_word_start
                -> s i-s

    $word_start:
      inc &i
      if
        i > n
        -> undefined undefined
        :
          case str(i)
            'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
            search_for_word_start

  $search_backwards:
    $i n+1
    $e undefined
    search_for_word_end

    $search_for_word_end:
      dec &i
      if
        i < 1
        -> undefined undefined
        :
          case str(i)
            'a' .. 'z', 'A' .. 'Z', '0' .. '9':
              !e i
              within_word
            search_for_word_end

    $within_word:
      dec &i
      if
        i < 1:
          check_start -> undefined undefined
        :
          case str(i)
            'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
            '_' word_end
            :
              check_start search_for_word_end

    $word_end:
      dec &i
      if
        i < 1
        -> undefined undefined
        :
          case str(i)
            'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
            search_for_word_end

    $check_start: (continuation)
      $chr str(i+1)
      if
        chr >= '0' && chr <= '9'
        continuation
        :
          inc &nth
          if
            nth == 0
            -> i+1 e-i
            continuation

$std_types::WHITESPACE/search:
  #
    Example:

      $str "This is a text."
      search WHITESPACE str 2 $pos $len
      dump! `pos `len

    Output:

      pos: 8
      len: 1

    Example:

      $str "This is a text.@nl;"
      search WHITESPACE str -1 $pos $len
      dump! `pos `len

    Output:

      pos: 10
      len: 1
  (
    _self
    str
    nth = 1
  )
  $n length_of(str)
  if
    nth < 0
    search_backwards
    search_forwards

  $search_forwards:
    $i 0
    $s undefined
    search_for_whitespace

    $search_for_whitespace:
      inc &i
      if
        i > n
        -> undefined undefined
        :
          if
            str(i).is_a_whitespace_character
            :
              !s i
              match_more_whitespace
            search_for_whitespace

    $match_more_whitespace:
      inc &i
      if
        i > n:
          if
            nth > 1
            -> undefined undefined
            -> s i-s
        :
          if
            str(i).is_a_whitespace_character
            match_more_whitespace
            :
              if
                nth > 1:
                  dec &nth
                  search_for_whitespace
                -> s i-s

  $search_backwards:
    $i n+1
    $e undefined
    search_for_whitespace

    $search_for_whitespace:
      dec &i
      if
        i < 1
        -> undefined undefined
        :
          if
            str(i).is_a_whitespace_character
            :
              !e i
              match_more_whitespace
            search_for_whitespace

    $match_more_whitespace:
      dec &i
      if
        i < 1:
          inc &nth
          if
            nth == 0
            -> 1 e
            -> undefined undefined
        :
          if
            str(i).is_a_whitespace_character
            match_more_whitespace
            :
              inc &nth
              if
                nth == 0
                -> i+1 e-i
                search_for_whitespace

$std_types::many/search:
  #
    Example:

      $str "ab12cde345fgh"
      search many(DIGIT) str 2 $pos $len
      dump! `pos `len

    Output:

      pos: 8
      len: 3
  (
    self # many
    str # the string to search
    nth = 1 # the nth occurrence to search for
  )
  $expr expression_of(self)
  $n length_of(str)
  if
    nth < 0
    search_backwards
    search_forwards

  $search_forwards:
    $i 1
    search_next

    $search_next:
      if
        i > n+1
        -> undefined undefined
        :
          search expr range(str i n) 1 $pos $len
          if
            pos.is_undefined
            -> undefined undefined
            :
              !i i+pos-1
              dec &nth
              if
                len == 0:
                  if
                    nth < 1
                    -> i 0
                    :
                      inc &i
                      search_next
                :
                  $s i
                  loop:
                    plus &i len
                    match expr range(str i n) !len
                    if
                      len.is_undefined || len == 0:
                        if
                          nth < 1
                          -> s i-s
                          :
                            inc &i
                            search_next
                      next

  $search_backwards:
    $i n
    search_next

    $search_next:
      if
        i < 1
        -> undefined undefined
        :
          search expr range(str 1 i) -1 !i $len
          if
            i.is_undefined
            -> undefined undefined
            :
              inc &nth
              if
                len == 0:
                  if
                    nth >= 0
                    -> i n-i+1
                    :
                      dec &i
                      search_next
                :
                  dec &i
                  $e i+len
                  loop:
                    match_back expr range(str 1 i) !len
                    if
                      len.is_undefined || len == 0:
                        if
                          nth >= 0
                          -> i+1 e-i
                          :
                            dec &i
                            search_next
                      :
                        minus &i len
                        next

$std_types::anything/search:
  #
    Results:
      pos: always 1
      len: the length of the whole string
  (
    _self # anything
    str # the string to search
    _nth = 1 # the nth occurrence to search for
  )
  -> 1 length_of(str)

$std_types::character/search:
  #
    searches for the character from the start or the end of a string

    Results:
      pos # the position of the first occurrence of the character
      len # 1 if successful

    If the character is not found, then *pos* and *len* are <undefined>.

    Topic: Strings

    See also: match, match_back

    Example:

      $str "abcdef"
      search $pos $len 'd' str
      dump! `pos `len

    Output:

      pos: 4
      len: 1

    Example:

      $str "abcdef"
      search $pos $len 'z' str
      dump! `pos `len

    Output:

      pos: <undefined>
      len: <undefined>

    Example:

      $str "In the wild, wild west we were alone."
      search $pos $len 'w' str 2
      dump! `pos `len

    Output:

      pos: 14
      len: 1

    Example:

      $str "In the wild, wild west we were alone."
      search $pos $len 'w' str -2
      dump! `pos `len

    Output:

      pos: 24
      len: 1
  (
    self # the character to search for
    stream # the string to search in
    nth = 1 # search for the nth occurrence; negative value search backwards
  )
  $i undefined
  $n length_of(stream)
  if
    nth < 0:
      !i n
      search_backwards
    :
      !i 1
      search_forwards

  $search_forwards:
    if
      i <= n
      :
        if
          stream(i) == self:
            if
              nth > 1:
                dec &nth
                inc &i
                search_forwards
              -> i 1
          :
            inc &i
            search_forwards
      -> undefined undefined

  $search_backwards:
    if
      i >= 1
      :
        if
          stream(i) == self:
            if
              nth < -1:
                inc &nth
                dec &i
                search_backwards
              -> i 1
          :
            dec &i
            search_backwards
      -> undefined undefined

$std_types::string/search:
  #
    searches for the start of the string within the stream

    Attempts to find the start of the string within the stream. If the match
    is successful the found position (one based) and the length of the string
    is returned. Otherwise the returned values for the position and the length
    are <undefined>.

    If *nth* is specified then the nth occurence of the string is looked for.
    If there are not at least *n* matches for *expr* within *str* then the
    returned values for the position and the length are <undefined>.

    Topic: Strings

    See also: std_types::string/match
  (
    self # the string to search for
    stream # the stream to search in
    nth = 1 # search for the nth occurrence of *self* instead for the first one
  )
  $i undefined
  $length length_of(self)
  $offset length-1
  $n length_of(stream)-offset
  if
    nth < 0:
      !i n
      search_backwards
    :
      !i 1
      search_forwards

  $search_forwards:
    if
      i <= n
      :
        if
          range(stream i i+offset) == self:
            if
              nth > 1:
                dec &nth
                plus &i length
                search_forwards
              -> i length
          :
            inc &i
            search_forwards
      -> undefined undefined

  $search_backwards:
    if
      i >= 1
      :
        if
          range(stream i i+offset) == self:
            if
              nth < -1:
                inc &nth
                minus &i length
                search_backwards
              -> i length
          :
            dec &i
            search_backwards
      -> undefined undefined

$std_types::set/search:
  #
    searches for one of the alternatives from the start or the end of a string

    Results:
      pos # the position of the first occurrence of a matching character
      len # 1 if successful

    If a matching character is not found, then *pos* and *len* are <undefined>.

    Topic: Strings

    See also: match, match_back

    Example:

      println! "std_types::integer/std::minus" .before. alt('.' '/')

    Output:

      std_types::integer
  (
    self # a set of characters
    stream # the string to search in
    nth = 1 # search for the nth occurrence; negative value search backwards
  )
  $i undefined
  $n length_of(stream)
  if
    nth < 0:
      !i n
      search_backwards
    :
      !i 1
      search_forwards

  $search_forwards:
    if
      i <= n:
        if
          self(stream(i)):
            if
              nth > 1:
                dec &nth
                inc &i
                search_forwards
              -> i 1
          :
            inc &i
            search_forwards
      -> undefined undefined

  $search_backwards:
    if
      i >= 1
      :
        if
          self(stream(i)):
            if
              nth < -1:
                inc &nth
                dec &i
                search_backwards
              -> i 1
          :
            dec &i
            search_backwards
      -> undefined undefined

$std_types::value_range/search:
  #
    Example:

      $range 'a'..'z'
      search range "123xyz" 2 $pos $len
      dump! `pos `len

    Output:

      pos: 5
      len: 1
  (
    expr # the grammar object
    str # the string to search
    nth = 1 # the nth occurrence to search for
  )
  $low lower_bound_of(expr)
  $high upper_bound_of(expr)
  $len length_of(str)
  if
    nth < 0
    search_backwards
    search_forwards

  $search_forwards:
    $i 0
    loop:
      inc &i
      if
        i > len
        -> undefined undefined
        :
          $chr str(i)
          if
            chr >= low && chr <= high:
              if
                nth > 1:
                  dec &nth
                  next
                -> i 1
            next

  $search_backwards:
    $i len+1
    loop:
      dec &i
      if
        i < 1
        -> undefined undefined
        :
          $chr str(i)
          if
            chr >= low && chr <= high:
              if
                nth < -1:
                  inc &nth
                  next
                -> i 1
            next

$std::search ()

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Do not create completely new examples on your own

### Use only one of the following topics: Grammar Objects

# std::search (a polymorphic function)

