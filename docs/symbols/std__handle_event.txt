# std::handle_event (a polymorphic function)

  handles an event

  Parameters:
    object: some object
    event: the event
    id: the event's id

  Result:
    object: the updated object
    new_event: a new event or undefined

  The event is handled by the object. If the event is consumed by the object
  then undefined is returned. If the event is not consumed by the object then
  the event is returned. If the event is changed by the object then the changed
  event is returned.

  Topic: Input-Output Events

  See also: std::handle_events, std::get_events

  Example:

    $io std_types::io # create an input-output object
    start_reading_from &io STDIN_FILENO # register reading from STDIN
    write &io STDOUT_FILENO "Please enter some text:@nl;"
      # write a prompt text to STDOUT
    $input_buffer "" # create an initially empty input buffer

    loop: # the event loop
      get_events! &io $events # get one or more events
      for_each events # handle all received events
        : (event)
          event $type $fd $argument # destructure the event
          case type # check the event type
            READ: # event is a read event
              case fd # check the file descriptor
                STDIN_FILENO: # it was a read event from STDIN
                  append &input_buffer argument
                    # append the received data to the input buffer
                  handle_input !io &input_buffer # call the input handler
                  if
                    io.is_undefined:
                      #
                        the input handler returned undefined to indicate
                        that the input processing is finished
                      terminate! # terminate the program
                    next # otherwise continue processing the events
                next # ignore read events for other file descriptors
            READ_FAILED: # event is a read error
              Error! "Error reading from standard input!"
            WRITE_PENDING: # event is a write pending event
              # ignore
              next! # continue processing the events
            WRITE_COMPLETED: # event is a write completed event
              # ignore
              next! # continue processing the events
            next # ignore all other events
        next # check for more events

    $handle_input: (buffer)
      loop:
        if
          buffer .contains. '@nl;':
            # the input buffer contains at least one complete line
            $line buffer .before. '@nl;' # extract the line
            if
              line == "quit" # the user entered "quit"
              -> undefined undefined
                #
                  return undefined to indicate that the input processing is
                  finished
              : # Output the line
                write &io STDOUT_FILENO "
                  You entered: "@(line)"
                behind &buffer '@nl;'
                  # remove the processed line from the input buffer
                next # continue processing the buffer
          -> io buffer
            # return the (maybe) modified input-output object and buffer

((defined in basic/io/io_events.fky))
((generated by Codestral-22B-v0.1-Q5_K_M.gguf))
((2024-12-09 20:42:08))
