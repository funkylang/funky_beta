[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std_types::screen/std::clear:
  (
    self
    x = 1
    y = 1
    width = undefined
    height = undefined
  )
  update_if width.is_undefined &width -> width_of(self)-x+1
  update_if height.is_undefined &height -> height_of(self)-y+1
  basic_private::clear self self x y width height

[documentation remark]

# std_types::screen/clear (a method)

  clears the specified rectangular area

  Parameters:
    self: the screen to be (partially) cleared
    x: x-coordinate of the upper left corner
    y: y-coordinate of the upper left corner
    width: width of the area
    height: height of the area

  Result:
    screen: the updated screen

  The specified area is filled with spaces using the the current draw-
  and clear colour.

  The area is clipped at the screen's borders.

  This function also works for "graphical screens" (line_height != 1).

  Topic: Terminal

  See also: std_types::screen/std::set_clear_colour,
            std_types::screen/std::copy

[source]

$std_types::string/match:
  (
    self
    stream
  )
  $rc result_count()
  $len length_of(self)
  if
    length_of(stream) >= len:
      if
        range(stream 1 len) == self:
          if
            rc == 1
            -> len
            -> len undefined
        fail
    fail

  $fail:
    if
      rc == 1
      -> undefined
      -> undefined undefined

[documentation remark]

# std_types::string/std::match (a method)

  matches the start of the stream with the string

  Parameters:
    self: the string to match
    stream: the stream to match against

  Results:
    length: the number of matched characters (or <undefined> on fail)
    capture: the matched string (if requested)

  Attempts to match the start of the stream with the specified string.

  If the match is successful the length of the match (= the length of the
  string) is returned.

  If the caller requested two result values then in addition to the string
  length the string itself ("the capture") is also returned.

  If the match fails then one or two <std::undefined>-values are returned.

  Topic: Strings

  See also: std_types::string/std::match_back, std_types::string/std::search

[source]

$std_types::generic_list/map_or_error:
  (
    self
    function
  )
  if
    self.is_empty
    -> self
    :
      $map
        if
          parameter_count_of(function) == 2
          ->
            : (s e)
              if
                s < e:
                  $m (s+e) >> 1
                  append_or_error
                    map(s m)
                    map(m+1 e)
                :
                  $mapped_item function(s self(s))
                  if
                    mapped_item.is_an_error
                    -> mapped_item
                    -> list(mapped_item)
          ->
            : (s e)
              if
                s < e:
                  $m (s+e) >> 1
                  append_or_error
                    map(s m)
                    map(m+1 e)
                :
                  $mapped_item function(self(s))
                  if
                    mapped_item.is_an_error
                    -> mapped_item
                    -> list(mapped_item)

      map 1 length_of(self)

[documentation remark]

# std_types::generic_list/std::map_or_error (a method)

  applies a function to all elements of the list

  Parameters:

    self: the list which items will be mapped
    function: the function to apply to each element of the list

  Result:
    list: the list of "mapped" items

  A list of the "mapped" items is returned.

  If any item ist mapped to an error object than the result ist not a
  collection but the first (left-to-right-order) error object created.

  Topic: Lists

  See also: std_types::generic_list/std::reduce,
            std_types::generic_list/std::map_reduce

[EXERCISE]

#
  Topic: Window Manager

[symbols]

$std::draw_vertical_slider ()
$std::draw_horizontal_slider ()

# Terminal Methods

$std::create_window_manager ()

# Window Manager Event Types

$std::FOCUS_CHANGED .

# Window Manager Methods

$std::set_time ()
$std::create_window ()
$std::create_dialog ()
$std::set_menu ()
$std::set_status ()
$std::shrink ()
$std::enlarge ()
$std::move_left ()
$std::move_right ()
$std::move_up ()
$std::move_down ()
$std::move_page_up ()
$std::move_page_down ()
$std::move_home ()
$std::move_end ()
$std::move_top ()
$std::move_bottom ()
$std::goto_xy ()
$std::get_xy ()
$std::get_size ()
$std::window_count_of ()
$std::set_title ()
$std::get_title ()
$std::set_buttons ()
$std::get_buttons ()
$std::set_content ()
$std::get_content ()
$std::set_inbounds_width ()
$std::get_inbounds_width ()
$std::get_id ()
$std::get_focused_window ()
$std::get_window_at ()
$std::set_default_message ()
$std::show_message ()
$std::remove_message ()
$std::focus_next_window ()
$std::focus_previous_window ()
$std::focus_window ()
$std::move_window_down ()
$std::move_window_up ()
$std::set_selection ()
$std::unset_selection ()
$std::needs_updating ()
$std::prepare_update ()
$std::handle_window_event ()

# Create Window Options

$std::USE_CURSOR .
$std::DO_NOT_FOCUS .
$std::CONTENT .
$std::HORIZONTAL_SCROLLBAR .
$std::VERTICAL_SCROLLBAR .
$std::BUTTONS .
$std::SHRINK .
$std::ENLARGE .
$std::CLOSE .
$std::CURSOR_X .
$std::CURSOR_Y .
$std::FIRST_VISIBLE_COLUMN .
$std::FIRST_VISIBLE_ROW .
$std::MODAL .
$std::PARENT_ID .
$std::SIZE .
$std::DEFAULT .
$std::MINIMIZED .
$std::MAXIMIZED .

# Window Manager

$std_types::window_manager std_types::object

# Window Prototype

$std_types::terminal/create_window_manager:
$std_types::window_manager/create_window:
$std_types::window_manager/create_dialog:
$std_types::window_manager/set_menu:
$std_types::window_manager/set_status:
$std_types::window_manager/set_time:
$std_types::window_manager/for_each:
$std_types::window_manager/needs_updating:
$std_types::window_manager/prepare_update:
$std_types::window_manager/update:
$std_types::terminal/draw_vertical_slider:
$std_types::terminal/draw_horizontal_slider:
$std_types::window_manager/move_left:
$std_types::window_manager/move_right:
$std_types::window_manager/move_up:
$std_types::window_manager/move_page_up:
$std_types::window_manager/move_down:
$std_types::window_manager/move_page_down:
$std_types::window_manager/move_home:
$std_types::window_manager/move_end:
$std_types::window_manager/move_top:
$std_types::window_manager/move_bottom:
$std_types::window_manager/goto_xy:
$std_types::window_manager/get_xy:
$std_types::window_manager/get_size:
$std_types::window_manager/focus_next_window:
$std_types::window_manager/focus_previous_window:
$std_types::window_manager/focus_window:
$std_types::window_manager/move_window_down:
$std_types::window_manager/move_window_up:
$std_types::window_manager/close:
$std_types::window_manager/shrink:
$std_types::window_manager/enlarge:
$std_types::window_manager/window_count_of:
$std_types::window_manager/set_title:
$std_types::window_manager/get_title:
$std_types::window_manager/set_buttons:
$std_types::window_manager/get_buttons:
$std_types::window_manager/set_content:
$std_types::window_manager/get_content:
$std_types::window_manager/set_inbounds_width:
$std_types::window_manager/get_inbounds_width:
$std_types::window_manager/set_selection:
$std_types::window_manager/unset_selection:
$std_types::window_manager/resize:
$std_types::window_manager/get_id:
$std_types::window_manager/get_focused_window:
$std_types::window_manager/get_window_at:
$std_types::window_manager/set_default_message:
$std_types::window_manager/show_message:
$std_types::window_manager/remove_message:
$std_types::window_manager/handle_event:
$std_types::window_manager/handle_window_event:

$std_types::window_manager/shrink:
  (
    wm
    id = undefined
  )
  #
    if a window's size is set to MINIMIZED then at least one other window's size
    must be set to DEFAULT or MAXIMIZED

  update_if id.is_undefined &id -> focused_of(wm)
  $windows windows_of(wm)
  $index find_index(windows id)
  if
    index.is_defined && length_of(windows) > 1:
      $window windows(index)
      case size_of(window)
        DEFAULT:
          !window
            .size_of MINIMIZED
            .desired_size_of MINIMIZED
          !windows(index) window
          !wm
            .has_a_valid_layout false
            .is_up_to_date false
          if
            all_of(windows: (window) -> size_of(window) == MINIMIZED):
              $next_index
                if
                  index < length_of(windows)
                  -> index+1
                  -> 1
              !windows(next_index).size_of DEFAULT
              -> wm(.windows_of windows)
            -> wm(.windows_of windows)
        MAXIMIZED:
          !window
            .size_of DEFAULT
            .desired_size_of DEFAULT
          !windows(index) window
          map &windows: (window) -> window(.size_of desired_size_of(window))
          wm
            .windows_of windows
            .has_a_valid_layout false
            .is_up_to_date false
        -> wm
    -> wm

$std_types::window_manager/enlarge:
  (
    wm
    id = undefined
  )
  #
    if a window is set to MAXIMIZED then all other windows are set to MINIMIZED

  update_if id.is_undefined &id -> focused_of(wm)
  $windows windows_of(wm)
  $index find_index(windows id)
  if
    index.is_defined:
      $window windows(index)
      case size_of(window)
        MINIMIZED:
          !window
            .size_of DEFAULT
            .desired_size_of DEFAULT
          !windows(index) window
          find_first $maximized_idx $_maximized_window
            windows: (window) -> size_of(window) == MAXIMIZED
          !wm
            .has_a_valid_layout false
            .is_up_to_date false
          if
            maximized_idx.is_defined:
              !windows(maximized_idx).size_of DEFAULT
              -> wm(.windows_of windows)
            -> wm(.windows_of windows)
        DEFAULT:
          map &wm.windows_of: (idx window)
            if
              idx == index
              -> window(.size_of MAXIMIZED)
              -> window(.size_of MINIMIZED)
          wm
            .has_a_valid_layout false
            .is_up_to_date false
        -> wm
    -> wm

#$shrink_or_enlarge: (wm id = undefined)
  #
    if the window is set to MAXIMIZED then it will be shrinked; otherwise it
    will be enlarged
  update_if id.is_undefined &id -> focused_of(wm)
  $windows windows_of(wm)
  $index find_index(windows id)
  if
    index.is_defined:
      $window windows(index)
      if
        size_of(window) == MAXIMIZED:
          shrink wm id
        :
          enlarge wm id
    -> wm

$std_types::window_manager/window_count_of:
  (
    wm
  )
  -> length_of(windows_of(wm))

$std_types::window_manager/set_title:
  (
    wm
    id = undefined
    title
  )
  update_if id.is_undefined &id -> focused_of(wm)
  $windows windows_of(wm)
  $index find_index(windows id)
  if
    index.is_defined:
      $window windows(index)
      !window.title_of title
      wm
        .windows_of windows(index window)
        .is_up_to_date false
    -> wm

$std_types::window_manager/get_title:
  (
    wm
    id = undefined
  )
  update_if id.is_undefined &id -> focused_of(wm)
  $windows windows_of(wm)
  $index find_index(windows id)
  if
    index.is_defined:
      $window windows(index)
      -> title_of(window)
    -> undefined

$std_types::window_manager/set_buttons:
  (
    wm
    id = undefined
    buttons
  )
  update_if id.is_undefined &id -> focused_of(wm)
  $windows windows_of(wm)
  $index find_index(windows id)
  if
    index.is_defined:
      $window windows(index)
      !window.additional_buttons_of buttons
      wm
        .windows_of windows(index window)
        .is_up_to_date false
    -> wm

$std_types::window_manager/get_buttons:
  (
    wm
    id = undefined
  )
  update_if id.is_undefined &id -> focused_of(wm)
  $windows windows_of(wm)
  $index find_index(windows id)
  if
    index.is_defined:
      $window windows(index)
      -> additional_buttons_of(window)
    -> undefined

$std_types::window_manager/set_content:
  (
    wm
    id = undefined
    content
  )
  update_if id.is_undefined &id -> focused_of(wm)
  $windows windows_of(wm)
  $index find_index(windows id)
  if
    index.is_defined:
      $window windows(index)
      !window.content_of content
      wm
        .windows_of windows(index window)
        .has_a_valid_layout false
        .is_up_to_date false
    -> wm

$std_types::window_manager/get_content:
  (
    wm
    id = undefined
  )
  update_if id.is_undefined &id -> focused_of(wm)
  $windows windows_of(wm)
  $index find_index(windows id)
  if
    index.is_defined:
      -> content_of(windows(index))
    -> undefined

$std_types::window_manager/set_inbounds_width:
  (
    wm
    id = undefined
    width
  )
  update_if id.is_undefined &id -> focused_of(wm)
  $windows windows_of(wm)
  $index find_index(windows id)
  if
    index.is_defined
    -> wm(.windows_of windows(index windows(index)(.inbounds_width_of width)))
    -> wm

$std_types::window_manager/get_inbounds_width:
  (
    wm
    id = undefined
  )
  update_if id.is_undefined &id -> focused_of(wm)
  $windows windows_of(wm)
  $index find_index(windows id)
  if
    index.is_defined
    -> inbounds_width_of(windows(index))
    -> undefined

$std_types::window_manager/set_selection:
  (
    wm
    id = undefined
    x
    y
    w
    h
  )
  update_if id.is_undefined &id -> focused_of(wm)
  $windows windows_of(wm)
  $index find_index(windows id)
  if
    index.is_defined:
      $window windows(index)
      $first_visible_column first_visible_column_of(window)
      $first_visible_row first_visible_row_of(window)
      $window_width width_of(window)
      $window_height height_of(window)
      $new_first_visible_column first_visible_column
      $new_first_visible_row first_visible_row
      update_if x < first_visible_column &new_first_visible_column -> x
      update_if x+w > first_visible_column+window_width
        &new_first_visible_column -> x+w-window_width
      update_if y < first_visible_row &new_first_visible_row -> y
      update_if y+h > first_visible_row+window_height
        &new_first_visible_row -> y+h-window_height
      !window
        .selection_of tuple(x y w h)
        .first_visible_column_of new_first_visible_column
        .first_visible_row_of new_first_visible_row
      wm
        .windows_of windows(index window)
        .is_up_to_date false
    -> wm

$std_types::window_manager/unset_selection:
  (
    wm
    id = undefined
  )
  update_if id.is_undefined &id -> focused_of(wm)
  $windows windows_of(wm)
  $index find_index(windows id)
  if
    index.is_defined:
      $window windows(index)
      !window.selection_of undefined
      wm
        .windows_of windows(index window)
        .is_up_to_date false
    -> wm

$std_types::window_manager/resize:
  (
    wm
    width
    height
  )
  wm
    .width_of width
    .height_of height
    .has_a_valid_layout false
    .has_a_new_size true
    .is_up_to_date false

$update_size: (wm terminal)
  if
    wm.has_a_new_size
    ->
      wm(.has_a_new_size false)
      resize(terminal width_of(wm) height_of(wm))
    ->
      wm
        .width_of width_of(terminal)
        .height_of height_of(terminal)
      terminal

$std_types::window_manager/get_id:
  (
    wm
  )
  -> focused_of(wm)

$std_types::window_manager/get_focused_window:
  (
    wm
  )
  $id focused_of(wm)
  $windows windows_of(wm)
  $index find_index(windows id)
  $window windows(index)
  -> id content_of(window)

$std_types::window_manager/get_window_at:
  (
    wm
    x
    y
  )
  $windows windows_of(wm)
  for_each windows
    : (window)
      $win_x x_of(window)
      $win_y y_of(window)
      $win_w width_of(window)
      $win_h height_of(window)
      if
        x >= win_x && x < win_x+win_w && y >= win_y && y < win_y+win_h
        ->
          id_of(window)
          content_of(window)
          first_visible_column_of(window)+x-win_x
          first_visible_row_of(window)+y-win_y
        next
    -> undefined undefined undefined undefined

$std_types::window_manager/set_default_message:
  (
    wm
    screen
  )
  wm
    .default_message_of screen
    .has_a_valid_layout false
    .is_up_to_date false

$std_types::window_manager/show_message:
  (
    wm
    id = undefined
    timeout = 5
    screen
  )
  if
    id.is_defined:
      filter &wm.messages_of: (message) -> first(message) != id
      push_message
    push_message

  $push_message:
    push &wm.messages_of tuple(id current_time_of(wm)+timeout screen)
    wm
      .has_a_valid_layout false
      .is_up_to_date false

$std_types::window_manager/remove_message:
  (
    wm
    id
  )
  $messages messages_of(wm)
  $n length_of(messages)
  filter &messages: (message) -> first(message) != id
  if
    length_of(messages) == n
    -> wm
    ->
      wm
        .messages_of messages
        .has_a_valid_layout false
        .is_up_to_date false

$std_types::window_manager/handle_event:
  #
    events effecting the window manager as a whole
  (
    wm
    event
    wm_fd
  )
  $old_focused focused_of(wm)
  event $type $fd $argument
  if
    fd == wm_fd:
      case type
        MOUSE_CLICK:
          argument $x $y $button
          if
            button == 0:
              handle_mouse_click &wm $new_event wm_fd x y
              return new_event
            :
              return undefined
        KEY_PRESS:
          handle_key_press &wm $new_event wm_fd argument
          return new_event
        NEW_WINDOW_SIZE:
          argument $width $height
          resize &wm width height
          -> wm undefined
        -> wm event
    -> wm event

  $return: (new_event)
    remove_outdated_messages &wm
    if
      new_event.is_defined:
        if
          new_event.is_a_tuple
          -> wm new_event # changed event
          :
            if
              focused_of(wm) == old_focused
              -> wm undefined # consumed event
              -> wm tuple(FOCUS_CHANGED wm_fd focused_of(wm))
      -> wm event # kept event

[source]

$std::get_id ()

$std_types::window_manager/get_id:
  (
    wm
  )
  -> focused_of(wm)

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use (parts of) the documentation already provided in the source

### Do not create completely new examples on your own

### Use only one of the following topics: Window Manager

# std_types::window_manager/std::get_id (a method)

