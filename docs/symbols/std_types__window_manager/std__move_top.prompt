[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std_types::screen/std::clear:
  (
    self
    x = 1
    y = 1
    width = undefined
    height = undefined
  )
  update_if width.is_undefined &width -> width_of(self)-x+1
  update_if height.is_undefined &height -> height_of(self)-y+1
  std_private::clear self self x y width height

[documentation remark]

# std_types::screen/clear (a method)

  clears the specified rectangular area

  Parameters:
    self: the screen to be (partially) cleared
    x: x-coordinate of the upper left corner
    y: y-coordinate of the upper left corner
    width: width of the area
    height: height of the area

  Result:
    screen: the updated screen

  The specified area is filled with spaces using the the current draw-
  and clear colour.

  The area is clipped at the screen's borders.

  This function also works for "graphical screens" (line_height != 1).

  Topic: Terminal

  See also: std_types::screen/std::set_clear_colour,
            std_types::screen/std::copy

[source]

$std_types::string/match:
  (
    self
    stream
  )
  $rc result_count()
  $len length_of(self)
  if
    length_of(stream) >= len:
      if
        range(stream 1 len) == self:
          if
            rc == 1
            -> len
            -> len undefined
        fail
    fail

  $fail:
    if
      rc == 1
      -> undefined
      -> undefined undefined

[documentation remark]

# std_types::string/std::match (a method)

  matches the start of the stream with the string

  Parameters:
    self: the string to match
    stream: the stream to match against

  Results:
    length: the number of matched characters (or <undefined> on fail)
    capture: the matched string (if requested)

  Attempts to match the start of the stream with the specified string.

  If the match is successful the length of the match (= the length of the
  string) is returned.

  If the caller requested two result values then in addition to the string
  length the string itself ("the capture") is also returned.

  If the match fails then one or two <std::undefined>-values are returned.

  Topic: Strings

  See also: std_types::string/std::match_back, std_types::string/std::search

[source]

$std_types::generic_list/map_or_error:
  (
    self
    function
  )
  if
    self.is_empty
    -> self
    :
      $map
        if
          parameter_count_of(function) == 2
          ->
            : (s e)
              if
                s < e:
                  $m (s+e) >> 1
                  append_or_error
                    map(s m)
                    map(m+1 e)
                :
                  $mapped_item function(s self(s))
                  if
                    mapped_item.is_an_error
                    -> mapped_item
                    -> list(mapped_item)
          ->
            : (s e)
              if
                s < e:
                  $m (s+e) >> 1
                  append_or_error
                    map(s m)
                    map(m+1 e)
                :
                  $mapped_item function(self(s))
                  if
                    mapped_item.is_an_error
                    -> mapped_item
                    -> list(mapped_item)

      map 1 length_of(self)

[documentation remark]

# std_types::generic_list/std::map_or_error (a method)

  applies a function to all elements of the list

  Parameters:

    self: the list which items will be mapped
    function: the function to apply to each element of the list

  Result:
    list: the list of "mapped" items

  A list of the "mapped" items is returned.

  If any item ist mapped to an error object than the result ist not a
  collection but the first (left-to-right-order) error object created.

  Topic: Lists

  See also: std_types::generic_list/std::reduce,
            std_types::generic_list/std::map_reduce

[EXERCISE]

#
  Topic: Window Manager

[symbols]

$std::draw_vertical_slider ()
$std::draw_horizontal_slider ()

# Terminal Methods

$std::create_window_manager ()

# Window Manager Methods

$std::create_window ()
$std::move_left ()
$std::move_right ()
$std::move_up ()
$std::move_down ()
$std::move_leftmost ()
$std::move_rightmost ()
$std::move_top ()
$std::move_bottom ()
$std::window_count_of ()
$std::set_title ()
$std::get_title ()
$std::set_content ()
$std::get_content ()
$std::focus_next_window ()
$std::focus_previous_window ()
$std::set_selection ()
$std::unset_selection ()

# Create Window Options

$std::CONTENT .
$std::HORIZONTAL_SCROLLBAR .
$std::VERTICAL_SCROLLBAR .
$std::FIRST_VISIBLE_COLUMN .
$std::FIRST_VISIBLE_ROW .
$std_types::window_manager std_types::object
$std_types::window_manager.terminal_of undefined
$std_types::window_manager.windows_of empty_list
$std_types::window_manager.next_window_id_of 1
$std_types::terminal/create_window_manager:
$std_types::window_manager/create_window:
$std_types::window_manager/update:
$std_types::terminal/draw_vertical_slider:
$std_types::terminal/draw_horizontal_slider:
$std_types::window_manager/move_left:
$std_types::window_manager/move_right:
$std_types::window_manager/move_up:
$std_types::window_manager/move_down:
$std_types::window_manager/move_leftmost:
$std_types::window_manager/move_rightmost:
$std_types::window_manager/move_top:
$std_types::window_manager/move_bottom:
$std_types::window_manager/focus_next_window:
$std_types::window_manager/focus_previous_window:
$std_types::window_manager/close:
$std_types::window_manager/window_count_of:
$std_types::window_manager/set_title:
$std_types::window_manager/get_title:
$std_types::window_manager/set_content:
$std_types::window_manager/get_content:
$std_types::window_manager/set_selection:
$std_types::window_manager/unset_selection:

#$horizontal_partial_blocks list('▉' '▊' '▋' '▌' '▍' '▎' '▏')

$horizontal_partial_blocks list('▏' '▎' '▍' '▌' '▋' '▊' '▉')

$vertical_partial_blocks list('▇' '▆' '▅' '▄' '▃' '▂' '▁')

$std_types::terminal/draw_vertical_slider:
  (
    self
    x
    y
    width
    height
    total # the number of total items
    current # the number of currently visible items
    pos # the index of the first visible item (one-based)
  )
  $n total-current
  $bar_size 8*height
  $slider_size max(8 8*height*current .div. total)
  $m bar_size-slider_size
  $top round((pos-1)*m/n).to_integer
  update_if top == 0 && pos != 1 &top -> 2
  update_if top == m && pos-1 != n &top -> m-1
  $bottom top+slider_size
  set_clear_colour &self LIGHT_GREY
  clear &self x y width height
  if
    (top .mod. 8) == 0
    draw_middle
    :
      set_draw_colour &self GREY
      draw_text &self x y+(top .div. 8)
        dup(vertical_partial_blocks(top .mod. 8).to_string width)
      draw_middle

  $draw_middle:
    set_clear_colour &self GREY
    $top_y top+7 .div. 8
    $bottom_y bottom .div. 8
    clear &self x y+top_y width bottom_y-top_y
    if
      (bottom .mod. 8) == 0
      -> self
      :
        set_clear_colour &self GREY
        set_draw_colour &self LIGHT_GREY
        draw_text self x y+bottom_y
          dup(vertical_partial_blocks(bottom .mod. 8).to_string width)

$std_types::terminal/draw_horizontal_slider:
  (
    self
    x
    y
    width
    height
    total # the number of total items
    current # the number of currently visible items
    pos # the index of the first visible item (one-based)
  )
  $n total-current
  $bar_size 8*width
  $slider_size max(8 8*width*current .div. total)
  $m bar_size-slider_size
  $left round((pos-1)*m/n).to_integer
  update_if left == 0 && pos != 1 &left -> 2
  update_if left == m && pos-1 != n &left -> m-1
  $right left+slider_size
  set_clear_colour &self LIGHT_GREY
  clear &self x y width height
  if
    (left .mod. 8) == 0
    draw_middle
    :
      set_clear_colour &self GREY
      set_draw_colour &self LIGHT_GREY
      from_to y y+height-1
        : (cy)
          draw_character &self x+(left .div. 8) cy
            horizontal_partial_blocks(left .mod. 8)
          next
        draw_middle

  $draw_middle:
    set_clear_colour &self GREY
    $left_x left+7 .div. 8
    $right_x right .div. 8
    clear &self x+left_x y right_x-left_x height
    if
      (right .mod. 8) == 0
      -> self
      :
        set_clear_colour &self LIGHT_GREY
        set_draw_colour &self GREY
        from_to y y+height-1
          : (cy)
            draw_character &self x+right_x cy
              horizontal_partial_blocks(right .mod. 8)
            next
          -> self

$std_types::window_manager/move_left:
  (
    self
    id = undefined
  )
  update_if id.is_undefined &id -> focused_of(self)
  $windows windows_of(self)
  $index find_index(windows id)
  if
    index.is_defined:
      $window windows(index)
      $first_visible_column first_visible_column_of(window)
      if
        first_visible_column > 1:
          !window.first_visible_column_of first_visible_column-1
          -> self(.windows_of windows(index window))
        -> self
    -> self

$std_types::window_manager/move_right:
  (
    self
    id = undefined
  )
  update_if id.is_undefined &id -> focused_of(self)
  $windows windows_of(self)
  $index find_index(windows id)
  if
    index.is_defined:
      $window windows(index)
      $content content_of(window)
      $content_width width_of(content)
      $window_width width_of(window)
      $first_visible_column first_visible_column_of(window)
      if
        first_visible_column+window_width <= content_width:
          !window.first_visible_column_of first_visible_column+1
          -> self(.windows_of windows(index window))
        -> self
    -> self

$std_types::window_manager/move_up:
  (
    self
    id = undefined
  )
  update_if id.is_undefined &id -> focused_of(self)
  $windows windows_of(self)
  $index find_index(windows id)
  if
    index.is_defined:
      $window windows(index)
      $first_visible_row first_visible_row_of(window)
      if
        first_visible_row > 1:
          !window.first_visible_row_of first_visible_row-1
          -> self(.windows_of windows(index window))
        -> self
    -> self

$std_types::window_manager/move_down:
  (
    self
    id = undefined
  )
  update_if id.is_undefined &id -> focused_of(self)
  $windows windows_of(self)
  $index find_index(windows id)
  if
    index.is_defined:
      $window windows(index)
      $content content_of(window)
      $content_height height_of(content)
      $window_height height_of(window)
      $first_visible_row first_visible_row_of(window)
      if
        first_visible_row+window_height <= content_height:
          !window.first_visible_row_of first_visible_row+1
          -> self(.windows_of windows(index window))
        -> self
    -> self

$std_types::window_manager/move_leftmost:
  (
    self
    id = undefined
  )
  update_if id.is_undefined &id -> focused_of(self)
  $windows windows_of(self)
  $index find_index(windows id)
  if
    index.is_defined:
      $window windows(index)
      !window.first_visible_column_of 1
      -> self(.windows_of windows(index window))
    -> self

$std_types::window_manager/move_rightmost:
  (
    self
    id = undefined
  )
  update_if id.is_undefined &id -> focused_of(self)
  $windows windows_of(self)
  $index find_index(windows id)
  if
    index.is_defined:
      $window windows(index)
      $content content_of(window)
      $content_width width_of(content)
      $window_width width_of(window)
      !window.first_visible_column_of content_width-window_width+1
      -> self(.windows_of windows(index window))
    -> self

$std_types::window_manager/move_top:
  (
    self
    id = undefined
  )
  update_if id.is_undefined &id -> focused_of(self)
  $windows windows_of(self)
  $index find_index(windows id)
  if
    index.is_defined:
      $window windows(index)
      !window.first_visible_row_of 1
      -> self(.windows_of windows(index window))
    -> self

$std_types::window_manager/move_bottom:
  (
    self
    id = undefined
  )
  update_if id.is_undefined &id -> focused_of(self)
  $windows windows_of(self)
  $index find_index(windows id)
  if
    index.is_defined:
      $window windows(index)
      $content content_of(window)
      $content_height height_of(content)
      $window_height height_of(window)
      !window.first_visible_row_of content_height-window_height+1
      -> self(.windows_of windows(index window))
    -> self

$find_index: (windows id)
  if
    id.is_undefined
    -> undefined
    :
      for_each windows
        : (idx window)
          if
            id_of(window) == id
            -> idx
            next
        -> undefined

$std_types::window_manager/focus_next_window:
  (
    self
  )
  $focused focused_of(self)
  $windows windows_of(self)
  for_each windows
    : (idx window)
      if
        id_of(window) == focused:
          if
            idx == length_of(windows)
            -> self(.focused_of id_of(windows(1)))
            -> self(.focused_of id_of(windows(idx+1)))
        next
    pass # we should never reach this

$std_types::window_manager/focus_previous_window:
  (
    self
  )
  $focused focused_of(self)
  $windows windows_of(self)
  for_each windows
    : (idx window)
      if
        id_of(window) == focused:
          if
            idx == 1
            -> self(.focused_of id_of(windows(length_of(windows))))
            -> self(.focused_of id_of(windows(idx-1)))
        next
    pass # we should never reach this

$std_types::window_manager/close:
  (
    self
    id = undefined
  )
  $focused focused_of(self)
  update_if id.is_undefined &id -> focused
  $windows windows_of(self)
  $index find_index(windows id)
  if
    index.is_defined:
      !windows append(range(windows 1 index-1) range(windows index+1 -1))
      !self.windows_of windows
      if
        index == focused:
          if
            index <= length_of(windows)
            -> self(.focused_of id_of(windows(index)))
            :
              if
                windows.is_empty
                -> self(.focused_of undefined)
                -> self(.focused_of id_of(windows(1)))
        -> self
    -> self

$std_types::window_manager/window_count_of:
  (
    self
  )
  -> length_of(windows_of(self))

$std_types::window_manager/set_title:
  (
    self
    id = undefined
    title
  )
  update_if id.is_undefined &id -> focused_of(self)
  $windows windows_of(self)
  $index find_index(windows id)
  if
    index.is_defined:
      $window windows(index)
      !window.title_of title
      -> self(.windows_of windows(index window))
    -> self

$std_types::window_manager/get_title:
  (
    self
    id = undefined
  )
  update_if id.is_undefined &id -> focused_of(self)
  $windows windows_of(self)
  $index find_index(windows id)
  if
    index.is_defined:
      $window windows(index)
      -> title_of(window)
    -> undefined

$std_types::window_manager/set_content:
  (
    self
    id = undefined
    content
  )
  update_if id.is_undefined &id -> focused_of(self)
  $windows windows_of(self)
  $index find_index(windows id)
  if
    index.is_defined:
      $window windows(index)
      !window.content_of content
      -> self(.windows_of windows(index window))
    -> self

$std_types::window_manager/get_content:
  (
    self
    id = undefined
  )
  update_if id.is_undefined &id -> focused_of(self)
  $windows windows_of(self)
  $index find_index(windows id)
  if
    index.is_defined:
      -> content_of(windows(index))
    -> undefined

$std_types::window_manager/set_selection:
  (
    self
    id = undefined
    x
    y
    w
    h
  )
  update_if id.is_undefined &id -> focused_of(self)
  $windows windows_of(self)
  $index find_index(windows id)
  if
    index.is_defined:
      $window windows(index)
      !window.selection_of tuple(x y w h)
      -> self(.windows_of windows(index window))
    -> self

$std_types::window_manager/unset_selection:
  (
    self
    id = undefined
  )
  update_if id.is_undefined &id -> focused_of(self)
  $windows windows_of(self)
  $index find_index(windows id)
  if
    index.is_defined:
      $window windows(index)
      !window.selection_of undefined
      -> self(.windows_of windows(index window))
    -> self

[source]

$std::move_top ()

$std_types::window_manager/move_top:
  (
    self
    id = undefined
  )
  update_if id.is_undefined &id -> focused_of(self)
  $windows windows_of(self)
  $index find_index(windows id)
  if
    index.is_defined:
      $window windows(index)
      !window.first_visible_row_of 1
      -> self(.windows_of windows(index window))
    -> self

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use (parts of) the documentation already provided in the source

### Do not create completely new examples on your own

### Use only one of the following topics: Window Manager

# std_types::window_manager/std::move_top (a method)

