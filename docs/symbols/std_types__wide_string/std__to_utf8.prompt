[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

METHOD std_types::positive_integer/plus
{
  CHECK_ARGUMENTS(2)
  CHECK_RESULTS(1)
  if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::positive_integer)) {
    if (ARGUMENTS(0)->integer.value+ARGUMENTS(1)->integer.value >= ARGUMENTS(0)->integer
      RETURN_SINGLE_RESULT(CREATE(std_types::positive_integer, ARGUMENTS(0)->integer.val
    }
  } else if (TYPEOF(ARGUMENTS(1)) == TYPE(negative_integer)) {
    if (ARGUMENTS(0)->integer.value >= ARGUMENTS(1)->integer.value) {
      RETURN_SINGLE_RESULT(CREATE(std_types::positive_integer, ARGUMENTS(0)->integer.val
    } else {
      RETURN_SINGLE_RESULT(CREATE(negative_integer, ARGUMENTS(1)->integer.value-ARGUMENT
    }
  } else if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::real)) {
    RETURN_SINGLE_RESULT(CREATE(std_types::real, ARGUMENTS(0)->integer.value+ARGUMENTS(1
  }
  INVALID_ARGUMENTS
}

[documentation remark]

# std_types::positive_integer/std::plus (a method)

  implements the plus operation for positive integers

  Parameters:
    left: a positive integer value
    right: any numeric value

  Result:
    sum: the sum of the two operands

  Topic: Numbers

  See also: std_types::positive_integer/std::minus,
            std_types::positive_integer/std::times,
            std_types::positive_integer/std::over,
            std_types::positive_integer/std::div,
            std_types::positive_integer/std::mod

[EXERCISE]

[symbols]

POLY std::to_utf8
TYPE std_types::string -> std_types::generic_list
METHOD std_types::string/_type
TYPE std_types::octet_string -> std_types::string
TYPE std_types::wide_string -> std_types::string
OBJECT std::empty_string -> std_types::octet_string
METHOD std_types::octet_string/_type
METHOD std_types::wide_string/_type
METHOD long std_types::octet_string/_debug_string
METHOD long std_types::wide_string/_debug_string
METHOD int std_types::octet_string/_get_item_of
METHOD int std_types::wide_string/_get_item_of
METHOD int std_types::octet_string/_to_c_string
METHOD int std_types::octet_string/_to_octets
FUNCTION NODE *from_latin_1_string
FUNCTION NODE *from_uint32_string
FUNCTION NODE *from_c_string
METHOD int std_types::octet_string/_length_of
METHOD int std_types::wide_string/_length_of
METHOD std_types::octet_string/length_of
METHOD std_types::wide_string/length_of
METHOD std_types::octet_string/is_empty
METHOD std_types::octet_string/is_not_empty
METHOD std_types::wide_string/is_empty
METHOD std_types::wide_string/is_not_empty
METHOD std_types::octet_string/push
METHOD std_types::wide_string/push
METHOD std_types::octet_string/append
METHOD std_types::wide_string/append
METHOD std_types::octet_string/range
METHOD std_types::wide_string/range
METHOD std_types::octet_string/hash
METHOD std_types::wide_string/hash
METHOD std_types::octet_string/equal
METHOD std_types::wide_string/equal
METHOD std_types::octet_string/less
METHOD std_types::wide_string/less
METHOD std_types::octet_string/width_of
METHOD std_types::wide_string/width_of
METHOD std_types::octet_string/from_utf8
METHOD std_types::octet_string/to_utf8
METHOD std_types::wide_string/to_utf8

METHOD std_types::wide_string/less
  #
    compares the two strings character by character
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    NODE *left = ARGUMENTS(0);
    NODE *right = ARGUMENTS(1);
    if (left == right) RETURN_FALSE
    if (TYPEOF(right) == TYPE(std_types::octet_string)) {
      WIDE_DATA *left_data = left->wide_string.data;
      OCTET_DATA *right_data = right->octet_string.data;
      long left_offset = left->wide_string.offset;
      long right_offset = right->octet_string.offset;
      long left_length = left->wide_string.length;
      long right_length = right->octet_string.length;
      long length = left_length;
      if (right_length < length) length = right_length;
      long i;
      for (i = 0; i < length; ++i) {
        uint32_t left_chr = left_data->buffer[left_offset+i];
        uint32_t right_chr = right_data->buffer[right_offset+i];
        if (left_chr < right_chr) RETURN_TRUE
        if (left_chr > right_chr) RETURN_FALSE
      }
      if (left_length < right_length) RETURN_TRUE
      RETURN_FALSE
    } else if (TYPEOF(right) == TYPE(std_types::wide_string)) {
      WIDE_DATA *left_data = left->wide_string.data;
      WIDE_DATA *right_data = right->wide_string.data;
      long left_offset = left->wide_string.offset;
      long right_offset = right->wide_string.offset;
      long left_length = left->wide_string.length;
      long right_length = right->wide_string.length;
      if (left_offset == right_offset && left_length == right_length && left_data == right_data)
        RETURN_FALSE
      long length = left_length;
      if (right_length < length) length = right_length;
      long i;
      for (i = 0; i < length; ++i) {
        uint32_t left_chr = left_data->buffer[left_offset+i];
        uint32_t right_chr = right_data->buffer[right_offset+i];
        if (left_chr < right_chr) RETURN_TRUE
        if (left_chr > right_chr) RETURN_FALSE
      }
      if (left_length < right_length) RETURN_TRUE
      if (left_offset == right_offset && left_length == right_length) { // both strings are equal!
        // join the two versions of the string data to simplify future comparisons
        join_nodes(&left->octet_string.data, &right->octet_string.data);
      }
      RETURN_FALSE
    } else {
      INVALID_ARGUMENTS
    }
  }

METHOD std_types::octet_string/width_of
  #
    returns the number of character positions needed to print the string
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    RETURN_SINGLE_RESULT(from_long(ARGUMENTS(0)->octet_string.length))
  }

METHOD std_types::wide_string/width_of
  #
    returns the number of character positions needed to print the string
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    long width = 0;
    NODE *string = ARGUMENTS(0);
    WIDE_DATA *data = string->wide_string.data;
    long offset = string->wide_string.offset;
    long length = string->wide_string.length;
    for (long i = 0; i < length; ++i) {
      uint32_t chr = data->buffer[offset+i];
      if (is_a_wide_character(chr)) {
        width += 2;
      } else {
        ++width;
      }
    }
    RETURN_SINGLE_RESULT(from_long(width))
  }

METHOD std_types::octet_string/from_utf8
  #
    converts a string from utf-8 encoding to code points
  {
    CHECK_ARGUMENTS(1)
    NODE *self = ARGUMENTS(0);
    long offset = self->octet_string.offset;
    long length = self->octet_string.length;
    uint8_t *buf = self->octet_string.data->buffer+offset;
    int is_latin_1 = true;
    uint8_t chr;
    long src_idx, dest_idx;
    // check vor valid utf-8 encoding
    // the allowed maximum size is 32 bits instead of 21 bits!
    long new_length = 0;
    src_idx = 0;
    while (src_idx < length) {
      int n; // number of continuation octets
      chr = buf[src_idx++];
      if (chr >= 0x80) {
        if ((chr & 0xe0) == 0xc0) { // 2 byte code
          if (chr & 0x3c) is_latin_1 = false; // more than 8 bits
          n = 1;
        } else if ((chr & 0xf0) == 0xe0) { // 3 byte code
          is_latin_1 = false;
          n = 2;
        } else if ((chr & 0xf8) == 0xf0) { // 4 byte code
          is_latin_1 = false;
          n = 3;
        } else if ((chr & 0xfc) == 0xf8) { // 5 byte code
          is_latin_1 = false;
          n = 4;
        } else if ((chr & 0xfe) == 0xfc) { // 6 byte code
          is_latin_1 = false;
          n = 5;
        } else if (chr == 0xfe) { // 7 byte code
          if (buf[src_idx] & 0x3e) INVALID_ARGUMENTS // more than 32 bits
          is_latin_1 = false;
          n = 6;
        } else INVALID_ARGUMENTS
        if (src_idx+n > length) INVALID_ARGUMENTS
        while (--n >= 0) {
          chr = buf[src_idx++];
          if ((chr & 0xc0) != 0x80) INVALID_ARGUMENTS
        }
      }
      ++new_length;
    }
    if (is_latin_1) {
      long new_size = ALLOCATION_SIZE(new_length);
      OCTET_DATA *data = allocate_large(sizeof(OCTET_DATA)+new_size);
      data->size = new_size;
      data->length = new_length;
      src_idx = 0;
      for (dest_idx = 0; dest_idx < new_length; ++dest_idx) {
        uint8_t chr;
        chr = buf[src_idx++];
        if (chr >= 0x80) {
          chr = ((chr & 0x1f) << 6) | (buf[src_idx++] & 0x3f);
        }
        data->buffer[dest_idx] = chr;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::octet_string, 0, new_length, data))
    } else {
      long new_size = ALLOCATION_SIZE(4*new_length);
      WIDE_DATA *data = allocate_large(sizeof(WIDE_DATA)+new_size);
      data->size = new_size;
      data->length = new_length;
      src_idx = 0;
      for (dest_idx = 0; dest_idx < new_length; ++dest_idx) {
        uint32_t chr;
        chr = buf[src_idx++];
        if (chr >= 0x80) {
          int n; // number of continuation octets
          if ((chr & 0xe0) == 0xc0) { // 2 byte code
            chr &= 0x1f;
            n = 1;
          } else if ((chr & 0xf0) == 0xe0) { // 3 byte code
            chr &= 0x0f;
            n = 2;
          } else if ((chr & 0xf8) == 0xf0) { // 4 byte code
            chr &= 0x07;
            n = 3;
          } else if ((chr & 0xfc) == 0xf8) { // 5 byte code
            chr &= 0x03;
            n = 4;
          } else if ((chr & 0xfe) == 0xfc) { // 6 byte code
            chr &= 0x01;
            n = 5;
          } else { // 7 byte code
            chr = 0;
            n = 6;
          }
          while (--n >= 0) {
            chr = (chr << 6) | (buf[src_idx++] & 0x3f);
          }
        }
        data->buffer[dest_idx] = chr;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::wide_string, 0, new_length, data))
    }
  }

METHOD std_types::octet_string/to_utf8
  #
    converts a string from code points to utf-8 encoding
  {
    CHECK_ARGUMENTS(1)
    NODE *self = ARGUMENTS(0);
    long offset = self->octet_string.offset;
    long length = self->octet_string.length;
    long new_len = length;
    uint8_t *src = self->octet_string.data->buffer+offset;
    long i;
    for(i = 0; i < length; ++i) {
      uint8_t chr = src[i];
      if (chr >= 0x80) {
        ++new_len;
      }
    }
    long size = ALLOCATION_SIZE(new_len);
    OCTET_DATA *data = allocate_large(sizeof(OCTET_DATA)+size);
    data->size = size;
    data->length = new_len;
    uint8_t *dst = data->buffer;
    for(i = 0; i < length; ++i) {
      uint8_t chr = src[i];
      if (chr >= 0x80) {
        *dst++ = chr >> 6 | 0xc0;
        *dst++ = chr & 0x3f | 0x80;
      } else {
        *dst++ = chr;
      }
    }
    RETURN_SINGLE_RESULT(CREATE(std_types::octet_string, 0, new_len, data))
  }

#
  encoding:

  7 bit:  0xxxxxxx
  11 bit: 110xxxxx 10xxxxxx
  16 bit: 1110xxxx 10xxxxxx 10xxxxxx
  21 bit: 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
  26 bit: 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
  31 bit: 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
  36 bit: 11111110 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx

METHOD std_types::wide_string/to_utf8
  #
    converts a string from code points to utf-8 encoding
  {
    CHECK_ARGUMENTS(1)
    NODE *self = ARGUMENTS(0);
    long offset = self->wide_string.offset;
    long length = self->wide_string.length;
    long new_len = length;
    uint32_t *src = self->wide_string.data->buffer+offset;
    long i;
    for(i = 0; i < length; ++i) {
      uint32_t chr = src[i];
      if (chr >= 0x80) {
        if (chr >= 0x800) {
          if (chr >= 0x10000) {
            if (chr >= 0x200000) {
              if (chr >= 0x4000000) {
                if (chr >= 0x80000000) {
                  new_len += 6;
                } else {
                  new_len += 5;
                }
              } else {
                new_len += 4;
              }
            } else {
              new_len += 3;
            }
          } else {
            new_len += 2;
          }
        } else {
          ++new_len;
        }
      }
    }
    long size = ALLOCATION_SIZE(new_len);
    OCTET_DATA *data = allocate_large(sizeof(OCTET_DATA)+size);
    data->size = size;
    data->length = new_len;
    uint8_t *dst = data->buffer;
    for(i = 0; i < length; ++i) {
      uint32_t chr = src[i];
      if (chr >= 0x80) {
        if (chr >= 0x800) {
          if (chr >= 0x10000) {
            if (chr >= 0x200000) {
              if (chr >= 0x4000000) {
                if (chr >= 0x80000000) {
                  *dst++ = 0xfe;
                  *dst++ = (chr >> 30) & 0x3f | 0x80;
                  *dst++ = (chr >> 24) & 0x3f | 0x80;
                  *dst++ = (chr >> 18) & 0x3f | 0x80;
                  *dst++ = (chr >> 12) & 0x3f | 0x80;
                  *dst++ = (chr >> 6) & 0x3f | 0x80;
                  *dst++ = chr & 0x3f | 0x80;
                } else {
                  *dst++ = chr >> 30 | 0xfc0;
                  *dst++ = (chr >> 24) & 0x3f | 0x80;
                  *dst++ = (chr >> 18) & 0x3f | 0x80;
                  *dst++ = (chr >> 12) & 0x3f | 0x80;
                  *dst++ = (chr >> 6) & 0x3f | 0x80;
                  *dst++ = chr & 0x3f | 0x80;
                }
              } else {
                *dst++ = chr >> 24 | 0xf8;
                *dst++ = (chr >> 18) & 0x3f | 0x80;
                *dst++ = (chr >> 12) & 0x3f | 0x80;
                *dst++ = (chr >> 6) & 0x3f | 0x80;
                *dst++ = chr & 0x3f | 0x80;
              }
            } else {
              *dst++ = chr >> 18 | 0xf0;
              *dst++ = (chr >> 12) & 0x3f | 0x80;
              *dst++ = (chr >> 6) & 0x3f | 0x80;
              *dst++ = chr & 0x3f | 0x80;
            }
          } else {
            *dst++ = chr >> 12 | 0xe0;
            *dst++ = (chr >> 6) & 0x3f | 0x80;
            *dst++ = chr & 0x3f | 0x80;
          }
        } else {
          *dst++ = chr >> 6 | 0xc0;
          *dst++ = chr & 0x3f | 0x80;
        }
      } else {
        *dst++ = chr;
      }
    }
    RETURN_SINGLE_RESULT(CREATE(std_types::octet_string, 0, new_len, data))
  }

[source]

POLY std::to_utf8
  #
    returns an utf8-encoded octet string

    Topic: Strings

METHOD std_types::wide_string/to_utf8
  #
    converts a string from code points to utf-8 encoding
  {
    CHECK_ARGUMENTS(1)
    NODE *self = ARGUMENTS(0);
    long offset = self->wide_string.offset;
    long length = self->wide_string.length;
    long new_len = length;
    uint32_t *src = self->wide_string.data->buffer+offset;
    long i;
    for(i = 0; i < length; ++i) {
      uint32_t chr = src[i];
      if (chr >= 0x80) {
        if (chr >= 0x800) {
          if (chr >= 0x10000) {
            if (chr >= 0x200000) {
              if (chr >= 0x4000000) {
                if (chr >= 0x80000000) {
                  new_len += 6;
                } else {
                  new_len += 5;
                }
              } else {
                new_len += 4;
              }
            } else {
              new_len += 3;
            }
          } else {
            new_len += 2;
          }
        } else {
          ++new_len;
        }
      }
    }
    long size = ALLOCATION_SIZE(new_len);
    OCTET_DATA *data = allocate_large(sizeof(OCTET_DATA)+size);
    data->size = size;
    data->length = new_len;
    uint8_t *dst = data->buffer;
    for(i = 0; i < length; ++i) {
      uint32_t chr = src[i];
      if (chr >= 0x80) {
        if (chr >= 0x800) {
          if (chr >= 0x10000) {
            if (chr >= 0x200000) {
              if (chr >= 0x4000000) {
                if (chr >= 0x80000000) {
                  *dst++ = 0xfe;
                  *dst++ = (chr >> 30) & 0x3f | 0x80;
                  *dst++ = (chr >> 24) & 0x3f | 0x80;
                  *dst++ = (chr >> 18) & 0x3f | 0x80;
                  *dst++ = (chr >> 12) & 0x3f | 0x80;
                  *dst++ = (chr >> 6) & 0x3f | 0x80;
                  *dst++ = chr & 0x3f | 0x80;
                } else {
                  *dst++ = chr >> 30 | 0xfc0;
                  *dst++ = (chr >> 24) & 0x3f | 0x80;
                  *dst++ = (chr >> 18) & 0x3f | 0x80;
                  *dst++ = (chr >> 12) & 0x3f | 0x80;
                  *dst++ = (chr >> 6) & 0x3f | 0x80;
                  *dst++ = chr & 0x3f | 0x80;
                }
              } else {
                *dst++ = chr >> 24 | 0xf8;
                *dst++ = (chr >> 18) & 0x3f | 0x80;
                *dst++ = (chr >> 12) & 0x3f | 0x80;
                *dst++ = (chr >> 6) & 0x3f | 0x80;
                *dst++ = chr & 0x3f | 0x80;
              }
            } else {
              *dst++ = chr >> 18 | 0xf0;
              *dst++ = (chr >> 12) & 0x3f | 0x80;
              *dst++ = (chr >> 6) & 0x3f | 0x80;
              *dst++ = chr & 0x3f | 0x80;
            }
          } else {
            *dst++ = chr >> 12 | 0xe0;
            *dst++ = (chr >> 6) & 0x3f | 0x80;
            *dst++ = chr & 0x3f | 0x80;
          }
        } else {
          *dst++ = chr >> 6 | 0xc0;
          *dst++ = chr & 0x3f | 0x80;
        }
      } else {
        *dst++ = chr;
      }
    }
    RETURN_SINGLE_RESULT(CREATE(std_types::octet_string, 0, new_len, data))
  }

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Strings

# std_types::wide_string/std::to_utf8 (a builtin method)

