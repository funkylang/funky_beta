[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std::hexdump_to:
  (
    fd
    str
  )
  $i 0
  $n length_of(str)
  loop:
    if
      i >= n:
        on (i .mod. 16) != 0: print_to! fd "@nl;"
      :
        on (i .mod. 16) == 0:
          print_to! fd hex(i 8)
          print_to! fd ":"
        inc &i
        print_to! fd " "
        print_to! fd hex(str(i).to_integer 2)
        on (i .mod. 16) == 0: print_to! fd "@nl;"
        next!

[documentation remark]

# std::hexdump_to (an I/O-function)

  writes a hexdump of the specified string to the specified file descriptor

  Parameters:
    fd: the file descriptor to write to
    str: the string to hexdump

  Results:
    none

  **Attention**: This function must be called with I/O-access rights!

  The function displays the string's hexadecimal representation.

  Topic: Debugging

  See also: std::hexdump, std::ehexdump, debug::hexdump, std::dump_to

  Example:

    $data "Hello, world!"
    hexdump_to! STDOUT_FILENO data

  Output:

    00000000: 48 65 6c 6c 6f 2c 20 77 6f 72 6c 64 21

[EXERCISE]

#
  Topic: Branches

  There are no builtin branch instructions in the Funky language.

  Branch "instructions" are functions that are supplied some form of *condition*
  and two or more functions. Based upon the evaluation of the condition, one of
  the supplied functions is called.

  The basic branch instructions of the standard library use polymorphic dispatch
  on the truth values <true> and <false> to implement <if> and <if_not>.

  More complex branches like <cond> or <case> use <if> to check their
  conditions.

  Related topics: Loops

[symbols]

$std::cond:
$std::case:
$std_types::object/does_match equal
$std_types::value_range/does_match: (self expr)
$std_types::sequence/does_match: (self expr)
$std_types::object/passes_test: (self expr) -> test_function(expr self)
$std_types::sequence/passes_test: (self expr)

#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
  Topic: Branches

  There are no builtin branch instructions in the Funky language.

  Branch "instructions" are functions that are supplied some form of *condition*
  and two or more functions. Based upon the evaluation of the condition, one of
  the supplied functions is called.

  The basic branch instructions of the standard library use polymorphic dispatch
  on the truth values <true> and <false> to implement <if> and <if_not>.

  More complex branches like <cond> or <case> use <if> to check their
  conditions.

  Related topics: Loops

$std::cond:
  #
    a multiway conditional expression or statement

    Results:
      results # whatever the selected function returns

    Each argument is a function that returns two results:

    * a boolean value (<true> or <false>)

    and

    * a function (statement sequence)

    The arguments are evaluated in order and as soon as an argument returns
    <true> the corresponding function is called.

    If none of the arguments returns <true> no function is called.

    Topic: Branches, Input-Output

    See also: std::if, std::case

    Example:

      $chr '7'
      cond
        -> chr >= 'a' && chr <= 'z':
          println! "lower case character"
        -> chr >= 'A' && chr <= 'Z':
          println! "upper case character"
        -> chr == '_':
          println! "underscore"
        -> chr >= '0' && chr <= '9':
          println! "digit"
        -> true:
          println! "neither character nor digit nor underscore"

    Output:

      digit
  (
    args* # a sequence of functions that return a boolean and a function
  )
  $i 1
  $n length_of(args)
  check!

  $check:
    if
      i <= n:
        args(i) $cond $body
        if
          cond
          :
            body!
          :
            !i i+1
            check!
      pass

$std::case:
  #
    a multiway conditional expression or statement

    Results:
      results # whatever the selected function returns

    The first argument is a value that is compared to the values of the
    following arguments.

    The arguments are an alternating sequence of values and functions
    (statement sequences).

    The values are compared to the first argument in the order they appear.

    If a value matches the first argument, the corresponding function is called.

    If no value matches the first argument, the last function (if any) is
    called.

    Topic: Branches

    See also: std::if, std::cond

    Example:

      $chr 'H'
      case chr
        'a' .. 'z':
          println! "lower case character"
        'A' .. 'Z':
          println! "upper case character"
        '_':
          println! "underscore"
        '0' .. '9':
          println! "digit"
        :
          println! "neither character nor digit nor underscore"

    Output:

      upper case character
  (
    expr # the first argument
    values_and_bodies*
      # an alternating sequence of case-values and statement sequences
  )
  $n length_of(values_and_bodies)
  $i 1
  if
    values_and_bodies(1).is_a_function:
      !test_function values_and_bodies(1)
      inc &i
      check!

      $check:
        if
          i > n
          pass
          :
            if
              i == n:
                values_and_bodies(n)!
              :
                $value values_and_bodies(i)
                if
                  passes_test(value expr):
                    values_and_bodies(i+1)!
                  :
                    plus &i 2
                    check!
    :
      check!

      $check:
        if
          i > n
          pass
          :
            if
              i == n:
                values_and_bodies(n)!
              :
                $value values_and_bodies(i)
                if
                  ||
                    value.is_defined && does_match(value expr)
                    value.is_undefined && expr.is_undefined
                  :
                    values_and_bodies(i+1)!
                  :
                    plus &i 2
                    check!

$does_match ()

$std_types::object/does_match equal

$std_types::value_range/does_match: (self expr)
  self $lower_bound $upper_bound
  -> expr >= lower_bound && expr <= upper_bound

$std_types::sequence/does_match: (self expr)
  for_each self
    : (item)
      if
        does_match(item expr)
        -> true
        next
    -> false

$test_function undefined

$passes_test ()

$std_types::object/passes_test: (self expr) -> test_function(expr self)

$std_types::sequence/passes_test: (self expr)
  for_each self
    : (item)
      if
        test_function(expr item)
        -> true
        next
    -> false

[source]

$std::cond:
  #
    a multiway conditional expression or statement

    Results:
      results # whatever the selected function returns

    Each argument is a function that returns two results:

    * a boolean value (<true> or <false>)

    and

    * a function (statement sequence)

    The arguments are evaluated in order and as soon as an argument returns
    <true> the corresponding function is called.

    If none of the arguments returns <true> no function is called.

    Topic: Branches, Input-Output

    See also: std::if, std::case

    Example:

      $chr '7'
      cond
        -> chr >= 'a' && chr <= 'z':
          println! "lower case character"
        -> chr >= 'A' && chr <= 'Z':
          println! "upper case character"
        -> chr == '_':
          println! "underscore"
        -> chr >= '0' && chr <= '9':
          println! "digit"
        -> true:
          println! "neither character nor digit nor underscore"

    Output:

      digit
  (
    args* # a sequence of functions that return a boolean and a function
  )
  $i 1
  $n length_of(args)
  check!

  $check:
    if
      i <= n:
        args(i) $cond $body
        if
          cond
          :
            body!
          :
            !i i+1
            check!
      pass

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use (parts of) the documentation already provided in the source

### Do not create completely new examples on your own

### Use only one of the following topics: Branches, Input-Output

# std::cond (an I/O-function)

