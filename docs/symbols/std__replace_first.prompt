[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std::wrap_words:
  (
    text
    width
  )
  $lines empty_list
  $n length_of(text)
  $s 1 # start of line
  $b undefined # possible break position
  $i 0
  loop:
    inc &i
    if
      i > n:
        if
          s > n
          -> lines
          -> push(lines range(text s n))
      :
        $chr text(i)
        case chr
          '
':
            push &lines range(text s i-1)
            !s i+1
            !b undefined
            next
          :
            if
              chr == ' ':
                if
                  i-s == width: # break
                    push &lines range(text s i-1)
                    !s i+1
                    !b undefined
                    next
                  :
                    !b i
                    next
              :
                if
                  i-s < width
                  next
                  :
                    if
                      b.is_defined: # wrap
                        push &lines range(text s b-1)
                        !s b+1
                        !b undefined
                        next
                      : # hard break
                        push &lines range(text s i-1)
                        !s i
                        next

[documentation remark]

# std::wrap_words (a function)

  wraps a string consisting of words onto multiple lines

  Parameters:
    text: the text to wrap
    width: the maximum width of a line

  Result:
    lines: a list of (wrapped) lines

  The string is split into multiple lines according to the specified line
  width.

  Topic: Strings

  See also: std::indented

  Example:

    $str "This is a very long string that should be wrapped onto multiple lines"
    $lines wrap_words(str 30)
    dump! 2 `lines

  Output:

    lines:
      list
        "This is a very long string"
        "that should be wrapped"
        "onto multiple lines"

[EXERCISE]

#
  Topic: Strings

  Strings consist of zero or more characters.

  A character is a tagged unsigned 32-bit integer.

  They usually store uni-code code points.

  The subtype <std_types::octet_string> of <std_types::string> is used for
  binary data, often for storing utf8 encoded strings.

  The most efficient string operation is <push> which adds a character to the
  end of the string. Appending two or more strings is also done in an efficient
  way.

  Reading a character at any position is also efficient.

  The most basic string operations are builtin.

  Strings have a lot in common with <std_types::list>.

  Related topics: Lists

[symbols]

$std::to_sentence_case ()
$std::is_a_string ()
$std::to_uint8_array ()
$std_types::object.is_a_string false
$std_types::string.is_a_string true
$std::is_an_octet_string ()
$std_types::object.is_an_octet_string false
$std_types::octet_string.is_an_octet_string true
$std_types::string.neutral_element_of ""
$std_types::string/to_string:
$std::create_string:
$std::string:
$std_types::string/put:
$std_types::string/dup:
$std_types::object/pad_left:
$std_types::object/pad_right:
$std::spaces:
$std::tabs_and_spaces:
$std::with_tabs:
$std_types::string/match:
$std_types::string/match_back:
$std_types::string/matches:
$std_types::string/search:
$std_types::string/before:
$std_types::string/truncate_from:
$std_types::string/behind:
$std_types::string/truncate_until:
$std_types::string/from:
$std_types::string/truncate_before:
$std_types::string/until:
$std_types::string/truncate_behind:
$std_types::string/between:
$std_types::string/has_prefix:
$std_types::string/has_suffix:
$std_types::string/without_prefix:
$std_types::string/without_suffix:
$std_types::string/contains:
$std::split:
$std::join:
$std::trim:
$std::trim_left:
$std::trim_right:
$std::normalize:
$std_types::octet_string/to_base64:
$std_types::octet_string/from_base64:
$std_types::octet_string/sha1:
$std::parse_integer:
$std::parse_number:
$std::parse_hex:
$std_types::string/to_integer:
$std_types::string/to_number:
$std::map_characters:
$std_types::string/to_upper_case:
$std_types::string/to_lower_case:
$std_types::string/to_title_case:
$std_types::string/to_sentence_case:
$std_types::string/to_wide: (str)
$std::delete_all:
$std::replace_all:
$std::replace_first:
$std::count_occurrences:
$std::split_into_lines: (text)
$std::split_into_indented_lines:
$std::subgroups_of (!)
$std::split_into_groups:
$std::wrap_words:
$std_types::string/serialize:
$std_types::octet_string/to_uint8_array:
$std::indented:
$std::format:
$std_types::string.empty_collection_of ""

$std_types::string/to_integer:
  #
    converts the whole string into an integer value

    If the complete string can be converted into an integer then the
    resulting integer is returned.

    If the conversion fails or does not consume the complete string then
    <undefined> is returned.

    Topic: Strings

    See also: string/parse_integer

    Example:

      $str "123"
      $value str.to_integer
      println! "value: " value

    Output:

      value: 123

    Example:

      $str "123, 456"
      $value str.to_integer
      dump! `value

    Output:

      value: <undefined>
  (
    self # the string to convert
  )
  parse_integer &self $value
  if
    self == ""
    -> value
    -> undefined

$std_types::string/to_number:
  #
    converts the whole string into a number value

    If the complete string can be converted into a number then the
    resulting number (integer or real) is returned.

    If the conversion fails or does not consume the complete string then
    <undefined> is returned.

    Topic: Strings

    See also: string/to_integer, strint/parse_number

    Example:

      $str "123.456"
      $value str.to_number
      println! "value: " value

    Output:

      value: 123.456

    Example:

      $str "123.456, 789"
      $value str.to_number
      dump! `value

    Output:

      value: <undefined>
  (
    self # the string to convert
  )
  parse_number &self $value
  if
    self == ""
    -> value
    -> undefined

$std::map_characters:
  #
    applies a function to each character of the string

    The function returns a string that is the result of applying the
    specified function to each character of the string.

    Topic: Strings

    See also: to_upper_case, to_lower_case, to_title_case, map, map_reduce

    Example:

      $str "abc"
      $upper_case_str map_characters(str to_upper_case)
      println! upper_case_str

    Output:

      ABC
  (
    self # the string which characters will be mapped
    function # the function to apply to each character of the string
  )
  $map
    if
      parameter_count_of(function) == 2
      ->
        : (s e)
          if
            s < e:
              $m (s+e) >> 1
              append
                map(s m)
                map(m+1 e)
            :
              if
                s > e
                -> ""
                -> function(s self(s)).to_string
      ->
        : (s e)
          if
            s < e:
              $m (s+e) >> 1
              append
                map(s m)
                map(m+1 e)
            :
              if
                s > e
                -> ""
                -> function(self(s)).to_string

  map 1 length_of(self)

$std_types::string/to_upper_case:
  #
    returns the string converted to UPPER CASE

    Topic: Strings

    See also: to_lower_case, to_title_case, map_characters

    Example:

      $str "abc"
      $upper_case_str str.to_upper_case
      println! upper_case_str

    Output:

      ABC
  (
    self # the string to convert
  )
  map_characters self to_upper_case

$std_types::string/to_lower_case:
  #
    returns the string converted to lower case

    Topic: Strings

    See also: to_upper_case, to_title_case, map_characters

    Example:

      $str "ABC"
      $lower_case_str str.to_lower_case
      println! lower_case_str

    Output:

      abc
  (
    self # the string to convert
  )
  map_characters self to_lower_case

$std_types::string/to_title_case:
  #
    returns the string converted to "Title Case"

    Topic: Strings

    See also: to_sentence_case, to_upper_case, to_lower_case, map_characters

    Example:

      $str "this is a test"
      $title_case_str str.to_title_case
      println! title_case_str

    Output:

      This Is A Test
  (
    self # the string to convert
  )
  map_characters self: (idx chr)
    if
      idx > 1 && self(idx-1).is_a_letter_character
      -> chr.to_lower_case
      -> chr.to_title_case

$std_types::string/to_sentence_case:
  #
    converts the spefied string to "Sentence case"

    Topic: Strings

    See also: to_title_case

    Example:

      $str "this is a test."
      $sentence_case_str str.to_sentence_case
      println! sentence_case_str

    Output:

      This is s test.
  (
    self
  )
  map_characters self: (idx chr)
    if
      idx == 1 && self(idx).is_a_letter_character
      -> chr.to_title_case
      -> chr.to_lower_case

$std_types::string/to_wide: (str)
  map_characters str to_wide

$std::delete_all:
  #
    deletes all occurences of the specfified expressions

    This function deletes all occurences of the specified expressions from
    the string.

    Topic: Strings

    See also: replace_all

    Example:

      $str "abcabc"
      $str_without_b delete_all(str 'b')
      println! str_without_b

    Output:

      acac
  (
    text # the string to process
    expressions* # the expressions to delete
  )
  $delete_all: (txt)
    if
      txt.is_empty
      -> new_text
      :
        for_each expressions
          : (expression)
            $len match(expression txt)
            if_not len.is_defined next:
              delete_all range(txt len+1 -1)
          :
            push &new_text txt(1)
            delete_all range(txt 2 -1)

  $new_text ""
  delete_all text

$std::replace_all:
  #
    replaces all occurences of the specified expressions

    This function replaces all occurences of the specified expressions with
    their corresponding replacement texts.

    Topic: Strings

    See also: replace_first, delete_all

    Example:

      $str "abcabc"
      $str_with_x replace_all(str 'b' = 'x')
      println! str_with_x

    Output:

      axcaxc
  (
    text # the string to process
    args* # the expressions and their replacements
  )
  $replace_all: (txt)
    if
      txt.is_empty
      -> new_text
      :
        for_each args
          : (arg)
            arg $expression $replacement
            $len match(expression txt)
            if_not len.is_defined next:
              if
                replacement.is_a_string:
                  append &new_text replacement
                  replace_all range(txt len+1 -1)
                :
                  append &new_text replacement(range(txt 1 len))
                  replace_all range(txt len+1 -1)
          :
            push &new_text txt(1)
            replace_all range(txt 2 -1)

  $new_text ""
  replace_all text

$std::replace_first:
  #
    replaces the first occurence of the specified expressions

    This function replaces the first occurence of the specified expressions
    with their corresponding replacement texts.

    Topic: Strings

    See also: replace_all

    Example:

      $str "abcabc"
      $str_with_x replace_first(str 'b' = 'x')
      println! str_with_x

    Output:

      axcabc
  (
    text # the string to process
    args* # the expressions and their replacements
  )
  $replace_first: (txt)
    if
      txt.is_empty
      -> new_text
      :
        for_each args
          : (arg)
            arg $expression $replacement
            $len match(expression txt)
            if_not
              len.is_defined
              next
              :
                update_if_not replacement.is_a_string &replacement
                  -> replacement(range(txt 1 len))
                -> append(new_text replacement range(txt len+1 -1))
          :
            push &new_text txt(1)
            replace_first range(txt 2 -1)

  $new_text ""
  replace_first text

$std::count_occurrences:
  #
    returns the number of occurences of the specified expression

    This function returns the number of occurences of the specified
    expression in the string.

    Topic: Strings

    Example:

      $str "abcabc"
      $occurrences count_occurrences(str 'b')
      println! occurrences

    Output:

      2
  (
    text # the string to process
    expr # the expression to count
  )
  $search_next: (txt count)
    if
      txt == ""
      -> count
      :
        $n match(expr txt)
        if
          n.is_defined:
            search_next range(txt n+1 -1) count+1
          :
            search_next range(txt 2 -1) count

  search_next text 0

$FORK_TEXT_THRESHOLD 300

# parallel version
  $std::split_into_lines: (text)
    $n length_of(text)
    split 1 n

    $split: (s e)
      if
        e+1-s > FORK_TEXT_THRESHOLD: # recurse to exploit parallel execution
          $m (s+e) .div. 2
          append split(s m) split(m+1 e)
        :
          $lines empty_list
          $ls
            if
              s == 1 || text(s-1) == '@nl;'
              -> s # the current block starts at a line start
              -> undefined # just skip the characters until the next line start
          from_to s e
            : (i)
              if_not text(i) == '@nl;' next:
                if
                  ls.is_defined:
                    push &lines range(text ls i)
                    !ls i+1
                    next
                  :
                    !ls i+1
                    next
            :
              if
                ls.is_defined && ls <= e:
                  loop: # the last line extends into the next block
                    !e e+1
                    if
                      text(e) == '@nl;'
                      -> push(lines range(text ls e))
                      next
                -> lines

#serial version

$std::split_into_lines: (text)
  $lines empty_list
  $i 1
  $n length_of(text)
  $s i
  loop:
    if
      i > n
      ->
        if
          s <= n
          -> push(lines range(text s n))
          -> lines
      :
        if
          text(i) == '@nl;':
            push &lines range(text s i)
            !i i+1
            !s i
            next
          :
            !i i+1
            next

$std::split_into_indented_lines:
  #
    splits a text into indented lines

    The result is a list of tuples with two fields:

    * indent

    * text_line

    The *text_line* still contains the trailing line feed but leading whitespace
    is removed.

    If a line does not contain any text (whitespace does not count as text) then
    the whole tuple is replaced with the special value <undefined>.

    Topic: Strings

    See also: split_into_lines, split_into_groups

    Example:

      $text "
        a
          1
          2
          3
        b
          4
          5
      $lines split_into_indented_lines(text)
      dump! 3 lines

    Output:

      lines:
        list
          tuple
            0
            "a@0xa;"
          tuple
            2
            "1@0xa;"
          tuple
            2
            "2@0xa;"
          tuple
            2
            "3@0xa;"
          tuple
            0
            "b@0xa;"
          tuple
            2
            "4@0xa;"
          tuple
            2
            "5@0xa;"
  (
    text # the string to process
  )
  $n length_of(text)
  split 1 n

  $split: (s e)
    if
      e+1-s > FORK_TEXT_THRESHOLD: # recurse to exploit parallel execution
        $m (s+e) .div. 2
        append split(s m) split(m+1 e)
      :
        $lines empty_list
        $ls
          if
            s == 1 || text(s-1) == '@nl;'
            -> s # the current block starts at a line start
            -> undefined # just skip the characters until the next line start
        from_to s e
          : (i)
            if_not text(i) == '@nl;' next:
              if
                ls.is_defined:
                  push &lines create_line(ls i)
                  !ls i+1
                  next
                :
                  !ls i+1
                  next
          :
            if
              ls.is_defined && ls <= e:
                loop: # the last line extends into the next block
                  !e e+1
                  if
                    text(e) == '@nl;'
                    -> push(lines create_line(ls e))
                    next
              -> lines

  $create_line: (s e)
    $indent 0
    loop:
      if
        text(s) == '@ht;':
          !indent indent+8
          !s s+1
          next
        :
          if
            text(s) == ' ':
              !indent indent+1
              !s s+1
              next
            :
              $line_text range(text s e)
              if
                line_text == "@nl;"
                -> undefined
                -> tuple(indent line_text)

$FORK_LINES_THRESHOLD 20

$VERY_LARGE_INDENT 9999

$std::subgroups_of (!)

$indent_of: (line)
  if
    line.is_defined
    -> first(line)
    -> undefined

[source]

$std::replace_first:
  #
    replaces the first occurence of the specified expressions

    This function replaces the first occurence of the specified expressions
    with their corresponding replacement texts.

    Topic: Strings

    See also: replace_all

    Example:

      $str "abcabc"
      $str_with_x replace_first(str 'b' = 'x')
      println! str_with_x

    Output:

      axcabc
  (
    text # the string to process
    args* # the expressions and their replacements
  )
  $replace_first: (txt)
    if
      txt.is_empty
      -> new_text
      :
        for_each args
          : (arg)
            arg $expression $replacement
            $len match(expression txt)
            if_not
              len.is_defined
              next
              :
                update_if_not replacement.is_a_string &replacement
                  -> replacement(range(txt 1 len))
                -> append(new_text replacement range(txt len+1 -1))
          :
            push &new_text txt(1)
            replace_first range(txt 2 -1)

  $new_text ""
  replace_first text

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Strings

# std::replace_first (a function)

