[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std::clear_colour_of ()

[documentation remark]

# std::clear_colour_of (a polymorphic function)

  the clear colour to use

  Parameter:
    self: the object from which to get the clear colour

  Result:
    colour: the clear colour

  Returns the clear colour of the object.

  Topic: Terminal

  See also: std::draw_colour_of, std::set_clear_colour

[source]

$std_types::screen/clear:
  (
    self
    x = 1
    y = 1
    width = undefined
    height = undefined
  )
  update_if width.is_undefined &width -> width_of(self)-x+1
  update_if height.is_undefined &height -> height_of(self)-y+1
  std_private::clear self self x y width height

$std::clear ()

[documentation remark]

# std::clear (a polymorphic function)

  clears a rectangular area

  Parameters:
    screen # some kind of screen
    x: x-coordinate of the upper left corner
    y: y-coordinate of the upper left corner
    width: width of the area
    height: height of the area

  Result:
    screen: the updated screen

  The area is cleared using the current clear colour. Use
  <std::set_clear_colour> to change the current clear colour.

  The area is clipped at the screen's borders.

  Topic: Terminal

  See also: std_types::screen/std::clear, std::draw_text,
            std::set_clear_colour

  Example:

    $my_screen create_screen(terminal 40 25)
    set_clear_colour &my_screen GREEN
    clear &my_screen 11 6 20 15

[EXERCISE]

#
  Topic: Input-Output Task Manager

  **ATTENTION**: This module might be deprecated!

  Related topics: Input-Output, Input-Output Events

[symbols]

$std::log_level 1

# for tasks in phase 1 (compute)


# the following functions end the compute phase

$std::perform_io () # self body arguments continuation
$std::pause () # self continuation
$std::wait_for_message () # self continuation

# the following functions can be called within the compute phase

$std::fork () # &self task start_function
$std::send () # &self destination message
$std::receive () # &self !message
$std::on_error () # &self handler
$std::on_cancel () # &self handler

# for tasks in phase 4 (start I/O)

$std::check_io () # self io body arguments
$std::on_exit () # &self handler arguments

# for tasks in phase 4 & 6 (start & complete I/O)

$std::performed_io () # self io arguments

#  for tasks in phase 5 (check I/O)

$std::recheck_io () # self body arguments
$std::complete_io () # self body arguments
$std::checked_io () # self arguments

# I/O actions


# the following actions call <perform_io>

$std::catch_signal ()

# public task methods

$std::task_id_of ()
$std::parent_of ()
$std::children_of ()

# private task fields


# Modes

$std::additional_error_information_of ()
$std_types::error.additional_error_information_of undefined
$std::generate_error_message ()
$std_types::error/generate_error_message: (self)
$std_types::io_task std_types::object
$std_types::io_task.log_messages_of empty_list
$std_types::io_task.exit_handlers_of empty_list
$std_types::io_task.error_handler_of undefined
$std_types::io_task.cancel_handler_of undefined
$std_types::io_task.parent_id_of 0
$std_types::io_task.child_ids_of empty_list
$std_types::io_task.inbound_messages_of empty_list
$std_types::io_task.outbound_messages_of empty_list
$std_types::io_task.fork_requests_of empty_list
$std_types::io_task.cancel_requests_of empty_list
$std_types::io_task.is_cancelled false
$std_types::io_task/task_id_of: (self) -> id_of(self)
$std_types::io_task/parent_of: (self)
$std_types::io_task/children_of: (self) -> child_ids_of(self)
$std_types::io_task/perform_io:
$std_types::io_task/pause: (self continuation)
$std_types::io_task/wait_for_message: (self continuation)
$std_types::io_task/check_io: (self io body argument)
$std_types::io_task/performed_io:
$std_types::io_task/recheck_io: (self body argument)
$std_types::io_task/complete_io: (self body argument)
$std_types::io_task/checked_io: (self argument)
$std_types::io_task/log: (self argument*)
$std_types::io_task/send: (self receiver message)
$std_types::io_task/receive: (self)
$std_types::io_task/cancel:
$std_types::io_task/on_exit:
$std_types::io_task/on_error: (self handler)
$std_types::io_task/on_cancel: (self handler)
$std_types::io_task/load: (self my_filename continuation)
$std_types::io_task/save: (self my_filename my_data continuation)
$std_types::io_task/read:
$std_types::io_task/write: (self my_fd my_text continuation)
$std_types::io_task/join_process: (self my_pid continuation)
$std_types::io_task/catch_signal: (self continuation)
$std_types::io_task/fork:
$std_types::io_task/exit:
$std::io_task_manager:

#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or print to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
  Topic: Input-Output Task Manager

  **ATTENTION**: This module might be deprecated!

  Related topics: Input-Output, Input-Output Events

###

# Phases

  Phase 1 (parallel execution possible)

    * update the list of children (due to tasks removed in Phase 6)

    * all (ready) tasks do their computations

  Phase 2 (sequential execution guaranteed)

    * all sent messages are collected (into a "global" table)

    * all cancel requests are collected (into a "global" table)

    * all log-messages are collected

    * fork new tasks (they are not yet added)

  Phase 3 (parallel execution possible)

    * store the received messages in the task object

    * mark task if it was cancelled

  Phase 4 (sequential execution guaranteed, I/O access rights granted)

    * queue the collected log-messages for writing

    * each non-cancelled task may start an I/O operation

    * each cancelled task cancels pending I/O operations

  Phase 5 (parallel execution of checks possible)

    * if all tasks have been removed and all log-messages have been written
      then exit the program

    * if at least one task is ready then get & check I/O events without waiting

    * if no task is ready then get & check I/O events with unlimited timeout

  Phase 6 (sequential execution guaranteed, I/O access rights granted)

    * complete I/O requests

    * add new tasks

    * tasks that wish to exit are removed

    * cancelled tasks without a cancel-handler are removed, too

###

# Remarks

  Errors returned from <close()> are always ignored:

    When the open was successful and all reads and/or writes were succesful -
    how should close fail? What should/could be done?

$std::log_level 1
  #
    the used log-level

    0: no logging
    1: just print the log messages
    2: prefix the log messages with the task no.
    3: add iteration separator lines to the log output
    4: log the creation and deletion of tasks

###

# for tasks in phase 1 (compute)

# the following functions end the compute phase

$std::perform_io () # self body arguments continuation
  # start an I/O-operation

$std::pause () # self continuation
  # pause a computation to give other tasks the opportunity for I/O

$std::wait_for_message () # self continuation
  # waits until at least one message is ready to be received

# the following functions can be called within the compute phase

$std::fork () # &self task start_function

#$std::log () # &self text
  #
    the arguments are converted into a single string;
    a newline character is added if not already supplied by the caller

$std::send () # &self destination message
  # send a message to one or more tasks

#$std::cancel () # &self task_ids
  # cancels the specified tasks

$std::receive () # &self !message

$std::on_error () # &self handler

$std::on_cancel () # &self handler

###

# for tasks in phase 4 (start I/O)

$std::check_io () # self io body arguments
  # an I/O-operation has been initiated; its result must be checked

$std::on_exit () # &self handler arguments

###

# for tasks in phase 4 & 6 (start & complete I/O)

$std::performed_io () # self io arguments
  # the I/O-operation has been completed

###

#  for tasks in phase 5 (check I/O)

$std::recheck_io () # self body arguments
  # the check must be repeated

$std::complete_io () # self body arguments
  # the check must be completed in the "handle I/O"-state

$std::checked_io () # self arguments
  # the I/O-operation has been completed

###

# I/O actions

# the following actions call <perform_io>

#
  load
  save
  read
  write
  join_process
  catch_signal

$std::catch_signal ()

###

# public task methods

$std::task_id_of ()

$std::parent_of ()

$std::children_of ()

###

# private task fields

$log_messages_of ()

$exit_handlers_of ()

$error_handler_of ()

$cancel_handler_of ()

$id_of ()

$parent_id_of ()

$child_ids_of ()

$inbound_messages_of ()

$outbound_messages_of ()

$fork_requests_of ()

$cancel_requests_of ()

$is_cancelled ()

###

# REQUESTS

  A request is a tuple consisting of

  * the task object
  * the current mode
  * an I/O-function
  * the request-argument (maybe a tuple)
  * the continuation function

###

# Modes

$COMPUTE .

$WAIT .

$START_IO .

$CHECK_IO .

$COMPLETE_IO .

$EXIT .

$std::additional_error_information_of ()

$std_types::error.additional_error_information_of undefined

$std::generate_error_message ()

$std_types::error/generate_error_message: (self)
  $message error_message_text_of(self)
  $errno errno_of(self)
  update_if errno.is_defined &message:
    append &message " - "
    append message strerror(errno)
  $failed_attribute failed_attribute_of(self)
  update_if failed_attribute.is_defined &message:
    append &message " - "
    append message failed_attribute
  $additional_information additional_error_information_of(self)
  update_if additional_information.is_defined message:
    append &message " ("
    append &message additional_information
    push message ')'

$std_types::io_task std_types::object

$std_types::io_task.log_messages_of empty_list

$std_types::io_task.exit_handlers_of empty_list

$std_types::io_task.error_handler_of undefined

$std_types::io_task.cancel_handler_of undefined

$std_types::io_task.parent_id_of 0

$std_types::io_task.child_ids_of empty_list

$std_types::io_task.inbound_messages_of empty_list

$std_types::io_task.outbound_messages_of empty_list

$std_types::io_task.fork_requests_of empty_list

$std_types::io_task.cancel_requests_of empty_list

$std_types::io_task.is_cancelled false

$std_types::io_task/task_id_of: (self) -> id_of(self)

$std_types::io_task/parent_of: (self)
  $id parent_id_of(self)
  if
    id != 0
    -> id
    -> undefined

$std_types::io_task/children_of: (self) -> child_ids_of(self)

$std_types::io_task/perform_io:
  (
    self
    body
    argument = undefined
    continuation
  )
  tuple self START_IO body argument continuation

$std_types::io_task/pause: (self continuation)
  tuple self COMPUTE undefined undefined continuation

$std_types::io_task/wait_for_message: (self continuation)
  if
    inbound_messages_of(self).is_empty
    -> tuple(self WAIT undefined undefined continuation)
    -> tuple(self COMPUTE undefined undefined continuation)

$std_types::io_task/check_io: (self io body argument)
  -> CHECK_IO self io body argument

$std_types::io_task/performed_io:
  (
    self
    io
    argument = undefined
  )
  -> COMPUTE self io undefined argument

$std_types::io_task/recheck_io: (self body argument)
  -> CHECK_IO self body argument

$std_types::io_task/complete_io: (self body argument)
  -> COMPLETE_IO self body argument

$std_types::io_task/checked_io: (self argument)
  -> COMPUTE self undefined argument

$std_types::io_task/log: (self argument*)
  $str create_string(argument)
  !str
    if
      str .has_suffix. '@nl;'
      -> str
      -> push(str '@nl;')
  push &self.log_messages_of str
  -> self

$std_types::io_task/send: (self receiver message)
  if
    receiver.is_a_list && receiver.is_empty
    -> self
    :
      push &self.outbound_messages_of tuple(receiver message)
      -> self

$std_types::io_task/receive: (self)
  if
    inbound_messages_of(self).is_empty
    -> self undefined
    :
      get &self.inbound_messages_of $message
      -> self message

$std_types::io_task/cancel:
  (
    self
    task_id
  )
  if
    task_id.is_an_integer:
      push &self.cancel_requests_of task_id
      -> self
    :
      append &self.cancel_requests_of task_id.to_list
      -> self

$std_types::io_task/on_exit:
  (
    self
    handler
    argument = undefined
  )
  put &self.exit_handlers_of tuple(handler argument)
  -> self

$std_types::io_task/on_error: (self handler)
  !self.error_handler_of handler
  -> self

$std_types::io_task/on_cancel: (self handler)
  !self.cancel_handler_of handler
  -> self

###

$std_types::io_task/load: (self my_filename continuation)
  perform_io self load_request my_filename continuation

  $load_request: (task io filename)
    if
      task.is_cancelled: # we must not start an I/O operation!
        performed_io task io "" # we didn't read a single byte ...
      :
        open! $fd filename "r"
        if
          fd.is_an_error:
            !fd.additional_error_information_of "
              load "@(filename)"@
            performed_io task io fd
          :
            start_reading_from &io fd
            check_io task io check_load_request tuple(fd "")

  $check_load_request: (task events argument)
    argument $fd $buf
    if
      task.is_cancelled: # we are called as a start-I/O-handler!
        $io events
        stop_reading_from &io fd
        try $_ignore_error: close! fd
        performed_io task io buf # return the partial read data
      :
        for_each events
          : (event)
            event $type $efd $data
            case type
              READ:
                if
                  efd == fd:
                    if
                      data == "":
                        complete_io task complete_load_request argument
                      :
                        recheck_io
                          task check_load_request tuple(fd append(buf data))
                  next
              READ_FAILED:
                if
                  efd == fd:
                    complete_io task try_close_file tuple(fd data)
                  next
              next
          :
            recheck_io task check_load_request argument

  $complete_load_request: (task io argument)
    argument $fd $buf
    stop_reading_from &io fd
    try $_ignore_error: close! fd
    performed_io task io buf

  $try_close_file: (task io argument)
    argument $fd $READ_FAILED
    stop_reading_from &io fd
    try $_ignore_error: close! fd
    performed_io task io READ_FAILED # return the error returned from <read>

$std_types::io_task/save: (self my_filename my_data continuation)
  perform_io self save_request tuple(my_filename my_data) continuation

  $save_request: (task io argument)
    argument $filename $data
    if
      task.is_cancelled: # we must not start an I/O operation!
        performed_io task io data # we didn't write a single byte ...
      :
        open! $fd filename "w"
        if
          fd.is_an_error:
            !fd.additional_error_information_of "
              save "@(filename)"@
            performed_io task io fd
          :
            write &io fd data
            check_io task io check_save_request fd

  $check_save_request: (task events fd)
    if
      task.is_cancelled: # we are called as a start-I/O-handler!
        $io events
        cancel_write &io $unwritten_text fd
        try $_ignore_error: close! fd
        performed_io task io unwritten_text # return the not yet written text
      :
        for_each events
          : (event)
            event $type $efd $data
            case type
              WRITE_COMPLETED:
                if
                  efd == fd:
                    complete_io task complete_save_request fd
                  next
              WRITE_FAILED:
                if
                  efd == fd:
                    complete_io task try_close_file tuple(fd data)
                  next
              next
          :
            recheck_io task check_save_request fd

  $complete_save_request: (task io fd)
    try $_ignore_error: close! fd
    performed_io task io undefined

  $try_close_file: (task io argument)
    argument $fd $WRITE_FAILED
    try $_ignore_error: close! fd
    performed_io task io WRITE_FAILED # return the error returned from <write>

$std_types::io_task/read:
  #
    reads at least the specified number of octets
  (
    self
    my_fd
    my_length
    continuation
  )
  perform_io self start_read_request tuple(my_fd my_length) continuation

  $start_read_request: (task io argument)
    if
      task.is_cancelled: # we must not start an I/O operation!
        performed_io task io "" # we didn't read a single byte ...
      :
        argument $fd $length
        start_reading_from &io fd
        check_io task io check_read_request tuple(fd length "")

  $check_read_request: (task events argument)
    argument $fd $length $buf
    if
      task.is_cancelled: # we are called as a start-I/O-handler!
        $io events
        stop_reading_from &io fd
        performed_io task io buf # return the partial read data
      :
        for_each events
          : (event)
            event $type $efd $data
            if_not
              type == READ && efd == fd next:
                if
                  data == "":
                    complete_io task complete_read_request tuple(fd buf)
                  :
                    append &buf data
                    if
                      length_of(buf) >= length:
                        complete_io task complete_read_request tuple(fd buf)
                      :
                        recheck_io task check_read_request tuple(fd length buf)
          :
            recheck_io task check_read_request argument

  $complete_read_request: (task io argument)
    argument $fd $buf
    stop_reading_from &io fd
    performed_io task io buf

$std_types::io_task/write: (self my_fd my_text continuation)
  perform_io self write_request tuple(my_fd my_text) continuation

  $write_request: (task io argument)
    argument $fd $text
    if
      task.is_cancelled: # we must not start an I/O operation!
        performed_io task io text # we didn't write a single byte ...
      :
        write &io fd text
        check_io task io check_write_request fd

  $check_write_request: (task events fd)
    if
      task.is_cancelled: # we are called as a start-I/O-handler!
        $io events
        cancel_write &io $unwritten_text fd
        performed_io task io unwritten_text # return the not yet written text
      :
        for_each events
          : (event)
            event $type $efd $_data
            if
              type == WRITE_COMPLETED && efd == fd:
                checked_io task undefined
              next
          :
            recheck_io task check_write_request fd

$std_types::io_task/join_process: (self my_pid continuation)
  perform_io self join_process_request my_pid continuation

  $join_process_request: (task io pid)
    join_process &io pid
    check_io task io join_process_request_pending pid

  $join_process_request_pending: (task events pid)
    for_each events
      : (event)
        event $type $epid $status
        if
          type == PROCESS_JOINED && epid == pid:
            checked_io task status
          next
      :
        recheck_io task join_process_request_pending pid

[source]

$std_types::io_task/send: (self receiver message)
  if
    receiver.is_a_list && receiver.is_empty
    -> self
    :
      push &self.outbound_messages_of tuple(receiver message)
      -> self

$std::send () # &self destination message
  # send a message to one or more tasks

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Do not create completely new examples on your own

### Use only one of the following topics: Input-Output Task Manager

# std::send (a polymorphic function)

