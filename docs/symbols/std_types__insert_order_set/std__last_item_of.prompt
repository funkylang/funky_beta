[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std_types::undefined.is_defined false # obvious

[documentation remark]

# std::undefined.is_defined (an attribute)

  always returns false

  Parameter:
    self: an instance of <std_types::undefined>

  Result:
    success: false

  Topic: Objects

  See also: std_types::undefined, std_types::object

[source]

$std_types::rectangle.x_of 0

[documentation remark]

# std_types::rectangle.std::x_of (an attribute)

  the x-coordinate of the rectangle

  Parameters:
    self: the rectangle

  Result:
    x: the x-coordinate of the rectangle

  Topic: Graphic Primitives

  See also: std_types::rectangle/std::y_of,
            std_types::rectangle/std::width_of,
            std_types::rectangle/std::height_of

[source]

$std::clear_colour_of ()

[documentation remark]

# std::clear_colour_of (an attribute)

  returns the clear colour of the specified object

  Parameters:
    self: the object

  Result:
    colour: the clear colour of the object

  Topic: Terminal

  See also: std::draw_colour_of, std::set_clear_colour, std::clear

[EXERCISE]

[symbols]


# Topics: Sets, Collections

$std::is_an_insert_order_set () # obvious
$std_types::object.is_an_insert_order_set false # obvious
$std_types::insert_order_set.is_an_insert_order_set true # obvious
$std_types::insert_order_set std_types::set
$std::empty_insert_order_set std_types::insert_order_set
$std_types::insert_order_set.items_of empty_hash_table
$std_types::insert_order_set.first_item_of undefined
$std_types::insert_order_set.last_item_of undefined
$std_types::insert_order_set/:
$std_types::insert_order_set/length_of: (self)
$std_types::insert_order_set/to_list:
$std_types::insert_order_set/for_each:

# map_reduce

$std_types::insert_order_set/map_reduce:

# constructor

$std::insert_order_set:

# serialization

$std_types::insert_order_set.serialization_tag_of "insert_order_set"
$std_types::insert_order_set.empty_collection_of empty_insert_order_set

#
  Copyright (C) 2023 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Topics: Sets, Collections

$std::is_an_insert_order_set () # obvious

$std_types::object.is_an_insert_order_set false # obvious

$std_types::insert_order_set.is_an_insert_order_set true # obvious

$NONE .

$items_of () # a hash tree of tuples <previous_key next_key>

$std_types::insert_order_set std_types::set
  #
    the prototype object for all insert-order sets

$std::empty_insert_order_set std_types::insert_order_set
  #
    an empty insert-order set

$std_types::insert_order_set.items_of empty_hash_table

$std_types::insert_order_set.first_item_of undefined

$std_types::insert_order_set.last_item_of undefined

$std_types::insert_order_set/:
  #
    retrieve or add an item
  (
    myself^
    key
    value = NONE
  )
  $items items_of(myself)
  $item items(key)
  if
    NONE == value
    -> item.is_defined
    :
      if
        value:
          if
            item.is_defined # already set
            -> myself
            : # add a new entry
              $last_key last_item_of(myself)
              !items(key) tuple(last_key undefined)
              if
                last_key.is_defined:
                  !items(last_key) tuple(first(items(last_key)) key)
                  ->
                    myself
                      .items_of items
                      .last_item_of key
                ->
                  myself
                    .items_of items
                    .first_item_of key
                    .last_item_of key
        : # remove entry
          if
            item.is_undefined # not set
            -> myself
            :
              item $previous_key $next_key
              $first_key first_item_of(myself)
              $last_key last_item_of(myself)
              !items(key) undefined
              if
                previous_key.is_defined:
                  !items(previous_key)
                    tuple(first(items(previous_key)) next_key)
                  check_next_key
                :
                  !first_key next_key
                  check_next_key

              $check_next_key:
                if
                  next_key.is_defined:
                    !items(next_key)
                      tuple(previous_key second(items(next_key)))
                    return
                  :
                    !last_key previous_key
                    return

              $return
                ->
                  myself
                    .items_of items
                    .first_item_of first_key
                    .last_item_of last_key

$std_types::insert_order_set/length_of: (self)
  -> length_of(items_of(self))

$std_types::insert_order_set/to_list:
  #
    converts the insert-order-set into a list
  (
    self
  )
  $items items_of(self)
  $keys empty_list
  add_keys first_item_of(self)

  $add_keys: (key)
    if
      key.is_undefined
      -> keys
      :
        push &keys key
        add_keys second(items(key))

$std_types::insert_order_set/for_each:
  #
    invokes the specified callback for each item of the set
  (
    self # the hash set to iterate over
    body # the statement sequence to execute for each item
    finally = next # called after all items have been iterated over
  )
  for_each! self.to_list body finally

###

# map_reduce

$std_types::insert_order_set/map_reduce:
  #
    combines a map and a reduce operation into a single operation

    Does not create an intermediate table to hold the "mapped" values.

    Topic: Sets

    See also: map, reduce
  (
    self # the set to work on
    map_function # the function to apply to each element of the set
    reduce_function = append # the function to apply to each member of the set
    unit = undefined # the value to return for empty sets
  )
  map_reduce self.to_list map_function reduce_function unit

###

# constructor

$std::insert_order_set:
  (
    keys*
  )
  $set empty_insert_order_set
  for_each keys
    : (key)
      !set(key) true
      next
    -> set

###

# serialization

$std_types::insert_order_set.serialization_tag_of "insert_order_set"

$std_types::insert_order_set.empty_collection_of empty_insert_order_set

[source]

$std_types::insert_order_set.last_item_of undefined

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Sets, Collections

# std_types::insert_order_set.std::last_item_of (an attribute)

