[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[symbols]

$std::CURSOR_LEFT .
$std::CURSOR_RIGHT .
$std::CURSOR_UP .
$std::CURSOR_DOWN .
$std::CURSOR_HOME .
$std::CURSOR_END .

$std::DRAW_COLOUR .

$std::BLACK '@0x000000;'
$std::WHITE '@0xffffff;'
$std::RED '@0xff0000;'
$std::GREEN '@0x00ff00;'
$std::BLUE '@0x0000ff;'
$std::CYAN '@0x00ffff;'
$std::MAGENTA '@0xff00ff;'
$std::YELLOW '@0xffff00;'

$std::set_draw_colour ()
$std::set_clear_colour ()

$std_types::screen/create_screen:
  (
    screen
    width = undefined
    height = undefined
    options*
  )
  update_if width.is_undefined &width -> width_of(screen)
  update_if height.is_undefined &height -> height_of(screen)
  extract_options options
    DRAW_COLOUR = draw_colour_of(screen) $draw_colour
    CLEAR_COLOUR = clear_colour_of(screen) $clear_colour
    LINE_HEIGHT = line_height_of(screen) $line_height
  $row dup(string(' ' draw_colour clear_colour) width)
  $rows dup(list(row) height .div. line_height)
  ->
    std_types::screen
      .width_of width
      .height_of height
      .draw_colour_of draw_colour
      .clear_colour_of clear_colour
      .line_height_of line_height
      .rows_of rows

[source]

$std::RED '0xff0000;'

[documentation remark]

# std::RED (a literal)

  the colour red as used by the terminal library

  Topic: Colours

  Colour literals are used to set the draw or clear colour.

  See also: std::BLACK, std::WHITE, std::GREEN, std::BLUE, std::CYAN,
            std::MAGENTA, std::YELLOW, std::GREY, std::set_draw_colour,
            std::set_clear_colour

[source]

$std::CURSOR_LEFT .
  #
    Example:

      $x ...
      get_key! $key
      case key
        CURSOR_LEFT:
          dec &x
          next!
        ...

[documentation remark]

# std::CURSOR_LEFT (a unique item)

  used to identify the cursor left key

  Topic: Terminal

  See also: std::CURSOR_RIGHT, std::CURSOR_UP, std::CURSOR_DOWN,
            std::CURSOR_HOME, std::CURSOR_END

  Example:

    $x ...
    get_key! $key
    case key
      CURSOR_LEFT:
        dec &x
        next!
      ...

[source]

$std:DRAW_COLOUR .

[documentation remark]

# std::DRAW_COLOUR (a unique item)

  used to specifiy a draw colour

  Topic: Terminal

  See also: std_types::create/screen

[EXERCISE]

#
  Topic: Input-Output Events

  Events are the Funky way to handle multiple input/output streams in a
  parallel way.

  The event system is based on the concept of an event "loop". The event "loop"
  is part of the application program.

  Before entering the event loop, the application program must create an
  input-output object and register all input-output streams that should be
  handled by the event loop.

  To create an input-output object, simply clone the object <std_types::io>.

  The event loop then waits for an event to occur (using <std::get_events>.
  When one or more events occurs, the event loop processes them and then
  continues to wait for the next event(s).

  Possible events can be registered or unregistered at any time.

  To register an event call

  <start_reading_from> - for reading from a stream

  <start_catching_signals> - for catching signals like SIGINT

  <start_injecting_window_change_events> - for catching window change events

  To unregister an event call

  <stop_reading_from> - to stop reading from a stream

  <stop_catching_signals> - to stop catching signals

  <stop_injecting_window_change_events> - to stop injecting window change events

  Actual input operations are performed by <get_events>. Write operations are
  initiated by the application program and performed by <get_events>.

  Related topics: Input-Output, Input-Output Task Manager

  Example:

    $io std_types::io # create an input-output object
    start_reading_from &io STDIN_FILENO # register reading from STDIN
    write &io STDOUT_FILENO "Please enter some text:@nl;"
      # write a prompt text to STDOUT
    $input_buffer "" # create an initially empty input buffer

    loop: # the event loop
      get_events! &io $events # get one or more events
      for_each events # handle all received events
        : (event)
          event $type $fd $argument # destructure the event
          case type # check the event type
            READ: # event is a read event
              case fd # check the file descriptor
                STDIN_FILENO: # it was a read event from STDIN
                  append &input_buffer argument
                    # append the received data to the input buffer
                  handle_input !io &input_buffer # call the input handler
                  if
                    io.is_undefined:
                      #
                        the input handler returned undefined to indicate
                        that the input processing is finished
                      terminate! # terminate the program
                    next # otherwise continue processing the events
                next # ignore read events for other file descriptors
            READ_FAILED: # event is a read error
              Error! "Error reading from standard input!"
            WRITE_PENDING: # event is a write pending event
              # ignore
              next! # continue processing the events
            WRITE_COMPLETED: # event is a write completed event
              # ignore
              next! # continue processing the events
            next # ignore all other events
        next # check for more events

    $handle_input: (buffer)
      loop:
        if
          buffer .contains. '@nl;':
            # the input buffer contains at least one complete line
            $line buffer .before. '@nl;' # extract the line
            if
              line == "quit" # the user entered "quit"
              -> undefined undefined
                #
                  return undefined to indicate that the input processing is
                  finished
              : # Output the line
                write &io STDOUT_FILENO "
                  You entered: "@(line)"
                behind &buffer '@nl;'
                  # remove the processed line from the input buffer
                next # continue processing the buffer
          -> io buffer
            # return the (maybe) modified input-output object and buffer

[symbols]


# Event Types

$std::READ .
$std::CLOSED .
$std::READ_FAILED .
$std::CONNECT .
$std::WRITE_PENDING .
$std::WRITE_COMPLETED .
$std::WRITE_FAILED .
$std::PROCESS_JOINED .
$std::SIGNAL .
$std::JOB_COMPLETED .
$std::JOB_FAILED .

# Methods

$std::initialize ()
$std::get_events ()
$std::start_reading_from ()
$std::stop_reading_from ()
$std::cancel_write ()
$std::join_process ()
$std::start_injecting_window_change_events ()
$std::stop_injecting_window_change_events ()
$std::start_catching_signals ()
$std::stop_catching_signals ()
$std::set_timeout ()
$std::enable_logging ()
$std::disable_logging ()
$std::log ()
$std::register_handlers ()
$std::deregister_handlers ()
$std::deregister_all_handlers ()
$std::register_resource ()
$std::run ()
$std::run_at ()
$std::finalize ()

# Attributes

$std::random_seed_of ()
$std::step_no_of ()
$std::current_time_of ()
$std_types::io std_types::object
$std_types::io.current_time_of undefined
$std_types::io.read_jobs_of empty_hash_table
$std_types::io.write_jobs_of empty_hash_table
$std_types::io.close_jobs_of empty_hash_set
$std_types::io.start_jobs_of empty_list
$std_types::io.timed_jobs_of empty_list
$std_types::io.resources_of empty_insert_order_table
$std_types::io.watched_pids_of empty_hash_set
$std_types::io.exit_codes_of empty_hash_table
$std_types::io.do_inject_window_change_events false
$std_types::io.window_change_event_occurred false
$std_types::io.catched_signals_of empty_hash_set
$std_types::io.log_level_of 0
$std_types::io.exit_code_of undefined
$std_types::io.timeout_of undefined
$std_types::io.handlers_of empty_hash_table
$std_types::io.random_seed_of undefined
$std_types::io.step_no_of 0
$std::do_log_of ()
$std_types::resource std_types::object
$std_types::resource.name_of "anonymous resource"
$std_types::io.do_log_of false
$std_types::resource/enable_logging:
$std_types::resource/disable_logging:
$std_types::event tuple(undefined undefined undefined)
$std_types::io/start_reading_from:
$std_types::io/stop_reading_from:
$std_types::io/print_to:
$std_types::io/write:
$std_types::io/cancel_write:
$std_types::io/close:
$std_types::io/join_process:
$std_types::io/start_injecting_window_change_events:
$std_types::io/stop_injecting_window_change_events:
$std_types::io/start_catching_signals:
$std_types::io/stop_catching_signals:
$std_types::io/set_timeout:
$std::initialize_logging:
$std_types::io/enable_logging:
$std_types::io/disable_logging:
$std_types::io/log:
$std_types::io/register_handlers:
$std_types::io/deregister_handlers:
$std_types::io/deregister_all_handlers:
$std_types::io/register_resource:
$std_types::io/run:
$std_types::io/run_at:
$std_types::io/exit:
$std_types::io/is_empty:
$std::log_unhandled_event: (io event)
$std_types::io/initialize:
$std_types::io/get_events:
$std::handle_events: (io events)

# Event Types

$std::READ .

$std::CLOSED .

$std::READ_FAILED .

$std::CONNECT .

$std::WRITE_PENDING .

$std::WRITE_COMPLETED .

$std::WRITE_FAILED .

$std::PROCESS_JOINED .

$std::SIGNAL .

$std::JOB_COMPLETED .

$std::JOB_FAILED .

# Methods

$std::initialize ()

$std::get_events ()

$std::start_reading_from ()

$std::stop_reading_from ()

$std::cancel_write ()

$std::join_process ()
  #
    Example:

      create_process! $pid $in_fd $out_fd $err_fd command arguments
      ...
      join_process &io pid
      ...
      loop:
        get_events! &io $events
          for_each events
            : (event)
              event $type $epid $argument
              case type
                PROCESS_JOINED:
                  if
                    pid == epid:
                      ...

$std::start_injecting_window_change_events ()

$std::stop_injecting_window_change_events ()

$std::start_catching_signals ()

$std::stop_catching_signals ()

$std::set_timeout ()

$std::enable_logging ()

$std::disable_logging ()

$std::log ()

$std::register_handlers ()

$std::deregister_handlers ()

$std::deregister_all_handlers ()

$std::register_resource ()

$std::run ()

$std::run_at ()

$std::finalize ()

# Attributes

$std::random_seed_of ()

$std::step_no_of ()

$std::current_time_of ()

$start_jobs_of ()

$timed_jobs_of ()

$read_jobs_of ()

$write_jobs_of ()

$close_jobs_of ()

$resources_of ()

$watched_pids_of ()

$exit_codes_of ()

$do_inject_window_change_events ()

$catched_signals_of ()

$window_change_event_occurred ()

$log_level_of ()

$exit_code_of ()

$timeout_of () # a <date_and_time> object not a number!

$handlers_of ()

$std_types::io std_types::object

$std_types::io.current_time_of undefined

$std_types::io.read_jobs_of empty_hash_table

$std_types::io.write_jobs_of empty_hash_table

$std_types::io.close_jobs_of empty_hash_set

$std_types::io.start_jobs_of empty_list

$std_types::io.timed_jobs_of empty_list

$std_types::io.resources_of empty_insert_order_table

$std_types::io.watched_pids_of empty_hash_set

$std_types::io.exit_codes_of empty_hash_table

$std_types::io.do_inject_window_change_events false

$std_types::io.window_change_event_occurred false

$std_types::io.catched_signals_of empty_hash_set

$std_types::io.log_level_of 0

$std_types::io.exit_code_of undefined

$std_types::io.timeout_of undefined

$std_types::io.handlers_of empty_hash_table

$std_types::io.random_seed_of undefined

$std_types::io.step_no_of 0

$std::do_log_of ()

$std_types::resource std_types::object

$std_types::resource.name_of "anonymous resource"

$std_types::io.do_log_of false

$std_types::resource/enable_logging:
  (
    self
  )
  -> self(.do_log_of true)

$std_types::resource/disable_logging:
  (
    self
  )
  -> self(.do_log_of false)

$std_types::event tuple(undefined undefined undefined)

$std_types::io/start_reading_from:
  (
    self
    fd
    do_close = true
    max_length = undefined
  )
  !self.read_jobs_of(fd) tuple(do_close max_length)
  -> self

$std_types::io/stop_reading_from:
  (
    self
    fd
  )
  !self.read_jobs_of(fd) undefined
  -> self

$std_types::io/print_to:
  (
    self
    fd
    args*
  )
  write self fd create_string(args).to_utf8

$std_types::io/write:
  (
    self
    fd
    data
  )
  $job write_jobs_of(self)(fd)
  !job
    if
      job.is_defined
      -> append(job data)
      -> data
  !self.write_jobs_of(fd) job
  -> self

$std_types::io/cancel_write:
  (
    self
    fd
  )
  $unwritten_text write_jobs_of(self)(fd)
  !self.write_jobs_of(fd) undefined
  -> self unwritten_text

$std_types::io/close:
  (
    self
    fd
  )
  stop_reading_from &self fd
  !self.close_jobs_of(fd) true
  -> self

$std_types::io/join_process:
  (
    self
    pid
  )
  !self.watched_pids_of(pid) true
  -> self

$std_types::io/start_injecting_window_change_events:
  (
    self
  )
  -> self(.do_inject_window_change_events true)

$std_types::io/stop_injecting_window_change_events:
  (
    self
  )
  -> self(.do_inject_window_change_events false)

$std_types::io/start_catching_signals:
  (
    self
    signals*
  )
  $catched_signals catched_signals_of(self)
  for_each signals
    : (signal)
      !catched_signals(signal) true
      next
    -> self(.catched_signals_of catched_signals)

$std_types::io/stop_catching_signals:
  (
    self
    signals*
  )
  $catched_signals catched_signals_of(self)
  for_each signals
    : (signal)
      !catched_signals(signal) false
      next
    -> self(.catched_signals_of catched_signals)

$std_types::io/set_timeout:
  (
    self
    timeout
  )
  update_if timeout.is_a_number &timeout -> current_time_of(self)+timeout
  $current_timeout timeout_of(self)
  if
    current_timeout.is_undefined || timeout < current_timeout
    -> self(.timeout_of timeout)
    -> self

$std::initialize_logging:
  (
    io
    log_level = 3
    log_filename = undefined
  )
  if
    log_filename.is_defined:
      open! $log_fd log_filename "w+"
      dup2! log_fd STDERR_FILENO
      close! log_fd
      enable_logging io log_level
    :
      fstat! $stdout_info STDOUT_FILENO
      fstat! $stderr_info STDERR_FILENO
      if
        ||
          inode_number_of(stderr_info) != inode_number_of(stdout_info)
          device_of(stderr_info) != device_of(stdout_info)
        :
          enable_logging io log_level
        -> io

$std_types::io/enable_logging:
  (
    self
    level = 1
  )
  -> self(.log_level_of level)

$std_types::io/disable_logging:
  (
    self
  )
  -> self(.log_level_of 0)

$std_types::io/log:
  (
    self
    level = 1
    message
  )
  if
    level <= log_level_of(self):
      update_if_not message.is_a_string &message -> message()
      update_if_not message .has_suffix. '@nl;' &message: push message '@nl;'
      $lines split_into_lines(message)
      $prefix "[@(level)] "
      $buf append(prefix lines(1))
      range &lines 2 -1
      for_each lines
        : (line)
          append &buf spaces(length_of(prefix)) line
          next
        :
          write self STDERR_FILENO buf.to_utf8
    -> self

$std_types::io/register_handlers:
  (
    self
    id
    type_handlers*
  )
  $handlers default_value(handlers_of(self)(id) empty_hash_table)
  for_each type_handlers
    : (type_handler)
      type_handler $type $handler
      !handlers(type) handler
      next
    :
      !self.handlers_of(id) handlers
      -> self

$std_types::io/deregister_handlers:
  (
    self
    id
    types*
  )
  $handlers handlers_of(self)(id)
  if
    handlers.is_undefined
    -> self
    :
      for_each types
        : (type)
          !handlers(type) undefined
          next
        :
          !self.handlers_of(id) handlers
          -> self

$std_types::io/deregister_all_handlers:
  (
    self
    id
  )
  !self.handlers_of(id) empty_hash_table
  -> self

$std_types::io/register_resource:
  (
    self
    key
    resource
  )
  !self.resources_of(key) resource
  -> self

$std_types::io/run:
  (
    self
    command
    arguments*
  )
  push &self.start_jobs_of tuple(command arguments)
  -> self

$std_types::io/run_at:
  (
    self
    time
    command
    arguments*
  )
  update_if time.is_a_number &time -> current_time_of(self)+time
  push &self.timed_jobs_of tuple(command arguments time)
  -> self

$std_types::io/exit:
  (
    self
    exit_code
  )
  ->
    self
      .exit_code_of exit_code
      .read_jobs_of empty_hash_table

$std_types::io/is_empty:
  (
    self
  )
  ->
    &&
      read_jobs_of(self).is_empty
      write_jobs_of(self).is_empty
      close_jobs_of(self).is_empty
      watched_pids_of(self).is_empty

$std::log_unhandled_event: (io event)
  event $type $fd $_argument
  if
    &&
      ||
        type == WRITE_FAILED
        type == WRITE_PENDING
        type == WRITE_COMPLETED
      fd == STDERR_FILENO
    -> io # prevent recursive logging
    :
      $log_level
        case
          type
          WRITE_PENDING,WRITE_COMPLETED -> 4
          -> 2
      log io log_level -> "
        unhandled event @(serialize(type).trim_right) - @(serialize(fd))@

$std_types::io/initialize:
  (
    self
  )
  current_time! $t
  -> self(.current_time_of t)

[source]

$std_types::event tuple(undefined undefined undefined)

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Input-Output Events

# std_types::event (a constant)

