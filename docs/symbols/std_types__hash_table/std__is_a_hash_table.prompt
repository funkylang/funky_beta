[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std_types::undefined.is_defined false # obvious

[documentation remark]

# std::undefined.is_defined (an attribute)

  always returns false

  Parameter:
    self: an instance of <std_types::undefined>

  Result:
    success: false

  Topic: Objects

  See also: std_types::undefined, std_types::object

[source]

$std_types::rectangle.x_of 0

[documentation remark]

# std_types::rectangle.std::x_of (an attribute)

  the x-coordinate of the rectangle

  Parameters:
    self: the rectangle

  Result:
    x: the x-coordinate of the rectangle

  Topic: Graphic Primitives

  See also: std_types::rectangle/std::y_of,
            std_types::rectangle/std::width_of,
            std_types::rectangle/std::height_of

[source]

$std::clear_colour_of ()

[documentation remark]

# std::clear_colour_of (an attribute)

  returns the clear colour of the specified object

  Parameters:
    self: the object

  Result:
    colour: the clear colour of the object

  Topic: Terminal

  See also: std::draw_colour_of, std::set_clear_colour, std::clear

[EXERCISE]

[symbols]


# Topics: Tables, Collections


# internal attributes:


# internal methods:

$std::is_a_hash_table () # obvious
$std_types::object.is_a_hash_table false # obvious
$std_types::hash_table.is_a_hash_table true # obvious
$std_types::object.is_an_empty_entry false
$std::to_hash_table ()
$std_types::hash_table std_types::table
$std::empty_hash_table std_types::hash_table
$std_types::hash_table.contents_of empty_hash_table_entry
$std_types::hash_table.length_of 0
$std_types::hash_table/:

# retrieve


# insert


# delete


# for_each

$std_types::hash_table/for_each:

# map

$std_types::hash_table/map:

# reduce

$std_types::hash_table/reduce:

# map_reduce

$std_types::hash_table/map_reduce:

# filter

$std_types::hash_table/filter:

# Constructor

$std::hash_table:
$std_types::list/to_hash_table:
$std_types::hash_table.serialization_tag_of "hash_table"
$std_types::hash_table.empty_collection_of empty_hash_table

#
  Copyright (C) 2023 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Topics: Tables, Collections

# internal attributes:

$contents_of ()

# internal methods:

$retrieve ()

$insert ()

$delete ()

$std::is_a_hash_table () # obvious

$std_types::object.is_a_hash_table false # obvious

$std_types::hash_table.is_a_hash_table true # obvious

$is_an_empty_entry ()

$std_types::object.is_an_empty_entry false

$empty_hash_table_entry.is_an_empty_entry true

$empty_collision_list_entry.is_an_empty_entry true

$std::to_hash_table ()

$std_types::hash_table std_types::table
  #
    a table for fast random access of items

    All items stored in the table must support the following methods:

    * <hash>

    * <equal>

    Topic: Collections

    See also: std_types::table, std_types::key_order_table,
              std_types::association_list

$std::empty_hash_table std_types::hash_table
  #
    an empty hash table

    Topic: Collections

    See also: std_types::hash_table

$std_types::hash_table.contents_of empty_hash_table_entry

$std_types::hash_table.length_of 0
  #
    returns the number of items in the hash table

$empty_hash_table_entry std_types::object

$hash_table_leaf tuple(undefined undefined undefined)

$empty_collision_list_entry std_types::object

$collision_list_entry tuple(undefined undefined undefined)

$hash_table_node
  list
    empty_hash_table_entry
    empty_hash_table_entry
    empty_hash_table_entry
    empty_hash_table_entry
    empty_hash_table_entry
    empty_hash_table_entry
    empty_hash_table_entry
    empty_hash_table_entry

$NONE .

$std_types::hash_table/:
  # --> std_types::table
  (
    myself^
    key
    value = NONE
  )
  $hash_index hash(key) | 0xc000'0000 # add sentinel hash index (3)
  $contents contents_of(myself)
  if
    NONE == value
    -> retrieve(contents hash_index key)
    :
      if
        value.is_defined:
          insert &contents $success hash_index key value
          if
            success
            ->
              myself
                .contents_of contents
                .length_of length_of(myself)+1
            -> myself(.contents_of contents)
        :
          delete &contents $success hash_index key
          if
            success
            ->
              myself
                .contents_of contents
                .length_of length_of(myself)-1
            -> myself

# retrieve

$empty_hash_table_entry/retrieve: (_self _hash_index _key) -> undefined

$hash_table_leaf/retrieve: (self _hash_index key)
  self $_my_hash_index $my_key $my_value
  if
    key == my_key
    -> my_value
    -> undefined

$empty_collision_list_entry/retrieve: (_self _dummy _key) -> undefined

$collision_list_entry/retrieve: (self _dummy key)
  self $my_key $my_value $my_link
  if
    key == my_key
    -> my_value
    : retrieve my_link undefined key

$hash_table_node/retrieve: (self hash_index key)
  $idx (hash_index & 7)+1
  retrieve self(idx) hash_index >> 3 key

# insert

$empty_hash_table_entry/insert: (_self hash_index key value)
  if
    hash_index == 3
    -> new(collision_list_entry key value empty_collision_list_entry) true
    -> new(hash_table_leaf hash_index key value) true

$hash_table_leaf/insert: (self hash_index key value)
  self $my_hash_index $my_key $my_value
  if
    key == my_key
    -> new(self my_hash_index key value) false
    :
      insert hash_table_node $new_node $_did_insert
        my_hash_index my_key my_value
      insert new_node hash_index key value

$empty_collision_list_entry/insert: (self _dummy key value)
  -> new(collision_list_entry key value self) true

$collision_list_entry/insert: (self _dummy key value)
  delete &self $did_delete undefined key
  -> new(collision_list_entry key value self) not(did_delete)

$hash_table_node/insert: (self hash_index key value)
  $idx (hash_index & 7)+1
  insert &self(idx) $did_insert hash_index >> 3 key value
  -> self did_insert

# delete

#
  After deletion some single-entry branches can remain.

  The biggest problem is to recompute the hash_index of this single entry
  when it is moved up the tree. One possibility would be to remove such an
  entry completely and reinsert it.

  Branches containing no entries are deleted.

$empty_hash_table_entry/delete: (self _hash_index _key) -> self false

$hash_table_leaf/delete: (self _hash_index key)
  self $_my_hash_index $my_key $_my_value
  if
    key == my_key
    -> empty_hash_table_entry true
    -> self false

$empty_collision_list_entry/delete: (self _dummy _key) -> self false

$collision_list_entry/delete: (self _dummy key)
  self $my_key $my_value $my_link
  if
    key == my_key
    :
      -> my_link true
    :
      delete &my_link undefined key $did_delete
      -> new(collision_list_entry my_key my_value my_link) did_delete

$hash_table_node/delete: (self hash_index key)
  $idx (hash_index & 7)+1
  delete &self(idx) $success hash_index >> 3 key
  if
    success
    :
      if
        all_of(self is_an_empty_entry)
        -> empty_hash_table_entry true
        -> self true
    -> self false

# for_each

$for_each_1 ()

$for_each_2 ()

$empty_hash_table_entry/for_each_1: (_self)
  next!

$empty_hash_table_entry/for_each_2: (_self)
  next!

$collision_list_entry/for_each_1: (self)
  $saved_context
    tuple
      next
      break
      basic_loops::self

  !basic_loops::self self

  !break: (myself^)
    basic_loops::saved_context_of(myself)
      !next !break
      !basic_loops::self
    break!

  !break.basic_loops::saved_context_of saved_context

  !next:
    if
      basic_loops::self.is_an_empty_entry:
        basic_loops::saved_context_of(break)
          !next !break
          !basic_loops::self
        next!
      :
        basic_loops::self $_key $value $link
        !basic_loops::self link
        basic_loops::body! value

  next!

$collision_list_entry/for_each_2: (self)
  $saved_context
    tuple
      next
      break
      basic_loops::self

  !basic_loops::self self

  !break: (myself^)
    basic_loops::saved_context_of(myself)
      !next !break
      !basic_loops::self
    break!

  !break.basic_loops::saved_context_of saved_context

  !next:
    if
      basic_loops::self.is_an_empty_entry:
        basic_loops::saved_context_of(break)
          !next !break
          !basic_loops::self
        next!
      :
        basic_loops::self $key $value $link
        !basic_loops::self link
        basic_loops::body! key value

  next!

$hash_table_leaf/for_each_1: (self)
  self $_hash $_key $value
  basic_loops::body! value

$hash_table_leaf/for_each_2: (self)
  self $_hash $key $value
  basic_loops::body! key value

$hash_table_node/for_each_1: (self)
  $saved_context
    tuple
      next
      break
      basic_loops::from
      basic_loops::self

  !basic_loops::from 1
  !basic_loops::self self

  !break: (myself^)
    basic_loops::saved_context_of(myself)
      !next !break
      !basic_loops::from !basic_loops::self
    break!

  !break.basic_loops::saved_context_of saved_context

  !next:
    $idx basic_loops::from
    if
      idx <= 8:
        !basic_loops::from idx+1
        for_each_1! basic_loops::self(idx)
      :
        basic_loops::saved_context_of(break)
          !next !break
          !basic_loops::from !basic_loops::self
        next!

  next!

$hash_table_node/for_each_2: (self)
  $saved_context
    tuple
      next
      break
      basic_loops::from
      basic_loops::self

  !basic_loops::from 1
  !basic_loops::self self

  !break: (myself^)
    basic_loops::saved_context_of(myself)
      !next !break
      !basic_loops::from !basic_loops::self
    break!

  !break.basic_loops::saved_context_of saved_context

  !next:
    $idx basic_loops::from
    if
      idx <= 8:
        !basic_loops::from idx+1
        for_each_2! basic_loops::self(idx)
      :
        basic_loops::saved_context_of(break)
          !next !break
          !basic_loops::from !basic_loops::self
        next!

  next!

$std_types::hash_table/for_each:
  (
    self # the hash table to iterate over
    body # the statement sequence to execute for each item
    finally = next # called after all items have been iterated over
  )
  $saved_context
    tuple
      next
      break
      basic_loops::body
      basic_loops::finally

  !basic_loops::body body
  !basic_loops::finally finally

  !break: (myself^)
    !finally basic_loops::finally
    basic_loops::saved_context_of(myself)
      !next !break
      !basic_loops::body !basic_loops::finally
    finally!

  !break.basic_loops::saved_context_of saved_context
  !next break

  if
    parameter_count_of(body) == 2:
      for_each_2! contents_of(self)
    :
      for_each_1! contents_of(self)

# map

$map_1 ()

$map_2 ()

$mapping_function undefined

$empty_hash_table_entry/map_1: (self) -> self

$empty_hash_table_entry/map_2: (self) -> self

$hash_table_leaf/map_1: (self)
  self $my_hash_index $my_key $my_value
  new self my_hash_index my_key mapping_function(my_value)

$hash_table_leaf/map_2: (self)
  self $my_hash_index $my_key $my_value
  new self my_hash_index my_key mapping_function(my_key my_value)

$empty_collision_list_entry/map_1: (self) -> self

$empty_collision_list_entry/map_2: (self) -> self

$collision_list_entry/map_1: (self)
  self $my_key $my_value $my_link
  new self my_key mapping_function(my_value) map_1(my_link)

$collision_list_entry/map_2: (self)
  self $my_key $my_value $my_link
  new self my_key mapping_function(my_key my_value) map_2(my_link)

$hash_table_node/map_1: (self)
  new self map(self map_1)

$hash_table_node/map_2: (self)
  new self map(self map_2)

$std_types::hash_table/map:
  #
    applies a function to all values of the hash table

    A hash table containing the "mapped" items is returned.

    See also: reduce, map_reduce
  (
    self # the table which values will be mapped
    function # the function to apply to each element of the table
  )
  !mapping_function function
  if
    parameter_count_of(function) == 2:
      map_2 &self.contents_of
      -> self
    :
      map_1 &self.contents_of
      -> self

# reduce

$UNIT .

$reduce_1 ()

$reduction_function undefined

$empty_hash_table_entry/reduce_1: (_self) -> UNIT

$hash_table_leaf/reduce_1: (self)
  self $_my_hash_index $_my_key $my_value
  -> my_value

$empty_collision_list_entry/reduce_1: (_self) -> UNIT

$collision_list_entry/reduce_1: (self)
  self $my_key $my_value $my_link
  my_reduce
    mapping_function(my_key my_value)
    reduce_1(my_link)

$hash_table_node/reduce_1: (self)
  $r12 my_reduce(reduce_1(self(1)) reduce_1(self(2)))
  $r34 my_reduce(reduce_1(self(3)) reduce_1(self(4)))
  $r56 my_reduce(reduce_1(self(5)) reduce_1(self(6)))
  $r78 my_reduce(reduce_1(self(7)) reduce_1(self(8)))
  $r1234 my_reduce(r12 r34)
  $r5678 my_reduce(r56 r78)
  -> my_reduce(r1234 r5678)

$my_reduce: (left right)
  if
    UNIT == left
    -> right
    :
      if
        UNIT == right
        -> left
        -> reduction_function(left right)

$std_types::hash_table/reduce:
  #
    computes a kind of sum from the values stored in the table

    There is no guarantee in which order the values will be reduced (folded).

    So the reduction function must obey to the law of assosiativity!

    Topic: Tables

    See also: map, map_reduce
  (
    self # the table to work on
    function # the function to apply to pairs of values
    unit = undefined # the value to return for empty tables
  )
  if
    length_of(self) == 0
    -> unit
    :
      !reduction_function function
      reduce_1 contents_of(self)

# map_reduce

$map_reduce_1 ()

$map_reduce_2 ()

$empty_hash_table_entry/map_reduce_1: (_self) -> UNIT

$empty_hash_table_entry/map_reduce_2: (_self) -> UNIT

$hash_table_leaf/map_reduce_1: (self)
  self $_my_hash_index $_my_key $my_value
  -> mapping_function(my_value)

$hash_table_leaf/map_reduce_2: (self)
  self $_my_hash_index $my_key $my_value
  -> mapping_function(my_key my_value)

$empty_collision_list_entry/map_reduce_1: (_self) -> UNIT

$empty_collision_list_entry/map_reduce_2: (_self) -> UNIT

$collision_list_entry/map_reduce_1: (self)
  self $my_key $my_value $my_link
  my_reduce
    mapping_function(my_key my_value)
    map_reduce_1(my_link)

$collision_list_entry/map_reduce_2: (self)
  self $my_key $my_value $my_link
  my_reduce
    mapping_function(my_key my_value)
    map_reduce_2(my_link)

$hash_table_node/map_reduce_1: (self)
  $r12 my_reduce(map_reduce_1(self(1)) map_reduce_1(self(2)))
  $r34 my_reduce(map_reduce_1(self(3)) map_reduce_1(self(4)))
  $r56 my_reduce(map_reduce_1(self(5)) map_reduce_1(self(6)))
  $r78 my_reduce(map_reduce_1(self(7)) map_reduce_1(self(8)))
  $r1234 my_reduce(r12 r34)
  $r5678 my_reduce(r56 r78)
  -> my_reduce(r1234 r5678)

$hash_table_node/map_reduce_2: (self)
  $r12 my_reduce(map_reduce_2(self(1)) map_reduce_2(self(2)))
  $r34 my_reduce(map_reduce_2(self(3)) map_reduce_2(self(4)))
  $r56 my_reduce(map_reduce_2(self(5)) map_reduce_2(self(6)))
  $r78 my_reduce(map_reduce_2(self(7)) map_reduce_2(self(8)))
  $r1234 my_reduce(r12 r34)
  $r5678 my_reduce(r56 r78)
  -> my_reduce(r1234 r5678)

$std_types::hash_table/map_reduce:
  #
    combines a map and a reduce operation into a single operation

    Does not create an intermediate table to hold the "mapped" values.

    Topic: Tables

    See also: map, reduce
  (
    self # the table to work on
    map_function # the function to apply to each element of the table
    reduce_function = append # the function to apply to pairs of values
    unit = undefined # the value to return for empty tables
  )
  if
    length_of(self) == 0
    -> unit
    :
      !mapping_function map_function
      !reduction_function reduce_function
      if
        parameter_count_of(map_function) == 2:
          map_reduce_2 contents_of(self)
        :
          map_reduce_1 contents_of(self)

# filter

$filter_function undefined

$filter_1 ()

$filter_2 ()

$empty_hash_table_entry/filter_1: (_self) -> empty_hash_table_entry 0

$empty_hash_table_entry/filter_2: (_self) -> empty_hash_table_entry 0

[source]

$std_types::hash_table.is_a_hash_table true # obvious

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Tables, Collections

# std_types::hash_table.std::is_a_hash_table (an attribute)

