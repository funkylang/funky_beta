[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std_types::screen/std::clear:
  (
    self
    x = 1
    y = 1
    width = undefined
    height = undefined
  )
  update_if width.is_undefined &width -> width_of(self)-x+1
  update_if height.is_undefined &height -> height_of(self)-y+1
  std_private::clear self self x y width height

[documentation remark]

# std_types::screen/clear (a method)

  clears the specified rectangular area

  Parameters:
    self: the screen to be (partially) cleared
    x: x-coordinate of the upper left corner
    y: y-coordinate of the upper left corner
    width: width of the area
    height: height of the area

  Result:
    screen: the updated screen

  The specified area is filled with spaces using the the current draw-
  and clear colour.

  The area is clipped at the screen's borders.

  This function also works for "graphical screens" (line_height != 1).

  Topic: Terminal

  See also: std_types::screen/std::set_clear_colour,
            std_types::screen/std::copy

[source]

$std_types::string/match:
  (
    self
    stream
  )
  $rc result_count()
  $len length_of(self)
  if
    length_of(stream) >= len:
      if
        range(stream 1 len) == self:
          if
            rc == 1
            -> len
            -> len undefined
        fail
    fail

  $fail:
    if
      rc == 1
      -> undefined
      -> undefined undefined

[documentation remark]

# std_types::string/std::match (a method)

  matches the start of the stream with the string

  Parameters:
    self: the string to match
    stream: the stream to match against

  Results:
    length: the number of matched characters (or <undefined> on fail)
    capture: the matched string (if requested)

  Attempts to match the start of the stream with the specified string.

  If the match is successful the length of the match (= the length of the
  string) is returned.

  If the caller requested two result values then in addition to the string
  length the string itself ("the capture") is also returned.

  If the match fails then one or two <std::undefined>-values are returned.

  Topic: Strings

  See also: std_types::string/std::match_back, std_types::string/std::search

[source]

$std_types::generic_list/map_or_error:
  (
    self
    function
  )
  if
    self.is_empty
    -> self
    :
      $map
        if
          parameter_count_of(function) == 2
          ->
            : (s e)
              if
                s < e:
                  $m (s+e) >> 1
                  append_or_error
                    map(s m)
                    map(m+1 e)
                :
                  $mapped_item function(s self(s))
                  if
                    mapped_item.is_an_error
                    -> mapped_item
                    -> list(mapped_item)
          ->
            : (s e)
              if
                s < e:
                  $m (s+e) >> 1
                  append_or_error
                    map(s m)
                    map(m+1 e)
                :
                  $mapped_item function(self(s))
                  if
                    mapped_item.is_an_error
                    -> mapped_item
                    -> list(mapped_item)

      map 1 length_of(self)

[documentation remark]

# std_types::generic_list/std::map_or_error (a method)

  applies a function to all elements of the list

  Parameters:

    self: the list which items will be mapped
    function: the function to apply to each element of the list

  Result:
    list: the list of "mapped" items

  A list of the "mapped" items is returned.

  If any item ist mapped to an error object than the result ist not a
  collection but the first (left-to-right-order) error object created.

  Topic: Lists

  See also: std_types::generic_list/std::reduce,
            std_types::generic_list/std::map_reduce

[EXERCISE]

[symbols]


# Topics: Tables, Collections


# internal attributes:


# internal methods:

$std::is_a_hash_table () # obvious
$std_types::object.is_a_hash_table false # obvious
$std_types::hash_table.is_a_hash_table true # obvious
$std_types::object.is_an_empty_entry false
$std::to_hash_table ()
$std_types::hash_table std_types::table
$std::empty_hash_table std_types::hash_table
$std_types::hash_table.contents_of empty_hash_table_entry
$std_types::hash_table.length_of 0
$std_types::hash_table/:

# retrieve


# insert


# delete


# for_each

$std_types::hash_table/for_each:

# map

$std_types::hash_table/map:

# reduce

$std_types::hash_table/reduce:

# map_reduce

$std_types::hash_table/map_reduce:

# filter

$std_types::hash_table/filter:

# Constructor

$std::hash_table:
$std_types::list/to_hash_table:
$std_types::hash_table.serialization_tag_of "hash_table"
$std_types::hash_table.empty_collection_of empty_hash_table

$hash_table_leaf/for_each_1: (self)
  self $_hash $_key $value
  basic_loops::body! value

$hash_table_leaf/for_each_2: (self)
  self $_hash $key $value
  basic_loops::body! key value

$hash_table_node/for_each_1: (self)
  $saved_context
    tuple
      next
      break
      basic_loops::from
      basic_loops::self

  !basic_loops::from 1
  !basic_loops::self self

  !break: (myself^)
    basic_loops::saved_context_of(myself)
      !next !break
      !basic_loops::from !basic_loops::self
    break!

  !break.basic_loops::saved_context_of saved_context

  !next:
    $idx basic_loops::from
    if
      idx <= 8:
        !basic_loops::from idx+1
        for_each_1! basic_loops::self(idx)
      :
        basic_loops::saved_context_of(break)
          !next !break
          !basic_loops::from !basic_loops::self
        next!

  next!

$hash_table_node/for_each_2: (self)
  $saved_context
    tuple
      next
      break
      basic_loops::from
      basic_loops::self

  !basic_loops::from 1
  !basic_loops::self self

  !break: (myself^)
    basic_loops::saved_context_of(myself)
      !next !break
      !basic_loops::from !basic_loops::self
    break!

  !break.basic_loops::saved_context_of saved_context

  !next:
    $idx basic_loops::from
    if
      idx <= 8:
        !basic_loops::from idx+1
        for_each_2! basic_loops::self(idx)
      :
        basic_loops::saved_context_of(break)
          !next !break
          !basic_loops::from !basic_loops::self
        next!

  next!

$std_types::hash_table/for_each:
  (
    self # the hash table to iterate over
    body # the statement sequence to execute for each item
    finally = next # called after all items have been iterated over
  )
  $saved_context
    tuple
      next
      break
      basic_loops::body
      basic_loops::finally

  !basic_loops::body body
  !basic_loops::finally finally

  !break: (myself^)
    !finally basic_loops::finally
    basic_loops::saved_context_of(myself)
      !next !break
      !basic_loops::body !basic_loops::finally
    finally!

  !break.basic_loops::saved_context_of saved_context
  !next break

  if
    parameter_count_of(body) == 2:
      for_each_2! contents_of(self)
    :
      for_each_1! contents_of(self)

# map

$map_1 ()

$map_2 ()

$mapping_function undefined

$empty_hash_table_entry/map_1: (self) -> self

$empty_hash_table_entry/map_2: (self) -> self

$hash_table_leaf/map_1: (self)
  self $my_hash_index $my_key $my_value
  new self my_hash_index my_key mapping_function(my_value)

$hash_table_leaf/map_2: (self)
  self $my_hash_index $my_key $my_value
  new self my_hash_index my_key mapping_function(my_key my_value)

$empty_collision_list_entry/map_1: (self) -> self

$empty_collision_list_entry/map_2: (self) -> self

$collision_list_entry/map_1: (self)
  self $my_key $my_value $my_link
  new self my_key mapping_function(my_value) map_1(my_link)

$collision_list_entry/map_2: (self)
  self $my_key $my_value $my_link
  new self my_key mapping_function(my_key my_value) map_2(my_link)

$hash_table_node/map_1: (self)
  new self map(self map_1)

$hash_table_node/map_2: (self)
  new self map(self map_2)

$std_types::hash_table/map:
  #
    applies a function to all values of the hash table

    A hash table containing the "mapped" items is returned.

    See also: reduce, map_reduce
  (
    self # the table which values will be mapped
    function # the function to apply to each element of the table
  )
  !mapping_function function
  if
    parameter_count_of(function) == 2:
      map_2 &self.contents_of
      -> self
    :
      map_1 &self.contents_of
      -> self

# reduce

$UNIT .

$reduce_1 ()

$reduction_function undefined

$empty_hash_table_entry/reduce_1: (_self) -> UNIT

$hash_table_leaf/reduce_1: (self)
  self $_my_hash_index $_my_key $my_value
  -> my_value

$empty_collision_list_entry/reduce_1: (_self) -> UNIT

$collision_list_entry/reduce_1: (self)
  self $my_key $my_value $my_link
  my_reduce
    mapping_function(my_key my_value)
    reduce_1(my_link)

$hash_table_node/reduce_1: (self)
  $r12 my_reduce(reduce_1(self(1)) reduce_1(self(2)))
  $r34 my_reduce(reduce_1(self(3)) reduce_1(self(4)))
  $r56 my_reduce(reduce_1(self(5)) reduce_1(self(6)))
  $r78 my_reduce(reduce_1(self(7)) reduce_1(self(8)))
  $r1234 my_reduce(r12 r34)
  $r5678 my_reduce(r56 r78)
  -> my_reduce(r1234 r5678)

$my_reduce: (left right)
  if
    UNIT == left
    -> right
    :
      if
        UNIT == right
        -> left
        -> reduction_function(left right)

$std_types::hash_table/reduce:
  #
    computes a kind of sum from the values stored in the table

    There is no guarantee in which order the values will be reduced (folded).

    So the reduction function must obey to the law of assosiativity!

    Topic: Tables

    See also: map, map_reduce
  (
    self # the table to work on
    function # the function to apply to pairs of values
    unit = undefined # the value to return for empty tables
  )
  if
    length_of(self) == 0
    -> unit
    :
      !reduction_function function
      reduce_1 contents_of(self)

# map_reduce

$map_reduce_1 ()

$map_reduce_2 ()

$empty_hash_table_entry/map_reduce_1: (_self) -> UNIT

$empty_hash_table_entry/map_reduce_2: (_self) -> UNIT

$hash_table_leaf/map_reduce_1: (self)
  self $_my_hash_index $_my_key $my_value
  -> mapping_function(my_value)

$hash_table_leaf/map_reduce_2: (self)
  self $_my_hash_index $my_key $my_value
  -> mapping_function(my_key my_value)

$empty_collision_list_entry/map_reduce_1: (_self) -> UNIT

$empty_collision_list_entry/map_reduce_2: (_self) -> UNIT

$collision_list_entry/map_reduce_1: (self)
  self $my_key $my_value $my_link
  my_reduce
    mapping_function(my_key my_value)
    map_reduce_1(my_link)

$collision_list_entry/map_reduce_2: (self)
  self $my_key $my_value $my_link
  my_reduce
    mapping_function(my_key my_value)
    map_reduce_2(my_link)

$hash_table_node/map_reduce_1: (self)
  $r12 my_reduce(map_reduce_1(self(1)) map_reduce_1(self(2)))
  $r34 my_reduce(map_reduce_1(self(3)) map_reduce_1(self(4)))
  $r56 my_reduce(map_reduce_1(self(5)) map_reduce_1(self(6)))
  $r78 my_reduce(map_reduce_1(self(7)) map_reduce_1(self(8)))
  $r1234 my_reduce(r12 r34)
  $r5678 my_reduce(r56 r78)
  -> my_reduce(r1234 r5678)

$hash_table_node/map_reduce_2: (self)
  $r12 my_reduce(map_reduce_2(self(1)) map_reduce_2(self(2)))
  $r34 my_reduce(map_reduce_2(self(3)) map_reduce_2(self(4)))
  $r56 my_reduce(map_reduce_2(self(5)) map_reduce_2(self(6)))
  $r78 my_reduce(map_reduce_2(self(7)) map_reduce_2(self(8)))
  $r1234 my_reduce(r12 r34)
  $r5678 my_reduce(r56 r78)
  -> my_reduce(r1234 r5678)

$std_types::hash_table/map_reduce:
  #
    combines a map and a reduce operation into a single operation

    Does not create an intermediate table to hold the "mapped" values.

    Topic: Tables

    See also: map, reduce
  (
    self # the table to work on
    map_function # the function to apply to each element of the table
    reduce_function = append # the function to apply to pairs of values
    unit = undefined # the value to return for empty tables
  )
  if
    length_of(self) == 0
    -> unit
    :
      !mapping_function map_function
      !reduction_function reduce_function
      if
        parameter_count_of(map_function) == 2:
          map_reduce_2 contents_of(self)
        :
          map_reduce_1 contents_of(self)

# filter

$filter_function undefined

$filter_1 ()

$filter_2 ()

$empty_hash_table_entry/filter_1: (_self) -> empty_hash_table_entry 0

$empty_hash_table_entry/filter_2: (_self) -> empty_hash_table_entry 0

$hash_table_leaf/filter_1: (self)
  self $_my_hash_index $_my_key $my_value
  if
    filter_function(my_value)
    -> self 0
    -> empty_hash_table_entry 1

$hash_table_leaf/filter_2: (self)
  self $_my_hash_index $my_key $my_value
  if
    filter_function(my_key my_value)
    -> self 0
    -> empty_hash_table_entry 1

$empty_collision_list_entry/filter_1: (_self) -> empty_collision_list_entry 0

$empty_collision_list_entry/filter_2: (_self) -> empty_collision_list_entry 0

$collision_list_entry/filter_1: (self)
  self $my_key $my_value $my_link
  filter_1 $new_link $deleted my_link
  if
    filter_function(my_value):
      if
        deleted == 0
        -> self 0
        -> new(collision_list_entry my_key my_value new_link) deleted
    -> new_link deleted+1

$collision_list_entry/filter_2: (self)
  self $my_key $my_value $my_link
  filter_2 $new_link $deleted my_link
  if
    filter_function(my_key my_value):
      if
        deleted == 0
        -> self 0
        -> new(collision_list_entry my_key my_value new_link) deleted
    -> new_link deleted+1

$hash_table_node/filter_1: (self)
  filter_1 $node_1 $deleted_1 self(1)
  filter_1 $node_2 $deleted_2 self(2)
  filter_1 $node_3 $deleted_3 self(3)
  filter_1 $node_4 $deleted_4 self(4)
  filter_1 $node_5 $deleted_5 self(5)
  filter_1 $node_6 $deleted_6 self(6)
  filter_1 $node_7 $deleted_7 self(7)
  filter_1 $node_8 $deleted_8 self(8)
  $deleted
    +
      deleted_1
      deleted_2
      deleted_3
      deleted_4
      deleted_5
      deleted_6
      deleted_7
      deleted_8
  if
    deleted == 0
    -> self 0
    :
      if
        &&
          node_1.is_an_empty_entry
          node_2.is_an_empty_entry
          node_3.is_an_empty_entry
          node_4.is_an_empty_entry
          node_5.is_an_empty_entry
          node_6.is_an_empty_entry
          node_7.is_an_empty_entry
          node_8.is_an_empty_entry
        -> empty_hash_table_entry deleted
        ->
          new
            hash_table_node
            list
              node_1
              node_2
              node_3
              node_4
              node_5
              node_6
              node_7
              node_8
          deleted

$hash_table_node/filter_2: (self)
  filter_2 $node_1 $deleted_1 self(1)
  filter_2 $node_2 $deleted_2 self(2)
  filter_2 $node_3 $deleted_3 self(3)
  filter_2 $node_4 $deleted_4 self(4)
  filter_2 $node_5 $deleted_5 self(5)
  filter_2 $node_6 $deleted_6 self(6)
  filter_2 $node_7 $deleted_7 self(7)
  filter_2 $node_8 $deleted_8 self(8)
  $deleted
    +
      deleted_1
      deleted_2
      deleted_3
      deleted_4
      deleted_5
      deleted_6
      deleted_7
      deleted_8
  if
    deleted == 0
    -> self 0
    :
      if
        &&
          node_1.is_an_empty_entry
          node_2.is_an_empty_entry
          node_3.is_an_empty_entry
          node_4.is_an_empty_entry
          node_5.is_an_empty_entry
          node_6.is_an_empty_entry
          node_7.is_an_empty_entry
          node_8.is_an_empty_entry
        -> empty_hash_table_entry deleted
        ->
          new
            hash_table_node
            list
              node_1
              node_2
              node_3
              node_4
              node_5
              node_6
              node_7
              node_8
          deleted

$std_types::hash_table/filter:
  #
    returns a new hash table containing only the elements for which the
    given function returns true

    Result:

      table # the filtered table

    Topic: Tables

    See also: map, reduce, map_reduce
  (
    self # the table to work on
    function # the function to check for each element of the table
  )
  if
    length_of(self) == 0
    -> empty_hash_table
    :
      !filter_function function
      if $new_contents $deleted
        parameter_count_of(function) == 2:
          filter_2 contents_of(self)
        :
          filter_1 contents_of(self)
      if
        deleted == 0
        -> self
        ->
          self
            .length_of length_of(self)-deleted
            .contents_of new_contents

# Constructor

$std::hash_table:
  (
    pairs*
  )
  to_hash_table pairs

[source]

$std::reduce ()
  #
    computes a kind of sum from the items of a collection

    There is no guarantee in which order the values will be reduced (folded).

    So the the reduction function must obey to the law of assosiativity!

    See also: map, map_reduce, filter

$std_types::hash_table/reduce:
  #
    computes a kind of sum from the values stored in the table

    There is no guarantee in which order the values will be reduced (folded).

    So the reduction function must obey to the law of assosiativity!

    Topic: Tables

    See also: map, map_reduce
  (
    self # the table to work on
    function # the function to apply to pairs of values
    unit = undefined # the value to return for empty tables
  )
  if
    length_of(self) == 0
    -> unit
    :
      !reduction_function function
      reduce_1 contents_of(self)

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Tables, Collections

# std_types::hash_table/std::reduce (a method)

