# std::waitpid (a builtin I/O-function)

  waits for a child process to terminate

  Using "waitpid" to do it in a non-blocking way.

  Returns <undefined>/<undefined> if no child terminated

  Parameters:
    pid: the process id to wait for

  Results:
    pid: the process id that terminated
    status: the exit status of the process

  Topic: POSIX

  See also: std::fork, std::exec, std::system

  Example:

    fork! $pid
    if pid.is_undefined:
      println! "fork failed"
    else if pid == 0:
      exec! "ls"
    else:
      waitpid! pid $status
      println! "child process " pid " terminated with status " status

  Output:

    child process 12345 terminated with status 0

((defined in runtime_templates/zzz_io.template))
((generated by Codestral-22B-v0.1-Q5_K_M.gguf))
((2024-07-02 11:42:30))
