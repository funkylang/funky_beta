# std::merge (a polymorphic function)

  merges two collections

  Parameters:
    self: the first collection
    other: the second collection
    merge_function: a function used to merge corresponding values

  Result:
    a new collection containing the merged elements

  The merge operation depends on the type of the collections.

  * For tables, if a key is contained in both tables and *merge_function* is
    not specified then the value from the *other* table is used for the merged
    table.

    The *merge_function* is applied only if both tables contain a value for the
    same key.

  * For sets, the merge operation simply combines the elements of both sets.

  * For lists, the merge operation combines the elements of both lists while
    preserving the order.

  Topic: Collections

  See also: std::intersection, std::zip

  Example:

    $my_table1 create_table
      "name" = "John"
      "age" = 42
    $my_table2 create_table
      "name" = "Mary"
      "age" = 25
      "city" = "London"
    $merged_table my_table1.merge(my_table2)
    println! merged_table

    prints

    {
      "name": "Mary",
      "age": 25,
      "city": "London"
    }

((defined in basic/types/collections/collection.fky))
((generated by gemma-2-27b-it.Q5_K.gguf))
((2024-07-03 21:32:28))
