[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[symbols]

$std::write_string_to:
$std::write_to:
$std::writeln_to:
$std::print_string_to:
$std::print_to ()
$std_types::file_descriptor/print_to:
$std::println_to:
$std::print_string:
$std::print:
$std::println:

[source]

$std_types::file_descriptor/print_to:
  (
    fd
    args*
  )

[documentation remark]

# std_types::file_descriptor/std::print_to (an I/O-method)

  prints the specified arguments to the specified file descriptor

  Parameters:
    fd: the file descriptor to print to
    args*: the arguments to print

  Results:
    none

  **Attention**: This function must be called with I/O-access rights!

  The arguments are converted to strings, concatenated and written to the
  specified file descriptor.

  Topic: Input-Output

  See also: std::println_to, std::print_string_to

[EXERCISE]

#
  Topic: Configuration

[symbols]

$std::load_configuration ()
$std_types::object/load_configuration:
$std_types::io.configuration_info_of empty_hash_table
$std_types::io/load_configuration:

#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
  Topic: Configuration

$std::load_configuration ()
  #
    loads the configuration from the given file

$std_types::object/load_configuration:
  #
    loads the configuration from the given file

    In addition to the configuration object, a string containing a list of
    errors is returned. If this list is empty, then the configuration was
    successfully loaded and contained no errors.

    If only some lines could not be parsed, then the configuration items of
    the remaining lines are still obeyed.

    The *fields* parameters can either contains multiple key-value-pairs or a
    a single list of key-value-pairs.
  (
    configuration # the configuration object
    filename # the filename of the configuration file
    fields* # the fields and their names
  )
  load! $buf filename
  if
    buf.is_an_error
    -> configuration buf
    :
      extract_configuration configuration buf fields

$configuration_info_of ()

$std_types::io.configuration_info_of empty_hash_table

$std_types::io/load_configuration:
  #
    loads the configuration from the given file
  (
    io # the io object
    id # the job id
    configuration # the configuration object
    filename # the filename of the configuration file
    fields* # the fields and their names
  )
  !io.configuration_info_of(id) tuple(configuration fields)
  tuple &id 1
  load &io id filename
  register_handlers io id
    JOB_COMPLETED = load_completed
    JOB_FAILED = load_failed

$load_completed: (io id buf)
  deregister_all_handlers &io id
  id !id
  $configuration_info configuration_info_of(io)(id)
  !io.configuration_info_of(id) undefined
  configuration_info $configuration $fields
  extract_configuration &configuration $errors buf fields
  -> io tuple(JOB_COMPLETED id tuple(configuration errors))

$load_failed: (io id err)
  deregister_all_handlers &io id
  id !id
  -> io tuple(JOB_FAILED id err)

$extract_configuration: (configuration buf fields)
  $errors empty_list
  update_if length_of(fields) == 1 && fields(1).is_a_list &fields -> fields(1)
  to_hash_table &fields
  from_utf8 &buf
  for_each split(buf.trim_right '@nl;')
    : (no line)
      truncate_from &line '#'
      normalize &line
      if
        line.is_empty
        next
        :
          $name line .truncate_from. ' '
          $value line .behind. ' '
          $attribute_of fields(name)
          if
            attribute_of.is_defined:
              $default_value attribute_of(configuration)
              cond
                -> default_value.is_a_number:
                  to_number &value
                  if
                    value.is_defined:
                      attribute_of &configuration value
                      next
                    :
                      push &errors "
                        Attribute "@(name)" should be a number (line @(no))
                      next
                -> default_value.is_a_boolean:
                  case value
                    "yes", "on", "true":
                      attribute_of &configuration true
                      next
                    "no", "off", "false":
                      attribute_of &configuration false
                      next
                    :
                      push &errors "
                        Attribute "@(name)" should be either "yes" or "no" @
                        (line @(no))
                      next
                -> true:
                  attribute_of &configuration value
                  next
            :
              push &errors "
                Invalid attribute "@(name)" in line @(no).
              next
    -> configuration errors

[source]

$std::load_configuration ()
  #
    loads the configuration from the given file

$std_types::object/load_configuration:
  #
    loads the configuration from the given file

    In addition to the configuration object, a string containing a list of
    errors is returned. If this list is empty, then the configuration was
    successfully loaded and contained no errors.

    If only some lines could not be parsed, then the configuration items of
    the remaining lines are still obeyed.

    The *fields* parameters can either contains multiple key-value-pairs or a
    a single list of key-value-pairs.
  (
    configuration # the configuration object
    filename # the filename of the configuration file
    fields* # the fields and their names
  )
  load! $buf filename
  if
    buf.is_an_error
    -> configuration buf
    :
      extract_configuration configuration buf fields

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Configuration, Input-Output

# std_types::object/std::load_configuration (an I/O-method)

