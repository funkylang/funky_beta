[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[symbols]

$std::write_string_to:
$std::write_to:
$std::writeln_to:
$std::print_string_to:
$std::print_to ()
$std_types::file_descriptor/print_to:
$std::println_to:
$std::print_string:
$std::print:
$std::println:

[source]

$std_types::file_descriptor/print_to:
  (
    fd
    args*
  )

[documentation remark]

# std_types::file_descriptor/std::print_to (an I/O-method)

  prints the specified arguments to the specified file descriptor

  Parameters:
    fd: the file descriptor to print to
    args*: the arguments to print

  Results:
    none

  **Attention**: This function must be called with I/O-access rights!

  The arguments are converted to strings, concatenated and written to the
  specified file descriptor.

  Topic: Input-Output

  See also: std::println_to, std::print_string_to

[EXERCISE]

#
  Topic: Input-Output

  Input/Output is handled in a special way in Funky.

  I/O-functions must be called with so-called *I/O-access rights*.

  To call a function with I/O-access rights one

  * must already have *I/O-access rights*

  and

  * give them to the called function

  To give *I/O-access rights* to a function it is called with a "!"-suffix.

  Related topics: Input-Output Events, POSIX, Input-Output Task Manager

  Example:

    println! "Hello, world!"

  Output:

    Hello, world!

#
  Topic: POSIX

  The Funky-API includes most POSIX-function calls.

  The are wrapped in a Funky-style API.

  Funky uses mainly blocking I/O but makes heavy use of the <std::pselect>
  function to make I/O-calls only when non-blocking behaviour is guaranteed.

  In most cases it will be more appropriate to use the <@Input-Output>-API than
  the POSIX-API.

  Related topics: Input-Output

[symbols]


# File Operations

$std::load () # loads a file in some way; returns a string
$std::save () # saves a file in some way
$std::update ()

# Directory Entry Attributes

$std::is_a_directory ()
$std::sleep:
$std::write_string_to:
$std::write_to:
$std::writeln_to:
$std::print_string_to:
$std::print_to ()
$std_types::file_descriptor/print_to:
$std::println_to:
$std::print_string:
$std::print:
$std::println:
$std::eprint_string:
$std::eprint:
$std::eprintln:
$std::read_from:
$std::read_from_until:
$std::readln_from:
$std::read_all_from:
$std::get_from_until:
$std::getln_from:
$std::get_until:
$std::getln:
$std_types::string/load:
$std_types::string/save:
$std_types::file_descriptor/load:
$std_types::io.load_buffer_of empty_hash_table
$std_types::io.max_length_of empty_hash_table
$std_types::io.id_of empty_hash_table
$std_types::io.info_of empty_hash_table
$std_types::io/load:
$std_types::io/save:
$std::try:
$std::check:
$std::file_exists:
$std::directory:
$std_types::stat/is_a_directory: (self)
$std_types::dirent/is_a_directory: (self)
$std::call ()
$std::call_with_input ()
$std_types::object/call:
$std_types::io/call:
$std_types::io/call_with_input:
$std::terminate:
$std::is_a_file_descriptor ()
$std_types::object.is_a_file_descriptor false
$std_types::file_descriptor.is_a_file_descriptor true
$std_types::file_descriptor.serialization_tag_of "file_descriptor"
$std_types::file_descriptor/serialize:
$std_types::file_descriptor.deserializer_of:
$std::is_a_process_id ()
$std_types::object/is_a_process_id false
$std_types::process_id/is_a_process_id true
$std_types::process_id.serialization_tag_of "process_id"
$std_types::process_id/serialize:
$std_types::process_id.deserializer_of:
$std::pipe ()
$std_types::object/std::pipe:
$std_types::io/std::pipe:
$std::pipe_commands:
$std::which:
$std::find_first_process: (name)
$std::find_processes: (name)
$std::get_process_name: (pid)
$std::get_mac_address:
$std::extern:

$std_types::stat/is_a_directory: (self)
  -> mode_of(self)(1) == 'd'

$std_types::dirent/is_a_directory: (self)
  -> type_of(self) == DIRECTORY

$std::call ()

$std::call_with_input ()

$std_types::object/call:
  (
    cmd
    args
  )
  $rc result_count()
  $do_return_error_code (rc >= 1)
  $do_collect_output (rc >= 2)
  $do_collect_error_output (rc == 3)
  map &args to_string
  $env_vars empty_list
  for_each environment !env_vars
    : (key value)
      push &env_vars "@(key)=@(value)"
      next
    -> env_vars
  create_process! $pid $in_fd $out_fd $err_fd cmd args env_vars
  close! in_fd
  $io std_types::io
  join_process &io pid
  start_reading_from &io out_fd
  start_reading_from &io err_fd

  $out ""
  $err ""
  loop:
    get_events! &io $events
    for_each events
      : (event)
        event $type $fd $data
        case type
          READ:
            if
              data == ""
              next
              :
                case fd
                  out_fd:
                    if
                      do_collect_output:
                        append &out data
                        next!
                      :
                        write_to! STDOUT_FILENO data
                        next!
                  err_fd:
                    if
                      do_collect_error_output:
                        append &err data
                        next!
                      :
                        write_to! STDERR_FILENO data
                        next!
                  :
                    next!
          PROCESS_JOINED:
            $ret data
            if
              do_return_error_code:
                if
                  do_collect_output:
                    if
                      do_collect_error_output
                      -> ret out err
                      -> ret out
                  -> ret
              :
                if
                  ret == 0
                  pass
                  :
                    error "CALLING PROCESS FAILED"
          : # ignore all other signals
            next!
      next

$std_types::io/call:
  (
    io
    id
    cmd
    args
    context = undefined
  )
  run io start_process id undefined cmd args context

$std_types::io/call_with_input:
  (
    io
    id
    feed
    cmd
    args
    context = undefined
  )
  run io start_process id feed cmd args context

$start_process: (io id feed cmd args context)
  map &args to_string
  $env_vars empty_list
  for_each environment !env_vars
    : (key value)
      push &env_vars "@(key)=@(value)"
      next
    -> env_vars
  create_process! $pid $in_fd $out_fd $err_fd cmd args env_vars
  if
    feed.is_defined:
      write &io in_fd feed
      register_handlers &io in_fd
        WRITE_COMPLETED = feed_written
        WRITE_FAILED = write_feed_failed
      get_results
    :
      close! in_fd
      get_results

  $get_results:
    join_process &io pid
    start_reading_from &io out_fd
    start_reading_from &io err_fd
    !io.id_of(pid) id
    !io.info_of(out_fd) ""
    !io.info_of(err_fd) ""
    !io.info_of(pid) tuple(out_fd err_fd)
    register_handlers &io out_fd
      READ = read_process_output
      READ_FAILED = read_from_process_failed
      CLOSED = ignore_close
    register_handlers &io err_fd
      READ = read_process_output
      READ_FAILED = read_from_process_failed
      CLOSED = ignore_close
    register_handlers &io pid
      PROCESS_JOINED = tuple(process_finished context)
    -> io undefined

$feed_written: (io fd _data)
  close &io fd
  deregister_all_handlers &io fd
  -> io undefined

$write_feed_failed: (io fd _err)
  deregister_all_handlers &io fd
  -> io undefined

$read_process_output: (io fd data)
  append &io.info_of(fd) data
  -> io undefined

$read_from_process_failed: (io fd _err)
  deregister_all_handlers &io fd
  -> io undefined

$ignore_close: (io _fd _data)
  -> io undefined

$process_finished: (io pid status context)
  log &io 4 "process finished with status @(status)"
  deregister_all_handlers &io pid
  $id id_of(io)(pid)
  !io.id_of(pid) undefined
  info_of(io)(pid) $out_fd $err_fd
  $out info_of(io)(out_fd)
  $err info_of(io)(err_fd)
  !io.info_of(pid) undefined
  !io.info_of(out_fd) undefined
  !io.info_of(err_fd) undefined
  if
    status == 0
    -> io tuple(JOB_COMPLETED id tuple(out err) context)
    -> io tuple(JOB_FAILED id tuple(status out err) context)

$std::terminate:
  exit! EXIT_SUCCESS

$std::is_a_file_descriptor ()

$std_types::object.is_a_file_descriptor false

$std_types::file_descriptor.is_a_file_descriptor true

$std_types::file_descriptor.serialization_tag_of "file_descriptor"

$std_types::file_descriptor/serialize:
  (
    self
    indent = undefined
  )
  $str "
    file_descriptor @(self.to_integer)
  if
    indent.is_defined
    -> append(tabs_and_spaces(indent) str)
    -> str

$std_types::file_descriptor.deserializer_of:
  (
    _tag
    argument
  )
  -> file_descriptor(integer(argument))

register_type &deserializers std_types::file_descriptor

$std::is_a_process_id ()

$std_types::object/is_a_process_id false

$std_types::process_id/is_a_process_id true

$std_types::process_id.serialization_tag_of "process_id"

$std_types::process_id/serialize:
  (
    self
    indent = undefined
  )
  $str "
    process_id @(self.to_integer)
  if
    indent.is_defined
    -> append(tabs_and_spaces(indent) str)
    -> str

$std_types::process_id.deserializer_of:
  (
    _tag
    argument
  )
  -> process_id(integer(argument))

register_type &deserializers std_types::process_id

$command_of ()

$extern_call:
  (
    myself^
    arguments*
  )
  call! command_of(myself) map(flatten(arguments) to_string)

$extern_call.command_of undefined

$std::pipe ()

$std_types::object/std::pipe:
  (
    args*
  )
  parse_pipe_arguments $input $output_fd $commands args
  prepare_pipe! $in_fd $out_fd $err_fds $pids input output_fd commands
  run_pipe! input in_fd out_fd err_fds pids

$parse_pipe_arguments: (args)
  $i 1
  $n length_of(args)
  $in_fd_or_feed undefined
  $out_fd undefined
  $commands empty_list
  $head undefined
  $arguments undefined
  $first_arg args(1)
  if
    first_arg.is_a_string || first_arg.is_a_file_descriptor:
      !in_fd_or_feed first_arg
      !i 2
      build_commands!
    build_commands

  $build_commands:
    loop
      :
        if
          i > n break
          :
            $arg args(i)
            if
              arg.is_a_function:
                update_if head.is_defined &commands:
                  push commands tuple(head map(flatten(arguments) to_string))
                !head command_of(arg)
                !arguments empty_list
                inc &i
                next!
              :
                if
                  i == n && arg.is_a_file_descriptor:
                    !out_fd arg
                    inc &i
                    next!
                  :
                    push &arguments arg
                    inc &i
                    next!
      :
        update_if head.is_defined &commands:
          push commands tuple(head map(flatten(arguments) to_string))
        -> in_fd_or_feed out_fd commands

$std_types::io/std::pipe:
  (
    io
    id
    context
    args*
  )
  parse_pipe_arguments $input $output_fd $commands args
  run io start_pipe id context input output_fd commands

$start_pipe: (io id context input output_fd commands)
  prepare_pipe! $in_fd $out_fd $err_fds $pids input output_fd commands
  start_reading_from &io out_fd
  start_reading_from &io err_fds
  join_process &io pids
  -> io tuple(JOB_COMPLETED id tuple(in_fd out_fd err_fds pids) context)

$std::pipe_commands:
  (
    input = undefined
    output_fd = undefined
    commands
  )
  prepare_pipe! $in_fd $out_fd $err_fds $pids input output_fd commands
  run_pipe! input in_fd out_fd err_fds pids

$prepare_pipe:
  (
    input # a file descriptor, a string or <undefined>
    output_fd # a file descriptor or <undefined>
    commands
  )
  $pids empty_list
  $input_fd undefined # a file descriptor to send input to the first filter
  $in_fd # the input file descriptor for the next filter
    if
      input.is_defined && input.is_a_file_descriptor
      -> input
      -> undefined
  $err_fds empty_list
  $env_vars undefined
  update_if environment.is_defined &env_vars:
    !env_vars empty_list
    for_each environment
      : (key value)
        push &env_vars "@(key)=@(value)"
        next
      -> env_vars
  $n length_of(commands)
  for_each commands
    : (idx command)
      command $head $arguments
      map &arguments to_utf8
      $pid undefined
      $err_fd undefined
      if
        in_fd.is_defined: # chain the input stream to the filter
          if
            idx == n && output_fd.is_defined:
              # send the output of the filter directly to <output_fd>
              create_process!
                !pid !err_fd head arguments env_vars in_fd output_fd
              !in_fd undefined
              store_pid_and_err_fd!
            : # we need a file descriptor that receives output from the filter
              create_process!
                !pid !in_fd !err_fd head arguments env_vars in_fd
              store_pid_and_err_fd!
        : # we need a file descriptor to send input to the first filter
          if
            idx == n && output_fd.is_defined:
              # send the output of the filter directly to <output_fd>
              create_process!
                !pid !input_fd !err_fd head arguments env_vars
                undefined output_fd
              !in_fd undefined
              store_pid_and_err_fd!
            : # we need a file descriptor that receives output from the filter
              create_process!
                !pid !input_fd !in_fd !err_fd head arguments env_vars
              store_pid_and_err_fd!

      $store_pid_and_err_fd:
        push &pids pid
        push &err_fds err_fd
        next!
    :
      if
        input.is_defined && input.is_a_file_descriptor:
          close! input
          -> input_fd in_fd err_fds pids
        -> input_fd in_fd err_fds pids

$run_pipe:
  (
    feed # input data or irrelevant
    in_fd # the file descriptor to feed data into the first filter
    out_fd # the file descriptor to read data from the last filter
    err_fds # the file descriptors to read error output from all filters
    pids # the process ids of all filters
  )

  $err_fd_tab empty_hash_table
  $pid_tab empty_hash_table
  for_each !err_fd_tab err_fds
    : (idx err_fd)
      !err_fd_tab(err_fd) idx
      next
    -> err_fd_tab
  for_each !pid_tab pids
    : (idx pid)
      !pid_tab(pid) idx
      next
    -> pid_tab
  $rets dup(list(undefined) length_of(pids))
  $out
    if
      out_fd.is_defined
      -> ""
      -> undefined
  $errs dup(list("") length_of(pids))
  loop:
    $read_descriptor_list keys_of(err_fd_tab)
    $write_descriptor_list
      if
        in_fd.is_defined
        -> list(in_fd)
        -> empty_list
    update_if out_fd.is_defined &read_descriptor_list:
      # collect the output of the last filter
      push read_descriptor_list out_fd
    pselect!
      $signals
      $read_descriptors read_descriptor_list
      $write_descriptors write_descriptor_list
      $_out_of_band_descriptors empty_list
    for_each signals
      : (signal)
        if
          signal == SIGCHLD:
            loop
              :
                wait! $rpid $status
                if
                  rpid.is_an_error || rpid.is_undefined
                  break
                  :
                    !rets(pid_tab(rpid)) exitstatus(status)
                    !pid_tab(rpid) undefined
                    if!
                      pid_tab.is_empty
                      break
                      next
              next
          next
      :
        for_each write_descriptors
          : (write_descriptor) # must be <in_fd>
            write! $bytes_written write_descriptor feed
            range &feed bytes_written+1 -1
            if
              feed.is_empty:
                close! in_fd
                !in_fd undefined
                next!
              next
          :
            for_each read_descriptors
              : (read_descriptor)
                read! $buf read_descriptor 0x100000
                if
                  buf.is_empty: # closed from the other side
                    close! read_descriptor
                    if
                      read_descriptor == out_fd:
                        !out_fd undefined
                        next!
                      :
                        !err_fd_tab(read_descriptor) undefined
                        next!
                  :
                    if
                      read_descriptor == out_fd:
                        # collect output from the last filter
                        append &out buf
                        next!
                      :
                        append &errs(err_fd_tab(read_descriptor)) buf
                        next!
              :
                if!
                  pid_tab.is_empty && out_fd.is_undefined && err_fd_tab.is_empty
                  -> rets out errs
                  next

$std::which:
  (
    name
  )
  for_each split(environment("PATH") ':')
    : (pathname)
      $filename append(pathname "/" name)
      file_exists! filename $does_exist
      if! does_exist
        -> filename
        next
    -> undefined

$std::find_first_process: (name)
  opendir! $dir "/proc"
  loop:
    readdir! $entry dir
    if
      entry.is_an_error:
        closedir! dir
        -> undefined
      :
        $proc_num name_of(entry)
        if
          proc_num .matches. many(DIGIT):
            load! $buf "/proc/@(proc_num)/cmdline"
            if
              buf.is_empty
              next
              :
                $proc_name buf .truncate_from. '@0;'
                truncate_until &proc_name '/' -1
                if!
                  proc_name .matches. name
                  -> proc_num.to_integer
                  next
          next

$std::find_processes: (name)
  opendir! $dir "/proc"
  $pids empty_list
  loop:
    readdir! $entry dir
    if
      entry.is_an_error:
        closedir! dir
        -> pids
      :
        $proc_num name_of(entry)
        if
          proc_num .matches. many(DIGIT):
            load! $buf "/proc/@(proc_num)/cmdline"
            if
              buf.is_empty
              next
              :
                $proc_name buf .truncate_from. '@0;'
                truncate_until &proc_name '/' -1
                if
                  proc_name .matches. name:
                    push &pids proc_num.to_integer
                    next!
                  next
          next

$std::get_process_name: (pid)
  load! $buf "/proc/@(pid)/cmdline"
  if
    buf.is_an_error
    -> undefined
    -> buf .truncate_from. '@0;'

$std::get_mac_address:
  get_first_mac_address! $mac
  if
    mac.is_defined: map_reduce mac: (chr) -> hex(chr.to_integer 2)
    -> undefined

$std::extern:
  (
    command
  )
  -> extern_call(.command_of command)

[source]

$std::pipe ()

$std_types::object/std::pipe:
  (
    args*
  )
  parse_pipe_arguments $input $output_fd $commands args
  prepare_pipe! $in_fd $out_fd $err_fds $pids input output_fd commands
  run_pipe! input in_fd out_fd err_fds pids

[documentation remark]

# std_types::object/std::pipe (an I/O-method)

