[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std_types::undefined.is_defined false # obvious

[documentation remark]

# std::undefined.is_defined (an attribute)

  always returns false

  Parameter:
    self: an instance of <std_types::undefined>

  Result:
    success: false

  Topic: Objects

  See also: std_types::undefined, std_types::object

[source]

$std_types::rectangle.x_of 0

[documentation remark]

# std_types::rectangle.std::x_of (an attribute)

  the x-coordinate of the rectangle

  Parameters:
    self: the rectangle

  Result:
    x: the x-coordinate of the rectangle

  Topic: Graphic Primitives

  See also: std_types::rectangle/std::y_of,
            std_types::rectangle/std::width_of,
            std_types::rectangle/std::height_of

[source]

$std::clear_colour_of ()

[documentation remark]

# std::clear_colour_of (an attribute)

  returns the clear colour of the specified object

  Parameters:
    self: the object

  Result:
    colour: the clear colour of the object

  Topic: Terminal

  See also: std::draw_colour_of, std::set_clear_colour, std::clear

[EXERCISE]

#
  Topic: Characters

  Characters are unicode code points in Funky. But they can hold any positive
  32-bit integer value.

  Characters are the building blocks of strings.

  See also: Strings

[symbols]

$std::is_a_character ()
$std_types::object.is_a_character false
$std_types::character.is_a_character true
$std_types::character/match:
$std_types::character/match_back:
$std_types::character/search:
$std::is_a_digit:
$std::is_a_letter:
$std::is_an_uppercase_letter:
$std::is_a_lowercase_letter:
$std_types::character/serialize:
$std::to_wide ()
$std_types::character/to_wide: (chr)

#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,

#
  Topic: Characters

  Characters are unicode code points in Funky. But they can hold any positive
  32-bit integer value.

  Characters are the building blocks of strings.

  See also: Strings

$std::is_a_character ()
  #
    tests if an object is a character

    Topic: Strings

$std_types::object.is_a_character false
  #
    by default, an object is not a character

    Topic: Strings

$std_types::character.is_a_character true
  #
    a character is a character

    Topic: Strings

$std_types::character/match:
  #
    matches the start of a string with the character

    Result:
      len # 1 if the character is the first character of the string

    If the match is unsuccessful, then *len* is <undefined>.

    Topic: Strings

    See also: match_back, search

    Example:

      $str "abcdef"
      $len match('a' str)
      dump! `len

    Output:

      len: 1

    Example:

      $str "abcdef"
      $len match('z' str)
      dump! `len

    Output:

      len: <undefined>
  (
    self # the character to match with
    str # the string which's start is matched
  )
  $rc result_count()
  if
    str.is_empty
    fail
    :
      if
        str(1) == self:
          if
            rc == 1
            -> 1
            -> 1 undefined
        fail

  $fail:
    if
      rc == 1
      -> undefined
      -> undefined undefined

$std_types::character/match_back:
  #
    matches the end of a string with the character

    Result:
      len # 1 if the character is the last character of the string

    If the match is unsuccessful, then *len* is <undefined>.

    Topic: Strings

    See also: match, search

    Example:

      $str "abcdef"
      $len match_back('f' str)
      dump! `len

    Output:

      len: 1

    Example:

      $str "abcdef"
      $len match_back('z' str)
      dump! `len

    Output:

      len: <undefined>
  (
    self # the character to match with
    str # the string which's end is matched
  )
  if
    str.is_empty
    -> undefined
    :
      if
        str(-1) == self
        -> 1
        -> undefined

$std_types::character/search:
  #
    searches for the character from the start or the end of a string

    Results:
      pos # the position of the first occurrence of the character
      len # 1 if successful

    If the character is not found, then *pos* and *len* are <undefined>.

    Topic: Strings

    See also: match, match_back

    Example:

      $str "abcdef"
      search $pos $len 'd' str
      dump! `pos `len

    Output:

      pos: 4
      len: 1

    Example:

      $str "abcdef"
      search $pos $len 'z' str
      dump! `pos `len

    Output:

      pos: <undefined>
      len: <undefined>

    Example:

      $str "In the wild, wild west we were alone."
      search $pos $len 'w' str 2
      dump! `pos `len

    Output:

      pos: 14
      len: 1

    Example:

      $str "In the wild, wild west we were alone."
      search $pos $len 'w' str -2
      dump! `pos `len

    Output:

      pos: 24
      len: 1
  (
    self # the character to search for
    stream # the string to search in
    nth = 1 # search for the nth occurrence; negative value search backwards
  )
  $i undefined
  $n length_of(stream)
  if
    nth < 0:
      !i n
      search_backwards
    :
      !i 1
      search_forwards

  $search_forwards:
    if
      i <= n
      :
        if
          stream(i) == self:
            if
              nth > 1:
                dec &nth
                inc &i
                search_forwards
              -> i 1
          :
            inc &i
            search_forwards
      -> undefined undefined

  $search_backwards:
    if
      i >= 1
      :
        if
          stream(i) == self:
            if
              nth < -1:
                inc &nth
                dec &i
                search_backwards
              -> i 1
          :
            dec &i
            search_backwards
      -> undefined undefined

$std::is_a_digit:
  #
    checks wheter its argument is a digit

    Result:
      success # true if the argument is a digit

    This function must be called on character-values only.

    Topic: Strings

    See also: std_types::character, is_a_letter, is_a_letter_character

    Example:

      if
        is_a_digit('3'):
          println! "3 is a digit"
        :
          println! "3 is not a digit"

    Output:

      3 is a digit

    Example:

      if
        is_a_digit('a'):
          println! "a is a digit"
        :
          println! "a is not a digit"

    Output:

      a is not a digit
  (
    chr # the character to check
  )
  -> chr >= '0' && chr <= '9'

$std::is_a_letter:
  #
    checks wheter its argument is a letter (upper or lower case)

    Result:
      success # true if the argument is a letter

    This function must be called on character-values only.

    Topic: Strings

    See also: is_an_uppercase_letter, is_a_lowercase_letter,
              is_a_letter_character, is_a_digit

    Example:

      if
        is_a_letter('t'):
          println! "t is a letter"
        :
          println! "t is not a letter"

    Output:

      t is a letter

    Example:

      if
        is_a_letter('3'):
          println! "3 is a letter"
        :
          println! "3 is not a letter"

    Output:

     3 is not a letter
  (
    chr # the character to check
  )
  ->
    ||
      chr >= 'a' && chr <= 'z'
      chr >= 'A' && chr <= 'Z'

$std::is_an_uppercase_letter:
  #
    checks wheter its argument is an uppercase letter

    Result:
      success # true if the argument is an uppercase letter

    This function must be called on character-values only.

    Topic: Strings

    See also: is_a_letter, is_a_lowercase_letter,
              is_a_letter_character, is_a_digit

    Example:

      if
        is_an_uppercase_letter('T'):
          println! "T is an uppercase letter"
        :
          println! "T is not an uppercase letter"

    Output:

      T is an uppercase letter

    Example:

      if
        is_an_uppercase_letter('t'):
          println! "t is an uppercase letter"
        :
          println! "t is not an uppercase letter"

    Output:

      t is not an uppercase letter
  (
    chr # the character to check
  )
  -> chr >= 'A' && chr <= 'Z'

$std::is_a_lowercase_letter:
  #
    checks wheter its argument is a lowercase letter

    Result:
      success # true if the argument is a lowercase letter

    This function must be called on character-values only.

    Topic: Strings

    See also: is_a_letter, is_an_uppercase_letter,
              is_a_letter_character, is_a_digit

    Example:

      if
        is_a_lowercase_letter('t'):
          println! "t is a lowercase letter"
        :
          println! "t is not a lowercase letter"

    Output:

      t is a lowercase letter

    Example:

      if
        is_a_lowercase_letter('T'):
          println! "T is a lowercase letter"
        :
          println! "T is not a lowercase letter"

    Output:

      T is not a lowercase letter
  (
    chr # the character to check
  )
  -> chr >= 'a' && chr <= 'z'

$std_types::character/serialize:
  #
    serializes the character

    Result:
      str # the serialization of the character

    Topic: Strings

    The optional indent is obeyed.

    Example:

      $str serialize('a')
      println! str

    Output:

      'a'

    Example:

      $str serialize('a' 2)
      println! str

    Output:

        'a'
  (
    self # the character to serialize
    indent = undefined # the indentation depth in character positions
  )
  $str
    if
      self < '@0x20;' || self > '@0x7e;' || self == '@@'
      -> "'@@@(self.to_integer);'@nl;"
      -> "'@(self)'@nl;"
  if
    indent.is_defined
    -> append(tabs_and_spaces(indent) str)
    -> str

$std::to_wide ()

$std_types::character/to_wide: (chr)
  case chr
    '@0x21;' .. '@0x7e;' -> chr+0xfee0
    ' ' -> '@0x3000;'
    -> chr

[source]

$std_types::object.is_a_character false
  #
    by default, an object is not a character

    Topic: Strings

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Characters

# std_types::object.std::is_a_character (an attribute)

