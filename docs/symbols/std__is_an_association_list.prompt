[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std::clear_colour_of ()

[documentation remark]

# std::clear_colour_of (a polymorphic function)

  the clear colour to use

  Parameter:
    self: the object from which to get the clear colour

  Result:
    colour: the clear colour

  Returns the clear colour of the object.

  Topic: Terminal

  See also: std::draw_colour_of, std::set_clear_colour

[source]

$std_types::screen/clear:
  (
    self
    x = 1
    y = 1
    width = undefined
    height = undefined
  )
  update_if width.is_undefined &width -> width_of(self)-x+1
  update_if height.is_undefined &height -> height_of(self)-y+1
  std_private::clear self self x y width height

$std::clear ()

[documentation remark]

# std::clear (a polymorphic function)

  clears a rectangular area

  Parameters:
    screen # some kind of screen
    x: x-coordinate of the upper left corner
    y: y-coordinate of the upper left corner
    width: width of the area
    height: height of the area

  Result:
    screen: the updated screen

  The area is cleared using the current clear colour. Use
  <std::set_clear_colour> to change the current clear colour.

  The area is clipped at the screen's borders.

  Topic: Terminal

  See also: std_types::screen/std::clear, std::draw_text,
            std::set_clear_colour

  Example:

    $my_screen create_screen(terminal 40 25)
    set_clear_colour &my_screen GREEN
    clear &my_screen 11 6 20 15

[EXERCISE]

[symbols]


# Topics: Tables, Collections


# internal attributes:


# internal methods:

$std::is_an_association_list () # obvious
$std_types::object.is_an_association_list false # obvious
$std_types::association_list.is_an_association_list true # obvious
$std_types::association_list std_types::table
$std_types::association_list.contents_of empty_association_list_entry
$std_types::association_list.length_of 0
$std::empty_association_list std_types::association_list
$std_types::association_list/:

# retrieve


# insert


# delete


# for_each

$std_types::association_list/for_each:

# map

$std_types::association_list/map:
$std_types::association_list.serialization_tag_of "association_list"

#
  Copyright (C) 2021 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Topics: Tables, Collections

# internal attributes:

$contents_of ()

# internal methods:

$retrieve ()

$insert ()

$delete ()

$std::is_an_association_list () # obvious

$std_types::object.is_an_association_list false # obvious

$std_types::association_list.is_an_association_list true # obvious

$std_types::association_list std_types::table
  #
    a very primitive kind of a table

    Associations lists are suited for very small collections. Their main
    advantage is that the items need only support the <equal>-method.
    Neither <less>- or <hash>-methods are used.

    Topic: Collections

    See also: std_types::table, std_types::hash_table,
              std_types::key_order_table

$std_types::association_list.contents_of empty_association_list_entry

$std_types::association_list.length_of 0
  #
    returns the number of items in the association list

$std::empty_association_list std_types::association_list
  #
    an empty association list

$empty_association_list_entry std_types::object

$association_list_entry tuple(undefined undefined undefined)

$NONE .

$std_types::association_list/:
  #
    retrieve, insert or delete an item

    Use

    !items(key) value

    to insert a new entry into *items*. If there is already an item with the
    same key then the existing item is replaced.

    Remark: The above statement is transformed by the compiler as follows:

    items !items key value

    Use

    items(key)

    to retrieve a specific item from *items*. If there is no such item then
    <undefined> is returned.

    Use

    !items(key) undefined

    to remove a specific item from *items*. It is valid to attempt to remove
    a non-existant item.

    Remark: The above statement is transformed by the compiler as follows:

    items !items key undefined
  (
    myself^
    key # specifies the item to retrieve, insert or delete
    value = NONE # the new item value (for insert)
  )
  $contents contents_of(myself)
  if
    NONE == value
    -> retrieve(contents key)
    :
      if
        value.is_defined:
          insert &contents $success key value
          if
            success
            ->
              myself
                .contents_of contents
                .length_of length_of(myself)+1
            -> myself(.contents_of contents)
        :
          delete &contents $success key
          if
            success
            ->
              myself
                .contents_of contents
                .length_of length_of(myself)-1
            -> myself

###

# retrieve

$empty_association_list_entry/retrieve: (_self _key) -> undefined

$association_list_entry/retrieve: (self key)
  self $my_key $my_value $my_link
  if
    key == my_key
    -> my_value
    : retrieve my_link key

###

# insert

$empty_association_list_entry/insert: (_self key value)
  ->
    new(association_list_entry key value empty_association_list_entry)
    true

$association_list_entry/insert: (self key value)
  delete &self $did_delete key
  -> new(association_list_entry key value self) not(did_delete)

###

# delete

$empty_association_list_entry/delete: (self _key) -> self false

$association_list_entry/delete: (self key)
  self $my_key $my_value $my_link
  if
    key == my_key
    -> my_link true
    :
      delete &my_link key $did_delete
      -> new(association_list_entry my_key my_value my_link) did_delete

###

# for_each

$for_each_1 ()

$for_each_2 ()

$callback undefined

$link undefined

$empty_association_list_entry/for_each_1: (_self)
  !link undefined
  next!

$empty_association_list_entry/for_each_2: (_self)
  !link undefined
  next!

$association_list_entry/for_each_1: (self)
  self $_my_key $my_value !link
  callback! my_value

$association_list_entry/for_each_2: (self)
  self $my_key $my_value !link
  callback! my_key my_value

$std_types::association_list/for_each:
  #
    iterates over all items of the association list

    For each item the statement sequence supplied as *body* is called
    with one or two arguments (depending on *body*'s parameter count).

    If called with two arguments the first argument is the *key* and the
    second argument the corresponding *value*.

    If called with one argument then only the *value* is supplied.

    This is a sequential loop.

    Example:

      $ages empty_association_list

      !ages("Tom") 5
      !ages("Sam") 3
      !ages("Sarah") 11

      for_each ages: (name age)
        writeln! name ": " age
        next

    Output:

      Sarah: 11
      Sam: 3
      Tom: 5
  (
    self # the association list to iterate over
    body # the statement sequence to execute for each item
    finally = next # used to return results to the caller
  )
  $contents contents_of(self)
  !callback body
  !break finally
  if
    parameter_count_of(body) == 2:
      !next:
        if
          link.is_undefined
          : finally!
          : for_each_2! link

      for_each_2! contents
    :
      !next:
        if
          link.is_undefined
          : finally!
          : for_each_1! link

      for_each_1! contents

###

# map

$empty_association_list_entry/map: (self _function) -> self

$association_list_entry/map: (self function)
  self $my_key $my_value $my_link
  new self my_key function(my_value) map(my_link function)

$std_types::association_list/map:
  #
    applies a function to all values of the association list

    An association list containing the "mapped" items is returned.

    See also: reduce, map_reduce
  (
    self # the association list which values will be mapped
    function # the function to apply to each element of the list
  )
  map &self.contents_of function
  -> self

$std_types::association_list.serialization_tag_of "association_list"

[source]

$std_types::object.is_an_association_list false # obvious

$std_types::association_list.is_an_association_list true # obvious

$std::is_an_association_list () # obvious

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Do not create completely new examples on your own

### Use only one of the following topics: Tables, Collections

# std::is_an_association_list (a polymorphic function)

