[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

POLY std::plus

[documentation remark]

# std::plus (a polymorphic function)

  adds two numbers of any kind

  Parameters:
    left: the left operand
    right: the right operand

  Result:
    sum: the sum of the two operands

  Topic: Numbers

  See also: std::minus, std::times, std::over, std::div, std::mod

[EXERCISE]

[symbols]

POLY std::new
POLY std::plus
POLY std::minus
POLY std::times
POLY std::over
POLY std::div
POLY std::mod
POLY std::negate
POLY std::floor
POLY std::ceil
POLY std::round
POLY std::ln
POLY std::exp
POLY std::equal
POLY std::less
POLY std::shift_left
POLY std::shift_right
POLY std::bit_and
POLY std::bit_or
POLY std::bit_xor
ATTR std::parameter_count_of
POLY std::to_string
POLY std::to_integer
POLY std::to_real
POLY std::to_number
POLY std::to_lower_case
POLY std::to_upper_case
POLY std::to_title_case
POLY std::is_empty
POLY std::is_not_empty
ATTR std::length_of
ATTR std::dimension_count_of
ATTR std::width_of
ATTR std::height_of
POLY std::hash
POLY std::push
POLY std::pop
POLY std::peek
POLY std::drop
POLY std::put
POLY std::get
POLY std::append
POLY std::range
POLY std::spread
POLY std::to_list
POLY std::exit
POLY std::from_utf8
POLY std::read
POLY std::write
POLY std::close
POLY std::flush

[source]

METHOD std_types::true/equal
  #
    is only equal to itself
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::true)) {
      RETURN_TRUE
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::error)) {
      INVALID_ARGUMENTS
    } else {
      RETURN_FALSE
    }
  }

METHOD std_types::false/equal
  #
    is only equal to itself
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::false)) {
      RETURN_TRUE
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::error)) {
      INVALID_ARGUMENTS
    } else {
      RETURN_FALSE
    }
  }

METHOD std_types::octet_string/equal
  #
    returns <true> if both strings have the same contents
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    NODE *left = ARGUMENTS(0);
    NODE *right = ARGUMENTS(1);
    if (left == right) RETURN_TRUE
    if (TYPEOF(right) != TYPE(std_types::octet_string)) {
      if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::error)) {
        INVALID_ARGUMENTS
      } else {
        RETURN_FALSE
      }
    }
    OCTET_DATA *left_data = left->octet_string.data;
    OCTET_DATA *right_data = right->octet_string.data;
    long left_offset = left->octet_string.offset;
    long right_offset = right->octet_string.offset;
    long length = left->octet_string.length;
    if (length != right->octet_string.length) RETURN_FALSE
    if (left_offset == right_offset && left_data == right_data) RETURN_TRUE
    long i;
    for (i = 0; i < length; ++i) {
      if (left_data->buffer[left_offset+i] != right_data->buffer[right_offset+i]) RETURN_FALSE
    }
    if (left_offset == right_offset) {
      // join the two versions of the string data to simplify future comparisons
      join_nodes(&left->octet_string.data, &right->octet_string.data);
    }
    RETURN_TRUE
  }

METHOD std_types::wide_string/equal
  #
    returns <true> if both strings have the same contents
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    NODE *left = ARGUMENTS(0);
    NODE *right = ARGUMENTS(1);
    if (left == right) RETURN_TRUE
    if (TYPEOF(right) != TYPE(std_types::wide_string)) RETURN_FALSE
    WIDE_DATA *left_data = left->wide_string.data;
    WIDE_DATA *right_data = right->wide_string.data;
    long left_offset = left->wide_string.offset;
    long right_offset = right->wide_string.offset;
    long length = left->wide_string.length;
    if (length != right->wide_string.length) RETURN_FALSE
    if (left_offset == right_offset && left_data == right_data) RETURN_TRUE
    long i;
    for (i = 0; i < length; ++i) {
      if (left_data->buffer[left_offset+i] != right_data->buffer[right_offset+i]) RETURN_FALSE
    }
    if (left_offset == right_offset) {
      // join the two versions of the string data to simplify future comparisons
      join_nodes(&left->wide_string.data, &right->wide_string.data);
    }
    RETURN_TRUE
  }

METHOD std_types::character/equal
  #
    compares two characters for equality

    Parameters:
      chr_1 # the first character
      chr_2 # the second character

    Result:
      success # true if the characters are equal, false otherwise

    A comparison of a character with a non-character value always returns false.

    Topic: Strings

    See also: std_types::character/less

    Example:

      dump! `('a' == 'a')

    Output:

      ('a' == 'a'): <true>

    Example:

      dump! `('a' == 97)

    Output:

      ('a' == 97): <false>
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::character)) {
      RETURN_BOOLEAN(ARGUMENTS(0)->character.code == ARGUMENTS(1)->character.code)
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::error)) {
      INVALID_ARGUMENTS
    } else {
      RETURN_FALSE
    }
  }

METHOD std_types::file_type/equal
  #
    compares two file types for equality

    Parameters:
      left: a file type
      right: a file type

    Result:
      success  # true if the two file types are equal

    Topic: POSIX

    See also: std_types::file_type, std_types::file_type/hash

    Example:

      opendir! $dir "/bin"
      loop:
        readdir! $entry dir
        if
          entry.is_an_error
          break
          :
            if
              type_of(entry) == SYMBOLIC_LINK: # check file type
                println! name_of(entry)
                next!
              next

    Output:

      texosquery
      lzip-compressor
      a2ping
      ...
  {
    CHECK_ARGUMENTS(2)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::file_type))
      RETURN_SINGLE_RESULT(
        from_bool(
          ARGUMENTS(0)->file_type.value ==
          ARGUMENTS(1)->file_type.value))
    RETURN_FALSE
  }

METHOD std_types::file_descriptor/equal
  {
    CHECK_ARGUMENTS(2)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::file_descriptor))
      RETURN_SINGLE_RESULT(
        from_bool(
          ARGUMENTS(0)->file_descriptor.value ==
          ARGUMENTS(1)->file_descriptor.value))
    RETURN_FALSE
  }

METHOD std_types::shutdown_type/equal
  {
    CHECK_ARGUMENTS(2)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::shutdown_type))
      RETURN_SINGLE_RESULT(
        from_bool(
          ARGUMENTS(0)->shutdown_type.value ==
          ARGUMENTS(1)->shutdown_type.value))
    RETURN_FALSE
  }

METHOD std_types::seek_type/equal
  {
    CHECK_ARGUMENTS(2)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::seek_type))
      RETURN_SINGLE_RESULT(
        from_bool(
          ARGUMENTS(0)->seek_type.value == ARGUMENTS(1)->seek_type.value))
    RETURN_FALSE
  }

METHOD std_types::device_id/equal
  {
    CHECK_ARGUMENTS(2)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::device_id))
      RETURN_SINGLE_RESULT(
        from_bool(
          ARGUMENTS(0)->device_id.value ==
          ARGUMENTS(1)->device_id.value))
    RETURN_FALSE
  }

METHOD std_types::directory/equal
  {
    CHECK_ARGUMENTS(2)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::directory))
      RETURN_SINGLE_RESULT(
        from_bool(
          ARGUMENTS(0)->directory.value ==
          ARGUMENTS(1)->directory.value))
    RETURN_FALSE
  }

METHOD std_types::group_id/equal
  {
    CHECK_ARGUMENTS(2)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::group_id))
      RETURN_SINGLE_RESULT(
        from_bool(
          ARGUMENTS(0)->group_id.value ==
          ARGUMENTS(1)->group_id.value))
    RETURN_FALSE
  }

METHOD std_types::inode_number/equal
  {
    CHECK_ARGUMENTS(2)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::inode_number))
      RETURN_SINGLE_RESULT(
        from_bool(
          ARGUMENTS(0)->inode_number.value ==
          ARGUMENTS(1)->inode_number.value))
    RETURN_FALSE
  }

METHOD std_types::process_id/equal
  {
    CHECK_ARGUMENTS(2)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::process_id))
      RETURN_SINGLE_RESULT(
        from_bool(
          ARGUMENTS(0)->process_id.value ==
          ARGUMENTS(1)->process_id.value))
    RETURN_FALSE
  }

METHOD std_types::user_id/equal
  {
    CHECK_ARGUMENTS(2)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::user_id))
      RETURN_SINGLE_RESULT(
        from_bool(
          ARGUMENTS(0)->user_id.value ==
          ARGUMENTS(1)->user_id.value))
    RETURN_FALSE
  }

METHOD std_types::error_number/equal
  {
    CHECK_ARGUMENTS(2)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::error_number))
      RETURN_SINGLE_RESULT(
        from_bool(
          ARGUMENTS(0)->error_number.value ==
          ARGUMENTS(1)->error_number.value))
    RETURN_FALSE
  }

METHOD std_types::unique_item/equal
  #
    compares two unique items for equality
  {
    CHECK_ARGUMENTS(2)
    NODE *right = ARGUMENTS(1);
    if (TYPEOF(right) == TYPE(std_types::unique_item)) {
      RETURN_SINGLE_RESULT(
        from_bool(ARGUMENTS(0)->unique_item.id == right->unique_item.id))
    } else if (TYPEOF(right) == TYPE(std_types::error)) {
      INVALID_ARGUMENTS
    } else {
      RETURN_FALSE
    }
  }

METHOD std_types::boolean_array/equal
  #
    implements the *equal* operation
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (ARGUMENTS(1) == ARGUMENTS(0)) RETURN_TRUE
    if (!equal_array_type(ARGUMENTS(1), ARGUMENTS(0))) RETURN_FALSE
    BOOLEAN_ARRAY_DATA *left = apply_boolean_array_updates((BOOLEAN_ARRAY *)ARGUMENTS(0));
    BOOLEAN_ARRAY_DATA *right = apply_boolean_array_updates((BOOLEAN_ARRAY *)ARGUMENTS(1));
    RETURN_BOOLEAN(
      memcmp(
        left->items, right->items,sizeof(int)*left->size) == 0)
  }

METHOD std_types::character_array/equal
  #
    implements the *equal* operation
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (ARGUMENTS(1) == ARGUMENTS(0)) RETURN_TRUE
    if (!equal_array_type(ARGUMENTS(1), ARGUMENTS(0))) RETURN_FALSE
    CHARACTER_ARRAY_DATA *left = apply_character_array_updates((CHARACTER_ARRAY *)ARGUMENTS(0));
    CHARACTER_ARRAY_DATA *right = apply_character_array_updates((CHARACTER_ARRAY *)ARGUMENTS(1));
    RETURN_BOOLEAN(
      memcmp(
        left->items, right->items,sizeof(uint32_t)*left->size) == 0)
  }

METHOD std_types::int8_array/equal
  #
    implements the *equal* operation
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (ARGUMENTS(1) == ARGUMENTS(0)) RETURN_TRUE
    if (!equal_array_type(ARGUMENTS(1), ARGUMENTS(0))) RETURN_FALSE
    INT8_ARRAY_DATA *left = apply_int8_array_updates((INT8_ARRAY *)ARGUMENTS(0));
    INT8_ARRAY_DATA *right = apply_int8_array_updates((INT8_ARRAY *)ARGUMENTS(1));
    RETURN_BOOLEAN(
      memcmp(
        left->items, right->items,sizeof(int8_t)*left->size) == 0)
  }

METHOD std_types::uint8_array/equal
  #
    implements the *equal* operation
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (ARGUMENTS(1) == ARGUMENTS(0)) RETURN_TRUE
    if (!equal_array_type(ARGUMENTS(1), ARGUMENTS(0))) RETURN_FALSE
    UINT8_ARRAY_DATA *left = apply_uint8_array_updates((UINT8_ARRAY *)ARGUMENTS(0));
    UINT8_ARRAY_DATA *right = apply_uint8_array_updates((UINT8_ARRAY *)ARGUMENTS(1));
    RETURN_BOOLEAN(
      memcmp(
        left->items, right->items,sizeof(uint8_t)*left->size) == 0)
  }

METHOD std_types::int16_array/equal
  #
    implements the *equal* operation
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (ARGUMENTS(1) == ARGUMENTS(0)) RETURN_TRUE
    if (!equal_array_type(ARGUMENTS(1), ARGUMENTS(0))) RETURN_FALSE
    INT16_ARRAY_DATA *left = apply_int16_array_updates((INT16_ARRAY *)ARGUMENTS(0));
    INT16_ARRAY_DATA *right = apply_int16_array_updates((INT16_ARRAY *)ARGUMENTS(1));
    RETURN_BOOLEAN(
      memcmp(
        left->items, right->items,sizeof(int16_t)*left->size) == 0)
  }

METHOD std_types::uint16_array/equal
  #
    implements the *equal* operation
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (ARGUMENTS(1) == ARGUMENTS(0)) RETURN_TRUE
    if (!equal_array_type(ARGUMENTS(1), ARGUMENTS(0))) RETURN_FALSE
    UINT16_ARRAY_DATA *left = apply_uint16_array_updates((UINT16_ARRAY *)ARGUMENTS(0));
    UINT16_ARRAY_DATA *right = apply_uint16_array_updates((UINT16_ARRAY *)ARGUMENTS(1));
    RETURN_BOOLEAN(
      memcmp(
        left->items, right->items,sizeof(uint16_t)*left->size) == 0)
  }

METHOD std_types::int32_array/equal
  #
    implements the *equal* operation
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (ARGUMENTS(1) == ARGUMENTS(0)) RETURN_TRUE
    if (!equal_array_type(ARGUMENTS(1), ARGUMENTS(0))) RETURN_FALSE
    INT32_ARRAY_DATA *left = apply_int32_array_updates((INT32_ARRAY *)ARGUMENTS(0));
    INT32_ARRAY_DATA *right = apply_int32_array_updates((INT32_ARRAY *)ARGUMENTS(1));
    RETURN_BOOLEAN(
      memcmp(
        left->items, right->items,sizeof(int32_t)*left->size) == 0)
  }

METHOD std_types::uint32_array/equal
  #
    implements the *equal* operation
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (ARGUMENTS(1) == ARGUMENTS(0)) RETURN_TRUE
    if (!equal_array_type(ARGUMENTS(1), ARGUMENTS(0))) RETURN_FALSE
    UINT32_ARRAY_DATA *left = apply_uint32_array_updates((UINT32_ARRAY *)ARGUMENTS(0));
    UINT32_ARRAY_DATA *right = apply_uint32_array_updates((UINT32_ARRAY *)ARGUMENTS(1));
    RETURN_BOOLEAN(
      memcmp(
        left->items, right->items,sizeof(uint32_t)*left->size) == 0)
  }

METHOD std_types::int64_array/equal
  #
    implements the *equal* operation
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (ARGUMENTS(1) == ARGUMENTS(0)) RETURN_TRUE
    if (!equal_array_type(ARGUMENTS(1), ARGUMENTS(0))) RETURN_FALSE
    INT64_ARRAY_DATA *left = apply_int64_array_updates((INT64_ARRAY *)ARGUMENTS(0));
    INT64_ARRAY_DATA *right = apply_int64_array_updates((INT64_ARRAY *)ARGUMENTS(1));
    RETURN_BOOLEAN(
      memcmp(
        left->items, right->items,sizeof(int64_t)*left->size) == 0)
  }

METHOD std_types::uint64_array/equal
  #
    implements the *equal* operation
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (ARGUMENTS(1) == ARGUMENTS(0)) RETURN_TRUE
    if (!equal_array_type(ARGUMENTS(1), ARGUMENTS(0))) RETURN_FALSE
    UINT64_ARRAY_DATA *left = apply_uint64_array_updates((UINT64_ARRAY *)ARGUMENTS(0));
    UINT64_ARRAY_DATA *right = apply_uint64_array_updates((UINT64_ARRAY *)ARGUMENTS(1));
    RETURN_BOOLEAN(
      memcmp(
        left->items, right->items,sizeof(uint64_t)*left->size) == 0)
  }

METHOD std_types::float32_array/equal
  #
    implements the *equal* operation
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (ARGUMENTS(1) == ARGUMENTS(0)) RETURN_TRUE
    if (!equal_array_type(ARGUMENTS(1), ARGUMENTS(0))) RETURN_FALSE
    FLOAT32_ARRAY_DATA *left = apply_float32_array_updates((FLOAT32_ARRAY *)ARGUMENTS(0));
    FLOAT32_ARRAY_DATA *right = apply_float32_array_updates((FLOAT32_ARRAY *)ARGUMENTS(1));
    RETURN_BOOLEAN(
      memcmp(
        left->items, right->items,sizeof(float)*left->size) == 0)
  }

METHOD std_types::float64_array/equal
  #
    implements the *equal* operation
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (ARGUMENTS(1) == ARGUMENTS(0)) RETURN_TRUE
    if (!equal_array_type(ARGUMENTS(1), ARGUMENTS(0))) RETURN_FALSE
    FLOAT64_ARRAY_DATA *left = apply_float64_array_updates((FLOAT64_ARRAY *)ARGUMENTS(0));
    FLOAT64_ARRAY_DATA *right = apply_float64_array_updates((FLOAT64_ARRAY *)ARGUMENTS(1));
    RETURN_BOOLEAN(
      memcmp(
        left->items, right->items,sizeof(double)*left->size) == 0)
  }

METHOD std_types::date_and_time/equal
  {
    CHECK_ARGUMENTS(2)
    NODE *left, *right;
    left = ARGUMENTS(0);
    right = ARGUMENTS(1);
    if (TYPEOF(ARGUMENTS(1)) != TYPE(std_types::date_and_time)) RETURN_FALSE
    RETURN_BOOLEAN(
      left->date_and_time.seconds == right->date_and_time.seconds &&
      left->date_and_time.nanoseconds == right->date_and_time.nanoseconds)
  }

METHOD std_types::real/equal
  #
    implements the *equal* operation for real numbers

    Parameters:
      left: a real number
      right: any numeric value

    Result:
      result: true if left and right are numerically equal, false otherwise

    If the *right* argument is an integer then *right* is converted to a real
    value before the comparison.

    Topic: Numbers

    See also: std_types::integer, std_types::real, std::less

    Example:

      dump! `(4.0 == 4.0)

    Output:

      (4.0 == 4.0): <true>

    Example:

      dump! `(4.0 == 4)

    Output:

      (4.0 == 4): <true>
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::real)) {
      RETURN_BOOLEAN(ARGUMENTS(0)->real.value == ARGUMENTS(1)->real.value)
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::positive_integer)) {
      RETURN_BOOLEAN(ARGUMENTS(0)->real.value == ARGUMENTS(1)->integer.value)
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::negative_integer)) {
      RETURN_BOOLEAN(-ARGUMENTS(0)->real.value == ARGUMENTS(1)->integer.value)
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::error)) {
      INVALID_ARGUMENTS
    } else {
      RETURN_FALSE
    }
  }

$std_types::undefined/equal:
  #
    is only equal to itself
  (
    _left
    right
  )
  -> right.is_undefined

POLY std::equal
  #
    compares two objects for equality

    Parameters:
      left # the left operand
      right # the right operand

    Result:
      equal # true if left and right are equal, false otherwise

    Two objects are equal if the equal function says so ... ^^

    Two identical objects should always be equal.

    <std::undefined> should only be equal to itself and to no other object.

    There is no separate function to test non-equality.

    *a* != *b*

    is converted by the compiler to

    <std::not>(<std::equal>(*a* *b*))

    Topic: Objects, Numbers

    See also: std::less

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Do not create completely new examples on your own

### Use only one of the following topics: Objects, Numbers, Collections, Arrays, Lists, Strings, Input-Output

# std::equal (a polymorphic function)

