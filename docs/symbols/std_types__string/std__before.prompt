[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std_types::screen/std::clear:
  (
    self
    x = 1
    y = 1
    width = undefined
    height = undefined
  )
  update_if width.is_undefined &width -> width_of(self)-x+1
  update_if height.is_undefined &height -> height_of(self)-y+1
  std_private::clear self self x y width height

[documentation remark]

# std_types::screen/clear (a method)

  clears the specified rectangular area

  Parameters:
    self: the screen to be (partially) cleared
    x: x-coordinate of the upper left corner
    y: y-coordinate of the upper left corner
    width: width of the area
    height: height of the area

  Result:
    screen: the updated screen

  The specified area is filled with spaces using the the current draw-
  and clear colour.

  The area is clipped at the screen's borders.

  This function also works for "graphical screens" (line_height != 1).

  Topic: Terminal

  See also: std_types::screen/std::set_clear_colour,
            std_types::screen/std::copy

[source]

$std_types::string/match:
  (
    self
    stream
  )
  $rc result_count()
  $len length_of(self)
  if
    length_of(stream) >= len:
      if
        range(stream 1 len) == self:
          if
            rc == 1
            -> len
            -> len undefined
        fail
    fail

  $fail:
    if
      rc == 1
      -> undefined
      -> undefined undefined

[documentation remark]

# std_types::string/std::match (a method)

  matches the start of the stream with the string

  Parameters:
    self: the string to match
    stream: the stream to match against

  Results:
    length: the number of matched characters (or <undefined> on fail)
    capture: the matched string (if requested)

  Attempts to match the start of the stream with the specified string.

  If the match is successful the length of the match (= the length of the
  string) is returned.

  If the caller requested two result values then in addition to the string
  length the string itself ("the capture") is also returned.

  If the match fails then one or two <std::undefined>-values are returned.

  Topic: Strings

  See also: std_types::string/std::match_back, std_types::string/std::search

[source]

$std_types::generic_list/map_or_error:
  (
    self
    function
  )
  if
    self.is_empty
    -> self
    :
      $map
        if
          parameter_count_of(function) == 2
          ->
            : (s e)
              if
                s < e:
                  $m (s+e) >> 1
                  append_or_error
                    map(s m)
                    map(m+1 e)
                :
                  $mapped_item function(s self(s))
                  if
                    mapped_item.is_an_error
                    -> mapped_item
                    -> list(mapped_item)
          ->
            : (s e)
              if
                s < e:
                  $m (s+e) >> 1
                  append_or_error
                    map(s m)
                    map(m+1 e)
                :
                  $mapped_item function(self(s))
                  if
                    mapped_item.is_an_error
                    -> mapped_item
                    -> list(mapped_item)

      map 1 length_of(self)

[documentation remark]

# std_types::generic_list/std::map_or_error (a method)

  applies a function to all elements of the list

  Parameters:

    self: the list which items will be mapped
    function: the function to apply to each element of the list

  Result:
    list: the list of "mapped" items

  A list of the "mapped" items is returned.

  If any item ist mapped to an error object than the result ist not a
  collection but the first (left-to-right-order) error object created.

  Topic: Lists

  See also: std_types::generic_list/std::reduce,
            std_types::generic_list/std::map_reduce

[EXERCISE]

#
  Topic: Strings

  Strings consist of zero or more characters.

  A character is a tagged unsigned 32-bit integer.

  They usually store uni-code code points.

  The subtype <std_types::octet_string> of <std_types::string> is used for
  binary data, often for storing utf8 encoded strings.

  The most efficient string operation is <push> which adds a character to the
  end of the string. Appending two or more strings is also done in an efficient
  way.

  Reading a character at any position is also efficient.

  The most basic string operations are builtin.

  Strings have a lot in common with <std_types::list>.

  Related topics: Lists

[symbols]

$std::to_sentence_case ()
$std::is_a_string ()
$std::to_uint8_array ()
$std_types::object.is_a_string false
$std_types::string.is_a_string true
$std::is_an_octet_string ()
$std_types::object.is_an_octet_string false
$std_types::octet_string.is_an_octet_string true
$std_types::string.neutral_element_of ""
$std_types::string/to_string:
$std::create_string:
$std::string:
$std_types::string/put:
$std_types::string/dup:
$std_types::object/pad_left:
$std_types::object/pad_right:
$std::spaces:
$std::tabs_and_spaces:
$std::with_tabs:
$std_types::string/match:
$std_types::string/match_back:
$std_types::string/matches:
$std_types::string/search:
$std_types::string/before:
$std_types::string/truncate_from:
$std_types::string/behind:
$std_types::string/truncate_until:
$std_types::string/from:
$std_types::string/truncate_before:
$std_types::string/until:
$std_types::string/truncate_behind:
$std_types::string/between:
$std_types::string/has_prefix:
$std_types::string/has_suffix:
$std_types::string/without_prefix:
$std_types::string/without_suffix:
$std_types::string/contains:
$std::split:
$std::join:
$std::trim:
$std::trim_left:
$std::trim_right:
$std::normalize:
$std_types::octet_string/to_base64:
$std_types::octet_string/from_base64:
$std_types::octet_string/sha1:
$std::parse_integer:
$std::parse_number:
$std::parse_hex:
$std_types::string/to_integer:
$std_types::string/to_number:
$std::map_characters:
$std_types::string/to_upper_case:
$std_types::string/to_lower_case:
$std_types::string/to_title_case:
$std_types::string/to_sentence_case:
$std_types::string/to_wide: (str)
$std::delete_all:
$std::replace_all:
$std::replace_first:
$std::count_occurrences:
$std::split_into_lines: (text)
$std::split_into_indented_lines:
$std::subgroups_of (!)
$std::split_into_groups:
$std::wrap_words:
$std_types::string/serialize:
$std_types::octet_string/to_uint8_array:
$std::indented:
$std::format:
$std_types::string.empty_collection_of ""

$std::tabs_and_spaces:
  #
    returns a sequence of tabulator- and space-characters

    Topic: Strings

    See also: spaces
  (
    n # the desired display width
  )
  if
    n < 80
    -> range(nine_tabs_and_seven_spaces 10-(n >> 3) 9+(n & 7))
    -> string(dup("@ht;" n >> 3) spaces(n & 7))

$tabs "@ht;@ht;@ht;@ht;@ht;@ht;@ht;@ht;@ht;"

$std::with_tabs:
  #
    replaces leading spaces with tab-characters

    Replaces sequences of 8 or more leading spaces with the apprpriate number
    of tabulator-characters and the remaining spaces.

    Topic: Strings

    See also: tabs_and_spaces
  (
    text # the text to be processed
  )
  $s 1
  $n length_of(text)
  $i 1
  $output ""
  $count 0
  loop:
    if
      i <= n:
        if
          text(i) == ' ':
            !i i+1
            !count count+1
            next
          :
            if
              count >= 8:
                $tab_count count >> 3
                if
                  tab_count >= 1:
                    append &output range(text s i-(count+1))
                    append &output
                      if
                        tab_count < 10
                        -> range(tabs 1 tab_count)
                        -> dup("@ht;" tab_count)
                    !s (i-count)+(tab_count << 3)
                    skip_line
                  skip_line
              skip_line
      :
        if
          s == 1
          -> text
          -> append(output range(text s -1))

  $skip_line:
    loop
      :
        if
          i <= n && text(i) != '@nl;':
            !i i+1
            next
          break
      :
        !i i+1
        !count 0
        next

$std_types::string/match:
  #
    matches the start of the stream with the string

    Result: the number of matched characters or <undefined> if the match fails

    Attempts to match the start of the stream with the specified string.

    If the match is successful the length of the string is returned.

    Otherwise <undefined> is returned.

    Topic: Strings

    See also: std_types::string/search
  (
    self # the string to match
    stream # the stream to match against
  )
  $rc result_count()
  $len length_of(self)
  if
    length_of(stream) >= len:
      if
        range(stream 1 len) == self:
          if
            rc == 1
            -> len
            -> len undefined
        fail
    fail

  $fail:
    if
      rc == 1
      -> undefined
      -> undefined undefined

$std_types::string/match_back:
  (
    self
    stream
  )
  $len length_of(self)
  if
    length_of(stream) >= len && range(stream -len -1) == self
    -> len
    -> undefined

$std_types::string/matches:
  #
    checks whether the string matches the specified expression

    Topic: Strings

    See also: std_types::string/match
  (
    self # the string to check
    expr # the expression to match
  )
  -> match(expr self) == length_of(self)

$std_types::string/search:
  #
    searches for the start of the string within the stream

    Attempts to find the start of the string within the stream. If the match
    is successful the found position (one based) and the length of the string
    is returned. Otherwise the returned values for the position and the length
    are <undefined>.

    If *nth* is specified then the nth occurence of the string is looked for.
    If there are not at least *n* matches for *expr* within *str* then the
    returned values for the position and the length are <undefined>.

    Topic: Strings

    See also: std_types::string/match
  (
    self # the string to search for
    stream # the stream to search in
    nth = 1 # search for the nth occurrence of *self* instead for the first one
  )
  $i undefined
  $length length_of(self)
  $offset length-1
  $n length_of(stream)-offset
  if
    nth < 0:
      !i n
      search_backwards
    :
      !i 1
      search_forwards

  $search_forwards:
    if
      i <= n
      :
        if
          range(stream i i+offset) == self:
            if
              nth > 1:
                dec &nth
                plus &i length
                search_forwards
              -> i length
          :
            inc &i
            search_forwards
      -> undefined undefined

  $search_backwards:
    if
      i >= 1
      :
        if
          range(stream i i+offset) == self:
            if
              nth < -1:
                inc &nth
                minus &i length
                search_backwards
              -> i length
          :
            dec &i
            search_backwards
      -> undefined undefined

$std_types::string/before:
  #
    returns the substring before the specified expression

    If the specified expression is found within the string the substring
    before the expression is returned. Otherwise the empty string is returned.

    If *nth* is specified then the nth occurence of the expression *expr*
    is looked for. If there are not at least *n* matches for *expr* within *str*
    then the empty string is returned.

    A very similar function is <string/truncate_from>. It behaves differently
    only when the expression is *not* found.

    Topic: Strings

    See also: string/truncate_from, string/behind, string/between, string/until

    Example:

      $identifier "std::before"
      $namespace identifier .before. "::"
      println! namespace

    Output:

      std

    Example:

      $identifier "std::before"
      $first_part identifier .before. '.'
      println! '[' first_part ']'

    Output:

      []
  (
    str # the input string
    expr # the expression to look for
    nth = 1 # look for the nth occurrence of *expr* instead for the first one
  )
  search $pos $_len expr str nth
  if
    pos.is_defined
    -> range(str 1 pos-1)
    -> ""

$std_types::string/truncate_from:
  #
    returns the substring before the specified expression

    If the specified expression is found within the string the substring
    before the expression is returned. Otherwise the string is returned
    unaltered.

    If *nth* is specified then the nth occurence of the expression *expr*
    is looked for. If there are not at least *n* matches for *expr* within *str*
    then the string is returned unaltered.

    A very similar function is <string/before>. It behaves differently only when
    the expression is *not* found.

    Topic: Strings

    See also: string/before, string/behind, string/between, string/until

    Example:

      $identifier "std::truncate_from"
      $namespace identifier .truncate_from. "::"
      println! namespace

    Output:

      std

    Example:

      $identifier "std::truncate_from"
      $first_part identifier .truncate_from. '.'
      println! '[' first_part ']'

    Output:

      [std::truncate_from]
  (
    str # the string to truncate
    expr # the expression to look for
    nth = 1 # look for the nth occurrence of *expr* instead for the first one
  )
  search $pos $_len expr str nth
  if
    pos.is_defined
    -> range(str 1 pos-1)
    -> str

$std_types::string/behind:
  #
    returns the substring after the specified expression

    If the specified expression is found within the string the substring
    after the expression is returned. Otherwise the empty string is returned.

    If *nth* is specified then the nth occurence of the expression *expr*
    is looked for. If there are not at least *n* matches for *expr* within *str*
    then the empty string is returned.

    A very similar function is <string/truncate_until>. It behaves differently
    only when the expression is *not* found.

    Topic: Strings

    See also: string/truncate_until, string/before, string/between, string/until

    Example:

      $identifier "std::behind"
      $name identifier .behind. "::"
      println! name

    Output:

      behind

    Example:

      $identifier "std::behind"
      $last_part identifier .behind. '.'
      println! '[' last_part ']'

    Output:

      []
  (
    str # the input string
    expr # the expression to look for
    nth = 1 # look for the nth occurrence of *expr* instead for the first one
  )
  search $pos $len expr str nth
  if
    pos.is_defined
    -> range(str pos+len -1)
    -> ""

$std_types::string/truncate_until:
  #
    returns the substring behind the specified expression

    If the specified expression is found within the string the substring
    behind the expression is returned. Otherwise the string is returned
    unaltered.

    If *nth* is specified then the nth occurence of the expression *expr*
    is looked for. If there are not at least *n* matches for *expr* within *str*
    then the string is returned unaltered.

    A very similar function is <string/behind>. It behaves differently only when
    the expression is *not* found.

    Topic: Strings

    See also: string/behind, string/before, string/between, string/until

    Example:

      $identifier "std::truncate_until"
      $name identifier .truncate_until. "::"
      println! name

    Output:

      truncate_until

    Example:

      $identifier "std::truncate_until"
      $last_part identifier .truncate_until. '.'
      println! '[' last_part ']'

    Output:

      [std::truncate_until]
  (
    str # the string to truncate
    expr # the expression to look for
    nth = 1 # look for the nth occurrence of *expr* instead for the first one
  )
  search $pos $len expr str nth
  if
    pos.is_defined
    -> range(str pos+len -1)
    -> str

$std_types::string/from:
  #
    returns the substring starting with the specified expression

    If the specified expression is found within the string the substring
    starting with the expression is returned. Otherwise the empty string is
    returned.

    If *nth* is specified then the nth occurence of the expression *expr* is
    looked for. If there are not at least *n* matches for *expr* within *str*
    then the empty string is returned.

    A very similar function is <string/truncate_before>. It behaves differently
    only when the expression is *not* found.

    Topic: Strings

    See also: string/truncate_before, string/between, string/until, string/until

    Example:

      $identifier "std::from"
      $last_part identifier .from. "::"
      println! last_part

    Output:

      ::from

    Example:

      $identifier "std::from"
      $first_part identifier .from. '.'
      println! '[' first_part ']'

    Output:

      []
  (
    str # the input string
    expr # the expression to look for
    nth = 1 # look for the nth occurrence of *expr* instead for the first one
  )
  search $pos $_len expr str nth
  if
    pos.is_defined
    -> range(str pos -1)
    -> ""

$std_types::string/truncate_before:
  #
    returns the substring starting with the specified expression

    If the specified expression is found within the string the substring
    starting with the expression is returned. Otherwise the string is returned
    unaltered.

    If *nth* is specified then the nth occurence of the expression *expr* is
    looked for. If there are not at least *n* matches for *expr* within *str*
    then the string is returned unaltered.

    A very similar function is <string/from>. It behaves differently only when
    the expression is *not* found.

    Topic: Strings

    See also: string/from, string/between, string/until, string/until

    Example:

      $identifier "std::truncate_before"
      $last_part identifier .truncate_before. "::"
      println! last_part

    Output:

      ::truncate_before

    Example:

      $identifier "std::truncate_before"
      $first_part identifier .truncate_before. '.'
      println! '[' first_part ']'

    Output:

      [std::truncate_before]
  (
    str # the string to truncate
    expr # the expression to look for
    nth = 1 # look for the nth occurrence of *expr* instead for the first one
  )
  search $pos $_len expr str nth
  if
    pos.is_defined
    -> range(str pos -1)
    -> str

[source]

$std::before ()
  #
    returns the substring before the specified expression

    If the string specified as the first argument contains the expression
    specified as the second argument, the substring before the first match of
    the expression is returned.

    **If the string does not contain the expression then the empty string is
    returned.**

    An optional third argument can be used to match the *nth* occurence of
    the specified expression. If this value is negative then -1 means the
    last occurrence, -2 means the next-to-last occurence and so on.

    Topic: Strings

    See also: std::truncate_from, std::between, std::behind, std::from, std::until

$std_types::string/before:
  #
    returns the substring before the specified expression

    If the specified expression is found within the string the substring
    before the expression is returned. Otherwise the empty string is returned.

    If *nth* is specified then the nth occurence of the expression *expr*
    is looked for. If there are not at least *n* matches for *expr* within *str*
    then the empty string is returned.

    A very similar function is <string/truncate_from>. It behaves differently
    only when the expression is *not* found.

    Topic: Strings

    See also: string/truncate_from, string/behind, string/between, string/until

    Example:

      $identifier "std::before"
      $namespace identifier .before. "::"
      println! namespace

    Output:

      std

    Example:

      $identifier "std::before"
      $first_part identifier .before. '.'
      println! '[' first_part ']'

    Output:

      []
  (
    str # the input string
    expr # the expression to look for
    nth = 1 # look for the nth occurrence of *expr* instead for the first one
  )
  search $pos $_len expr str nth
  if
    pos.is_defined
    -> range(str 1 pos-1)
    -> ""

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Strings

# std_types::string/std::before (a method)

