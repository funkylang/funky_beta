[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std_types::binary_table/:
  (
    myself^
    key
    value = NONE
  )
  $contents contents_of(myself)
  if
    NONE == value
    -> retrieve(contents key)
    :
      if
        value.is_defined:
          insert &contents $did_insert key value
          if_not
            did_insert
            -> myself(.contents_of contents)
            ->
              myself
                .contents_of contents
                .length_of length_of(myself)+1
        :
          delete &contents $did_delete key
          if_not
            did_delete
            -> myself
            ->
              myself
                .contents_of contents
                .length_of length_of(myself)-1

$std_types::binary_table std_types::table

[documentation remark]

# std_types::binary_table (a type derived from std_types::table)

  the prototype object for all tree-based tables

  Parameters:
    key: the key to use for insertion or retrieval
    value: if supplied the value to associate with the key

  Result:
    value_or_object: the retrieved value for retrievals or the updated object
                     for insertions

  This object is never used directly but cloned to create a new table.

  When called it can act as a function to insert a new key-value-pair into
  the table (2 arguments) or to retrieve the value associated with a key
  (1 argument).

  Topics: Tables, Collections

  See also: std_types::binary_table/std::map,
            std_types::binary_table/std::reduce,
            std_types::binary_table/std::map_reduce

  Example:

    $salaries empty_binary_table
    !salaries("Joe" 2500)
    !salaries("Mary" 3000)
    !salaries("Bob" 2000)
    println! salaries("Mary")

  Output:

    3000

[source]

$ai_types::connection std_types::resource

[documentation remark]

# ai_types::connection (a type derived from std_types::resource)

  the prototype object for connections to AI servers

  This object is never used directly but cloned to create a new connection.

  Topics: AI

  See also: std::register_resource

[EXERCISE]

#
  Topic: Widgets

[symbols]


# Buttons

$std::YES .
$std::NO .
$std::OKAY .
$std::CANCEL .

# Alignment

$std::LEFT .
$std::RIGHT .
$std::CENTER .
$std::TOP .
$std::BOTTOM .
$std::MIDDLE .
$std::dialog_clear_colour_of ()
$std::text_box_clear_colour_of ()
$std::text_box_draw_colour_of ()
$std::push_button_clear_colour_of ()
$std::push_button_draw_colour_of ()
$std::push_button_shortcut_colour_of ()
$std::widget_settings std_types::object
$std::widget_settings.dialog_clear_colour_of VERY_LIGHT_GREY
$std::widget_settings.text_box_clear_colour_of VERY_LIGHT_GREY
$std::widget_settings.text_box_draw_colour_of BLACK
$std::widget_settings.push_button_clear_colour_of DARK_GREEN
$std::widget_settings.push_button_draw_colour_of YELLOW
$std::widget_settings.push_button_shortcut_colour_of CYAN
$std::initialize_rendering: (screen continuation)

# Widgets

$std::text_box:
$std::push_button:

# Widget Groups

$std::horizontal_group:
$std::vertical_group:
$std::table_group:

# Dialogs

$std::yes_no_dialog:
$std::okay_dialog:
$std::okay_cancel_dialog:

#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

<using std>

<using terminal_private>

#
  Topic: Widgets

# Buttons

$std::YES .

$std::NO .

$std::OKAY .

$std::CANCEL .

# Alignment

$std::LEFT .

$std::RIGHT .

$std::CENTER .

$std::TOP .

$std::BOTTOM .

$std::MIDDLE .

$std::dialog_clear_colour_of ()

$std::text_box_clear_colour_of ()

$std::text_box_draw_colour_of ()

$std::push_button_clear_colour_of ()

$std::push_button_draw_colour_of ()

$std::push_button_shortcut_colour_of ()

$std::widget_settings std_types::object

$std::widget_settings.dialog_clear_colour_of VERY_LIGHT_GREY

$std::widget_settings.text_box_clear_colour_of VERY_LIGHT_GREY

$std::widget_settings.text_box_draw_colour_of BLACK

$std::widget_settings.push_button_clear_colour_of DARK_GREEN

$std::widget_settings.push_button_draw_colour_of YELLOW

$std::widget_settings.push_button_shortcut_colour_of CYAN

$template_screen undefined

$std::initialize_rendering: (screen continuation)
  !template_screen screen
  continuation

# Widgets

$std::text_box:
  (
    text
  )
  create_text_screen
    template_screen
      .clear_colour_of text_box_clear_colour_of(widget_settings)
      .draw_colour_of text_box_draw_colour_of(widget_settings)
    text

$std::push_button:
  (
    text_and_key
  )
  text_and_key $text $key
  $shortcut
    case
      key
      OKAY -> RETURN
      CANCEL -> ESCAPE
      -> text(1).to_lower_case
  create_text_screen $screen
    template_screen
      .clear_colour_of push_button_clear_colour_of(widget_settings)
      .draw_colour_of push_button_draw_colour_of(widget_settings)
    append(" " text " ")
    tuple(shortcut key)
  if
    shortcut.is_a_character:
      set_draw_colour &screen push_button_shortcut_colour_of(widget_settings)
      draw_character screen 2 1 text(1)
    -> screen

# Widget Groups

$std::horizontal_group:
  (
    widgets*
  )
  extract_options &widgets
    TOP = false $_do_align_top
    BOTTOM = false $do_align_bottom
    MIDDLE = false $do_align_middle
  $n length_of(widgets)
  $width map_reduce(widgets width_of plus)+2*(n-1)
  $height map_reduce(widgets height_of max)
  create_screen $group
    template_screen(.clear_colour_of dialog_clear_colour_of(widget_settings))
    width height
  $x 1
  $rectangles empty_list
  for_each widgets
    : (widget)
      $y
        if
          do_align_bottom
          -> height-height_of(widget)+1
          :
            if
              do_align_middle
              -> (height-height_of(widget) .div. 2)+1
              -> 1
      $more_rectangles rectangles_of(widget)
      update_if more_rectangles.is_defined &rectangles:
        more_rectangles $kind $info $rx $ry $rw $rh
        if
          kind == HORIZONTAL:
            append rectangles map(info add_delta)
          :
            push rectangles tuple(kind info x+rx-1 y+ry-1 rw rh)
      copy &group widget x y
      plus &x width_of(widget)+2
      next

      $add_delta: (item)
        item $kind $info $rx $ry $rw $rh
        -> tuple(kind info x+rx-1 ry rw rh)
    ->
      group
        .rectangles_of
          if
            rectangles.is_empty
            -> undefined
            :
              if
                length_of(rectangles) == 1
                -> rectangles(1)
                -> tuple(HORIZONTAL rectangles 1 1 width height)

$std::vertical_group:
  (
    widgets*
  )
  extract_options &widgets
    LEFT = false $_do_align_left
    RIGHT = false $do_align_right
    CENTER = false $do_align_center
  $row_count length_of(widgets)
  $width map_reduce(widgets width_of max)
  $height map_reduce(widgets height_of plus)+row_count-1
  create_screen $group
    template_screen(.clear_colour_of dialog_clear_colour_of(widget_settings))
    width height
  $y 1
  $rectangles empty_list
  for_each widgets
    : (widget)
      $x
        if
          do_align_right
          -> width-width_of(widget)+1
          :
            if
              do_align_center
              -> (width-width_of(widget) .div. 2)+1
              -> 1
      $more_rectangles rectangles_of(widget)
      update_if more_rectangles.is_defined &rectangles:
        more_rectangles $kind $info $rx $ry $rw $rh
        if
          kind == VERTICAL:
            append rectangles map(info add_delta)
          :
            push rectangles tuple(kind info x+rx-1 y+ry-1 rw rh)
      copy &group widget x y
      plus &y height_of(widget)+1
      next

      $add_delta: (item)
        item $kind $info $rx $ry $rw $rh
        -> tuple(kind info rx y+ry-1 rw rh)
    ->
      group
        .rectangles_of
          if
            rectangles.is_empty
            -> undefined
            :
              if
                length_of(rectangles) == 1
                -> rectangles(1)
                -> tuple(VERTICAL rectangles 1 1 width height)

$std::table_group:
  (
    rows*
  )
  $row_count length_of(rows)
  $column_count map_reduce(rows length_of max)
  $column_widths dup(list(0) column_count)
  for_each rows
    : (row)
      for_each row
        : (idx cell)
          max &column_widths(idx) width_of(cell)
          next
        next
    :
      $row_heights dup(list(0) row_count)
      for_each rows
        : (idx row)
          max &row_heights(idx) map_reduce(row height_of max)
          next
        :

          $width reduce(column_widths plus)+column_count-1
          $height reduce(row_heights plus)+row_count-1
          create_screen $group
            template_screen(.clear_colour_of dialog_clear_colour_of(widget_settings))
            width height
          $rectangles empty_list
          $y 1
          for_each rows
            : (row_no row)
              $row_rectangles empty_list
              $x 1
              for_each row
                : (column_no cell)
                  $more_rectangles rectangles_of(cell)
                  update_if more_rectangles.is_defined &row_rectangles:
                    more_rectangles $kind $info $rx $ry $rw $rh
                    if
                      kind == HORIZONTAL:
                        append row_rectangles map(info add_delta)
                      :
                        push row_rectangles tuple(kind info x+rx-1 y+ry-1 rw rh)
                  copy &group cell x y
                  plus &x column_widths(column_no)+1
                  next

                  $add_delta: (item)
                    item $kind $info $rx $ry $rw $rh
                    -> tuple(kind info x+rx-1 ry rw rh)
                :
                  update_if row_rectangles.is_defined &rectangles:
                    if
                      row_rectangles.is_empty
                      -> rectangles
                      :
                        if
                          length_of(row_rectangles) > 1:
                            push rectangles
                              tuple
                                HORIZONTAL
                                row_rectangles x 1
                                width_of(group) row_heights(row_no)
                          :
                            push rectangles row_rectangles(1)
                  plus &y row_heights(row_no)+1
                  next
            ->
              group
                .rectangles_of
                  if
                    rectangles.is_empty
                    -> undefined
                    :
                      if
                        length_of(rectangles) == 1
                        -> rectangles(1)
                        -> tuple(VERTICAL rectangles 1 1 width height)

# Dialogs

$std::yes_no_dialog:
  (
    wm
    info
    question
  )
  create_dialog wm info
    vertical_group
      CENTER
      text_box(question)
      horizontal_group
        push_button
          "Yes" = YES
        push_button
          "No" = NO

$std::okay_dialog:
  (
    wm
    info
    message
  )
  create_dialog wm info
    vertical_group
      CENTER
      text_box(message)
      push_button
        "Ok" = OKAY

$std::okay_cancel_dialog:
  (
    wm
    info
    message
  )
  create_dialog wm info
    vertical_group
      CENTER
      text_box(message)
      horizontal_group
        push_button
          "Ok" = OKAY
        push_button
          "Cancel" = CANCEL

[source]

$std::widget_settings std_types::object

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use (parts of) the documentation already provided in the source

### Do not create completely new examples on your own

### Use only one of the following topics: Widgets

# std::widget_settings (a type)

