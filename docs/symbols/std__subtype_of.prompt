[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

POLY std::plus

[documentation remark]

# std::plus (a polymorphic function)

  adds two numbers of any kind

  Parameters:
    left: the left operand
    right: the right operand

  Result:
    sum: the sum of the two operands

  Topic: Numbers

  See also: std::minus, std::times, std::over, std::div, std::mod

[EXERCISE]

[symbols]

TYPE std_types::polymorphic_function -> std_types::object
TYPE std_types::polymorphic_function_with_setter -> std_types::polymorphic_function
METHOD std_types::polymorphic_function/_type
METHOD std_types::polymorphic_function_with_setter/_type
FUNCTION NODE *create_polymorphic_function
FUNCTION NODE *create_polymorphic_function_with_setter
POLY std::subtype_of

#
  Copyright (C) 2021 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Topic: Functions

TYPE std_types::polymorphic_function -> std_types::object
  #
    the prototype object for all polymorphic functions

TYPE std_types::polymorphic_function_with_setter -> std_types::polymorphic_function
  #
    the prototype object for all polymorphic functions with a setter

METHOD std_types::polymorphic_function/_type
  {
    RUNTIME_ERROR(
      "Attempt to call the polymorphic-function protoype object!")
  }

METHOD std_types::polymorphic_function_with_setter/_type
  {
    RUNTIME_ERROR(
      "Attempt to call the polymorphic-function-with-setter protoype object!")
  }

FUNCTION NODE *create_polymorphic_function
  (
    int poly_idx
  )
  {
    NODE *node = allocate(sizeof(SIMPLE_NODE));
    node->type =
      (FUNC)(unsigned long)
      (POLYMORPHIC_FUNCTION_TAG|(poly_idx << 3));
    node->attributes =
      std_types::polymorphic_function.attributes;
    return node;
  }

FUNCTION NODE *create_polymorphic_function_with_setter
  (
    int poly_idx
  )
  {
    NODE *node = allocate(sizeof(SIMPLE_NODE));
    node->type =
      (FUNC)(unsigned long)
      (POLYMORPHIC_FUNCTION_WITH_SETTER_TAG|(poly_idx << 3));
    node->attributes =
      std_types::polymorphic_function_with_setter.attributes;
    return node;
  }

POLY std::subtype_of
  #
    used to define the subtypes of tuples and lists

    Topic: Collections

    See also: std_types::tuple, std_types::list

[source]

$std_types::sequence.subtype_of "sequence"
  #
    the list subtype for sequences

$std_types::key_value_pair.subtype_of "key_value_pair"

$std_types::value_range.subtype_of "value_range"

POLY std::subtype_of
  #
    used to define the subtypes of tuples and lists

    Topic: Collections

    See also: std_types::tuple, std_types::list

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Do not create completely new examples on your own

### Use only one of the following topics: Functions

# std::subtype_of (a polymorphic function)

