[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std::clear_colour_of ()

[documentation remark]

# std::clear_colour_of (a polymorphic function)

  the clear colour to use

  Parameter:
    self: the object from which to get the clear colour

  Result:
    colour: the clear colour

  Returns the clear colour of the object.

  Topic: Terminal

  See also: std::draw_colour_of, std::set_clear_colour

[source]

$std_types::screen/clear:
  (
    self
    x = 1
    y = 1
    width = undefined
    height = undefined
  )
  update_if width.is_undefined &width -> width_of(self)-x+1
  update_if height.is_undefined &height -> height_of(self)-y+1
  std_private::clear self self x y width height

$std::clear ()

[documentation remark]

# std::clear (a polymorphic function)

  clears a rectangular area

  Parameters:
    screen # some kind of screen
    x: x-coordinate of the upper left corner
    y: y-coordinate of the upper left corner
    width: width of the area
    height: height of the area

  Result:
    screen: the updated screen

  The area is cleared using the current clear colour. Use
  <std::set_clear_colour> to change the current clear colour.

  The area is clipped at the screen's borders.

  Topic: Terminal

  See also: std_types::screen/std::clear, std::draw_text,
            std::set_clear_colour

  Example:

    $my_screen create_screen(terminal 40 25)
    set_clear_colour &my_screen GREEN
    clear &my_screen 11 6 20 15

[EXERCISE]

#
  Topic: Strings

  Strings consist of zero or more characters.

  A character is a tagged unsigned 32-bit integer.

  They usually store uni-code code points.

  The subtype <std_types::octet_string> of <std_types::string> is used for
  binary data, often for storing utf8 encoded strings.

  The most efficient string operation is <push> which adds a character to the
  end of the string. Appending two or more strings is also done in an efficient
  way.

  Reading a character at any position is also efficient.

  The most basic string operations are builtin.

  Strings have a lot in common with <std_types::list>.

  Related topics: Lists

[symbols]

$std::to_sentence_case ()
$std::is_a_string ()
$std::to_uint8_array ()
$std_types::object.is_a_string false
$std_types::string.is_a_string true
$std::is_an_octet_string ()
$std_types::object.is_an_octet_string false
$std_types::octet_string.is_an_octet_string true
$std_types::string.neutral_element_of ""
$std_types::string/to_string:
$std::create_string:
$std::string:
$std_types::string/put:
$std_types::string/dup:
$std_types::object/pad_left:
$std_types::object/pad_right:
$std::spaces:
$std::tabs_and_spaces:
$std::with_tabs:
$std_types::string/match:
$std_types::string/match_back:
$std_types::string/matches:
$std_types::string/search:
$std_types::string/before:
$std_types::string/truncate_from:
$std_types::string/behind:
$std_types::string/truncate_until:
$std_types::string/from:
$std_types::string/truncate_before:
$std_types::string/until:
$std_types::string/truncate_behind:
$std_types::string/between:
$std_types::string/has_prefix:
$std_types::string/has_suffix:
$std_types::string/without_prefix:
$std_types::string/without_suffix:
$std_types::string/contains:
$std::split:
$std::join:
$std::trim:
$std::trim_left:
$std::trim_right:
$std::normalize:
$std_types::octet_string/to_base64:
$std_types::octet_string/from_base64:
$std_types::octet_string/sha1:
$std::parse_integer:
$std::parse_number:
$std::parse_hex:
$std_types::string/to_integer:
$std_types::string/to_number:
$std::map_characters:
$std_types::string/to_upper_case:
$std_types::string/to_lower_case:
$std_types::string/to_title_case:
$std_types::string/to_sentence_case:
$std_types::string/to_wide: (str)
$std::delete_all:
$std::replace_all:
$std::replace_first:
$std::count_occurrences:
$std::split_into_lines: (text)
$std::split_into_indented_lines:
$std::subgroups_of (!)
$std::split_into_groups:
$std::wrap_words:
$std_types::string/serialize:
$std_types::octet_string/to_uint8_array:
$std::indented:
$std::format:
$std_types::string.empty_collection_of ""

#
  Copyright (C) 2023 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

<allow unused>

#
  Topic: Strings

  Strings consist of zero or more characters.

  A character is a tagged unsigned 32-bit integer.

  They usually store uni-code code points.

  The subtype <std_types::octet_string> of <std_types::string> is used for
  binary data, often for storing utf8 encoded strings.

  The most efficient string operation is <push> which adds a character to the
  end of the string. Appending two or more strings is also done in an efficient
  way.

  Reading a character at any position is also efficient.

  The most basic string operations are builtin.

  Strings have a lot in common with <std_types::list>.

  Related topics: Lists

$std::to_sentence_case ()
  #
    converts a string to "Sentence case"

    Parameter:
      string # the string to convert

    Result:
      string # the converted string

    Topic: Strings

    See also: to_lower_case, to_upper_case

    Example:

      $str "this is a test."
      println! str.to_sentence_case

    Output:

      This is a test.

$std::is_a_string ()
  #
    tests if an object is a string

    Topic: Strings

$std::to_uint8_array ()
  #
    converts a string to an array of unsigned 8-bit integers

    Topic: Strings

$std_types::object.is_a_string false
  #
    by default, objects are not strings

    Topic: Objects, Strings

$std_types::string.is_a_string true
  #
    strings are strings

    Topic: Strings

$std::is_an_octet_string ()
  #
    tests if an object is an octet string

    Topic: Strings

$std_types::object.is_an_octet_string false
  #
    by default, objects are not octet strings

    Topic: Objects, Strings

$std_types::octet_string.is_an_octet_string true
  #
    octet strings are octet strings

    Topic: Strings

$std_types::string.neutral_element_of ""

$std_types::string/to_string:
  #
    returns its argument unaltered

    Topic: Strings

    See also: string
  (
    self # the string
  )
  -> self

$std::create_string:
  #
    returns the concatenation of all of the list's items converted to strings

    Topic: Strings

    See also: string

    Example:

      $arguments list(7 " x " 7 " = " 7*7 '@nl;')
      print! create_string(arguments)

    Output:

      7 x 7 = 49
  (
    arguments # a list of printable items
  )
  if
    arguments.is_empty
    -> ""
    : map_reduce arguments to_string append

$std::string:
  #
    returns the concatenation of all its arguments converted to strings

    Topic: Strings

    See also: create_string, to_string

    Example:

      $str string(7 " x " 7 " = " 7*7 '@nl;')
  (
    args*
  )
  create_string args

$std_types::string/put:
  #
    adds a character at the front of the string

    Topic: Strings

    See also: std_types::string/push, std_types::string/append

    Example:

      $str " big surprise"
      put &str 'a'
  (
    self # the string
    chr # the character to add
  )
  -> append(chr.to_string self)

$std_types::string/dup:
  #
    creates a string containing n copies of the specified string

    The function aims to duplicate the specified string in a smart way.

    Topic: Strings

    See also: spaces, tabs_and_spaces

    Example:

      $str "abc"
      $str_x_3 dup(str 3)
      println! str_x_3

    Output:

      abcabcabc
  (
    self # the string to duplicate
    n # the duplication count
  )
  case n
    0 -> ""
    1 -> self
    :
      $h n >> 1 # fails if <n> is not a positive integer
      $str dup(self h)
      if
        2*h == n:
          string str str
        :
          string str str self

$std_types::object/pad_left:
  #
    extends a string to the specified width

    This function creates a string representation of *expr* which is at least
    *n* characters long. If it would be shorter than it is padded to the left
    with the string pattern stored in *pad*.

    The default value for *pad* is a single space.

    Topic: Strings

    See also: pad_right

    Example:

      $str "123"
      $padded_str pad_left(str 5 "0")
      println! padded_str

    Output:

      00123
  (
    expr # the expression that is converted into a string
    n # the length of the resulting string
    pad = " " # the pattern used to fill up the string
  )
  $text expr.to_string
  $len length_of(text)
  if
    len < n:
      $pad_len length_of(pad)
      string range(dup(pad (n-len)+(pad_len-1) .div. pad_len) 1 n-len) text
    -> text

$std_types::object/pad_right:
  #
    extends a string to the specified width

    This function creates a string representation of *expr* which is at least
    *n* characters long. If it would be shorter than it is padded to the right
    with the string pattern stored in *pad*.

    The default value for *pad* is a single space.

    Topic: Strings

    See also: pad_left

    Example:

      $str "computer"
      $padded_str pad_right(str 10 '_')
      println! padded_str

    Output:

      computer__
  (
    expr # the expression that is converted into a string
    n # the length of the resulting string
    pad = " " # the pattern used to fill up the string
  )
  $text expr.to_string
  $len length_of(text)
  if
    len < n:
      $pad_len length_of(pad)
      string text range(dup(pad (n-len)+(pad_len-1) .div. pad_len) 1 n-len)
    -> text

$eighty_spaces "
  @;                                        @
  @;                                        @

$std::spaces:
  #
    returns the specified number of spaces

    Topic: Strings

    See also: tabs_and_spaces
  (
    n # the desired number of spaces
  )
  if
    n <= 80
    -> range(eighty_spaces 1 n)
    -> dup(" " n)

$nine_tabs_and_seven_spaces "@ht;@ht;@ht;@ht;@ht;@ht;@ht;@ht;@ht;       "

$std::tabs_and_spaces:
  #
    returns a sequence of tabulator- and space-characters

    Topic: Strings

    See also: spaces
  (
    n # the desired display width
  )
  if
    n < 80
    -> range(nine_tabs_and_seven_spaces 10-(n >> 3) 9+(n & 7))
    -> string(dup("@ht;" n >> 3) spaces(n & 7))

$tabs "@ht;@ht;@ht;@ht;@ht;@ht;@ht;@ht;@ht;"

$std::with_tabs:
  #
    replaces leading spaces with tab-characters

    Replaces sequences of 8 or more leading spaces with the apprpriate number
    of tabulator-characters and the remaining spaces.

    Topic: Strings

    See also: tabs_and_spaces
  (
    text # the text to be processed
  )
  $s 1
  $n length_of(text)
  $i 1
  $output ""
  $count 0
  loop:
    if
      i <= n:
        if
          text(i) == ' ':
            !i i+1
            !count count+1
            next
          :
            if
              count >= 8:
                $tab_count count >> 3
                if
                  tab_count >= 1:
                    append &output range(text s i-(count+1))
                    append &output
                      if
                        tab_count < 10
                        -> range(tabs 1 tab_count)
                        -> dup("@ht;" tab_count)
                    !s (i-count)+(tab_count << 3)
                    skip_line
                  skip_line
              skip_line
      :
        if
          s == 1
          -> text
          -> append(output range(text s -1))

  $skip_line:
    loop
      :
        if
          i <= n && text(i) != '@nl;':
            !i i+1
            next
          break
      :
        !i i+1
        !count 0
        next

$std_types::string/match:
  #
    matches the start of the stream with the string

    Result: the number of matched characters or <undefined> if the match fails

    Attempts to match the start of the stream with the specified string.

    If the match is successful the length of the string is returned.

    Otherwise <undefined> is returned.

    Topic: Strings

    See also: std_types::string/search
  (
    self # the string to match
    stream # the stream to match against
  )
  $rc result_count()
  $len length_of(self)
  if
    length_of(stream) >= len:
      if
        range(stream 1 len) == self:
          if
            rc == 1
            -> len
            -> len undefined
        fail
    fail

  $fail:
    if
      rc == 1
      -> undefined
      -> undefined undefined

$std_types::string/match_back:
  (
    self
    stream
  )
  $len length_of(self)
  if
    length_of(stream) >= len && range(stream -len -1) == self
    -> len
    -> undefined

$std_types::string/matches:
  #
    checks whether the string matches the specified expression

    Topic: Strings

    See also: std_types::string/match
  (
    self # the string to check
    expr # the expression to match
  )
  -> match(expr self) == length_of(self)

$std_types::string/search:
  #
    searches for the start of the string within the stream

    Attempts to find the start of the string within the stream. If the match
    is successful the found position (one based) and the length of the string
    is returned. Otherwise the returned values for the position and the length
    are <undefined>.

    If *nth* is specified then the nth occurence of the string is looked for.
    If there are not at least *n* matches for *expr* within *str* then the
    returned values for the position and the length are <undefined>.

    Topic: Strings

    See also: std_types::string/match
  (
    self # the string to search for
    stream # the stream to search in
    nth = 1 # search for the nth occurrence of *self* instead for the first one
  )
  $i undefined
  $length length_of(self)
  $offset length-1
  $n length_of(stream)-offset
  if
    nth < 0:
      !i n
      search_backwards
    :
      !i 1
      search_forwards

  $search_forwards:
    if
      i <= n
      :
        if
          range(stream i i+offset) == self:
            if
              nth > 1:
                dec &nth
                plus &i length
                search_forwards
              -> i length
          :
            inc &i
            search_forwards
      -> undefined undefined

  $search_backwards:
    if
      i >= 1
      :
        if
          range(stream i i+offset) == self:
            if
              nth < -1:
                inc &nth
                minus &i length
                search_backwards
              -> i length
          :
            dec &i
            search_backwards
      -> undefined undefined

$std_types::string/before:
  #
    returns the substring before the specified expression

    If the specified expression is found within the string the substring
    before the expression is returned. Otherwise the empty string is returned.

    If *nth* is specified then the nth occurence of the expression *expr*
    is looked for. If there are not at least *n* matches for *expr* within *str*
    then the empty string is returned.

    A very similar function is <string/truncate_from>. It behaves differently
    only when the expression is *not* found.

    Topic: Strings

    See also: string/truncate_from, string/behind, string/between, string/until

    Example:

      $identifier "std::before"
      $namespace identifier .before. "::"
      println! namespace

    Output:

      std

    Example:

      $identifier "std::before"
      $first_part identifier .before. '.'
      println! '[' first_part ']'

    Output:

      []
  (
    str # the input string
    expr # the expression to look for
    nth = 1 # look for the nth occurrence of *expr* instead for the first one
  )
  search $pos $_len expr str nth
  if
    pos.is_defined
    -> range(str 1 pos-1)
    -> ""

$std_types::string/truncate_from:
  #
    returns the substring before the specified expression

    If the specified expression is found within the string the substring
    before the expression is returned. Otherwise the string is returned
    unaltered.

    If *nth* is specified then the nth occurence of the expression *expr*
    is looked for. If there are not at least *n* matches for *expr* within *str*
    then the string is returned unaltered.

    A very similar function is <string/before>. It behaves differently only when
    the expression is *not* found.

    Topic: Strings

    See also: string/before, string/behind, string/between, string/until

    Example:

      $identifier "std::truncate_from"
      $namespace identifier .truncate_from. "::"
      println! namespace

    Output:

      std

    Example:

      $identifier "std::truncate_from"
      $first_part identifier .truncate_from. '.'
      println! '[' first_part ']'

    Output:

      [std::truncate_from]
  (
    str # the string to truncate
    expr # the expression to look for
    nth = 1 # look for the nth occurrence of *expr* instead for the first one
  )
  search $pos $_len expr str nth
  if
    pos.is_defined
    -> range(str 1 pos-1)
    -> str

$std_types::string/behind:
  #
    returns the substring after the specified expression

    If the specified expression is found within the string the substring
    after the expression is returned. Otherwise the empty string is returned.

    If *nth* is specified then the nth occurence of the expression *expr*
    is looked for. If there are not at least *n* matches for *expr* within *str*
    then the empty string is returned.

    A very similar function is <string/truncate_until>. It behaves differently
    only when the expression is *not* found.

    Topic: Strings

    See also: string/truncate_until, string/before, string/between, string/until

    Example:

      $identifier "std::behind"
      $name identifier .behind. "::"
      println! name

    Output:

      behind

    Example:

      $identifier "std::behind"
      $last_part identifier .behind. '.'
      println! '[' last_part ']'

    Output:

      []
  (
    str # the input string
    expr # the expression to look for
    nth = 1 # look for the nth occurrence of *expr* instead for the first one
  )
  search $pos $len expr str nth
  if
    pos.is_defined
    -> range(str pos+len -1)
    -> ""

$std_types::string/truncate_until:
  #
    returns the substring behind the specified expression

    If the specified expression is found within the string the substring
    behind the expression is returned. Otherwise the string is returned
    unaltered.

    If *nth* is specified then the nth occurence of the expression *expr*
    is looked for. If there are not at least *n* matches for *expr* within *str*
    then the string is returned unaltered.

    A very similar function is <string/behind>. It behaves differently only when
    the expression is *not* found.

    Topic: Strings

    See also: string/behind, string/before, string/between, string/until

    Example:

      $identifier "std::truncate_until"
      $name identifier .truncate_until. "::"
      println! name

    Output:

      truncate_until

    Example:

      $identifier "std::truncate_until"
      $last_part identifier .truncate_until. '.'
      println! '[' last_part ']'

    Output:

      [std::truncate_until]
  (
    str # the string to truncate
    expr # the expression to look for
    nth = 1 # look for the nth occurrence of *expr* instead for the first one
  )
  search $pos $len expr str nth
  if
    pos.is_defined
    -> range(str pos+len -1)
    -> str

[source]

$std_types::octet_string/to_uint8_array:
  #
    converts a string to an array of unsigned 8-bit integers

    Topic: Strings

    See also: to_string

    Example:

      $str "Hello World"
      $arr to_uint8_array(str)
      dump! 2 `arr
  (
    self
  )
  $arr uint8_array(length_of(self))
  for_each self
    : (idx chr)
      !arr(idx) chr.to_integer
      next
    -> arr

$std::to_uint8_array ()
  #
    converts a string to an array of unsigned 8-bit integers

    Topic: Strings

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Do not create completely new examples on your own

### Use only one of the following topics: Strings

# std::to_uint8_array (a polymorphic function)

