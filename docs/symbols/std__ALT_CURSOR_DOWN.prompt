[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[symbols]

$std::CURSOR_LEFT .
$std::CURSOR_RIGHT .
$std::CURSOR_UP .
$std::CURSOR_DOWN .
$std::CURSOR_HOME .
$std::CURSOR_END .

$std::DRAW_COLOUR .

$std::BLACK '@0x000000;'
$std::WHITE '@0xffffff;'
$std::RED '@0xff0000;'
$std::GREEN '@0x00ff00;'
$std::BLUE '@0x0000ff;'
$std::CYAN '@0x00ffff;'
$std::MAGENTA '@0xff00ff;'
$std::YELLOW '@0xffff00;'

$std::set_draw_colour ()
$std::set_clear_colour ()

$std_types::screen/create_screen:
  (
    screen
    width = undefined
    height = undefined
    options*
  )
  update_if width.is_undefined &width -> width_of(screen)
  update_if height.is_undefined &height -> height_of(screen)
  extract_options options
    DRAW_COLOUR = draw_colour_of(screen) $draw_colour
    CLEAR_COLOUR = clear_colour_of(screen) $clear_colour
    LINE_HEIGHT = line_height_of(screen) $line_height
  $row dup(string(' ' draw_colour clear_colour) width)
  $rows dup(list(row) height .div. line_height)
  ->
    std_types::screen
      .width_of width
      .height_of height
      .draw_colour_of draw_colour
      .clear_colour_of clear_colour
      .line_height_of line_height
      .rows_of rows

[source]

$std::RED '0xff0000;'

[documentation remark]

# std::RED (a literal)

  the colour red as used by the terminal library

  Topic: Colours

  Colour literals are used to set the draw or clear colour.

  See also: std::set_draw_colour, std::set_clear_colour

[source]

$std::CURSOR_LEFT .
  #
    Example:

      $x ...
      get_key! $key
      case key
        CURSOR_LEFT:
          dec &x
          next!
        ...

[documentation remark]

# std::CURSOR_HOME (a unique item)

  the cursor home key

  Topic: Terminal

  See also: std::CURSOR_END

  Example:

    $x ...
    get_key! $key
    case key
      CURSOR_HOME:
        dec &x
        next!
      ...

[source]

$std:DRAW_COLOUR .

[documentation remark]

# std::DRAW_COLOUR (a unique item)

  used to specifiy a draw colour

  Topic: Terminal

  See also: std_types::create/screen

[EXERCISE]

[symbols]


# Topic: Terminals

$std::name_to_key undefined
$std::key_to_name undefined
$std::NEW_WINDOW_SIZE .
$std::initialize_terminal_keys: (body)
$std::get_key:
$std::extract_keys:
$std::ESCAPE .
$std::RETURN .
$std::CURSOR_LEFT .
$std::CURSOR_RIGHT .
$std::CURSOR_UP .
$std::CURSOR_DOWN .
$std::HOME .
$std::END .
$std::PAGE_UP .
$std::PAGE_DOWN .
$std::INSERT .
$std::DELETE .
$std::F1 .
$std::F2 .
$std::F3 .
$std::F4 .
$std::F5 .
$std::F6 .
$std::F7 .
$std::F8 .
$std::F9 .
$std::F10 .
$std::F11 .
$std::F12 .
$std::SHIFT_TABULATOR .
$std::SHIFT_CURSOR_LEFT .
$std::SHIFT_CURSOR_RIGHT .
$std::SHIFT_CURSOR_UP .
$std::SHIFT_CURSOR_DOWN .
$std::SHIFT_HOME .
$std::SHIFT_END .
$std::SHIFT_PAGE_UP .
$std::SHIFT_PAGE_DOWN .
$std::SHIFT_INSERT .
$std::SHIFT_DELETE .
$std::SHIFT_F1 .
$std::SHIFT_F2 .
$std::SHIFT_F3 .
$std::SHIFT_F4 .
$std::SHIFT_F5 .
$std::SHIFT_F6 .
$std::SHIFT_F7 .
$std::SHIFT_F8 .
$std::SHIFT_F9 .
$std::SHIFT_F10 .
$std::SHIFT_F11 .
$std::SHIFT_F12 .
$std::ALT_SPACE .
$std::ALT_BACKSPACE .
$std::ALT_RETURN .
$std::ALT_CURSOR_LEFT .
$std::ALT_CURSOR_RIGHT .
$std::ALT_CURSOR_UP .
$std::ALT_CURSOR_DOWN .
$std::ALT_HOME .
$std::ALT_END .
$std::ALT_PAGE_UP .
$std::ALT_PAGE_DOWN .
$std::ALT_INSERT .
$std::ALT_DELETE .
$std::ALT_A .
$std::ALT_B .
$std::ALT_C .
$std::ALT_D .
$std::ALT_E .
$std::ALT_F .
$std::ALT_G .
$std::ALT_H .
$std::ALT_I .
$std::ALT_J .
$std::ALT_K .
$std::ALT_L .
$std::ALT_M .
$std::ALT_N .
$std::ALT_O .
$std::ALT_P .
$std::ALT_Q .
$std::ALT_R .
$std::ALT_S .
$std::ALT_T .
$std::ALT_U .
$std::ALT_V .
$std::ALT_W .
$std::ALT_X .
$std::ALT_Y .
$std::ALT_Z .
$std::ALT_F1 .
$std::ALT_F2 .
$std::ALT_F3 .
$std::ALT_F4 .
$std::ALT_F5 .
$std::ALT_F6 .
$std::ALT_F7 .
$std::ALT_F8 .
$std::ALT_F9 .
$std::ALT_F10 .
$std::ALT_F11 .
$std::ALT_F12 .
$std::CTRL_CURSOR_LEFT .
$std::CTRL_CURSOR_RIGHT .
$std::CTRL_CURSOR_UP .
$std::CTRL_CURSOR_DOWN .
$std::CTRL_HOME .
$std::CTRL_END .
$std::CTRL_PAGE_UP .
$std::CTRL_PAGE_DOWN .
$std::CTRL_BACKSPACE .
$std::CTRL_INSERT .
$std::CTRL_DELETE .
$std::CTRL_F1 .
$std::CTRL_F2 .
$std::CTRL_F3 .
$std::CTRL_F4 .
$std::CTRL_F5 .
$std::CTRL_F6 .
$std::CTRL_F7 .
$std::CTRL_F8 .
$std::CTRL_F9 .
$std::CTRL_F10 .
$std::CTRL_F11 .
$std::CTRL_F12 .
$std::CTRL_ALT_A .
$std::CTRL_ALT_B .
$std::CTRL_ALT_C .
$std::CTRL_ALT_D .
$std::CTRL_ALT_E .
$std::CTRL_ALT_F .
$std::CTRL_ALT_G .
$std::CTRL_ALT_H .
$std::CTRL_ALT_I .
$std::CTRL_ALT_J .
$std::CTRL_ALT_K .
$std::CTRL_ALT_L .
$std::CTRL_ALT_M .
$std::CTRL_ALT_N .
$std::CTRL_ALT_O .
$std::CTRL_ALT_P .
$std::CTRL_ALT_Q .
$std::CTRL_ALT_R .
$std::CTRL_ALT_S .
$std::CTRL_ALT_T .
$std::CTRL_ALT_U .
$std::CTRL_ALT_V .
$std::CTRL_ALT_W .
$std::CTRL_ALT_X .
$std::CTRL_ALT_Y .
$std::CTRL_ALT_Z .
$std::CTRL_ALT_HOME .
$std::CTRL_ALT_END .
$std::CTRL_SPACE .
$std::CTRL_A .
$std::CTRL_B .
$std::CTRL_C .
$std::CTRL_D .
$std::CTRL_E .
$std::CTRL_F .
$std::CTRL_G .
$std::BACKSPACE .
$std::TABULATOR .
$std::CTRL_J .
$std::CTRL_K .
$std::CTRL_L .
$std::CTRL_M .
$std::CTRL_N .
$std::CTRL_O .
$std::CTRL_P .
$std::CTRL_Q .
$std::CTRL_R .
$std::CTRL_S .
$std::CTRL_T .
$std::CTRL_U .
$std::CTRL_V .
$std::CTRL_W .
$std::CTRL_X .
$std::CTRL_Y .
$std::CTRL_Z .
$std::SHIFT_CTRL_CURSOR_LEFT .
$std::SHIFT_CTRL_CURSOR_RIGHT .
$std::SHIFT_CTRL_CURSOR_UP .
$std::SHIFT_CTRL_CURSOR_DOWN .
$std::SHIFT_CTRL_HOME .
$std::SHIFT_CTRL_END .
$std::SHIFT_CTRL_PAGE_UP .
$std::SHIFT_CTRL_PAGE_DOWN .

$std::get_key:
  #
    wait for a keyboard input event or until the timeout expires

    See also: get_events
  (
    timeout = undefined # in seconds - a decimal number
  )
  $io std_types::io
  start_reading_from &io STDIN_FILENO
  if !io
    timeout.is_defined:
      current_time! $t
      set_timeout io t+timeout
    -> io
  get_events! &io $events
  if
    events.is_empty
    -> undefined
    :
      $event events(1)
      event $_type $_fd $input
      from_utf8 &input
      $keys extract_keys(input)
      -> keys(1)

$std::extract_keys:
  #
    converts an input character stream into a list of keys

    Optionally consecutive characters can be combined into a single string.

    See also: get_events

    Topics: Terminal, Events
  (
    input
    do_append_characters = false
  )
  $keys empty_list
  $buf ""
  loop:
    if
      input.is_empty
      maybe_push_string
      :
        $chr input(1)
        case chr
          '@cr;': # RETURN or ENTER
            range &input 2 -1
            maybe_push_string !keys
            !buf ""
            push &keys RETURN
            next
          terminal_private::backspace_character:
            range &input 2 -1
            maybe_push_string !keys
            !buf ""
            push &keys BACKSPACE
            next
          '@del;': # for terminals that switch BACKSPACE and CTRL_BACKSPACE
            range &input 2 -1
            maybe_push_string !keys
            !buf ""
            push &keys CTRL_BACKSPACE
            next
          '@esc;': # ignore "special" keys
            range &input 2 -1
            if
              input .has_prefix. '[':
                # search for letter or tilde
                $i 2
                $len length_of(input)
                loop
                  :
                    if
                      i > len
                      -> keys
                      :
                        !chr input(i)
                        if
                          chr.is_a_letter || chr == '~':
                            if
                              chr == 'O' && i < len: # function key
                                add_csi_key !input !keys i+1
                                break
                              :
                                add_csi_key !input !keys i
                                break
                          :
                            inc &i
                            next
                  next
              :
                $found undefined
                for_each escape_sequences
                  : (sequence)
                    sequence $str $key
                    if
                      input .has_prefix. str:
                        !found key
                        range &input length_of(str)+1 -1
                        break
                      next
                  :
                    maybe_push_string !keys
                    !buf ""
                    push &keys default_value(found ESCAPE)
                    next
          :
            range &input 2 -1
            if
              chr <= '@26;':
                maybe_push_string !keys
                !buf ""
                push &keys ctrl_key(chr+1-'@nul;')
                next
              :
                if
                  chr < ' ':
                    next
                  :
                    if
                      chr.is_a_zero_width_character
                      next
                      :
                        if
                          do_append_characters:
                            push &buf chr
                            next
                          :
                            push &keys chr
                            next

  $add_csi_key: (i)
    $sequence range(input 2 i)
    range &input i+1 -1
    case sequence(1)
      '8': # window size change
        $height between(sequence ';' ';').to_integer
        $width between(sequence ';' 't' 2).to_integer
        maybe_push_string !keys
        !buf ""
        push &keys tuple(NEW_WINDOW_SIZE width height undefined)
        -> input keys
      '<': # mouse click
        $button between(sequence '<' ';').to_integer
        $x between(sequence ';' ';').to_integer
        $y between(sequence ';' 'M' 2).to_integer
        maybe_push_string !keys
        !buf ""
        push &keys tuple(MOUSE_CLICK x y button)
        -> input keys
      :
        maybe_push_string !keys
        !buf ""
        push &keys csi_table(sequence)
        -> input keys

  $maybe_push_string:
    if
      buf.is_empty
      -> keys
      -> push(keys buf)

$escape_sequences
  list
    " " = ALT_SPACE
    "@cr;" = ALT_RETURN
    "@1;" = CTRL_ALT_A
    "@2;" = CTRL_ALT_B
    "@3;" = CTRL_ALT_C
    "@4;" = CTRL_ALT_D
    "@5;" = CTRL_ALT_E
    "@6;" = CTRL_ALT_F
    "@7;" = CTRL_ALT_G
    "@8;" = CTRL_ALT_H
    "@9;" = CTRL_ALT_I
    "@10;" = CTRL_ALT_J
    "@11;" = CTRL_ALT_K
    "@12;" = CTRL_ALT_L
    "@13;" = CTRL_ALT_M
    "@14;" = CTRL_ALT_N
    "@15;" = CTRL_ALT_O
    "@16;" = CTRL_ALT_P
    "@17;" = CTRL_ALT_Q
    "@18;" = CTRL_ALT_R
    "@19;" = CTRL_ALT_S
    "@20;" = CTRL_ALT_T
    "@21;" = CTRL_ALT_U
    "@22;" = CTRL_ALT_V
    "@23;" = CTRL_ALT_W
    "@24;" = CTRL_ALT_X
    "@25;" = CTRL_ALT_Y
    "@26;" = CTRL_ALT_Z
    "OA" = CURSOR_UP
    "OB" = CURSOR_DOWN
    "OC" = CURSOR_RIGHT
    "OD" = CURSOR_LEFT
    "OF" = END
    "OH" = HOME
    "OP" = F1
    "OQ" = F2
    "OR" = F3
    "OS" = F4
    "a" = ALT_A
    "b" = ALT_B
    "c" = ALT_C
    "d" = ALT_D
    "e" = ALT_E
    "f" = ALT_F
    "g" = ALT_G
    "h" = ALT_H
    "i" = ALT_I
    "j" = ALT_J
    "k" = ALT_K
    "l" = ALT_L
    "m" = ALT_M
    "n" = ALT_N
    "o" = ALT_O
    "p" = ALT_P
    "q" = ALT_Q
    "r" = ALT_R
    "s" = ALT_S
    "t" = ALT_T
    "u" = ALT_U
    "v" = ALT_V
    "w" = ALT_W
    "x" = ALT_X
    "y" = ALT_Y
    "z" = ALT_Z
    "@0x7f;" = ALT_BACKSPACE

$std::ESCAPE .

$std::RETURN .

$std::CURSOR_LEFT .

$std::CURSOR_RIGHT .

$std::CURSOR_UP .

$std::CURSOR_DOWN .

$std::HOME .

$std::END .

$std::PAGE_UP .

$std::PAGE_DOWN .

$std::INSERT .

$std::DELETE .

$std::F1 .

$std::F2 .

$std::F3 .

$std::F4 .

$std::F5 .

$std::F6 .

$std::F7 .

$std::F8 .

$std::F9 .

$std::F10 .

$std::F11 .

$std::F12 .

$std::SHIFT_TABULATOR .

$std::SHIFT_CURSOR_LEFT .

$std::SHIFT_CURSOR_RIGHT .

$std::SHIFT_CURSOR_UP .

$std::SHIFT_CURSOR_DOWN .

$std::SHIFT_HOME .

$std::SHIFT_END .

$std::SHIFT_PAGE_UP .

$std::SHIFT_PAGE_DOWN .

$std::SHIFT_INSERT .

$std::SHIFT_DELETE .

$std::SHIFT_F1 .

$std::SHIFT_F2 .

$std::SHIFT_F3 .

$std::SHIFT_F4 .

$std::SHIFT_F5 .

$std::SHIFT_F6 .

$std::SHIFT_F7 .

$std::SHIFT_F8 .

$std::SHIFT_F9 .

$std::SHIFT_F10 .

$std::SHIFT_F11 .

$std::SHIFT_F12 .

$std::ALT_SPACE .

$std::ALT_BACKSPACE .

$std::ALT_RETURN .

$std::ALT_CURSOR_LEFT .

$std::ALT_CURSOR_RIGHT .

$std::ALT_CURSOR_UP .

$std::ALT_CURSOR_DOWN .

$std::ALT_HOME .

$std::ALT_END .

$std::ALT_PAGE_UP .

$std::ALT_PAGE_DOWN .

$std::ALT_INSERT .

$std::ALT_DELETE .

$std::ALT_A .

$std::ALT_B .

$std::ALT_C .

$std::ALT_D .

$std::ALT_E .

$std::ALT_F .

$std::ALT_G .

$std::ALT_H .

$std::ALT_I .

$std::ALT_J .

$std::ALT_K .

$std::ALT_L .

$std::ALT_M .

$std::ALT_N .

$std::ALT_O .

$std::ALT_P .

$std::ALT_Q .

$std::ALT_R .

$std::ALT_S .

$std::ALT_T .

$std::ALT_U .

$std::ALT_V .

$std::ALT_W .

$std::ALT_X .

$std::ALT_Y .

$std::ALT_Z .

$std::ALT_F1 .

$std::ALT_F2 .

$std::ALT_F3 .

$std::ALT_F4 .

$std::ALT_F5 .

$std::ALT_F6 .

$std::ALT_F7 .

$std::ALT_F8 .

$std::ALT_F9 .

$std::ALT_F10 .

$std::ALT_F11 .

$std::ALT_F12 .

$std::CTRL_CURSOR_LEFT .

$std::CTRL_CURSOR_RIGHT .

$std::CTRL_CURSOR_UP .

$std::CTRL_CURSOR_DOWN .

$std::CTRL_HOME .

$std::CTRL_END .

$std::CTRL_PAGE_UP .

$std::CTRL_PAGE_DOWN .

$std::CTRL_BACKSPACE .

$std::CTRL_INSERT .

$std::CTRL_DELETE .

$std::CTRL_F1 .

$std::CTRL_F2 .

$std::CTRL_F3 .

$std::CTRL_F4 .

$std::CTRL_F5 .

$std::CTRL_F6 .

$std::CTRL_F7 .

$std::CTRL_F8 .

$std::CTRL_F9 .

$std::CTRL_F10 .

$std::CTRL_F11 .

$std::CTRL_F12 .

$std::CTRL_ALT_A .

$std::CTRL_ALT_B .

$std::CTRL_ALT_C .

$std::CTRL_ALT_D .

$std::CTRL_ALT_E .

$std::CTRL_ALT_F .

$std::CTRL_ALT_G .

$std::CTRL_ALT_H .

$std::CTRL_ALT_I .

$std::CTRL_ALT_J .

$std::CTRL_ALT_K .

$std::CTRL_ALT_L .

$std::CTRL_ALT_M .

$std::CTRL_ALT_N .

$std::CTRL_ALT_O .

$std::CTRL_ALT_P .

$std::CTRL_ALT_Q .

$std::CTRL_ALT_R .

$std::CTRL_ALT_S .

$std::CTRL_ALT_T .

$std::CTRL_ALT_U .

$std::CTRL_ALT_V .

[source]

$std::ALT_CURSOR_DOWN .

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Terminals

# std::ALT_CURSOR_DOWN (a unique item)

