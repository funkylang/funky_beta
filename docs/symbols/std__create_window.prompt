[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std::clear_colour_of ()

[documentation remark]

# std::clear_colour_of (a polymorphic function)

  the clear colour to use

  Parameter:
    self: the object from which to get the clear colour

  Result:
    colour: the clear colour

  Returns the clear colour of the object.

  Topic: Terminal

  See also: std::draw_colour_of, std::set_clear_colour

[source]

$std_types::screen/clear:
  (
    self
    x = 1
    y = 1
    width = undefined
    height = undefined
  )
  update_if width.is_undefined &width -> width_of(self)-x+1
  update_if height.is_undefined &height -> height_of(self)-y+1
  std_private::clear self self x y width height

$std::clear ()

[documentation remark]

# std::clear (a polymorphic function)

  clears a rectangular area

  Parameters:
    screen: some kind of screen
    x: x-coordinate of the upper left corner
    y: y-coordinate of the upper left corner
    width: width of the area
    height: height of the area

  Result:
    screen: the updated screen

  The area is cleared using the current clear colour. Use
  <std::set_clear_colour> to change the current clear colour.

  The area is clipped at the screen's borders.

  Topic: Terminal

  See also: std_types::screen/std::clear, std::draw_text,
            std::set_clear_colour

  Example:

    $my_screen create_screen(terminal 40 25)
    set_clear_colour &my_screen GREEN
    clear &my_screen 11 6 20 15

[EXERCISE]

#
  Topic: Window Manager

[symbols]


# Terminal Methods

$std::create_window_manager ()

# Window Manager Methods

$std::create_window ()

# Create Window Options

$std::CONTENT .
$std::HORIZONTAL_SCROLLBAR .
$std::VERTICAL_SCROLLBAR .
$std_types::window_manager std_types::object
$std_types::window_manager.terminal_of undefined
$std_types::window_manager.windows_of empty_list
$std_types::window_manager.next_window_id_of 1
$std_types::terminal/create_window_manager:
$std_types::window_manager/create_window:
$std_types::window_manager/update:

#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
  Topic: Window Manager

# Terminal Methods

$std::create_window_manager ()

# Window Manager Methods

$std::create_window ()

# Create Window Options

$std::CONTENT .

$std::HORIZONTAL_SCROLLBAR .

$std::VERTICAL_SCROLLBAR .

$next_window_id_of ()

$id_of ()

$terminal_of ()

$windows_of ()

$title_of ()

$content_of ()

$has_a_horizontal_scrollbar ()

$has_a_vertical_scrollbar ()

$std_types::window_manager std_types::object

$std_types::window_manager.terminal_of undefined

$std_types::window_manager.windows_of empty_list

$std_types::window_manager.next_window_id_of 1

$window_type std_types::object

$window_type.id_of undefined

$window_type.clear_colour_of undefined

$std_types::terminal/create_window_manager:
  (
    terminal
  )
  ->
    std_types::window_manager
      .terminal_of terminal

$std_types::window_manager/create_window:
  (
    self
    title
    options*
  )
  $terminal terminal_of(self)
  $window_id next_window_id_of(self)
  inc &self.next_window_id_of
  extract_options options
    CONTENT = undefined $content
    CLEAR_COLOUR = clear_colour_of(terminal) $clear_colour
    HORIZONTAL_SCROLLBAR = false $horizontal_scrollbar
    VERTICAL_SCROLLBAR = false $vertical_scrollbar
  push &self.windows_of
    window_type
      .id_of window_id
      .title_of title
      .clear_colour_of clear_colour
      .content_of content
      .has_a_horizontal_scrollbar horizontal_scrollbar
      .has_a_vertical_scrollbar vertical_scrollbar
  -> self window_id

$std_types::window_manager/update:
  (
    self
  )
  $terminal terminal_of(self)
  $window windows_of(self)(1)
  set_clear_colour &terminal BLACK
  set_draw_colour &terminal WHITE
  clear &terminal 1 1 width_of(terminal) 1
  draw_text &terminal 1 1 title_of(window)
  copy &terminal content_of(window) 1 2
  update &terminal $output
  -> self(.terminal_of terminal) output

[source]

$std_types::window_manager/create_window:
  (
    self
    title
    options*
  )
  $terminal terminal_of(self)
  $window_id next_window_id_of(self)
  inc &self.next_window_id_of
  extract_options options
    CONTENT = undefined $content
    CLEAR_COLOUR = clear_colour_of(terminal) $clear_colour
    HORIZONTAL_SCROLLBAR = false $horizontal_scrollbar
    VERTICAL_SCROLLBAR = false $vertical_scrollbar
  push &self.windows_of
    window_type
      .id_of window_id
      .title_of title
      .clear_colour_of clear_colour
      .content_of content
      .has_a_horizontal_scrollbar horizontal_scrollbar
      .has_a_vertical_scrollbar vertical_scrollbar
  -> self window_id

$std::create_window ()

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Do not create completely new examples on your own

### Use only one of the following topics: Window Manager

# std::create_window (a polymorphic function)

