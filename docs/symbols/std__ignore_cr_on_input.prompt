[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

POLY std::plus

[documentation remark]

# std::plus (a polymorphic function)

  adds two numbers of any kind

  Parameters:
    left: the left operand
    right: the right operand

  Result:
    sum: the sum of the two operands

  Topic: Numbers

  See also: std::minus, std::times, std::over, std::div, std::mod

[source]

POLY std::round

[documentation remark]

# std::round (a polymorphic function)

  rounds a number to the nearest integer

  Parameters:
    number: the number to round

  Result:
    number: the rounded number

  Topic: Numbers

  See also: std::floor, std::ceil

  Example:

    $x 3.14159
    println! round(x)

  Output:

    3

[EXERCISE]

[symbols]

POLY std::get_terminal_attributes
POLY std::set_terminal_attributes
POLY std::backspace_character_of
POLY std::use_canonical_mode
POLY std::echo_characters
POLY std::echo_new_lines
POLY std::enable_xon_xoff_for_input
POLY std::enable_xon_xoff_for_output
POLY std::restart_output_on_any_character
POLY std::ignore_cr_on_input
POLY std::generate_signals
POLY std::map_cr_to_lf_on_input
POLY std::hangup_on_close
POLY std::map_lf_to_crlf_on_output
POLY std::minimum_characters_for_canoncial_read
POLY std::timeout_for_reads
POLY std::input_speed
POLY std::output_speed
TYPE std_types::terminal_attributes -> std_types::object
METHOD std_types::terminal_attributes/_type
METHOD long std_types::terminal_attributes/_debug_string
METHOD std_types::file_descriptor/get_terminal_attributes
METHOD std_types::file_descriptor/set_terminal_attributes
METHOD std_types::terminal_attributes/backspace_character_of
METHOD std_types::terminal_attributes/use_canonical_mode
METHOD std_types::terminal_attributes/echo_characters
METHOD std_types::terminal_attributes/echo_new_lines
METHOD std_types::terminal_attributes/enable_xon_xoff_for_input
METHOD std_types::terminal_attributes/enable_xon_xoff_for_output
METHOD std_types::terminal_attributes/restart_output_on_any_character
METHOD std_types::terminal_attributes/ignore_cr_on_input
METHOD std_types::terminal_attributes/generate_signals
METHOD std_types::terminal_attributes/map_cr_to_lf_on_input
METHOD std_types::terminal_attributes/hangup_on_close
METHOD std_types::terminal_attributes/map_lf_to_crlf_on_output
METHOD std_types::terminal_attributes/minimum_characters_for_canoncial_read
METHOD std_types::terminal_attributes/timeout_for_reads
METHOD std_types::terminal_attributes/input_speed
METHOD std_types::terminal_attributes/output_speed

#
  This file was automatically generated by the script
  "termio_autogen.sim" - do not edit!

#
  Copyright (C) 2022 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Topics: POSIX, Input-Output

POLY std::get_terminal_attributes
  #
    retrieve the current terminal attributes

POLY std::set_terminal_attributes
  #
    update the current terminal attributes

POLY std::backspace_character_of
  #
    retrieve the character sent by the backspace key

POLY std::use_canonical_mode
  #
    set or clear ICANON in c_lflag

POLY std::echo_characters
  #
    set or clear ECHO in c_lflag

POLY std::echo_new_lines
  #
    set or clear ECHONL in c_lflag

POLY std::enable_xon_xoff_for_input
  #
    set or clear IXOFF in c_iflag

POLY std::enable_xon_xoff_for_output
  #
    set or clear IXON in c_iflag

POLY std::restart_output_on_any_character
  #
    set or clear IXANY in c_iflag

POLY std::ignore_cr_on_input
  #
    set or clear IGNCR in c_iflag

POLY std::generate_signals
  #
    set or clear ISIG in c_lflag

POLY std::map_cr_to_lf_on_input
  #
    set or clear ICRNL in c_iflag

POLY std::hangup_on_close
  #
    set or clear HUPCL in c_oflag

POLY std::map_lf_to_crlf_on_output
  #
    set or clear ONLCR in c_oflag

POLY std::minimum_characters_for_canoncial_read
  #
    set or get the value of VMIN in c_cc

POLY std::timeout_for_reads
  #
    set or get the value of VTIME in c_cc; timeout is converted to/from seconds!

POLY std::input_speed
  #
    call cfsetispeed() or cfgetispeed()

POLY std::output_speed
  #
    call cfsetospeed() or cfgetospeed()

DATA
  typedef struct {
    struct termios termios;
  } TERMIO_DATA;

TYPE std_types::terminal_attributes -> std_types::object
  #
    a structure that stores the terminal attributes
  TERMIO_DATA *data

METHOD std_types::terminal_attributes/_type
  {
    RUNTIME_ERROR("Attempt to call terminal attributes as a function!");
  }

METHOD long std_types::terminal_attributes/_debug_string
  (
    NODE *node,
    int indent,
    int max_depth,
    char *buf
  )
  {
    return debug_print(indent, buf, "<terminal_attributes>");
  }

METHOD std_types::file_descriptor/get_terminal_attributes
  {
    CHECK_ARGUMENTS(1)
    CHECK_IO_ACCESS_RIGHTS

    int fd = ARGUMENTS(0)->file_descriptor.value;
    TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
    int success;
    EVENT(get_terminal_attributes)
      success = tcgetattr(fd, &data->termios);
    DATA
      INT(success)
      MEMORY(&data->termios, sizeof(data->termios))
    END
    if (success == 0) {
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    } else {
      RETURN_UNDEFINED
    }
  }

METHOD std_types::file_descriptor/set_terminal_attributes
  {
    CHECK_ARGUMENTS(2)
    CHECK_IO_ACCESS_RIGHTS

    int fd = ARGUMENTS(0)->file_descriptor.value;
    NODE *attributes = ARGUMENTS(1);
    if (TYPEOF(attributes) != TYPEOF(VAR(std_types::terminal_attributes)))
      INVALID_ARGUMENTS
    int success;
    ACTION(set_terminal_attributes)
      success =
        tcsetattr(fd, TCSANOW, &attributes->terminal_attributes.data->termios);
    DATA
      INT(success, 0)
    END
    RETURN_BOOLEAN(success == 0)
  }

METHOD std_types::terminal_attributes/backspace_character_of
  {
    CHECK_ARGUMENTS(1)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    RETURN_SINGLE_RESULT(from_uchar32(termios->c_cc[VERASE]))
  }

METHOD std_types::terminal_attributes/use_canonical_mode
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      RETURN_SINGLE_RESULT(from_bool(termios->c_lflag & ICANON))
    } else {
      int do_set;
      CHECK(to_bool(ARGUMENTS(1), &do_set));
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      if (do_set) {
        data->termios.c_lflag |= ICANON;
      } else {
        data->termios.c_lflag &= ~ICANON;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

METHOD std_types::terminal_attributes/echo_characters
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      RETURN_SINGLE_RESULT(from_bool(termios->c_lflag & ECHO))
    } else {
      int do_set;
      CHECK(to_bool(ARGUMENTS(1), &do_set));
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      if (do_set) {
        data->termios.c_lflag |= ECHO;
      } else {
        data->termios.c_lflag &= ~ECHO;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

METHOD std_types::terminal_attributes/echo_new_lines
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      RETURN_SINGLE_RESULT(from_bool(termios->c_lflag & ECHONL))
    } else {
      int do_set;
      CHECK(to_bool(ARGUMENTS(1), &do_set));
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      if (do_set) {
        data->termios.c_lflag |= ECHONL;
      } else {
        data->termios.c_lflag &= ~ECHONL;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

METHOD std_types::terminal_attributes/enable_xon_xoff_for_input
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      RETURN_SINGLE_RESULT(from_bool(termios->c_iflag & IXOFF))
    } else {
      int do_set;
      CHECK(to_bool(ARGUMENTS(1), &do_set));
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      if (do_set) {
        data->termios.c_iflag |= IXOFF;
      } else {
        data->termios.c_iflag &= ~IXOFF;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

METHOD std_types::terminal_attributes/enable_xon_xoff_for_output
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      RETURN_SINGLE_RESULT(from_bool(termios->c_iflag & IXON))
    } else {
      int do_set;
      CHECK(to_bool(ARGUMENTS(1), &do_set));
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      if (do_set) {
        data->termios.c_iflag |= IXON;
      } else {
        data->termios.c_iflag &= ~IXON;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

METHOD std_types::terminal_attributes/restart_output_on_any_character
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      RETURN_SINGLE_RESULT(from_bool(termios->c_iflag & IXANY))
    } else {
      int do_set;
      CHECK(to_bool(ARGUMENTS(1), &do_set));
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      if (do_set) {
        data->termios.c_iflag |= IXANY;
      } else {
        data->termios.c_iflag &= ~IXANY;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

METHOD std_types::terminal_attributes/ignore_cr_on_input
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      RETURN_SINGLE_RESULT(from_bool(termios->c_iflag & IGNCR))
    } else {
      int do_set;
      CHECK(to_bool(ARGUMENTS(1), &do_set));
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      if (do_set) {
        data->termios.c_iflag |= IGNCR;
      } else {
        data->termios.c_iflag &= ~IGNCR;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

METHOD std_types::terminal_attributes/generate_signals
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      RETURN_SINGLE_RESULT(from_bool(termios->c_lflag & ISIG))
    } else {
      int do_set;
      CHECK(to_bool(ARGUMENTS(1), &do_set));
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      if (do_set) {
        data->termios.c_lflag |= ISIG;
      } else {
        data->termios.c_lflag &= ~ISIG;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

METHOD std_types::terminal_attributes/map_cr_to_lf_on_input
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      RETURN_SINGLE_RESULT(from_bool(termios->c_iflag & ICRNL))
    } else {
      int do_set;
      CHECK(to_bool(ARGUMENTS(1), &do_set));
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      if (do_set) {
        data->termios.c_iflag |= ICRNL;
      } else {
        data->termios.c_iflag &= ~ICRNL;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

METHOD std_types::terminal_attributes/hangup_on_close
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      RETURN_SINGLE_RESULT(from_bool(termios->c_oflag & HUPCL))
    } else {
      int do_set;
      CHECK(to_bool(ARGUMENTS(1), &do_set));
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      if (do_set) {
        data->termios.c_oflag |= HUPCL;
      } else {
        data->termios.c_oflag &= ~HUPCL;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

METHOD std_types::terminal_attributes/map_lf_to_crlf_on_output
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      RETURN_SINGLE_RESULT(from_bool(termios->c_oflag & ONLCR))
    } else {
      int do_set;
      CHECK(to_bool(ARGUMENTS(1), &do_set));
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      if (do_set) {
        data->termios.c_oflag |= ONLCR;
      } else {
        data->termios.c_oflag &= ~ONLCR;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

METHOD std_types::terminal_attributes/minimum_characters_for_canoncial_read
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      RETURN_SINGLE_RESULT(from_int(termios->c_cc[VMIN]))
    } else {
      int value;
      CHECK(to_int(ARGUMENTS(1), &value))
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      data->termios.c_cc[VMIN] = value;
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

METHOD std_types::terminal_attributes/timeout_for_reads
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      RETURN_SINGLE_RESULT(from_double((double)termios->c_cc[VTIME]/10))
    } else {
      double value;
      CHECK(to_double(ARGUMENTS(1), &value))
      value *= 10;
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      data->termios.c_cc[VTIME] = value;
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

[source]

METHOD std_types::terminal_attributes/ignore_cr_on_input
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      RETURN_SINGLE_RESULT(from_bool(termios->c_iflag & IGNCR))
    } else {
      int do_set;
      CHECK(to_bool(ARGUMENTS(1), &do_set));
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      if (do_set) {
        data->termios.c_iflag |= IGNCR;
      } else {
        data->termios.c_iflag &= ~IGNCR;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

POLY std::ignore_cr_on_input
  #
    set or clear IGNCR in c_iflag

[documentation remark]

# std::ignore_cr_on_input (a polymorphic function)

