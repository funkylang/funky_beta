[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std::clear_colour_of ()

[documentation remark]

# std::clear_colour_of (a polymorphic function)

  the clear colour to use

  Parameter:
    self: the object from which to get the clear colour

  Result:
    colour: the clear colour

  Returns the clear colour of the object.

  Topic: Terminal

  See also: std::draw_colour_of, std::set_clear_colour

[source]

$std_types::screen/clear:
  (
    self
    x = 1
    y = 1
    width = undefined
    height = undefined
  )
  update_if width.is_undefined &width -> width_of(self)-x+1
  update_if height.is_undefined &height -> height_of(self)-y+1
  std_private::clear self self x y width height

$std::clear ()

[documentation remark]

# std::clear (a polymorphic function)

  clears a rectangular area

  Parameters:
    screen # some kind of screen
    x: x-coordinate of the upper left corner
    y: y-coordinate of the upper left corner
    width: width of the area
    height: height of the area

  Result:
    screen: the updated screen

  The area is cleared using the current clear colour. Use
  <std::set_clear_colour> to change the current clear colour.

  The area is clipped at the screen's borders.

  Topic: Terminal

  See also: std_types::screen/std::clear, std::draw_text,
            std::set_clear_colour

  Example:

    $my_screen create_screen(terminal 40 25)
    set_clear_colour &my_screen GREEN
    clear &my_screen 11 6 20 15

[EXERCISE]

#
  Topic: Collections

  There are several kinds of collections

  * tuples

  * lists

  * tables

[symbols]

$std_types::collection std_types::object
$std_types::collection/is_empty:
$std_types::collection/is_not_empty:
$std::first_key_of ()
$std::first_item_of ()
$std::last_key_of ()
$std::last_item_of ()
$std::next_key_of ()
$std::previous_key_of ()
$std::retrieve_first_item ()
$std::retrieve_last_item ()
$std::reverse ()
$std::for_each ()
$std::map ()
$std::append_or_error ()
$std::map_or_error ()
$std::reduce ()
$std::map_reduce ()
$std::find_first ()
$std::filter ()
$std::sort ()
$std::intersection ()
$std::merge ()
$std::zip ()
$std::flatten ()
$std::truncate ()
$std::pad_left ()
$std::pad_right ()
$std::has_prefix ()
$std::has_suffix ()
$std::without_prefix ()
$std::without_suffix ()
$std::before ()
$std::truncate_from ()
$std::behind ()
$std::truncate_until ()
$std::from ()
$std::truncate_before ()
$std::until ()
$std::truncate_behind ()
$std::between ()
$std::contains ()
$std::matches ()
$std::dup ()
$std::empty_collection_of ()
$std::to_base64 ()
$std::from_base64 ()
$std::sha1 ()

#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

<namespace basic_collections>

#
  Topic: Collections

  There are several kinds of collections

  * tuples

  * lists

  * tables

$std_types::collection std_types::object
  #
    the prototype object for all kinds of collections

    Topic: Collections

$std_types::collection/is_empty:
  # default implementation
  (
    self
  )
  -> length_of(self) == 0

$std_types::collection/is_not_empty:
  # default implementation
  (
    self
  )
  -> not(self.is_empty)

$std::first_key_of ()
  #
    returns the first key of a non-empty collection

$std::first_item_of ()
  #
    returns the first item of a non-empty collection

$std::last_key_of ()
  #
    returns the last key of a non-empty collection

$std::last_item_of ()
  #
    returns the last item of a non-empty collection

$std::next_key_of ()
  #
    returns the key after the specified key

$std::previous_key_of ()
  #
    returns the key before the specified key

$std::retrieve_first_item ()
  #
    returns and removes the first item of a non-empty collection

$std::retrieve_last_item ()
  #
    returns and removes the last item of a non-empty collection

$std::reverse ()
  #
    reverse the order of all items of a collection

$std::for_each ()
  #
    iterates over all items of a collection

    Topic: Loops

    See also: std::next, std::break

$std::map ()
  #
    applies a function to all items of a collection

    The function results are collected in a collection of the same type as the
    original collection.

    The function applications might be executed in parallel!

    See also: reduce, map_reduce, filter

$std::append_or_error ()
  #
    appends two collections

    If the left collection is an error object then this error object is returned
    else if the right collection is an error object then this error object is
    returned otherwise the default <append> method is applied.

$std::map_or_error ()
  #
    applies a function to all items of a collection

    The function results are collected in a collection of the same type as the
    original collection.

    If any item ist mapped to an error object than the result ist not a
    collection but the first (left-to-right-order) error object created.

    The function applications might be executed in parallel!

    See also: reduce, map_reduce, filter

$std::reduce ()
  #
    computes a kind of sum from the items of a collection

    There is no guarantee in which order the values will be reduced (folded).

    So the the reduction function must obey to the law of assosiativity!

    See also: map, map_reduce, filter

$std::map_reduce ()
  #
    combines a map and a reduce operation into a single operation

    See also: map, reduce

$std::find_first ()
  #
    returns the first item of a collection that fullfills the condition

    See also: std::filter

$std::filter ()
  #
    returns a collection containing all the items that fullfill the
    filter-condition

    See also: std::map, std::find_first

$std::sort ()
  #
    returns a sorted copy of the collection

    If no comparison function is supplied then the items are sorted in ascending
    order using the <less>-method.

$std::intersection ()
  #
    computes the intersection of two collections

    The result shares type with the first collection.

$std::merge ()
  #
    merge two collections in a collection specific way

$std::zip ()
  #
    zip (merge) two collections

    All odd numbered items are taken from the first collection; all even
    numbered items from the second collection.

    If a collection runs out of items the remaining items of the other
    collection are simply appended.

$std::flatten ()
  #
    flattens a collection (probably a list)

$std::truncate ()
  #
    truncates a collection to the specified number of items

$std::pad_left ()

$std::pad_right ()

$std::has_prefix ()
  #
    returns *true* if the second argument is a prefix of the first argument

$std::has_suffix ()
  #
    returns *true* if the second argument is a suffix of the first argument

$std::without_prefix ()
  #
    removes a specific expression at the start of a string

    If the string specified as the first argument starts with the expression
    specified as the second argument, the matching prefix of the string is
    removed and the resulting string is returned.

    Otherwise the string is returned without alteration.

    Topic: Strings

    See also: std::without_suffix, std::has_prefix, std::has_suffix,
              std::behind, std::truncate_from

[source]

$std_types::generic_array/for_each:
  #
    iterates over all items of the array

    For each item the statement sequence supplied as *body* is called
    with one or two arguments (depending on *body*'s parameter count).

    If called with two arguments the first argument is the position number
    of the item within the array.

    To start the next iteration of the loop a tail call to the *next*-function
    has to be performed.

    The loop is exited when the end of the loop is reached without calling
    the *next*-function.

    This is a sequential loop.
  (
    self # the array to iterate over
    body # the statement sequence to execute for each item
    finally = next # called after all items have been iterated over
  )
  $saved_context
    tuple
      next
      break
      basic_loops::from
      basic_loops::to
      basic_loops::self
      basic_loops::body
      basic_loops::finally

  !basic_loops::from 1 # the first ...
  !basic_loops::to length_of(self) # ... and last index of the array
  !basic_loops::self self
  !basic_loops::body body
  !basic_loops::finally finally

  $iterate_1:
    if
      basic_loops::from <= basic_loops::to # another item available?
      :
        basic_loops::body basic_loops::self(basic_loops::from)
          # supply only the value of each item
      break

  $iterate_2:
    if
      basic_loops::from <= basic_loops::to # another item available?
      :
        basic_loops::body basic_loops::from basic_loops::self(basic_loops::from)
          # supply index *and* value of each item
      break

  !break: (myself^)
    !finally basic_loops::finally
    basic_loops::saved_context_of(myself)
      !next !break
      !basic_loops::from !basic_loops::to !basic_loops::self
      !basic_loops::body !basic_loops::finally
    finally

  !break.basic_loops::saved_context_of saved_context

  if
    parameter_count_of(body) == 2:
      !next:
        !basic_loops::from basic_loops::from+1 # increase the array index
        iterate_2 # start the next iteration
      iterate_2 # start the first iteration
    :
      !next:
        !basic_loops::from basic_loops::from+1 # increase the array index
        iterate_1 # start the next iteration
      iterate_1 # start the first iteration

$std_types::binary_table/for_each:
  #
    iterates over all items of the key order table

    For each item the statement sequence supplied as *body* is called
    with one or two arguments (depending on *body*'s parameter count).

    If called with two arguments the first argument is the *key* and the
    second argument the corresponding *value*.

    If called with one argument then only the *value* is supplied.

    This is a sequential loop.

    Example:

      $ages empty_binary_table

      !ages("Tom") 5
      !ages("Sam") 3
      !ages("Sarah") 11

      for_each ages: (name age)
        writeln! name ": " age
        next

    Output:

      Sarah: 11
      Sam: 3
      Tom: 5
  (
    self # the hash table to iterate over
    body # the statement sequence to execute for each item
    finally = next # used to return results to the caller
  )
  $saved_context
    tuple
      next
      break
      basic_loops::todo
      basic_loops::body
      basic_loops::finally

  !basic_loops::todo list(finish)
  !basic_loops::body body
  !basic_loops::finally finally

  !break: (myself^)
    !finally basic_loops::finally
    basic_loops::saved_context_of(myself)
      !next !break
      !basic_loops::todo !basic_loops::body !basic_loops::finally
    finally!

  !break.basic_loops::saved_context_of saved_context

  if
    parameter_count_of(body) == 2:
      !next:
        pop &basic_loops::todo $previous_node
        for_each_2_right! previous_node

      for_each_2_left! contents_of(self)
    :
      !next:
        pop &basic_loops::todo $previous_node
        for_each_1_right! previous_node

      for_each_1_left! contents_of(self)

$std_types::hash_table/for_each:
  (
    self # the hash table to iterate over
    body # the statement sequence to execute for each item
    finally = next # called after all items have been iterated over
  )
  $saved_context
    tuple
      next
      break
      basic_loops::body
      basic_loops::finally

  !basic_loops::body body
  !basic_loops::finally finally

  !break: (myself^)
    !finally basic_loops::finally
    basic_loops::saved_context_of(myself)
      !next !break
      !basic_loops::body !basic_loops::finally
    finally!

  !break.basic_loops::saved_context_of saved_context
  !next break

  if
    parameter_count_of(body) == 2:
      for_each_2! contents_of(self)
    :
      for_each_1! contents_of(self)

$std_types::key_order_table/for_each:
  #
    iterates over all items of the key order table

    For each item the statement sequence supplied as *body* is called
    with one or two arguments (depending on *body*'s parameter count).

    If called with two arguments the first argument is the *key* and the
    second argument the corresponding *value*.

    If called with one argument then only the *value* is supplied.

    This is a sequential loop.

    Example:

      $ages empty_key_order_table

      !ages("Tom") 5
      !ages("Sam") 3
      !ages("Sarah") 11

      for_each ages: (name age)
        writeln! name ": " age
        next

    Output:

      Sarah: 11
      Sam: 3
      Tom: 5
  (
    self # the hash table to iterate over
    body # the statement sequence to execute for each item
    finally = next # used to return results to the caller
  )
  $saved_context
    tuple
      next
      break
      basic_loops::todo
      basic_loops::body
      basic_loops::finally

  !basic_loops::todo list(finish)
  !basic_loops::body body
  !basic_loops::finally finally

  !break: (myself^)
    !finally basic_loops::finally
    basic_loops::saved_context_of(myself)
      !next !break
      !basic_loops::todo !basic_loops::body !basic_loops::finally
    finally!

  !break.basic_loops::saved_context_of saved_context

  if
    parameter_count_of(body) == 2:
      !next:
        pop &basic_loops::todo $node
        for_each_2_right! node

      for_each_2_left! contents_of(self)
    :
      !next:
        pop &basic_loops::todo $node
        for_each_1_right! node

      for_each_1_left! contents_of(self)

$std_types::association_list/for_each:
  #
    iterates over all items of the association list

    For each item the statement sequence supplied as *body* is called
    with one or two arguments (depending on *body*'s parameter count).

    If called with two arguments the first argument is the *key* and the
    second argument the corresponding *value*.

    If called with one argument then only the *value* is supplied.

    This is a sequential loop.

    Example:

      $ages empty_association_list

      !ages("Tom") 5
      !ages("Sam") 3
      !ages("Sarah") 11

      for_each ages: (name age)
        writeln! name ": " age
        next

    Output:

      Sarah: 11
      Sam: 3
      Tom: 5
  (
    self # the association list to iterate over
    body # the statement sequence to execute for each item
    finally = next # used to return results to the caller
  )
  $contents contents_of(self)
  !callback body
  !break finally
  if
    parameter_count_of(body) == 2:
      !next:
        if
          link.is_undefined
          : finally!
          : for_each_2! link

      for_each_2! contents
    :
      !next:
        if
          link.is_undefined
          : finally!
          : for_each_1! link

      for_each_1! contents

$std_types::insert_order_table/for_each:
  #
    invokes the specified callback for each item of the table
  (
    self # the hash table to iterate over
    body # the statement sequence to execute for each item
    finally = next # called after all items have been iterated over
  )
  $values values_of(self)
  if
    parameter_count_of(body) == 2:
      $keys keys_of(self)
      for_each! values
        : (index _value)
          body! keys(index) values(index)
        :
          finally!
    :
      for_each! values body finally

$std_types::hash_set/for_each:
  (
    self # the hash set to iterate over
    body # the statement sequence to execute for each item
    finally = next # called after all items have been iterated over
  )
  $saved_context
    tuple
      next
      break
      basic_loops::body
      basic_loops::finally

  !basic_loops::body body
  !basic_loops::finally finally

  !break: (myself^)
    !finally basic_loops::finally
    basic_loops::saved_context_of(myself)
      !next !break
      !basic_loops::body !basic_loops::finally
    finally!

  !break.basic_loops::saved_context_of saved_context
  !next break

  for_each_1! contents_of(self)

$std_types::insert_order_set/for_each:
  #
    invokes the specified callback for each item of the set
  (
    self # the hash set to iterate over
    body # the statement sequence to execute for each item
    finally = next # called after all items have been iterated over
  )
  for_each! self.to_list body finally

$std_types::key_order_set/for_each:
  #
    iterates over all items of the key order set

    For each item the statement sequence supplied as *body* is called
    with one argument or none argument at all
    (depending on *body*'s parameter count).

    If called with one argument the argument is the *key*.

    This is a sequential loop.

    Example:

      $adult empty_key_order_set

      !adult("Tom") true
      !adult("Sam") false
      !adult("Sarah") true

      for_each adult: (name)
        writeln! name
        next

    Output:

      Sarah
      Tom
  (
    self # the hash set to iterate over
    body # the statement sequence to execute for each item
    finally = next # used to return results to the caller
  )
  $saved_context
    tuple
      next
      break
      basic_loops::body
      basic_loops::finally
      basic_loops::todo

  !basic_loops::body body
  !basic_loops::finally finally
  !basic_loops::todo list(finish)

  !break: (myself^)
    !finally basic_loops::finally
    basic_loops::saved_context_of(myself)
      !next !break
      !basic_loops::body !basic_loops::finally !basic_loops::todo
    finally!

  !break.basic_loops::saved_context_of saved_context

  !next:
    pop &basic_loops::todo $node
    for_each_1_right! node

  for_each_1_left! contents_of(self)

$std_types::generic_list/for_each:
  #
    iterates over all items of the list

    For each item the statement sequence supplied as *body* is called
    with one or two arguments (depending on *body*'s parameter count).

    If called with two arguments the first argument is the position number
    of the item within the list.

    To start the next iteration of the loop a tail call to the *next*-function
    has to be performed.

    The loop is exited when the end of the loop is reached without calling
    the *next*-function.

    This is a sequential loop.

    Example:

      $persons list("Peter" "Mary" "Paul" "John" "David" "Emma")

      for_each persons: (person)
        writeln! person
        next

    Output:

      Peter
      Mary
      Paul
      John
      David
      Emma

    Example:

      $persons list("Peter" "Mary" "Paul" "John" "David" "Emma")

      $total_length 0
      $hash_sum 0
      for_each persons
        : (person)
          plus &total_length length_of(person)
          plus &hash_sum hash(person)
          next
        -> !total_length !hash_sum
      writeln "total length: " total_length
      writeln "hash sum: " hash_sum

    Output:

      total length: 26
      hash sum: 17062575543

    Topic: Lists

    See also: std_types::list/update_each
  (
    self # the list to iterate over
    body # the statement sequence to execute for each item
    finally # called after all items have been iterated over
  )
  $saved_context
    tuple
      next
      break
      basic_loops::from
      basic_loops::to
      basic_loops::self
      basic_loops::body
      basic_loops::finally

  !basic_loops::from 1 # the first ...
  !basic_loops::to length_of(self) # ... and last index of the list
  !basic_loops::self self
  !basic_loops::body body
  !basic_loops::finally finally

  $iterate_1:
    if
      basic_loops::from <= basic_loops::to # another item available?
      :
        basic_loops::body! basic_loops::self(basic_loops::from)
          # supply only the value of each item
      :
        break!

  $iterate_2:
    if
      basic_loops::from <= basic_loops::to # another item available?
      :
        basic_loops::body! basic_loops::from basic_loops::self(basic_loops::from)
          # supply index *and* value of each item
      :
        break!

  !break: (myself^)
    !finally basic_loops::finally
    basic_loops::saved_context_of(myself)
      !next !break
      !basic_loops::from !basic_loops::to !basic_loops::self
      !basic_loops::body !basic_loops::finally
    finally!

  !break.basic_loops::saved_context_of saved_context

  if
    parameter_count_of(body) == 2:
      !next:
        !basic_loops::from basic_loops::from+1 # increase the list index
        iterate_2! # start the next iteration
      iterate_2! # start the first iteration
    :
      !next:
        !basic_loops::from basic_loops::from+1 # increase the list index
        iterate_1! # start the next iteration
      iterate_1! # start the first iteration

$std_types::value_range/for_each:
  (
    self
    body
    finally
  )
  self $low $high
  from_to! low high body finally

$std::for_each ()
  #
    iterates over all items of a collection

    Topic: Loops

    See also: std::next, std::break

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Do not create completely new examples on your own

### Use only one of the following topics: Collections

# std::for_each (a polymorphic function)

