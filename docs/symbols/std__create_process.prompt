[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

FUNCTION std::usleep
{
  CHECK_ARGUMENTS(1)
  CHECK_IO_ACCESS_RIGHTS
  unsigned int microseconds;
  int result;
  if (!to_uint(ARGUMENTS(0), &microseconds)) return;
  EVENT(usleep)
    result = usleep(microseconds);
  INFO
    UINT(microseconds)
    INT(result)
  DATA
    INT(result)
  END
  if (result == -1) {
    create_error_message(
      module__builtin.constants_base[unique__std___IO_ERROR-1],
      "SLEEP FAILED", errno, 0, NULL);
  } else {
    PREPARE_NO_RESULT
  }
}

[documentation remark]

# std::usleep (a builtin I/O-function)

  suspends the execution for the specified number of microseconds

  Parameters:
    delay: the number of microseconds to sleep

  Results:
    none

  **Attention**: This function must be called with I/O-access rights!

  Topic: POSIX

  See also: std::sleep

[EXERCISE]

[symbols]

FUNCTION std::exec
FUNCTION std::create_process

CODE
  int close_fd(int *fd_p) {
    int err = 0;
    if (*fd_p >= 0) {
      do {
        err = close(*fd_p);
      } while (err == -1 && errno == EINTR);
      *fd_p = -1;
    }
    return err;
  }

  int dup2_fd(int src_fd, int dest_fd) {
    int err;
    do {
      err = dup2(src_fd, dest_fd);
    } while (err == -1 && errno == EINTR);
    return err;
  }

FUNCTION std::create_process
  #
    creates a new child process

    Parameters:
      filename # the executable image of the new process
      arguments # a list of arguments to supply to the new process
      environment? # a list of environment variables or <undefined>
      stdin? # a file-descriptor to be used as the process' stdin
      stdout? # a file-descriptor to be used as the process' stdout
      stderr? # a file-descriptor to be used as the process' stderr

    Results:
      child_pid # the process id of the new process
      child_stdin? # the file-descriptor to write to the child process' stdin
      child_stdout? # the file-descriptor to read from the child process' stdout
      child_stderr? # the file-descriptor to read from the child process' stderr

    *child_stdin* is returned only if no value was supplied for *stdin*.

    Topics: Input-Output, POSIX

    See also: exec, wait

    Example:

      # we do not check for errors in this example

      create_process! $pid $in_fd $out_fd $err_fd
        "ls" list("-l" "/usr/local/share/funky-0/runtime/")
      close! in_fd
      loop:
        read! $buf out_fd 0x10000
        if
          buf.is_not_empty:
            write! $_bytes_written STDOUT_FILENO buf
            next!
          :
            close! out_fd
            close! err_fd
            waitpid! $_ret $_status pid
            pass

    Output:

      insgesamt 52
      -rw-r--r-- 1 root root 15955 17. Jän 17:59 builtins.h
      -rw-r--r-- 1 root root  4093 17. Jän 17:59 common.h
      -rw-r--r-- 1 root root  4636 17. Jän 17:59 fko.h
      -rw-r--r-- 1 root root  1015 17. Jän 17:59 interpreter.h
      -rw-r--r-- 1 root root  3557 17. Jän 17:59 linker.h
      -rw-r--r-- 1 root root  7579 17. Jän 17:59 memory.h
      -rw-r--r-- 1 root root   304 17. Jän 17:59 platform.h
      -rw-r--r-- 1 root root  1299 17. Jän 17:59 profiler.h
  {
    MIN_ARGUMENTS(2)
    MAX_ARGUMENTS(6)
    if (TYPEOF(ARGUMENTS(1)) != TYPE(std_types::list)) INVALID_ARGUMENTS
    NODE *environment = VAR(std_types::undefined);
    if (ARGUMENT_COUNT >= 3) {
      environment = ARGUMENTS(2);
      if (
        TYPEOF(environment) != TYPE(std_types::undefined) &&
        TYPEOF(environment) != TYPE(std_types::list)
      ) INVALID_ARGUMENTS
    }
    if (
      ARGUMENT_COUNT >= 4 &&
      TYPEOF(ARGUMENTS(3)) != TYPE(std_types::file_descriptor)
    ) INVALID_ARGUMENTS
    if (
      ARGUMENT_COUNT >= 5 &&
      TYPEOF(ARGUMENTS(4)) != TYPE(std_types::file_descriptor)
    ) INVALID_ARGUMENTS
    if (
      ARGUMENT_COUNT >= 6 &&
      TYPEOF(ARGUMENTS(5)) != TYPE(std_types::file_descriptor)
    ) INVALID_ARGUMENTS

    CHECK_IO_ACCESS_RIGHTS

    char **envp = NULL;

    // initialize all pipe handles to invalid file descriptors
    struct {
      int read_fd;
      int write_fd;
    } in_pipe = {-1, -1}, out_pipe = {-1, -1}, err_pipe = {-1, -1};

    NODE *arguments = ARGUMENTS(1);
    char **args = allocate_memory((arguments->list.length+2)*sizeof(char *));
    int i;
    for (i = 0; i < arguments->list.length+1; ++i) {
      args[i] = NULL;
    }
    // convert the command and all arguments into C-strings
    if (!to_c_string(ARGUMENTS(0), &args[0])) goto cleanup;
    long offset = arguments->list.offset;
    for (i = 0; i < arguments->list.length; ++i) {
      if (!to_c_string(arguments->list.data->items[offset+i], &args[i+1]))
        goto cleanup;
    }
    args[arguments->list.length+1] = NULL;

    if (ARGUMENT_COUNT < 4) {
      if (pipe((int *)&in_pipe) != 0) {
        pipe_creation_failed:
        create_error_message(
          module__builtin.constants_base[unique__std___IO_ERROR-1],
          "PIPE_CREATION FAILED", errno, 0, NULL);
        goto cleanup;
      }
    }
    if (ARGUMENT_COUNT < 5) {
      if (pipe((int *)&out_pipe) != 0) goto pipe_creation_failed;
    }
    if (ARGUMENT_COUNT < 6) {
      if (pipe((int *)&err_pipe) != 0) goto pipe_creation_failed;
    }

    pid_t pid = fork();
    if (pid == 0) {
      // child process
      if (ARGUMENT_COUNT >= 4) {
        dup2_fd(ARGUMENTS(3)->file_descriptor.value, STDIN_FILENO);
        close(ARGUMENTS(3)->file_descriptor.value);
      } else {
        close(in_pipe.write_fd);
        dup2_fd(in_pipe.read_fd, STDIN_FILENO);
        close(in_pipe.read_fd);
      }
      if (ARGUMENT_COUNT >= 5) {
        dup2_fd(ARGUMENTS(4)->file_descriptor.value, STDOUT_FILENO);
      }
      if (ARGUMENT_COUNT >= 6) {
        dup2_fd(ARGUMENTS(5)->file_descriptor.value, STDERR_FILENO);
      }
      if (ARGUMENT_COUNT >= 5) {
        close(ARGUMENTS(4)->file_descriptor.value);
      } else {
        close(out_pipe.read_fd);
        dup2_fd(out_pipe.write_fd, STDOUT_FILENO);
        close(out_pipe.write_fd);
      }
      if (ARGUMENT_COUNT >= 6) {
        close(ARGUMENTS(5)->file_descriptor.value);
      } else {
        close(err_pipe.read_fd);
        dup2_fd(err_pipe.write_fd, STDERR_FILENO);
        close(err_pipe.write_fd);
      }

      if (TYPEOF(environment) == TYPE(std_types::list)) {
        envp = allocate_memory((environment->list.length+1)*sizeof(char *));
        int i;
        for (i = 0; i < environment->list.length; ++i) {
          envp[i] = NULL;
        }
        // convert the environment into C-strings
        long offset = environment->list.offset;
        for (i = 0; i < environment->list.length; ++i) {
          if (!to_c_string(environment->list.data->items[offset+i], &envp[i]))
            goto cleanup;
        }
        envp[environment->list.length] = NULL;
        execvpe(args[0], args, envp);
      } else {
        execvp(args[0], args);
      }
      fprintf(stderr, "EXEC \"%s\" FAILED - %s\n", args[0], strerror(errno));
      exit(EXIT_FAILURE);
    }

    // parent process

    if (pid == -1) {
      create_error_message(
              module__builtin.constants_base[unique__std___IO_ERROR-1],
        "FORK FAILED", errno, 0, NULL);
      goto cleanup;
    }

    NODE *child_pid, *child_stdin, *child_stdout, *child_stderr;

    child_pid = process_id_from_int(pid);
    if (ARGUMENT_COUNT < 4) {
      child_stdin = file_descriptor_from_int(in_pipe.write_fd);
    }
    child_stdout = file_descriptor_from_int(out_pipe.read_fd);
    child_stderr = file_descriptor_from_int(err_pipe.read_fd);


    if (ARGUMENT_COUNT == 4) {
      // we got *stdin* from the caller
      START_ARGUMENTS(3)
      ARGUMENTS(0) = child_pid;
      ARGUMENTS(1) = child_stdout;
      ARGUMENTS(2) = child_stderr;
      goto cleanup_2;
    } else if (ARGUMENT_COUNT == 5) {
      // we got *stdin* and *stdout* from the caller
      START_ARGUMENTS(2)
      ARGUMENTS(0) = child_pid;
      ARGUMENTS(1) = child_stderr;
      goto cleanup_2;
    } else if (ARGUMENT_COUNT == 6) {
      // we got *stdin*, *stdout* and *stderr* from the caller
      START_ARGUMENTS(1)
      ARGUMENTS(0) = child_pid;
      goto cleanup_2;
    } else {
      START_ARGUMENTS(4)
      ARGUMENTS(0) = child_pid;
      ARGUMENTS(1) = child_stdin;
      ARGUMENTS(2) = child_stdout;
      ARGUMENTS(3) = child_stderr;
      goto cleanup_2;
    }

    cleanup:

    close_fd(&in_pipe.write_fd);
    close_fd(&out_pipe.read_fd);
    close_fd(&err_pipe.read_fd);

    cleanup_2:

    close_fd(&in_pipe.read_fd);
    close_fd(&out_pipe.write_fd);
    close_fd(&err_pipe.write_fd);

    if (args) {
      for (i = 0; i < arguments->list.length+1; ++i) {
        deallocate_memory(args[i]);
      }
      deallocate_memory(args);
    }
    if (envp) {
      for (i = 0; i < environment->list.length; ++i) {
        deallocate_memory(envp[i]);
      }
      deallocate_memory(envp);
    }
  }

[source]

FUNCTION std::create_process
  #
    creates a new child process

    Parameters:
      filename # the executable image of the new process
      arguments # a list of arguments to supply to the new process
      environment? # a list of environment variables or <undefined>
      stdin? # a file-descriptor to be used as the process' stdin
      stdout? # a file-descriptor to be used as the process' stdout
      stderr? # a file-descriptor to be used as the process' stderr

    Results:
      child_pid # the process id of the new process
      child_stdin? # the file-descriptor to write to the child process' stdin
      child_stdout? # the file-descriptor to read from the child process' stdout
      child_stderr? # the file-descriptor to read from the child process' stderr

    *child_stdin* is returned only if no value was supplied for *stdin*.

    Topics: Input-Output, POSIX

    See also: exec, wait

    Example:

      # we do not check for errors in this example

      create_process! $pid $in_fd $out_fd $err_fd
        "ls" list("-l" "/usr/local/share/funky-0/runtime/")
      close! in_fd
      loop:
        read! $buf out_fd 0x10000
        if
          buf.is_not_empty:
            write! $_bytes_written STDOUT_FILENO buf
            next!
          :
            close! out_fd
            close! err_fd
            waitpid! $_ret $_status pid
            pass

    Output:

      insgesamt 52
      -rw-r--r-- 1 root root 15955 17. Jän 17:59 builtins.h
      -rw-r--r-- 1 root root  4093 17. Jän 17:59 common.h
      -rw-r--r-- 1 root root  4636 17. Jän 17:59 fko.h
      -rw-r--r-- 1 root root  1015 17. Jän 17:59 interpreter.h
      -rw-r--r-- 1 root root  3557 17. Jän 17:59 linker.h
      -rw-r--r-- 1 root root  7579 17. Jän 17:59 memory.h
      -rw-r--r-- 1 root root   304 17. Jän 17:59 platform.h
      -rw-r--r-- 1 root root  1299 17. Jän 17:59 profiler.h
  {
    MIN_ARGUMENTS(2)
    MAX_ARGUMENTS(6)
    if (TYPEOF(ARGUMENTS(1)) != TYPE(std_types::list)) INVALID_ARGUMENTS
    NODE *environment = VAR(std_types::undefined);
    if (ARGUMENT_COUNT >= 3) {
      environment = ARGUMENTS(2);
      if (
        TYPEOF(environment) != TYPE(std_types::undefined) &&
        TYPEOF(environment) != TYPE(std_types::list)
      ) INVALID_ARGUMENTS
    }
    if (
      ARGUMENT_COUNT >= 4 &&
      TYPEOF(ARGUMENTS(3)) != TYPE(std_types::file_descriptor)
    ) INVALID_ARGUMENTS
    if (
      ARGUMENT_COUNT >= 5 &&
      TYPEOF(ARGUMENTS(4)) != TYPE(std_types::file_descriptor)
    ) INVALID_ARGUMENTS
    if (
      ARGUMENT_COUNT >= 6 &&
      TYPEOF(ARGUMENTS(5)) != TYPE(std_types::file_descriptor)
    ) INVALID_ARGUMENTS

    CHECK_IO_ACCESS_RIGHTS

    char **envp = NULL;

    // initialize all pipe handles to invalid file descriptors
    struct {
      int read_fd;
      int write_fd;
    } in_pipe = {-1, -1}, out_pipe = {-1, -1}, err_pipe = {-1, -1};

    NODE *arguments = ARGUMENTS(1);
    char **args = allocate_memory((arguments->list.length+2)*sizeof(char *));
    int i;
    for (i = 0; i < arguments->list.length+1; ++i) {
      args[i] = NULL;
    }
    // convert the command and all arguments into C-strings
    if (!to_c_string(ARGUMENTS(0), &args[0])) goto cleanup;
    long offset = arguments->list.offset;
    for (i = 0; i < arguments->list.length; ++i) {
      if (!to_c_string(arguments->list.data->items[offset+i], &args[i+1]))
        goto cleanup;
    }
    args[arguments->list.length+1] = NULL;

    if (ARGUMENT_COUNT < 4) {
      if (pipe((int *)&in_pipe) != 0) {
        pipe_creation_failed:
        create_error_message(
          module__builtin.constants_base[unique__std___IO_ERROR-1],
          "PIPE_CREATION FAILED", errno, 0, NULL);
        goto cleanup;
      }
    }
    if (ARGUMENT_COUNT < 5) {
      if (pipe((int *)&out_pipe) != 0) goto pipe_creation_failed;
    }
    if (ARGUMENT_COUNT < 6) {
      if (pipe((int *)&err_pipe) != 0) goto pipe_creation_failed;
    }

    pid_t pid = fork();
    if (pid == 0) {
      // child process
      if (ARGUMENT_COUNT >= 4) {
        dup2_fd(ARGUMENTS(3)->file_descriptor.value, STDIN_FILENO);
        close(ARGUMENTS(3)->file_descriptor.value);
      } else {
        close(in_pipe.write_fd);
        dup2_fd(in_pipe.read_fd, STDIN_FILENO);
        close(in_pipe.read_fd);
      }
      if (ARGUMENT_COUNT >= 5) {
        dup2_fd(ARGUMENTS(4)->file_descriptor.value, STDOUT_FILENO);
      }
      if (ARGUMENT_COUNT >= 6) {
        dup2_fd(ARGUMENTS(5)->file_descriptor.value, STDERR_FILENO);
      }
      if (ARGUMENT_COUNT >= 5) {
        close(ARGUMENTS(4)->file_descriptor.value);
      } else {
        close(out_pipe.read_fd);
        dup2_fd(out_pipe.write_fd, STDOUT_FILENO);
        close(out_pipe.write_fd);
      }
      if (ARGUMENT_COUNT >= 6) {
        close(ARGUMENTS(5)->file_descriptor.value);
      } else {
        close(err_pipe.read_fd);
        dup2_fd(err_pipe.write_fd, STDERR_FILENO);
        close(err_pipe.write_fd);
      }

      if (TYPEOF(environment) == TYPE(std_types::list)) {
        envp = allocate_memory((environment->list.length+1)*sizeof(char *));
        int i;
        for (i = 0; i < environment->list.length; ++i) {
          envp[i] = NULL;
        }
        // convert the environment into C-strings
        long offset = environment->list.offset;
        for (i = 0; i < environment->list.length; ++i) {
          if (!to_c_string(environment->list.data->items[offset+i], &envp[i]))
            goto cleanup;
        }
        envp[environment->list.length] = NULL;
        execvpe(args[0], args, envp);
      } else {
        execvp(args[0], args);
      }
      fprintf(stderr, "EXEC \"%s\" FAILED - %s\n", args[0], strerror(errno));
      exit(EXIT_FAILURE);
    }

    // parent process

    if (pid == -1) {
      create_error_message(
              module__builtin.constants_base[unique__std___IO_ERROR-1],
        "FORK FAILED", errno, 0, NULL);
      goto cleanup;
    }

    NODE *child_pid, *child_stdin, *child_stdout, *child_stderr;

    child_pid = process_id_from_int(pid);
    if (ARGUMENT_COUNT < 4) {
      child_stdin = file_descriptor_from_int(in_pipe.write_fd);
    }
    child_stdout = file_descriptor_from_int(out_pipe.read_fd);
    child_stderr = file_descriptor_from_int(err_pipe.read_fd);


    if (ARGUMENT_COUNT == 4) {
      // we got *stdin* from the caller
      START_ARGUMENTS(3)
      ARGUMENTS(0) = child_pid;
      ARGUMENTS(1) = child_stdout;
      ARGUMENTS(2) = child_stderr;
      goto cleanup_2;
    } else if (ARGUMENT_COUNT == 5) {
      // we got *stdin* and *stdout* from the caller
      START_ARGUMENTS(2)
      ARGUMENTS(0) = child_pid;
      ARGUMENTS(1) = child_stderr;
      goto cleanup_2;
    } else if (ARGUMENT_COUNT == 6) {
      // we got *stdin*, *stdout* and *stderr* from the caller
      START_ARGUMENTS(1)
      ARGUMENTS(0) = child_pid;
      goto cleanup_2;
    } else {
      START_ARGUMENTS(4)
      ARGUMENTS(0) = child_pid;
      ARGUMENTS(1) = child_stdin;
      ARGUMENTS(2) = child_stdout;
      ARGUMENTS(3) = child_stderr;
      goto cleanup_2;
    }

    cleanup:

    close_fd(&in_pipe.write_fd);
    close_fd(&out_pipe.read_fd);
    close_fd(&err_pipe.read_fd);

    cleanup_2:

    close_fd(&in_pipe.read_fd);
    close_fd(&out_pipe.write_fd);
    close_fd(&err_pipe.write_fd);

    if (args) {
      for (i = 0; i < arguments->list.length+1; ++i) {
        deallocate_memory(args[i]);
      }
      deallocate_memory(args);
    }
    if (envp) {
      for (i = 0; i < environment->list.length; ++i) {
        deallocate_memory(envp[i]);
      }
      deallocate_memory(envp);
    }
  }

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Input-Output

# std::create_process (a builtin I/O-function)

