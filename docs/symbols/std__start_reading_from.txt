# std::start_reading_from (a polymorphic function)

  starts reading from a file descriptor

  Parameters:
    self: the input-output object
    fd: the file descriptor to read from
    do_close: if true, the file descriptor will be closed after reading
    max_length: the maximum number of bytes to read

  Result:
    self: the updated input-output object

  The function adds a read job to the input-output object's read jobs table.

  Topic: Input-Output Events

  Example:

    $io std_types::io # create an input-output object
    start_reading_from &io STDIN_FILENO # register reading from STDIN
    write &io STDOUT_FILENO "Please enter some text:@nl;"
      # write a prompt text to STDOUT
    $input_buffer "" # create an initially empty input buffer

    loop: # the event loop
      get_events! &io $events # get one or more events
      for_each events # handle all received events
	: (event)
	  event $type $fd $argument # destructure the event
	  case type # check the event type
	    READ: # event is a read event
	      case fd # check the file descriptor
		STDIN_FILENO: # it was a read event from STDIN
		  append &input_buffer argument
		    # append the received data to the input buffer
		  handle_input !io &input_buffer # call the input handler
		  if
		    io.is_undefined:
		      #
			the input handler returned undefined to indicate
			that the input processing is finished
		      terminate! # terminate the program
		    next # otherwise continue processing the events
		next # ignore read events for other file descriptors
	    READ_FAILED: # event is a read error
	      Error! "Error reading from standard input!"
	    WRITE_PENDING: # event is a write pending event
	      # ignore
	      next! # continue processing the events
	    WRITE_COMPLETED: # event is a write completed event
	      # ignore
	      next! # continue processing the events
	    next # ignore all other events
	next # check for more events

    $handle_input: (buffer)
      loop:
	if
	  buffer .contains. '@nl;'
	    # the input buffer contains at least one complete line
	    $line buffer .before. '@nl;' # extract the line
	    if
	      line == "quit" # the user entered "quit"
	      -> undefined undefined
		#
		  return undefined to indicate that the input processing is
		  finished
	      : # Output the line
		write &io STDOUT_FILENO "
		  You entered: "@(line)"
		behind &buffer '@nl;'
		  # remove the processed line from the input buffer
		next # continue processing the buffer
	  -> io buffer
	    # return the (maybe) modified input-output object and buffer

((defined in basic/io/io_events.fky))
((generated by gemma-2-27b-it.Q5_K.gguf))
((2024-07-03 21:04:18))
