[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

FUNCTION std::usleep
{
  CHECK_ARGUMENTS(1)
  CHECK_IO_ACCESS_RIGHTS
  unsigned int microseconds;
  int result;
  if (!to_uint(ARGUMENTS(0), &microseconds)) return;
  EVENT(usleep)
    result = usleep(microseconds);
  INFO
    UINT(microseconds)
    INT(result)
  DATA
    INT(result)
  END
  if (result == -1) {
    create_error_message(
      module__builtin.constants_base[unique__std___IO_ERROR-1],
      "SLEEP FAILED", errno, 0, NULL);
  } else {
    PREPARE_NO_RESULT
  }
}

[documentation remark]

# std::usleep (a builtin I/O-function)

  suspends the execution for the specified number of microseconds

  Parameters:
    delay: the number of microseconds to sleep

  Results:
    none

  **Attention**: This function must be called with I/O-access rights!

  Topic: POSIX

  See also: std::sleep

[EXERCISE]

[symbols]

UNIQUE SIGHUP
UNIQUE SIGUSR1
UNIQUE SIGUSR2
UNIQUE CHILD_CHANGED_STATE
UNIQUE WINDOW_CHANGED_SIZE
POLY std::get_terminal_size
METHOD std_types::file_descriptor/get_terminal_size
FUNCTION std::exitstatus
FUNCTION std::pselect
FUNCTION std::do_not_close
FUNCTION std::waitpid
FUNCTION std::open_tcp_client_socket
FUNCTION std::open_tcp_server_socket
FUNCTION std::accept
FUNCTION std::is_listening
FUNCTION std::get_first_mac_address

FUNCTION std::pselect
  #
    waits for one or more file descriptors to become ready
  {
    MIN_ARGUMENTS(3)
    MAX_ARGUMENTS(4)
    CHECK_RESULTS(4)
    CHECK_IO_ACCESS_RIGHTS
    NODE *read_descriptors = ARGUMENTS(0);
    NODE *write_descriptors = ARGUMENTS(1);
    NODE *except_descriptors = ARGUMENTS(2);
    double timeout = 0.0;
    struct timespec timeout_data;
    struct timespec *timeout_ptr = NULL;

    if (
      ARGUMENT_COUNT > 3 &&
      TYPEOF(ARGUMENTS(3)) != TYPE(std_types::undefined)
    ) {
      CHECK(to_double(ARGUMENTS(3), &timeout))
      if (timeout < 0.0) timeout = 0.0;
      timeout_data.tv_sec = timeout;
      timeout_data.tv_nsec = 1000000000*(timeout-floor(timeout));
      timeout_ptr = &timeout_data;
    }
    long read_descriptor_count, write_descriptor_count, except_descriptor_count;
    fd_set read_set, write_set, except_set;
    int last_fd = 0;
    CHECK(
      initialize_fd_set(
        &read_set, read_descriptors, &read_descriptor_count, &last_fd))
    CHECK(
      initialize_fd_set(
        &write_set, write_descriptors, &write_descriptor_count, &last_fd))
    CHECK(
      initialize_fd_set(
        &except_set, except_descriptors, &except_descriptor_count, &last_fd))
    int ret;
    int caught_hup = false;
    int caught_kill = false;
    int caught_usr1 = false;
    int caught_usr2 = false;
    int chld_changed_state = false;
    int win_changed_size = false;
    EVENT(pselect)
      sigset_t set;
      sigprocmask(0, NULL, &set);
      sigdelset(&set, SIGHUP);
      sigdelset(&set, SIGUSR1);
      sigdelset(&set, SIGUSR2);
      sigdelset(&set, SIGCHLD);
      sigdelset(&set, SIGWINCH);
      retry:;
      ret = pselect(last_fd+1, &read_set, &write_set, &except_set, timeout_ptr, &set);
      if (ret < 0 && errno == EINTR) {
        if (caught_sighup) {
          caught_sighup = false;
          caught_hup = true;
        } else if (caught_sigusr1) {
          caught_sigusr1 = false;
          caught_usr1 = true;
        } else if (caught_sigusr2) {
          caught_sigusr2 = false;
          caught_usr2 = true;
        } else if (child_changed_state) {
          child_changed_state = false;
          chld_changed_state = true;
        } else if (window_changed_size) {
          window_changed_size = false;
          win_changed_size = true;
        } else {
          goto retry;
        }
      }
    DATA
      INT(ret)
      INT(caught_hup)
      INT(caught_kill)
      INT(caught_usr1)
      INT(caught_usr2)
      INT(chld_changed_state)
      INT(win_changed_size)
    END
    // INT(read_count)
    // INT(write_count)
    // INT(except_count)
    // INT_ARRAY(descriptors, descriptor_count)
    if (ret == -1 && errno != EINTR) {
      create_error_message(
        module__builtin.constants_base[unique__std___IO_ERROR-1],
        "PSELECT FAILED", errno, 0, NULL);
      return;
    }
    NODE *signals = VAR(std::empty_list);
    int read_count = 0;
    int write_count = 0;
    int except_count = 0;
    if (ret > 0) { // success
      int fd;
      for (fd = 0; fd <= last_fd; ++fd) {
        if (FD_ISSET(fd, &read_set)) ++read_count;
        if (FD_ISSET(fd, &write_set)) ++write_count;
        if (FD_ISSET(fd, &except_set)) ++except_count;
      }
      if (read_count != read_descriptor_count) {
        if (read_count == 0) {
          read_descriptors = VAR(std::empty_list);
        } else {
          read_descriptors =
            create_descriptor_list(
              &read_set, read_count,
              read_descriptors, read_descriptor_count);
        }
      }
      if (write_count != write_descriptor_count) {
        if (write_count == 0) {
          write_descriptors = VAR(std::empty_list);
        } else {
          write_descriptors =
            create_descriptor_list(
              &write_set, write_count,
              write_descriptors, write_descriptor_count);
        }
      }
      if (except_count != except_descriptor_count) {
        if (except_count == 0) {
          except_descriptors = VAR(std::empty_list);
        } else {
          except_descriptors =
            create_descriptor_list(
              &except_set, except_count,
              except_descriptors, except_descriptor_count);
        }
      }
    } else {
      read_descriptors = VAR(std::empty_list);
      write_descriptors = VAR(std::empty_list);
      except_descriptors = VAR(std::empty_list);
    }
    int signal_count =
      caught_hup+caught_kill+caught_usr1+caught_usr2+
      chld_changed_state+win_changed_size;
    if (signal_count > 0) {
      LIST_DATA *data =
        allocate_large(sizeof(LIST_DATA)+signal_count*sizeof(NODE *));
      data->size = signal_count;
      data->length = signal_count;
      int n = 0;
      if (caught_hup) {
        data->items[n++] =
          module__builtin.constants_base[unique__std___SIGHUP-1];
      }
      if (caught_usr1) {
        data->items[n++] =
          module__builtin.constants_base[unique__std___SIGUSR1-1];
      }
      signals = CREATE(std_types::list, 0, signal_count, data);
      if (caught_usr2) {
        data->items[n++] =
          module__builtin.constants_base[unique__std___SIGUSR2-1];
      }
      if (chld_changed_state) {
        data->items[n++] =
          module__builtin.constants_base[unique__std___CHILD_CHANGED_STATE-1];
      }
      if (win_changed_size) {
        data->items[n++] =
          module__builtin.constants_base[unique__std___WINDOW_CHANGED_SIZE-1];
      }
      signals = CREATE(std_types::list, 0, signal_count, data);
    }
    START_ARGUMENTS(4);
    ARGUMENTS(0) = signals;
    ARGUMENTS(1) = read_descriptors;
    ARGUMENTS(2) = write_descriptors;
    ARGUMENTS(3) = except_descriptors;
    RETURN
  }

FUNCTION std::do_not_close
  {
    CHECK_ARGUMENTS(1)
    CHECK_IO_ACCESS_RIGHTS
    int fd;
    int result;
    if (!file_descriptor_to_int(ARGUMENTS(0), &fd)) return;
    ACTION(do_not_close)
      do {
        result = fcntl(fd, F_GETFD);
      } while (result == -1 && errno == EINTR);
      if (result != -1) {
        int flags = result&~FD_CLOEXEC;
        do {
          result = fcntl(fd, F_SETFD, flags);
        } while (result == -1 && errno == EINTR);
      }
    INFO
      INT(fd)
      INT(result)
    DATA
      INT(result)
    END
    if (result == -1) {
      create_error_message(
        module__builtin.constants_base[unique__std___IO_ERROR-1],
        "DO_NO_CLOSE FAILED", errno, 0, NULL);
    } else {
      PREPARE_NO_RESULT
    }
  }

#
  FUNCTION std::disable_ctrl_c
    {
      CHECK_ARGUMENTS(0)
      CHECK_IO_ACCESS_RIGHTS
      signal(SIGINT, SIG_IGN);
      RETURN_NOTHING
    }


  FUNCTION std::enable_ctrl_c
    {
      CHECK_ARGUMENTS(0)
      CHECK_IO_ACCESS_RIGHTS
      signal(SIGINT, SIG_DFL);
      RETURN_NOTHING
    }

  FUNCTION std::disable_ctrl_z
    {
      CHECK_ARGUMENTS(0)
      CHECK_IO_ACCESS_RIGHTS
      signal(SIGTSTP, SIG_IGN);
      RETURN_NOTHING
    }


  FUNCTION std::enable_ctrl_z
    {
      CHECK_ARGUMENTS(0)
      CHECK_IO_ACCESS_RIGHTS
      signal(SIGTSTP, SIG_DFL);
      RETURN_NOTHING
    }

  FUNCTION std::disable_sigusr1
    {
      CHECK_ARGUMENTS(0)
      CHECK_IO_ACCESS_RIGHTS
      signal(SIGUSR1, SIG_IGN);
      RETURN_NOTHING
    }


  FUNCTION std::enable_sigusr1
    {
      CHECK_ARGUMENTS(0)
      CHECK_IO_ACCESS_RIGHTS
      signal(SIGUSR1, SIG_DFL);
      RETURN_NOTHING
    }

  FUNCTION std::disable_sigusr2
    {
      CHECK_ARGUMENTS(0)
      CHECK_IO_ACCESS_RIGHTS
      signal(SIGUSR2, SIG_IGN);
      RETURN_NOTHING
    }


  FUNCTION std::enable_sigusr2
    {
      CHECK_ARGUMENTS(0)
      CHECK_IO_ACCESS_RIGHTS
      signal(SIGUSR2, SIG_DFL);
      RETURN_NOTHING
    }

#FUNCTION std::pipe
  {
    CHECK_ARGUMENTS(0)
    CHECK_RESULTS(2)
    CHECK_IO_ACCESS_RIGHTS
    int result;
    int fd[2];
    ACTION(pipe)
      result = pipe(fd);
    INFO
      INT(result)
    DATA
      INT(result)
    END
    if (result == -1) {
      create_error_message(
        module__builtin.constants_base[unique__std___IO_ERROR-1],
      "PIPE FAILED", errno, 0, NULL);
    } else {
      START_ARGUMENTS(2);
      ARGUMENTS(0) = file_descriptor_from_int(fd[0]);
      ARGUMENTS(1) = file_descriptor_from_int(fd[1]);
      RETURN
    }
  }

FUNCTION std::waitpid
  #
    waits for a child process to terminate

    Using "waitpid" to do it in a non-blocking way.

    Returns <undefined>/<undefined> if no child terminated

    Parameters: none

    Topic: POSIX
  {
    CHECK_ARGUMENTS(1)
    CHECK_IO_ACCESS_RIGHTS
    int status;
    int result;
    int pid;
    if (!process_id_to_int(ARGUMENTS(0), &pid)) return;
    EVENT(waitpid)
      do {
        result = waitpid(pid, &status, WNOHANG);
      } while (result == -1 && errno == EINTR);
    INFO
      INT(result)
      INT(status)
    DATA
      INT(result)
      INT(status)
    END
    if (result == -1) {
      create_error_message(
        module__builtin.constants_base[unique__std___IO_ERROR-1],
      "WAIT FAILED", errno, 0, NULL);
    } else {
      START_ARGUMENTS(2)
      ARGUMENTS(0) = process_id_from_int(result);
      ARGUMENTS(1) = from_int(status);
    }
  }

FUNCTION std::open_tcp_client_socket
  #
    opens a TCP socket and connects to the given host and port

    Parameters:
      uri # the universal resource identifier of the socket
      port_no # the port number to connect to

    Result:
      socket # the opened and connected socket

    Topic: POSIX

    See also: open_tcp_server_socket, open, close, read, write

    Example:

      open_tcp_client_socket! $fd "funkylang.org" 80
      write! $_bytes_written fd "
        GET / HTTP/1.1@cr;
        Host: funkylang.org@cr;
        Connection: close@cr;
        @cr;
      loop
        :
          read! fd $buf 4096
          if
            buf.is_empty:
              close! fd
              println!
            :
              print! buf
              next!

    Output:

      HTTP/1.1 200 OK
      Date: Thu, 01 Feb 2024 17:21:29 GMT
      Server: Apache
      Last-Modified: Tue, 16 Jan 2024 13:46:22 GMT
      ETag: "edd-60f105b18c05f"
      Accept-Ranges: bytes
      Content-Length: 3805
      Vary: Accept-Encoding
      Connection: close
      Content-Type: text/html

      <html>
      <head>
      <title>Funky</title>
      <link rel="stylesheet" href="style.css"/>
      </head>
      <body>
      ...
  {
    CHECK_ARGUMENTS(2)
    CHECK_IO_ACCESS_RIGHTS
    char *uri = NULL;
    int port_no;
    int result;
    int sock;
    struct hostent *server;
    struct sockaddr_in addr;
    if (!to_c_string(ARGUMENTS(0), &uri)) goto cleanup;
    if (!to_int(ARGUMENTS(1), &port_no)) goto cleanup;
    EVENT(open_tcp_client_socket)
      sock = socket(AF_INET, SOCK_STREAM, 0);
      if (sock == -1) goto error;
      int flags = fcntl(sock, F_GETFL, 0);
      if (flags == -1) goto error;
      if (fcntl(sock, F_SETFL, flags|O_NONBLOCK) == -1) goto error;
      server = gethostbyname(uri);
      if (!server) goto error;
      memset(&addr, 0, sizeof(addr));
      addr.sin_family = AF_INET;
      addr.sin_port = htons(port_no);
      memcpy(&addr.sin_addr.s_addr,server->h_addr,server->h_length);
      do {
        result = connect(sock, (const struct sockaddr *)&addr, sizeof(addr));
      } while (result == -1 && errno == EINTR);
      if (result == -1 && errno == EINPROGRESS) result = 0;
      if (result == 0) {
        result = fcntl(sock, F_SETFL, flags);
      }
    INFO
      C_STRING(uri)
      INT(port_no)
      INT(sock)
    DATA
      INT(sock)
    END
    if (result == -1) {
      error:
      create_error_message(
        module__builtin.constants_base[unique__std___IO_ERROR-1],
        "OPEN_TCP_CLIENT_SOCKET FAILED", errno, 0, NULL);
    } else {
      PREPARE_SINGLE_RESULT(file_descriptor_from_int(sock))
    }
    cleanup:
    deallocate_memory(uri);
  }

FUNCTION std::open_tcp_server_socket
  #
    opens a TCP socket to listen for incoming connections

    Parameters:
      port_no # the port number to listen on
      backlog_count # the maximum number of pending connections
      reuse = false # reuse the socket, even it is still in TIME_WAIT state

    Result:
      socket # the opened and listening socket

    Topic: POSIX

    See also: open_tcp_client_socket, open, close, accept, read, write

    Example:

      open_tcp_server_socket! $fd 80 5
      loop
        :
          accept! fd $client_fd
          print! "New connection from " client_fd.serialize
          ...
  {
    MIN_ARGUMENTS(2)
    MAX_ARGUMENTS(3)
    CHECK_IO_ACCESS_RIGHTS
    int port_no;
    int backlog_count;
    int do_reuse = false;
    int sock;
    int result;
    struct sockaddr_in addr;
    if (!to_int(ARGUMENTS(0), &port_no)) return;
    if (!to_int(ARGUMENTS(1), &backlog_count)) return;
    if (ARGUMENT_COUNT == 3) {
      if (!to_bool(ARGUMENTS(2), &do_reuse)) return;
    }
    EVENT(open_tcp_server_socket)
      sock = socket(AF_INET, SOCK_STREAM, 0);
      if (sock == -1) goto error;
      if (do_reuse) {
        int opt = 1;
        if (
          setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt)) == -1
        ) {
          goto error;
        }
      }
      addr.sin_family = AF_INET;
      addr.sin_addr.s_addr = htonl(INADDR_ANY);
      addr.sin_port = htons(port_no);
      if (bind(sock, (struct sockaddr *)&addr, sizeof(addr)) == -1) goto error;
      if (listen(sock, backlog_count) == -1) goto error;
    INFO
      INT(port_no)
      INT(backlog_count)
      INT(sock)
    DATA
      INT(sock)
    END
    if (result == -1) {
      error:
      create_error_message(
        module__builtin.constants_base[unique__std___IO_ERROR-1],
        "OPEN_TCP_SERVER_SOCKET FAILED", errno, 0, NULL);
    } else {
      PREPARE_SINGLE_RESULT(file_descriptor_from_int(sock))
    }
  }

FUNCTION std::accept
  #
    accepts an incoming connection on a socket

    Parameter:
      socket # the socket to accept the connection on

    Returns:
      socket # a new socket for the accepted connection

    Topic: POSIX

    See also: open_tcp_server_socket, read, write, close

    Example:

      open_tcp_server_socket! $sockd 8080 5
      accept $conn sockd
      write! conn ...
  {
    CHECK_ARGUMENTS(1)
    CHECK_IO_ACCESS_RIGHTS
    int sock;
    int result;
    int conn;
    if (!file_descriptor_to_int(ARGUMENTS(0), &sock)) return;
    EVENT(accept)
      do {
        conn = accept(sock, NULL, 0);
      } while (conn == -1 && errno == EINTR);
      if (conn == -1) {
        create_error_message(
          module__builtin.constants_base[unique__std___IO_ERROR-1],
          "ACCEPT FAILED", errno, 0, NULL);
      }
    INFO
      INT(sock)
      INT(conn)
    DATA
      INT(conn)
    END
    if (conn != -1) {
      PREPARE_SINGLE_RESULT(file_descriptor_from_int(conn))
    }
  }

FUNCTION std::is_listening
  #
    checks if a socket is listening for incoming connections

    Parameters:
      socket # the socket to check

    Returns:
      bool # true if the socket is listening, false otherwise

    Topic: POSIX

    See also: open_tcp_socket, accept, read, write, close

    Example:

      open_tcp_server_socket! $sock 8080 5
      is_listening! $does_listen sock
      if does_listen ...
  {
    CHECK_ARGUMENTS(1)
    CHECK_IO_ACCESS_RIGHTS
    int sock;
    if (!file_descriptor_to_int(ARGUMENTS(0), &sock)) return;
    int result;
    int does_listen;
    socklen_t len = sizeof(does_listen);
    result = getsockopt(sock, SOL_SOCKET, SO_ACCEPTCONN, &does_listen, &len);
    if (result == -1) {
      create_error_message(
        module__builtin.constants_base[unique__std___IO_ERROR-1],
        "GETSOCKOPT FAILED", errno, 0, NULL);
    } else {
      RETURN_BOOLEAN(does_listen ? true : false)
    }
  }

FUNCTION std::get_first_mac_address
  #
    returns the first available MAC address of the system

    Returns:
      string # the MAC address as a 6-byte binary string
  {
    CHECK_ARGUMENTS(0)
    CHECK_IO_ACCESS_RIGHTS
    #ifndef __CYGWIN__
      struct ifaddrs *addrs, *ifa;
      getifaddrs(&addrs);
      for (ifa = addrs; ifa != NULL; ifa = ifa->ifa_next) {
        if (ifa->ifa_addr == NULL) continue;
        if (ifa->ifa_addr->sa_family != AF_PACKET) continue;
        if (ifa->ifa_name[0] == 'l' && ifa->ifa_name[1] == 'o') continue;
        struct sockaddr_ll *sdl = (struct sockaddr_ll *)ifa->ifa_addr;
        NODE *result = from_latin_1_string(
          ((struct sockaddr_ll *)ifa->ifa_addr)->sll_addr, 6);
        freeifaddrs(addrs);
        RETURN_SINGLE_RESULT(result)
      }
      freeifaddrs(addrs);
    #endif
    RETURN_UNDEFINED
  }

[source]

FUNCTION std::get_first_mac_address
  #
    returns the first available MAC address of the system

    Returns:
      string # the MAC address as a 6-byte binary string
  {
    CHECK_ARGUMENTS(0)
    CHECK_IO_ACCESS_RIGHTS
    #ifndef __CYGWIN__
      struct ifaddrs *addrs, *ifa;
      getifaddrs(&addrs);
      for (ifa = addrs; ifa != NULL; ifa = ifa->ifa_next) {
        if (ifa->ifa_addr == NULL) continue;
        if (ifa->ifa_addr->sa_family != AF_PACKET) continue;
        if (ifa->ifa_name[0] == 'l' && ifa->ifa_name[1] == 'o') continue;
        struct sockaddr_ll *sdl = (struct sockaddr_ll *)ifa->ifa_addr;
        NODE *result = from_latin_1_string(
          ((struct sockaddr_ll *)ifa->ifa_addr)->sll_addr, 6);
        freeifaddrs(addrs);
        RETURN_SINGLE_RESULT(result)
      }
      freeifaddrs(addrs);
    #endif
    RETURN_UNDEFINED
  }

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: POSIX, Input-Output, Input-Output

# std::get_first_mac_address (a builtin I/O-function)

