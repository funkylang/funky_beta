[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std_types::undefined.is_defined false # obvious

[documentation remark]

# std::undefined.is_defined (an attribute)

  always returns false

  Parameter:
    self: an instance of <std_types::undefined>

  Result:
    success: false

  Topic: Objects

  See also: std_types::undefined, std_types::object

[source]

$std_types::rectangle.x_of 0

[documentation remark]

# std_types::rectangle.std::x_of (an attribute)

  the x-coordinate of the rectangle

  Parameters:
    self: the rectangle

  Result:
    x: the x-coordinate of the rectangle

  Topic: Graphic Primitives

  See also: std_types::rectangle/std::y_of,
            std_types::rectangle/std::width_of,
            std_types::rectangle/std::height_of

[source]

$std::clear_colour_of ()

[documentation remark]

# std::clear_colour_of (an attribute)

  returns the clear colour of the specified object

  Parameters:
    self: the object

  Result:
    colour: the clear colour of the object

  Topic: Terminal

  See also: std::draw_colour_of, std::set_clear_colour, std::clear

[EXERCISE]

[symbols]


# Topics: Tables, Collections

$std::is_an_insert_order_table () # obvious
$std_types::object.is_an_insert_order_table false # obvious
$std_types::insert_order_table.is_an_insert_order_table true # obvious
$std_types::insert_order_table std_types::table
$std_types::insert_order_table.keys_of empty_list
$std_types::insert_order_table.values_of empty_list
$std_types::insert_order_table.index_table_of empty_hash_table
$std::empty_insert_order_table std_types::insert_order_table
$std_types::insert_order_table/:
$std_types::insert_order_table/length_of: (self)
$std_types::insert_order_table/for_each:

# retrieve keys

$std_types::insert_order_table/first_key_of:
$std_types::insert_order_table/last_key_of:

# retrieve values

$std_types::insert_order_table/first_item_of:
$std_types::insert_order_table/last_item_of:

# map

$std_types::insert_order_table/map:

# reduce


# map_reduce

$std_types::insert_order_table/map_reduce:

# constructor

$std::insert_order_table:

# serialization

$std_types::insert_order_table.serialization_tag_of "insert_order_table"
$std_types::insert_order_table.empty_collection_of empty_insert_order_table

#
  Copyright (C) 2022 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Topics: Tables, Collections

$std::is_an_insert_order_table () # obvious

$std_types::object.is_an_insert_order_table false # obvious

$std_types::insert_order_table.is_an_insert_order_table true # obvious

$NONE .

$keys_of ()

$values_of ()

$index_table_of ()

$std_types::insert_order_table std_types::table
  #
    the prototype object for all insert-order tables

$std_types::insert_order_table.keys_of empty_list

$std_types::insert_order_table.values_of empty_list

$std_types::insert_order_table.index_table_of empty_hash_table

$std::empty_insert_order_table std_types::insert_order_table
  #
    an empty insert-order table

$std_types::insert_order_table/:
  #
    retrieve or add an item
  (
    myself^
    key
    value = NONE
  )
  $values values_of(myself)
  $index_table index_table_of(myself)
  $index index_table(key)
  if
    NONE == value
    :
      if
        index.is_defined
        -> values(index)
        -> undefined
    :
      if
        value.is_defined:
          if
            index.is_defined: # update entry
              !values(index) value
              -> myself(.values_of values)
            : # add a new entry
              $keys keys_of(myself)
              push &keys key
              push &values value
              !index_table(key) length_of(values)
              ->
                myself
                  .keys_of keys
                  .values_of values
                  .index_table_of index_table
        : # remove entry
          # ATTENTION: This code is nonsense and cannot work!!!
          if
            index.is_defined:
              $keys keys_of(myself)
              !keys
                append(range(keys 1 index-1) range(keys index+1 -1))
              !values
                append(range(values 1 index-1) range(values index+1 -1))
              !index_table(key) undefined
              ->
                myself
                  .keys_of keys
                  .values_of values
                  .index_table_of index_table
            -> myself

$std_types::insert_order_table/length_of: (self)
  -> length_of(values_of(self))

$std_types::insert_order_table/for_each:
  #
    invokes the specified callback for each item of the table
  (
    self # the hash table to iterate over
    body # the statement sequence to execute for each item
    finally = next # called after all items have been iterated over
  )
  $values values_of(self)
  if
    parameter_count_of(body) == 2:
      $keys keys_of(self)
      for_each! values
        : (index _value)
          body! keys(index) values(index)
        :
          finally!
    :
      for_each! values body finally

###

# retrieve keys

$std_types::insert_order_table/first_key_of:
  #
    returns the first key of a non-empty <insert_order_table>
  (
    self
  )
  -> key_of(self)(1)

$std_types::insert_order_table/last_key_of:
  #
    returns the last key of a non-empty <insert_order_table>
  (
    self
  )
  -> key_of(self)(-1)

###

# retrieve values

$std_types::insert_order_table/first_item_of:
  #
    returns the first value of a non-empty <insert_order_table>
  (
    self
  )
  -> values_of(self)(1)

$std_types::insert_order_table/last_item_of:
  #
    returns the last value of a non-empty <insert_order_table>
  (
    self
  )
  -> values_of(self)(-1)

###

# map

$std_types::insert_order_table/map:
  #
    applies a function to all values of the insert order table

    A hash table containing the "mapped" items is returned.

    See also: reduce, map_reduce
  (
    self # the association list which values will be mapped
    function # the function to apply to each element of the table
  )
  if
    parameter_count_of(function) == 1:
      map &self.values_of function
      -> self
    :
      $keys keys_of(self)
      map &self.values_of: (idx value) function keys(idx) value
      -> self

###

# reduce

###

# map_reduce

$std_types::insert_order_table/map_reduce:
  #
    combines a map and a reduce operation into a single operation

    Does not create an intermediate table to hold the "mapped" values.

    Topic: Tables

    See also: map, reduce
  (
    self # the table to work on
    map_function # the function to apply to each element of the table
    reduce_function = append # the function to apply to pairs of values
    unit = undefined # the value to return for empty tables
  )
  if
    self.is_empty
    -> unit
    :
      if
        parameter_count_of(map_function) == 2:
          $keys keys_of(self)
          $values values_of(self)
          map_reduce 1 length_of(self)

          $map_reduce: (s e)
            if
              s < e:
                $m (s+e) >> 1
                reduce_function
                  map_reduce(s m)
                  map_reduce(m+1 e)
              -> map_function(keys(s) values(s))
        :
          map_reduce values_of(self) map_function reduce_function unit

###

# constructor

$std::insert_order_table:
  (
    pairs*
  )
  $table empty_insert_order_table
  for_each pairs
    : (pair)
      pair $key $value
      !table(key) value
      next
    -> table

###

# serialization

$std_types::insert_order_table.serialization_tag_of "insert_order_table"

$std_types::insert_order_table.empty_collection_of empty_insert_order_table

[source]

$std_types::insert_order_table.is_an_insert_order_table true # obvious

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Tables, Collections

# std_types::insert_order_table.std::is_an_insert_order_table (an attribute)

