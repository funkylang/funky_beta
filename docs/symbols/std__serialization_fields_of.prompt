[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std::clear_colour_of ()

[documentation remark]

# std::clear_colour_of (a polymorphic function)

  the clear colour to use

  Parameter:
    self: the object from which to get the clear colour

  Result:
    colour: the clear colour

  Returns the clear colour of the object.

  Topic: Terminal

  See also: std::draw_colour_of, std::set_clear_colour

[source]

$std_types::screen/clear:
  (
    self
    x = 1
    y = 1
    width = undefined
    height = undefined
  )
  update_if width.is_undefined &width -> width_of(self)-x+1
  update_if height.is_undefined &height -> height_of(self)-y+1
  std_private::clear self self x y width height

$std::clear ()

[documentation remark]

# std::clear (a polymorphic function)

  clears a rectangular area

  Parameters:
    screen # some kind of screen
    x: x-coordinate of the upper left corner
    y: y-coordinate of the upper left corner
    width: width of the area
    height: height of the area

  Result:
    screen: the updated screen

  The area is cleared using the current clear colour. Use
  <std::set_clear_colour> to change the current clear colour.

  The area is clipped at the screen's borders.

  Topic: Terminal

  See also: std_types::screen/std::clear, std::draw_text,
            std::set_clear_colour

  Example:

    $my_screen create_screen(terminal 40 25)
    set_clear_colour &my_screen GREEN
    clear &my_screen 11 6 20 15

[EXERCISE]

#
  Topic: Basics

  The standard library provides many functions and "types". There are no
  types in Funky, but it is common to abbreviate *prototype objects* as
  *types*.

  The standard libraries use the namespace "std_types" for prototype objects.

  The namespace "std_types" is reserved for definitions by the standard
  libraries.

  For most "types" there is a constructor function, or, if the type describes
  a *singleton*, a single object with the same name, but in the namespace "std".

  The namespace "std" is also reserved for definitions by the standard
  libraries.

  An example:

  <std_types::list>

  is the prototype for lists.

  and

  <std::list>

  is the constructor function for lists.

  Another example:

  <std_types::true>

  is the type of the boolean value "true" and

  <std::true>

  *is* the boolean value "true".

  There are three root objects. All other objects are derived from one of these
  objects.

  These root objects are:

[symbols]

$std::is_defined ()
$std_types::object.is_defined true

# Serialization

$std::serialization_fields_of ()
$std_types::object.serialization_tag_of "object"
$std_types::object.serialization_fields_of empty_list
$std_types::object/serialize:
$std_types::object.deserializer_of:

#
  Copyright (C) 2021 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
  Topic: Basics

  The standard library provides many functions and "types". There are no
  types in Funky, but it is common to abbreviate *prototype objects* as
  *types*.

  The standard libraries use the namespace "std_types" for prototype objects.

  The namespace "std_types" is reserved for definitions by the standard
  libraries.

  For most "types" there is a constructor function, or, if the type describes
  a *singleton*, a single object with the same name, but in the namespace "std".

  The namespace "std" is also reserved for definitions by the standard
  libraries.

  An example:

  <std_types::list>

  is the prototype for lists.

  and

  <std::list>

  is the constructor function for lists.

  Another example:

  <std_types::true>

  is the type of the boolean value "true" and

  <std::true>

  *is* the boolean value "true".

  There are three root objects. All other objects are derived from one of these
  objects.

  These root objects are:

$std::is_defined ()
  #
    returns true for all "normal" objects"

    Topic: Objects

    See also: is_undefined

$std_types::object.is_defined true
  #
    true for all objects that are not <undefined>

    Topic: Objects

###

# Serialization

$std::serialization_fields_of ()

$std_types::object.serialization_tag_of "object"

$std_types::object.serialization_fields_of empty_list

$std_types::object/serialize:
  (
    obj
    indent = undefined
  )
  $new_indent
    if
      indent.is_defined
      -> indent+2
      -> undefined
  $fieldnames_and_getters serialization_fields_of(obj)
  $i 1
  $len length_of(fieldnames_and_getters)
  $buf ""
  loop:
    if
      i < len:
        $field fieldnames_and_getters(i+1)(obj)
        if
          field.is_defined:
            $fieldname fieldnames_and_getters(i)
            append &buf serialize(fieldname new_indent)
            append &buf serialize(field new_indent)
            !i i+2
            next
          :
            !i i+2
            next
      :
        append string(serialization_tag_of(obj) " <" len ">@nl;") &buf
        update_if indent.is_defined &buf -> append(tabs_and_spaces(indent) buf)
        -> buf

$std_types::object.deserializer_of:
  (
    prototype
    items
  )
  $tab serialization_fields_of(prototype).to_table
  $i 1
  $n length_of(items) >> 1
  loop:
    if
      i <= n:
        $key items(2*i-1)
        $value items(2*i)
        inc &i
        $setter tab(key)
        if
          setter.is_defined:
            setter &prototype value
            next
          next
      -> prototype

$to_table: (fields)
  $i 1
  $n length_of(fields)
  $tab empty_key_order_table
  loop:
    if
      i < n:
        $key fields(i)
        $value fields(i+1)
        !tab(key) value
        !i i+2
        next
      -> tab

[source]

$std_types::object.serialization_fields_of empty_list

$std_types::screen.serialization_fields_of
  list
    `rows_of
    `cursor_x_of
    `cursor_y_of
    `std::width_of
    `std::height_of
    `draw_colour_of
    `clear_colour_of

$std_types::terminal.serialization_fields_of
  list
    `rows_of
    `cursor_x_of
    `cursor_y_of
    `std::width_of
    `std::height_of
    `draw_colour_of
    `clear_colour_of
    `has_a_visible_cursor
    `current_buffer_of

$std::serialization_fields_of ()

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Do not create completely new examples on your own

### Use only one of the following topics: Basics

# std::serialization_fields_of (a polymorphic function)

