[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std_types::screen/std::clear:
  (
    self
    x = 1
    y = 1
    width = undefined
    height = undefined
  )
  update_if width.is_undefined &width -> width_of(self)-x+1
  update_if height.is_undefined &height -> height_of(self)-y+1
  std_private::clear self self x y width height

[documentation remark]

# std_types::screen/clear (a method)

  clears the specified rectangular area

  Parameters:
    self: the screen to be (partially) cleared
    x: x-coordinate of the upper left corner
    y: y-coordinate of the upper left corner
    width: width of the area
    height: height of the area

  Result:
    screen: the updated screen

  The specified area is filled with spaces using the the current draw-
  and clear colour.

  The area is clipped at the screen's borders.

  This function also works for "graphical screens" (line_height != 1).

  Topic: Terminal

  See also: std_types::screen/std::set_clear_colour,
            std_types::screen/std::copy

[source]

$std_types::string/match:
  (
    self
    stream
  )
  $rc result_count()
  $len length_of(self)
  if
    length_of(stream) >= len:
      if
        range(stream 1 len) == self:
          if
            rc == 1
            -> len
            -> len undefined
        fail
    fail

  $fail:
    if
      rc == 1
      -> undefined
      -> undefined undefined

[documentation remark]

# std_types::string/std::match (a method)

  matches the start of the stream with the string

  Parameters:
    self: the string to match
    stream: the stream to match against

  Results:
    length: the number of matched characters (or <undefined> on fail)
    capture: the matched string (if requested)

  Attempts to match the start of the stream with the specified string.

  If the match is successful the length of the match (= the length of the
  string) is returned.

  If the caller requested two result values then in addition to the string
  length the string itself ("the capture") is also returned.

  If the match fails then one or two <std::undefined>-values are returned.

  Topic: Strings

  See also: std_types::string/std::match_back, std_types::string/std::search

[source]

$std_types::generic_list/map_or_error:
  (
    self
    function
  )
  if
    self.is_empty
    -> self
    :
      $map
        if
          parameter_count_of(function) == 2
          ->
            : (s e)
              if
                s < e:
                  $m (s+e) >> 1
                  append_or_error
                    map(s m)
                    map(m+1 e)
                :
                  $mapped_item function(s self(s))
                  if
                    mapped_item.is_an_error
                    -> mapped_item
                    -> list(mapped_item)
          ->
            : (s e)
              if
                s < e:
                  $m (s+e) >> 1
                  append_or_error
                    map(s m)
                    map(m+1 e)
                :
                  $mapped_item function(self(s))
                  if
                    mapped_item.is_an_error
                    -> mapped_item
                    -> list(mapped_item)

      map 1 length_of(self)

[documentation remark]

# std_types::generic_list/std::map_or_error (a method)

  applies a function to all elements of the list

  Parameters:

    self: the list which items will be mapped
    function: the function to apply to each element of the list

  Result:
    list: the list of "mapped" items

  A list of the "mapped" items is returned.

  If any item ist mapped to an error object than the result ist not a
  collection but the first (left-to-right-order) error object created.

  Topic: Lists

  See also: std_types::generic_list/std::reduce,
            std_types::generic_list/std::map_reduce

[EXERCISE]

#
  Topic: Input-Output

  Input/Output is handled in a special way in Funky.

  I/O-functions must be called with so-called *I/O-access rights*.

  To call a function with I/O-access rights you

  * must have *I/O-access rights* yourself

  * hand them on to the called function

  To hand on *I/O-access rights* a function is called with a "!"-suffix.

  Related topics: Input-Output Events, POSIX, Input-Output Task Manager

  Example:

    println! "Hello, world!"

  Output:

    Hello, world!

#
  Topic: POSIX

  The Funky-API includes most POSIX-function calls.

  The are wrapped in a Funky-style API.

  Funky uses mainly blocking I/O but makes heavy use of the <std::pselect>
  function to make I/O-calls only when non-blocking behaviour is guaranteed.

  In most cases it will be more appropriate to use the <@Input-Output>-API than
  the POSIX-API.

  Related topics: Input-Output

[symbols]


# File Operations

$std::load () # loads a file in some way; returns a string
$std::save () # saves a file in some way
$std::update ()

# Directory Entry Attributes

$std::access_time_of ()
$std::modification_time_of ()
$std::status_change_time_of ()
$std::is_a_directory ()
$std::sleep:
$std::write_string_to:
$std::write_to:
$std::writeln_to:
$std::print_string_to:
$std::print_to ()
$std_types::file_descriptor/print_to:
$std::println_to:
$std::print_string:
$std::print:
$std::println:
$std::eprint_string:
$std::eprint:
$std::eprintln:
$std::read_from:
$std::read_from_until:
$std::readln_from:
$std::read_all_from:
$std::get_from_until:
$std::getln_from:
$std::get_until:
$std::getln:
$std_types::string/load:
$std_types::file_descriptor/load:
$std_types::io.load_buffer_of empty_hash_table
$std_types::io.max_length_of empty_hash_table
$std_types::io.id_of empty_hash_table
$std_types::io/load:
$std_types::string/save:
$std::try:
$std::check:
$std::file_exists:
$std::directory:
$std_types::stat/access_time_of:
$std_types::stat/modification_time_of: (self)
$std_types::stat/status_change_time_of: (self)
$std_types::stat/is_a_directory: (self)
$std::call:
$std::terminate:
$std::is_a_file_descriptor ()
$std_types::object.is_a_file_descriptor false
$std_types::file_descriptor.is_a_file_descriptor true
$std_types::file_descriptor.serialization_tag_of "file_descriptor"
$std_types::file_descriptor/serialize:
$std_types::file_descriptor.deserializer_of:
$std::is_a_process_id ()
$std_types::object/is_a_process_id false
$std_types::process_id/is_a_process_id true
$std_types::process_id.serialization_tag_of "process_id"
$std_types::process_id/serialize:
$std_types::process_id.deserializer_of:
$std::pipe:
$std::pipe_commands:
$std::which:
$std::find_first_process: (name)
$std::find_processes: (name)
$std::get_process_name: (pid)
$std::extern:

$file_closed: (io fd _dummy)
  deregister_all_handlers &io fd
  $buf load_buffer_of(io)(fd)
  $id id_of(io)(fd)
  !io.load_buffer_of(fd) undefined
  !io.max_length_of(fd) undefined
  !io.id_of(fd) undefined
  -> io tuple(JOB_COMPLETED id buf)

$read_failed: (io fd err)
  deregister_all_handlers &io fd
  !io.load_buffer_of(fd) undefined
  !io.max_length_of(fd) undefined
  !io.id_of(fd) undefined
  -> io tuple(JOB_FAILED fd err)

$std_types::string/save:
  (
    filename
    data
  )
  open! $fh filename "w+"
  check fh
  write_to! fh data
  close! fh

$std::try:
  #
    Example:

      $buf undefined
      try $success: load! !buf "test.dat"
      if
        buf.is_an_error:
          println! "Failed to load test.dat"
        :
          # successfully loaded "test.dat"
          ...
  (
    body
  )
  body!
  -> undefined

$std::check:
  (
    argument
  )
  if
    argument.is_an_error
    -> argument
    pass

$std::file_exists:
  #
    Example:

      file_exists! $does_exist "test.dat"
      if
        does_exist:
          println! "test.dat exists"
        :
          println! "test.dat does not exist"
  (
    filename
  )
  stat! $info filename
  -> not(info.is_an_error)

$std::directory:
  #
    Example:

      directory! $entries "/usr/bin"
      for_each entries
        : (entry)
          println! name_of(entry)
          next!
        pass
  (
    options*
    pathname
  )
  extract_options options
    SORT = false $do_sort
  $entries empty_list
  opendir! $dir pathname
  loop:
    readdir! $entry dir
    if
      entry.is_an_error:
        closedir! dir
        if
          do_sort:
            sort entries: (left right) -> name_of(left) < name_of(right)
          -> entries
      :
        push &entries entry
        next!

$std_types::stat/access_time_of:
  (
    self
  )
  ->
    +
      access_time_seconds_of(self)
      access_time_nanoseconds_of(self)/1'000'000'000

$std_types::stat/modification_time_of: (self)
  ->
    +
      modification_time_seconds_of(self)
      modification_time_nanoseconds_of(self)/1'000'000'000

$std_types::stat/status_change_time_of: (self)
  ->
    +
      status_change_time_seconds_of(self)
      status_change_time_nanoseconds_of(self)/1'000'000'000

$std_types::stat/is_a_directory: (self)
  -> mode_of(self)(1) == 'd'

$std::call:
  (
    cmd
    args
  )
  $do_collect_output (result_count() >= 2)
  $do_collect_error_output (result_count() == 3)
  $env_vars undefined
  map &args to_string
  update_if environment.is_defined &env_vars:
    !env_vars empty_list
    for_each environment
      : (key value)
        push &env_vars "@(key)=@(value)"
        next
      -> env_vars
  create_process! $pid $in_fd $out_fd $err_fd cmd args env_vars
  close! in_fd
  $io std_types::io
  join_process &io pid
  start_reading_from &io out_fd
  start_reading_from &io err_fd

  $out ""
  $err ""
  loop:
    get_events! &io $events
    for_each events
      : (event)
        event $type $fd $data
        case type
          READ:
            if
              data == ""
              next
              :
                case fd
                  out_fd:
                    if
                      do_collect_output:
                        append &out data
                        next!
                      :
                        write_to! STDOUT_FILENO data
                        next!
                  err_fd:
                    if
                      do_collect_error_output:
                        append &err data
                        next!
                      :
                        write_to! STDERR_FILENO data
                        next!
                  :
                    next!
          PROCESS_JOINED:
            $ret data
            if
              do_collect_output:
                if
                  do_collect_error_output
                  -> ret out err
                  -> ret out
              -> ret
          : # ignore all other signals
            next!
      next

$std::terminate:
  exit! EXIT_SUCCESS

$std::is_a_file_descriptor ()

$std_types::object.is_a_file_descriptor false

$std_types::file_descriptor.is_a_file_descriptor true

$std_types::file_descriptor.serialization_tag_of "file_descriptor"

$std_types::file_descriptor/serialize:
  (
    self
    indent = undefined
  )
  $str "
    file_descriptor @(self.to_integer)
  if
    indent.is_defined
    -> append(tabs_and_spaces(indent) str)
    -> str

$std_types::file_descriptor.deserializer_of:
  (
    _type
    argument
  )
  -> file_descriptor(integer(argument))

$std::is_a_process_id ()

$std_types::object/is_a_process_id false

$std_types::process_id/is_a_process_id true

$std_types::process_id.serialization_tag_of "process_id"

$std_types::process_id/serialize:
  (
    self
    indent = undefined
  )
  $str "
    process_id @(self.to_integer)
  if
    indent.is_defined
    -> append(tabs_and_spaces(indent) str)
    -> str

$std_types::process_id.deserializer_of:
  (
    _type
    argument
  )
  -> process_id(integer(argument))

$command_of ()

$extern_call:
  (
    myself^
    arguments*
  )
  call! command_of(myself) map(flatten(arguments) to_string)

$std::pipe:
  (
    args*
  )
  $i 1
  $n length_of(args)
  $in_fd undefined
  $feed undefined
  $commands empty_list
  $head undefined
  $arguments undefined
  $first_arg args(1)
  if
    first_arg.is_a_string:
      !feed first_arg
      !i 2
      build_commands!
    :
      if
        first_arg.is_a_file_descriptor:
          !in_fd first_arg
          !i 2
          build_commands!
        build_commands

  $build_commands:
    loop
      :
        if
          i > n break
          :
            $arg args(i)
            if
              arg.is_a_function:
                update_if head.is_defined &commands:
                  push commands tuple(head map(flatten(arguments) to_string))
                !head command_of(arg)
                !arguments empty_list
                inc &i
                next!
              :
                push &arguments arg
                inc &i
                next!
      :
        update_if head.is_defined &commands:
          push commands tuple(head map(flatten(arguments) to_string))
        run_pipe! in_fd feed commands

$std::pipe_commands:
  (
    feed_or_fd = undefined
    commands
  )
  if
    feed_or_fd.is_defined:
      if
        feed_or_fd.is_a_file_descriptor:
          run_pipe! feed_or_fd undefined commands
        :
          run_pipe! undefined feed_or_fd commands
    :
      run_pipe! undefined undefined commands

$run_pipe:
  (
    in_fd
    feed
    commands
  )
  $pids empty_hash_table
  $err_fds empty_hash_table
  $out_fd in_fd
  $env_vars undefined
  update_if environment.is_defined &env_vars:
    !env_vars empty_list
    for_each environment
      : (key value)
        push &env_vars "@(key)=@(value)"
        next
      -> env_vars
  for_each commands
    : (idx command)
      command $head $arguments
      map &arguments to_utf8
      $pid undefined
      $err_fd undefined
      if
        idx == 1 && in_fd.is_undefined:
          create_process! !pid !in_fd !out_fd !err_fd head arguments env_vars
          store_pid_and_err_fd!
        :
          create_process! !pid !out_fd !err_fd head arguments env_vars out_fd
          store_pid_and_err_fd!

      $store_pid_and_err_fd:
        !pids(pid) idx
        !err_fds(err_fd) idx
        next!
    :
      $ret dup(list(undefined) length_of(commands))
      $out ""
      $err dup(list("") length_of(commands))
      if
        feed.is_defined
        manage_io
        :
          close! in_fd
          !in_fd undefined
          manage_io!

      $manage_io:
        loop:
          $read_descriptor_list keys_of(err_fds)
          $write_descriptor_list
            if
              in_fd.is_defined
              -> list(in_fd)
              -> empty_list
          update_if out_fd.is_defined &read_descriptor_list:
            push read_descriptor_list out_fd
          pselect!
            $signals
            $read_descriptors read_descriptor_list
            $write_descriptors write_descriptor_list
            $_out_of_band_descriptors empty_list
          for_each signals
            : (signal)
              if
                signal == CHILD_CHANGED_STATE:
                  loop
                    :
                      wait! $rpid $status
                      if
                        rpid.is_defined:
                          !ret(pids(rpid)) status
                          !pids(rpid) undefined
                          if!
                            pids.is_empty
                            break
                            next
                        break
                    next
                next
            :
              for_each write_descriptors
                : (write_descriptor) # must be <in_fd>
                  write! $bytes_written write_descriptor feed
                  range &feed bytes_written+1 -1
                  if
                    feed.is_empty:
                      close! in_fd
                      !in_fd undefined
                      next!
                    next
                :
                  for_each read_descriptors
                    : (read_descriptor)
                      read! $buf read_descriptor 0x100000
                      if
                        buf.is_empty: # closed from the other side
                          close! read_descriptor
                          if
                            read_descriptor == out_fd:
                              !out_fd undefined
                              next!
                            :
                              !err_fds(read_descriptor) undefined
                              next!
                        :
                          if
                            read_descriptor == out_fd:
                              append &out buf
                              next!
                            :
                              append &err(err_fds(read_descriptor)) buf
                              next!
                    :
                      if!
                        pids.is_empty && out_fd.is_undefined && err_fds.is_empty
                        -> ret out err
                        next

$std::which:
  (
    name
  )
  if
    environment.is_undefined:
      get_environment !environment
      search!
    search

  $search:
    for_each split(environment("PATH") ':')
      : (pathname)
        $filename append(pathname "/" name)
        file_exists! filename $does_exist
        if! does_exist
          -> filename
          next
      -> undefined

$std::find_first_process: (name)
  opendir! $dir "/proc"
  loop:
    readdir! $entry dir
    if
      entry.is_an_error:
        closedir! dir
        -> undefined
      :
        $proc_num name_of(entry)
        if
          proc_num .matches. many(DIGIT):
            load! $buf "/proc/@(proc_num)/cmdline"
            if
              buf.is_empty
              next
              :
                $proc_name buf .truncate_from. '@0;'
                truncate_until &proc_name '/' -1
                if!
                  proc_name .matches. name
                  -> proc_num.to_integer
                  next
          next

$std::find_processes: (name)
  opendir! $dir "/proc"
  $pids empty_list
  loop:
    readdir! $entry dir
    if
      entry.is_an_error:
        closedir! dir
        -> pids
      :
        $proc_num name_of(entry)
        if
          proc_num .matches. many(DIGIT):
            load! $buf "/proc/@(proc_num)/cmdline"
            if
              buf.is_empty
              next
              :
                $proc_name buf .truncate_from. '@0;'
                truncate_until &proc_name '/' -1
                if
                  proc_name .matches. name:
                    push &pids proc_num.to_integer
                    next!
                  next
          next

$std::get_process_name: (pid)
  load! $buf "/proc/@(pid)/cmdline"
  if
    buf.is_an_error
    -> undefined
    -> buf .truncate_from. '@0;'

$std::extern:
  (
    command
  )
  -> extern_call(.command_of command)

[source]

$std::serialize ()
  #
    returns a machine readable string representation of the object

    If possible the object ist transformed into its source code form.

    Topic: Strings, Serialization

    See also: std::serialization_tag_of, std::to_string

$std_types::process_id/serialize:
  (
    self
    indent = undefined
  )
  $str "
    process_id @(self.to_integer)
  if
    indent.is_defined
    -> append(tabs_and_spaces(indent) str)
    -> str

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Input-Output, POSIX

# std_types::process_id/std::serialize (a method)

