[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std_types::screen/std::clear:
  (
    self
    x = 1
    y = 1
    width = undefined
    height = undefined
  )
  update_if width.is_undefined &width -> width_of(self)-x+1
  update_if height.is_undefined &height -> height_of(self)-y+1
  std_private::clear self self x y width height

[documentation remark]

# std_types::screen/clear (a method)

  clears the specified rectangular area

  Parameters:
    self: the screen to be (partially) cleared
    x: x-coordinate of the upper left corner
    y: y-coordinate of the upper left corner
    width: width of the area
    height: height of the area

  Result:
    screen: the updated screen

  The specified area is filled with spaces using the the current draw-
  and clear colour.

  The area is clipped at the screen's borders.

  This function also works for "graphical screens" (line_height != 1).

  Topic: Terminal

  See also: std_types::screen/std::set_clear_colour,
            std_types::screen/std::copy

[source]

$std_types::string/match:
  (
    self
    stream
  )
  $rc result_count()
  $len length_of(self)
  if
    length_of(stream) >= len:
      if
        range(stream 1 len) == self:
          if
            rc == 1
            -> len
            -> len undefined
        fail
    fail

  $fail:
    if
      rc == 1
      -> undefined
      -> undefined undefined

[documentation remark]

# std_types::string/std::match (a method)

  matches the start of the stream with the string

  Parameters:
    self: the string to match
    stream: the stream to match against

  Results:
    length: the number of matched characters (or <undefined> on fail)
    capture: the matched string (if requested)

  Attempts to match the start of the stream with the specified string.

  If the match is successful the length of the match (= the length of the
  string) is returned.

  If the caller requested two result values then in addition to the string
  length the string itself ("the capture") is also returned.

  If the match fails then one or two <std::undefined>-values are returned.

  Topic: Strings

  See also: std_types::string/std::match_back, std_types::string/std::search

[source]

$std_types::generic_list/map_or_error:
  (
    self
    function
  )
  if
    self.is_empty
    -> self
    :
      $map
        if
          parameter_count_of(function) == 2
          ->
            : (s e)
              if
                s < e:
                  $m (s+e) >> 1
                  append_or_error
                    map(s m)
                    map(m+1 e)
                :
                  $mapped_item function(s self(s))
                  if
                    mapped_item.is_an_error
                    -> mapped_item
                    -> list(mapped_item)
          ->
            : (s e)
              if
                s < e:
                  $m (s+e) >> 1
                  append_or_error
                    map(s m)
                    map(m+1 e)
                :
                  $mapped_item function(self(s))
                  if
                    mapped_item.is_an_error
                    -> mapped_item
                    -> list(mapped_item)

      map 1 length_of(self)

[documentation remark]

# std_types::generic_list/std::map_or_error (a method)

  applies a function to all elements of the list

  Parameters:

    self: the list which items will be mapped
    function: the function to apply to each element of the list

  Result:
    list: the list of "mapped" items

  A list of the "mapped" items is returned.

  If any item ist mapped to an error object than the result ist not a
  collection but the first (left-to-right-order) error object created.

  Topic: Lists

  See also: std_types::generic_list/std::reduce,
            std_types::generic_list/std::map_reduce

[EXERCISE]

#
  Topic: Terminal

  The terminal library offers an interface for using text-terminals in a
  comfortable way.

  The base data type is the <std_types::screen>, a rectangular array of
  characters and associated draw and clear colors.

  All coordinates are one-based.

  Each colour supports 256 shades of red, green and blue.

  To update the state of a <std_types::screen> or <std_types::terminal) no
  I/O-acccess rights are necessary.

  There are methods to set draw and clear colors, to draw text, lines
  or more complex shapes, to clear the screen or parts of it, to scroll the
  screen or copy arbitrary rectangular areas between screens ("blitting").

  Horizontal and vertical lines are drawn using the appropriate unicode graphics
  characters.

  Screens and terminals also support Unicode Emojis.

  The terminal library is somewhat similar to the curses library. It tries to
  update the contents of a terminal in a smart way.

  To start using the functions of this library one must first create a
  <std_types::terminal> object (see <std::create_terminal>) supplying the
  terminal's width and height. The current terminal size can be retrieved via
  the I/O-function <std::get_terminal_size>.

  As an alternative one can use the high-level function
  <std::initialize_terminal>. When using this function one gets automatic
  cleanup "for free".

  <std_types::terminal> objects are an in-memory representation of the
  terminal's contents. To update the terminal's contents one must call the
  method <std_types::terminal/std::update> to create a character string
  representing the changes to the terminal's contents and then write this
  string to the terminal.

  Related topics: Input-Output, Colours

  Example:

    <require basic/stdlib>
    <require terminal/terminal>

    get_terminal_size! STDIN_FILENO $width $height
    create_terminal $terminal width height
    draw_text &terminal 10 5 "Hello, world!"
    update_terminal &terminal $output # create output character stream
    print! output # print the generated character stream

  Example:

    <require basic/stdlib>
    <require terminal/terminal>

    initialize_terminal!: (terminal)
      draw_text &terminal 10 5 "Hello, world!"
      update_terminal &terminal $output # create output character stream
      print! output # print the generated character stream

#
  Topic: Colours

  The <@Terminal> library uses <std_types::character>s for text and background
  colours.

  Related topics: Terminal

[symbols]


# Methods

$std::resize ()
$std::set_cursor ()
$std::set_character_at ()
$std::get_character_at ()
$std::set_draw_colour_at ()
$std::get_draw_colour_at ()
$std::set_clear_colour_at ()
$std::get_clear_colour_at ()
$std::draw_character ()
$std::draw_line ()
$std::draw_rectangle ()
$std::plot ()
$std::plot_line ()
$std::fill_trapezoid ()
$std::scroll_left ()
$std::scroll_right ()
$std::scroll_up ()
$std::scroll_down ()
$std::create_text_screen ()
$std::get_rectangle ()
$std::get_next_rectangle ()
$std::get_previous_rectangle ()
$std::cursor_x_of (!)
$std::cursor_y_of (!)

# Attributes

$std_types::screen std_types::generic_terminal
$std::is_a_screen ()
$std_types::screen.is_a_screen true
$std_types::object.is_a_screen false
$std_types::screen.rectangles_of undefined

# Screen types

$std::TEXT .
$std::VISIBLE_CURSOR .
$std_types::screen.type_of TEXT
$std_types::screen.plot_y_resolution_of 0.5
$std_types::screen.serialization_tag_of "screen"
$std_types::screen.serialization_fields_of
$std_types::terminal std_types::screen
$std_types::terminal.name_of "terminal"
$std_types::terminal.serialization_tag_of "terminal"
$std_types::terminal.serialization_fields_of
$std::create_screen ()
$std_types::screen/create_screen:
$std_types::screen/resize:
$std::character_at:
$std::draw_colour_at:
$std::clear_colour_at:
$std_types::screen/scroll_up:
$std_types::screen/scroll_down:
$std_types::screen/scroll_left:
$std_types::screen/scroll_right:
$std_types::screen/invert:
$std_types::screen/clear:
$std_types::screen/std_private::clear:
$std::move ()
$std_types::screen/move:
$std_types::screen/copy:
$std::FILE_DESCRIPTOR .
$std::RECEIVE_CTRL_C_AND_CTRL_Z .
$std::RECEIVE_CTRL_Q_AND_CTRL_S .
$std::MAP_CR .
$std::RECEIVE_SIGWINCH .
$std::RECEIVE_MOUSE_CLICKS .
$std::CURSOR_OFF .
$std::TITLE .
$terminal_private::backspace_character '@del;'
$std::initialize_terminal ()
$std_types::object/initialize_terminal:
$std_types::io/initialize_terminal:
$std_types::terminal.original_attributes_of undefined
$std_types::terminal.fd_of undefined
$std_types::terminal.do_switch_cursor_on_of undefined
$std_types::terminal.do_cancel_mouse_clicks_of undefined
$std_types::terminal/finalize:
$std_types::terminal/update update_terminal
$std::update_terminal:
$std_types::screen/plot:
$std_types::screen/plot_line:
$std_types::screen/fill_trapezoid:
$std_types::screen/set_draw_colour:
$std_types::screen/set_clear_colour:
$std_types::screen/set_cursor:
$std_types::screen/set_character_at:
$std_types::view/set_character_at:
$std_types::screen/get_character_at:
$std_types::view/get_character_at:
$std_types::screen/set_draw_colour_at:
$std_types::view/set_draw_colour_at:
$std_types::screen/get_draw_colour_at:
$std_types::view/get_draw_colour_at:
$std_types::screen/set_clear_colour_at:
$std_types::view/set_clear_colour_at:
$std_types::screen/get_clear_colour_at:
$std_types::view/get_clear_colour_at:
$std_types::screen/draw_character:
$std_types::screen/draw_text:
$std_types::screen/std_private::draw_text:
$std_types::screen/draw_attributed_text:
$std_types::screen/std_private::draw_attributed_text:
$std_types::screen/draw_line:
$std_types::screen/draw_rectangle:
$std::create_terminal:
$std_types::terminal/resize:
$std::cursor_off:
$std::cursor_on:
$std::cursor_home:
$std::clear_screen:
$std::rows_and_columns:
$std::add_attributes:
$std_types::screen/create_text_screen:
$std_types::screen/adjoin:
$std_types::screen/append:
$std_types::screen/get_rectangle:
$std_types::screen/get_next_rectangle:
$std_types::screen/get_previous_rectangle:
$std_types::screen/pad_left:
$std_types::screen/pad_right:
$std_types::screen/pad_bottom:
$std_types::screen/truncate:
$std_types::screen/range:

$std::clear_screen:
  cursor_home!
  print! "@esc;[2J"

$std::rows_and_columns:
  (
    text
  )
  $rows 0
  $longest 0
  $length 0
  for_each text
    : (chr)
      if
        chr == '@nl;':
          max &longest length
          inc &rows
          !length 0
          next
        :
          inc &length
          next
    :
      if
        text(-1) != '@nl;':
          max &longest length
          -> rows+1 longest
        -> rows longest

$std::add_attributes:
  (
    text
    draw_colour
    clear_colour
  )
  $buf ""
  for_each text
    : (chr)
      push &buf chr
      push &buf draw_colour
      push &buf clear_colour
      if
        chr.is_a_wide_character:
          push &buf INVALID_CHARACTER
          push &buf draw_colour
          push &buf clear_colour
          next
        next
    -> buf

$std_types::screen/create_text_screen:
  (
    template
    text
    info = undefined
  )
  $draw_attributes
    character
      draw_colour_of(template).to_integer | (text_attributes_of(template) << 24)
  $width width_of(text)
  template
    .width_of width
    .height_of 1
    .rows_of
      list(add_attributes(text draw_attributes clear_colour_of(template)))
    .rectangles_of
      if
        info.is_defined
        -> tuple(RECTANGLE info 1 1 width 1)
        -> undefined

$std_types::screen/adjoin:
  (
    self
    screens*
  )
  $width width_of(self)
  $height height_of(self)
  $rows rows_of(self)
  $rectangles rectangles_of(self)
  !rectangles
    if
      rectangles.is_defined:
        rectangles $kind $info $_x $_y $w
        if
          kind == HORIZONTAL
          -> info
          -> list(rectangles)
      -> empty_list
  for_each screens
    : (screen)
      if
        height_of(screen) != height:
          error RUNTIME_ERROR "INVALID ARGUMENTS" screen
        :
          $more_rectangles rectangles_of(screen)
          update_if more_rectangles.is_defined &rectangles:
            more_rectangles $kind $info $x $y $w $h
            if
              kind == HORIZONTAL:
                append rectangles map(info add_delta)
              :
                push rectangles tuple(kind info x+width y w h)
          plus &width width_of(screen)
          map &rows: (idx row) append row rows_of(screen)(idx)
          next
    ->
      self
        .width_of width
        .rows_of rows
        .rectangles_of
          if
            rectangles.is_empty
            -> undefined
            :
              if
                length_of(rectangles) == 1
                -> rectangles(1)
                -> tuple(HORIZONTAL rectangles 1 1 width height)

  $add_delta: (item)
    item $kind $info $x $y $w $h
    -> tuple(kind info x+width y w h)

$std_types::screen/append:
  (
    self
    screens*
  )
  $width width_of(self)
  $height height_of(self)
  $rows rows_of(self)
  $rectangles rectangles_of(self)
  !rectangles
    if
      rectangles.is_defined:
        rectangles $kind $info $_x $_y $w
        if
          kind == VERTICAL
          -> info
          -> list(rectangles)
      -> empty_list
  for_each screens
    : (screen)
      if
        width_of(screen) != width:
          error RUNTIME_ERROR "INVALID ARGUMENTS" screen
        :
          $more_rectangles rectangles_of(screen)
          update_if more_rectangles.is_defined &rectangles:
            more_rectangles $kind $info $x $y $w $h
            if
              kind == VERTICAL:
                append rectangles map(info add_delta)
              :
                push rectangles tuple(kind info x y+height w h)
          plus &height height_of(screen)
          append &rows rows_of(screen)
          next
    ->
      self
        .height_of height
        .rows_of rows
        .rectangles_of
          if
            rectangles.is_empty
            -> undefined
            :
              if
                length_of(rectangles) == 1
                -> rectangles(1)
                -> tuple(VERTICAL rectangles 1 1 width height)

  $add_delta: (item)
    item $kind $info $x $y $w $h
    -> tuple(kind info x y+height w h)

$std_types::screen/get_rectangle:
  (
    self
    x
    y
  )
  find_rectangle rectangles_of(self) x y 0 0

$find_rectangle: (rectangle rx ry dx dy)
  rectangle $kind $info $x $y $w $h
  if
    rx >= x && rx < x+w && ry >= y && ry < y+h:
      plus &x dx
      plus &y dy
      case kind
        RECTANGLE -> tuple(info x y w h)
        HORIZONTAL:
          $s 1
          $e length_of(info)
          loop:
            $i s+e .div. 2
            info(i) $_kind $_info $x_i $y_i $w_i $h_i
            if
              rx < x_i:
                if
                  i == s
                  -> undefined
                  :
                    !e i-1
                    next
              :
                if
                  rx < x_i+w_i
                  -> find_rectangle(info(i) rx ry x-1 y-1)
                  :
                    if
                      i == e
                      -> undefined
                      :
                        !s i+1
                        next
        VERTICAL:
          $s 1
          $e length_of(info)
          loop:
            $i s+e .div. 2
            info(i) $_kind $_info $x_i $y_i $w_i $h_i
            if
              ry < y_i:
                if
                  i == s
                  -> undefined
                  :
                    !e i-1
                    next
              :
                if
                  ry < y_i+h_i
                  -> find_rectangle(info(i) rx ry x-1 y-1)
                  :
                    if
                      i == e
                      -> undefined
                      :
                        !s i+1
                        next
    -> undefined

$std_types::screen/get_next_rectangle:
  (
    self
    rectangle = undefined
  )
  if
    rectangle.is_undefined
    -> find_first_rectangle(rectangles_of(self) 0 0)
    :
      rectangle $_info $x $y
      $rect find_next_rectangle(rectangles_of(self) x y 0 0)
      if
        RECTANGLE == rect
        -> undefined
        -> rect

$find_first_rectangle: (rectangle dx dy)
  rectangle $kind $info $x $y $w $h
  plus &x dx
  plus &y dy
  if
    kind == RECTANGLE
    -> tuple(info x y w h)
    -> find_first_rectangle(info(1) x-1 y-1)

$find_next_rectangle: (rectangle rx ry dx dy)
  rectangle $kind $info $x $y $w $h
  plus &x dx
  plus &y dy
  if
    rx >= x && rx < x+w && ry >= y && ry < y+h:
      $n length_of(info)
      case kind
        RECTANGLE -> RECTANGLE
        HORIZONTAL:
          $s 1
          $e n
          loop:
            $i s+e .div. 2
            info(i) $_kind $_info $x_i $y_i $w_i $h_i
            if
              rx < x_i:
                if
                  i == s
                  -> undefined
                  :
                    !e i-1
                    next
              :
                if
                  rx < x_i+w_i
                  :
                    $rect find_next_rectangle(info(i) rx ry x-1 y-1)
                    if
                      RECTANGLE == rect: # found one match
                        if
                          i < n
                          -> find_first_rectangle(info(i+1) x-1 y-1)
                          -> RECTANGLE
                      -> rect
                  :
                    if
                      i == e
                      -> undefined
                      :
                        !s i+1
                        next
        VERTICAL:
          $s 1
          $e length_of(info)
          loop:
            $i s+e .div. 2
            info(i) $_kind $_info $x_i $y_i $w_i $h_i
            if
              ry < y_i:
                if
                  i == s
                  -> undefined
                  :
                    !e i-1
                    next
              :
                if
                  ry < y_i+h_i:
                    $rect find_next_rectangle(info(i) rx ry x-1 y-1)
                    if
                      RECTANGLE == rect: # found one match
                        if
                          i < n
                          -> find_first_rectangle(info(i+1) x-1 y-1)
                          -> RECTANGLE
                      -> rect
                  :
                    if
                      i == e
                      -> undefined
                      :
                        !s i+1
                        next
    -> undefined

$std_types::screen/get_previous_rectangle:
  (
    self
    rectangle = undefined
  )
  if
    rectangle.is_undefined
    -> find_last_rectangle(rectangles_of(self) 0 0)
    :
      rectangle $_info $x $y
      $rect find_previous_rectangle(rectangles_of(self) x y 0 0)
      if
        RECTANGLE == rect
        -> undefined
        -> rect

$find_last_rectangle: (rectangle dx dy)
  rectangle $kind $info $x $y $w $h
  plus &x dx
  plus &y dy
  if
    kind == RECTANGLE
    -> tuple(info x y w h)
    -> find_last_rectangle(info(-1) x-1 y-1)

[source]

$std::get_next_rectangle ()

$std_types::screen/get_next_rectangle:
  (
    self
    rectangle = undefined
  )
  if
    rectangle.is_undefined
    -> find_first_rectangle(rectangles_of(self) 0 0)
    :
      rectangle $_info $x $y
      $rect find_next_rectangle(rectangles_of(self) x y 0 0)
      if
        RECTANGLE == rect
        -> undefined
        -> rect

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use (parts of) the documentation already provided in the source

### Do not create completely new examples on your own

### Use only one of the following topics: Terminal, Colours

# std_types::screen/std::get_next_rectangle (a method)

