[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std_types::screen/std::clear:
  (
    self
    x = 1
    y = 1
    width = undefined
    height = undefined
  )
  update_if width.is_undefined &width -> width_of(self)-x+1
  update_if height.is_undefined &height -> height_of(self)-y+1
  std_private::clear self self x y width height

[documentation remark]

# std_types::screen/clear (a method)

  clears the specified rectangular area

  Parameters:
    self: the screen to be (partially) cleared
    x: x-coordinate of the upper left corner
    y: y-coordinate of the upper left corner
    width: width of the area
    height: height of the area

  Result:
    screen: the updated screen

  The specified area is filled with spaces using the the current draw-
  and clear colour.

  The area is clipped at the screen's borders.

  This function also works for "graphical screens" (line_height != 1).

  Topic: Terminal

  See also: std_types::screen/std::set_clear_colour,
            std_types::screen/std::copy

[source]

$std_types::string/match:
  (
    self
    stream
  )
  $rc result_count()
  $len length_of(self)
  if
    length_of(stream) >= len:
      if
        range(stream 1 len) == self:
          if
            rc == 1
            -> len
            -> len undefined
        fail
    fail

  $fail:
    if
      rc == 1
      -> undefined
      -> undefined undefined

[documentation remark]

# std_types::string/std::match (a method)

  matches the start of the stream with the string

  Parameters:
    self: the string to match
    stream: the stream to match against

  Results:
    length: the number of matched characters (or <undefined> on fail)
    capture: the matched string (if requested)

  Attempts to match the start of the stream with the specified string.

  If the match is successful the length of the match (= the length of the
  string) is returned.

  If the caller requested two result values then in addition to the string
  length the string itself ("the capture") is also returned.

  If the match fails then one or two <std::undefined>-values are returned.

  Topic: Strings

  See also: std_types::string/std::match_back, std_types::string/std::search

[source]

$std_types::generic_list/map_or_error:
  (
    self
    function
  )
  if
    self.is_empty
    -> self
    :
      $map
        if
          parameter_count_of(function) == 2
          ->
            : (s e)
              if
                s < e:
                  $m (s+e) >> 1
                  append_or_error
                    map(s m)
                    map(m+1 e)
                :
                  $mapped_item function(s self(s))
                  if
                    mapped_item.is_an_error
                    -> mapped_item
                    -> list(mapped_item)
          ->
            : (s e)
              if
                s < e:
                  $m (s+e) >> 1
                  append_or_error
                    map(s m)
                    map(m+1 e)
                :
                  $mapped_item function(self(s))
                  if
                    mapped_item.is_an_error
                    -> mapped_item
                    -> list(mapped_item)

      map 1 length_of(self)

[documentation remark]

# std_types::generic_list/std::map_or_error (a method)

  applies a function to all elements of the list

  Parameters:

    self: the list which items will be mapped
    function: the function to apply to each element of the list

  Result:
    list: the list of "mapped" items

  A list of the "mapped" items is returned.

  If any item ist mapped to an error object than the result ist not a
  collection but the first (left-to-right-order) error object created.

  Topic: Lists

  See also: std_types::generic_list/std::reduce,
            std_types::generic_list/std::map_reduce

[EXERCISE]

#
  Topic: Terminal

  The terminal library offers an interface for using text-terminals in a
  comfortable way.

  The base data type is the <std_types::screen>, a rectangular array of
  characters and associated draw and clear colors.

  All coordinates are one-based.

  Each colour supports 256 shades of red, green and blue.

  To update the state of a <std_types::screen> or <std_types::terminal) no
  I/O-acccess rights are necessary.

  There are methods to set draw and clear colors, to draw text, lines
  or more complex shapes, to clear the screen or parts of it, to scroll the
  screen or copy arbitrary rectangular areas between screens ("blitting").

  Horizontal and vertical lines are drawn using the appropriate unicode graphics
  characters.

  Screens and terminals also support Unicode Emojis.

  The terminal library is somewhat similar to the curses library. It tries to
  update the contents of a terminal in a smart way.

  To start using the functions of this library one must first create a
  <std_types::terminal> object (see <std::create_terminal>) supplying the
  terminal's width and height. The current terminal size can be retrieved via
  the I/O-function <std::get_terminal_size>.

  As an alternative one can use the high-level function
  <std::initialize_terminal>. When using this function one gets automatic
  cleanup "for free".

  <std_types::terminal> objects are an in-memory representation of the
  terminal's contents. To update the terminal's contents one must call the
  method <std_types::terminal/std::update> to create a character string
  representing the changes to the terminal's contents and then write this
  string to the terminal.

  Related topics: Input-Output, Colours

  Example:

    <require basic/stdlib>
    <require terminal/terminal>

    get_terminal_size! STDIN_FILENO $width $height
    create_terminal $terminal width height
    draw_text &terminal 10 5 "Hello, world!"
    update_terminal &terminal $output # create output character stream
    print! output # print the generated character stream

  Example:

    <require basic/stdlib>
    <require terminal/terminal>

    initialize_terminal!: (terminal)
      draw_text &terminal 10 5 "Hello, world!"
      update_terminal &terminal $output # create output character stream
      print! output # print the generated character stream

#
  Topic: Colours

  The <@Terminal> library uses <std_types::character>s for text and background
  colours.

  Related topics: Terminal

[symbols]


# Methods

$std::resize ()
$std::set_cursor ()
$std::set_character_at ()
$std::get_character_at ()
$std::set_draw_colour_at ()
$std::get_draw_colour_at ()
$std::set_clear_colour_at ()
$std::get_clear_colour_at ()
$std::draw_character ()
$std::draw_line ()
$std::draw_rectangle ()
$std::plot ()
$std::plot_line ()
$std::fill_trapezoid ()
$std::copy ()
$std::scroll_left ()
$std::scroll_right ()
$std::scroll_up ()
$std::scroll_down ()
$std::create_text_screen ()
$std::cursor_x_of (!)
$std::cursor_y_of (!)

# Attributes

$std_types::screen std_types::generic_terminal
$std::is_a_screen ()
$std_types::screen.is_a_screen true
$std_types::object.is_a_screen false

# Screen types

$std::TEXT .
$std::VISIBLE_CURSOR .
$std_types::screen.type_of TEXT
$std_types::screen.plot_y_resolution_of 0.5
$std_types::screen.serialization_tag_of "screen"
$std_types::screen.serialization_fields_of
$std_types::terminal std_types::screen
$std_types::terminal.name_of "terminal"
$std_types::terminal.serialization_tag_of "terminal"
$std_types::terminal.serialization_fields_of
$std::create_screen ()
$std_types::screen/create_screen:
$std_types::screen/resize:
$std::character_at:
$std::draw_colour_at:
$std::clear_colour_at:
$std_types::screen/scroll_up:
$std_types::screen/scroll_down:
$std_types::screen/scroll_left:
$std_types::screen/scroll_right:
$std_types::screen/clear:
$std_types::screen/std_private::clear:
$std::move ()
$std_types::screen/move:
$std_types::screen/copy:
$std::FILE_DESCRIPTOR .
$std::RECEIVE_CTRL_C_AND_CTRL_Z .
$std::RECEIVE_CTRL_Q_AND_CTRL_S .
$std::MAP_CR .
$std::RECEIVE_SIGWINCH .
$std::RECEIVE_MOUSE_CLICKS .
$std::CURSOR_OFF .
$std::TITLE .
$terminal_private::backspace_character '@del;'
$std::initialize_terminal ()
$std_types::object/initialize_terminal:
$std_types::io/initialize_terminal:
$std_types::terminal.original_attributes_of undefined
$std_types::terminal.fd_of undefined
$std_types::terminal.do_switch_cursor_on_of undefined
$std_types::terminal.do_cancel_mouse_clicks_of undefined
$std_types::terminal/finalize:
$std_types::terminal/update update_terminal
$std::update_terminal:
$std_types::screen/plot:
$std_types::screen/plot_line:
$std_types::screen/fill_trapezoid:
$std_types::screen/set_draw_colour:
$std_types::screen/set_clear_colour:
$std_types::screen/set_cursor:
$std_types::screen/set_character_at:
$std_types::view/set_character_at:
$std_types::screen/get_character_at:
$std_types::view/get_character_at:
$std_types::screen/set_draw_colour_at:
$std_types::view/set_draw_colour_at:
$std_types::screen/get_draw_colour_at:
$std_types::view/get_draw_colour_at:
$std_types::screen/set_clear_colour_at:
$std_types::view/set_clear_colour_at:
$std_types::screen/get_clear_colour_at:
$std_types::view/get_clear_colour_at:
$std_types::screen/draw_character:
$std_types::screen/draw_text:
$std_types::screen/std_private::draw_text:
$std_types::screen/draw_attributed_text:
$std_types::screen/std_private::draw_attributed_text:
$std_types::screen/draw_line:
$std_types::screen/draw_rectangle:
$std::create_terminal:
$std_types::terminal/resize:
$std::cursor_off:
$std::cursor_on:
$std::cursor_home:
$std::clear_screen:
$std::rows_and_columns:
$std::add_attributes:
$std_types::screen/create_text_screen:
$std_types::screen/append:
$std_types::screen/adjoin:
$std_types::screen/pad_left:
$std_types::screen/pad_right:
$std_types::screen/truncate:
$std_types::screen/range:

$std_types::screen/set_draw_colour:
  (
    screen
    colour
  )
  -> screen(.draw_colour_of colour)

$std_types::screen/set_clear_colour:
  (
    screen
    colour
  )
  -> screen(.clear_colour_of colour)

$INVALID_CHARACTER '@0;'

$std_types::screen/set_cursor:
  (
    self # the terminal for which to set the cursor
    x # in logical screen coordinates
    y # in logical screen coordinates (any coordinate within a row is accepted)
  )
  ->
    self
      .cursor_x_of x
      .cursor_y_of y

$std_types::screen/set_character_at:
  (
    screen
    x
    y
    chr
  )
  $rows rows_of(screen)
  $row rows(y)
  !row(3*x-2) chr
  !rows(y) row
  -> screen(.rows_of rows)

$std_types::view/set_character_at:
  (
    view
    screen
    x
    y
    chr
  )
  plus &x x_of(view)-1
  plus &y y_of(view)-1
  $rows rows_of(screen)
  $row rows(y)
  !row(3*x-2) chr
  !rows(y) row
  -> screen(.rows_of rows)

$std_types::screen/get_character_at:
  (
    screen
    x
    y
  )
  $rows rows_of(screen)
  $row rows(y)
  -> row(3*x-2)

$std_types::view/get_character_at:
  (
    view
    screen
    x
    y
  )
  plus &x x_of(view)-1
  plus &y y_of(view)-1
  $rows rows_of(screen)
  $row rows(y)
  -> row(3*x-2)

$std_types::screen/set_draw_colour_at:
  (
    screen
    x
    y
    colour
  )
  $rows rows_of(screen)
  $row rows(y)
  !row(3*x-1) colour
  !rows(y) row
  -> screen(.rows_of rows)

$std_types::view/set_draw_colour_at:
  (
    view
    screen
    x
    y
    colour
  )
  plus &x x_of(view)-1
  plus &y y_of(view)-1
  $rows rows_of(screen)
  $row rows(y)
  !row(3*x-1) colour
  !rows(y) row
  -> screen(.rows_of rows)

$std_types::screen/get_draw_colour_at:
  (
    screen
    x
    y
  )
  $rows rows_of(screen)
  $row rows(y)
  -> row(3*x-1)

$std_types::view/get_draw_colour_at:
  (
    view
    screen
    x
    y
  )
  plus &x x_of(view)-1
  plus &y y_of(view)-1
  $rows rows_of(screen)
  $row rows(y)
  -> row(3*x-1)

$std_types::screen/set_clear_colour_at:
  (
    screen
    x
    y
    colour
  )
  $rows rows_of(screen)
  $row rows(y)
  !row(3*x) colour
  !rows(y) row
  -> screen(.rows_of rows)

$std_types::view/set_clear_colour_at:
  (
    view
    screen
    x
    y
    colour
  )
  plus &x x_of(view)-1
  plus &y y_of(view)-1
  $rows rows_of(screen)
  $row rows(y)
  !row(3*x) colour
  !rows(y) row
  -> screen(.rows_of rows)

$std_types::screen/get_clear_colour_at:
  (
    screen
    x
    y
  )
  $rows rows_of(screen)
  $row rows(y)
  -> row(3*x)

$std_types::view/get_clear_colour_at:
  (
    view
    screen
    x
    y
  )
  plus &x x_of(view)-1
  plus &y y_of(view)-1
  $rows rows_of(screen)
  $row rows(y)
  -> row(3*x)

$std_types::screen/draw_character:
  (
    screen
    x
    y
    chr
  )
  draw_text screen x y chr.to_string

$std_types::screen/draw_text:
  (
    self
    x
    y
    args*
  )
  std_private::draw_text self self x y create_string(args)

$std_types::screen/std_private::draw_text:
  (
    self
    view
    x
    y
    text
  )
  if
    text.is_empty
    -> self
    :
      $left_x x_of(view)
      $top_y y_of(view)
      $right_x x_of(view)+width_of(view)-1
      $bottom_y y_of(view)+height_of(view)-1
      $first_y y
      $draw_colour draw_colour_of(view)
      $clear_colour clear_colour_of(view)
      $colour
        if
          clear_colour.is_defined
          -> string(draw_colour clear_colour)
          -> undefined
      without_suffix &text '@nl;'
      split text '@nl;' $lines
      if
        ||
          x > right_x
          first_y > bottom_y
          first_y+length_of(lines) <= top_y
        -> self # text is completely outside the "window"
        :
          update_if first_y < top_y &lines &first_y
            -> range(lines top_y+1-first_y -1) top_y
          $line_count length_of(lines)
          if !lines $last_y
            first_y+line_count-1 > bottom_y
            -> range(lines 1 bottom_y+1-first_y) bottom_y
            -> lines first_y+line_count-1
          $rows rows_of(self)
          ->
            self
              .rows_of
                append
                  range(rows 1 first_y-1)
                  map(range(rows first_y last_y) update_row)
                  range(rows last_y+1 -1)

      $update_row: (no row)
        $line lines(no)
        if
          line.is_empty
          -> row
          :
            find_start $sx $i $insert_space
            if
              sx.is_undefined
              -> row
              :
                create_attributed_text $ex $attributed_text
                  sx range(line i -1) insert_space
                $left range(row 1 3*(sx-1))
                $right range(row 3*ex-2 -1)
                append left attributed_text right

        $find_start:
          $i 1
          $n length_of(line)
          loop:
            if
              i > n
              -> undefined undefined undefined
              :
                if
                  x >= left_x:
                    if
                      i > 1 && x > left_x
                      -> x-1 i true
                      -> x i false
                  :
                    plus &x width_of(line(i))
                    inc &i
                    next

        $create_attributed_text: (x text insert_space)
          if
            colour.is_defined:
              if $attributed_text !x
                insert_space
                -> string(' ' colour) x+1
                -> "" x
              for_each text
                : (chr)
                  $cw width_of(chr)
                  if
                    x+cw > right_x+1:
                      if
                        x == right_x:
                          push &attributed_text ' '
                          append &attributed_text colour
                          -> x+1 attributed_text
                        -> x attributed_text
                    :
                      if
                        cw == 1:
                          push &attributed_text chr
                          append &attributed_text colour
                          inc &x
                          next
                        :
                          push &attributed_text chr
                          append &attributed_text colour
                          push &attributed_text INVALID_CHARACTER
                          append &attributed_text colour
                          plus &x cw
                          next
                -> x attributed_text
            :
              if $attributed_text !x
                insert_space
                -> string(' ' draw_colour row(3*x)) x+1
                -> "" x
              for_each text
                : (chr)
                  $cw width_of(chr)
                  if
                    x+cw > right_x+1:
                      if
                        x == right_x:
                          push &attributed_text ' '
                          push &attributed_text draw_colour
                          push &attributed_text row(3*x)
                          -> x+1 attributed_text
                        -> x attributed_text
                    :
                      if
                        cw == 1:
                          push &attributed_text chr
                          push &attributed_text draw_colour
                          push &attributed_text row(3*x)
                          inc &x
                          next
                        :
                          push &attributed_text chr
                          push &attributed_text draw_colour
                          push &attributed_text row(3*x)
                          push &attributed_text INVALID_CHARACTER
                          push &attributed_text draw_colour
                          push &attributed_text row(3*(x+1))
                          plus &x cw
                          next
                -> x attributed_text

$std_types::screen/draw_attributed_text:
  #
    the text must not contain any newline characters and is clipped on the
    borders of the current window.
  (
    self
    x
    y
    attributed_text
  )
  std_private::draw_attributed_text self self x y attributed_text

$std_types::screen/std_private::draw_attributed_text:
  (
    self
    view
    x
    y
    attributed_text
  )
  $n length_of(attributed_text) .div. 3
  $left_x x_of(view)
  $top_y y_of(view)
  $right_x x_of(view)+width_of(view)-1
  $bottom_y y_of(view)+height_of(view)-1
  if
    ||
      x+n-1 < left_x
      x > right_x
      y < top_y
      y > bottom_y
    -> self # text is completely outside the "window"
    :
      $rows rows_of(self)
      ->
        self
          .rows_of
            append
              push(range(rows 1 y-1) update_row(rows(y)))
              range(rows y+1 -1)

  $update_row: (row)
    $s max(left_x+1-x 1) # first attributed character to output
    $e min(right_x+1-x n)
    max &x left_x
    $left_text range(row 1 3*(x-1))
    range &attributed_text 3*s-2 3*e
    $right_text range(row 3*(x+e-s)+1 -1)
    update_if left_text.is_not_empty && width_of(left_text(-3)) > 1
      &left_text -> left_text(-3 ' ')
    update_if attributed_text(1) == INVALID_CHARACTER
      &attributed_text -> attributed_text(1 ' ')
    update_if width_of(attributed_text(-3)) > 1
      &attributed_text -> attributed_text(-3 ' ')
    update_if right_text.is_not_empty && right_text(1) == INVALID_CHARACTER
      &right_text -> right_text(1 ' ')
    append left_text attributed_text right_text

[source]

$std::draw_attributed_text ()

$std_types::screen/draw_attributed_text:
  #
    the text must not contain any newline characters and is clipped on the
    borders of the current window.
  (
    self
    x
    y
    attributed_text
  )
  std_private::draw_attributed_text self self x y attributed_text

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Do not create completely new examples on your own

### Use only one of the following topics: Terminal, Colours

# std_types::screen/std::draw_attributed_text (a method)

