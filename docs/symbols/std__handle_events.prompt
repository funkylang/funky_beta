[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std::wrap_words:
  (
    text
    width
  )
  $lines empty_list
  $n length_of(text)
  $s 1 # start of line
  $b undefined # possible break position
  $i 0
  loop:
    inc &i
    if
      i > n:
        if
          s > n
          -> lines
          -> push(lines range(text s n))
      :
        $chr text(i)
        case chr
          '
':
            push &lines range(text s i-1)
            !s i+1
            !b undefined
            next
          :
            if
              chr == ' ':
                if
                  i-s == width: # break
                    push &lines range(text s i-1)
                    !s i+1
                    !b undefined
                    next
                  :
                    !b i
                    next
              :
                if
                  i-s < width
                  next
                  :
                    if
                      b.is_defined: # wrap
                        push &lines range(text s b-1)
                        !s b+1
                        !b undefined
                        next
                      : # hard break
                        push &lines range(text s i-1)
                        !s i
                        next

[documentation remark]

# std::wrap_words (a function)

  wraps a string consisting of words onto multiple lines

  Parameters:
    text: the text to wrap
    width: the maximum width of a line

  Result:
    lines: a list of (wrapped) lines

  The string is split into multiple lines according to the specified line
  width.

  Topic: Strings

  See also: std::indented

  Example:

    $str "This is a very long string that should be wrapped onto multiple lines"
    $lines wrap_words(str 30)
    dump! 2 `lines

  Output:

    lines:
      list
        "This is a very long string"
        "that should be wrapped"
        "onto multiple lines"

[EXERCISE]

#
  Topic: Input-Output Events

  Events are the Funky way to handle multiple input/output streams in a
  parallel way.

  The event system is based on the concept of an event "loop". The event "loop"
  is part of the application program.

  Before entering the event loop, the application program must create an
  input-output object and register all input-output streams that should be
  handled by the event loop.

  To create an input-output object, simply clone the object <std_types::io>.

  The event loop then waits for an event to occur (using <std::get_events>.
  When one or more events occurs, the event loop processes them and then
  continues to wait for the next event(s).

  Possible events can be registered or unregistered at any time.

  To register an event call

  <start_reading_from> - for reading from a stream

  <start_catching_signals> - for catching signals like SIGINT

  <start_injecting_window_change_events> - for catching window change events

  To unregister an event call

  <stop_reading_from> - to stop reading from a stream

  <stop_catching_signals> - to stop catching signals

  <stop_injecting_window_change_events> - to stop injecting window change events

  Actual input operations are performed by <get_events>. Write operations are
  initiated by the application program and performed by <get_events>.

  Related topics: Input-Output, Input-Output Task Manager

  Example:

    $io std_types::io # create an input-output object
    start_reading_from &io STDIN_FILENO # register reading from STDIN
    write &io STDOUT_FILENO "Please enter some text:@nl;"
      # write a prompt text to STDOUT
    $input_buffer "" # create an initially empty input buffer

    loop: # the event loop
      get_events! &io $events # get one or more events
      for_each events # handle all received events
        : (event)
          event $type $fd $argument # destructure the event
          case type # check the event type
            READ: # event is a read event
              case fd # check the file descriptor
                STDIN_FILENO: # it was a read event from STDIN
                  append &input_buffer argument
                    # append the received data to the input buffer
                  handle_input !io &input_buffer # call the input handler
                  if
                    io.is_undefined:
                      #
                        the input handler returned undefined to indicate
                        that the input processing is finished
                      terminate! # terminate the program
                    next # otherwise continue processing the events
                next # ignore read events for other file descriptors
            READ_FAILED: # event is a read error
              Error! "Error reading from standard input!"
            WRITE_PENDING: # event is a write pending event
              # ignore
              next! # continue processing the events
            WRITE_COMPLETED: # event is a write completed event
              # ignore
              next! # continue processing the events
            next # ignore all other events
        next # check for more events

    $handle_input: (buffer)
      loop:
        if
          buffer .contains. '@nl;':
            # the input buffer contains at least one complete line
            $line buffer .before. '@nl;' # extract the line
            if
              line == "quit" # the user entered "quit"
              -> undefined undefined
                #
                  return undefined to indicate that the input processing is
                  finished
              : # Output the line
                write &io STDOUT_FILENO "
                  You entered: "@(line)"
                behind &buffer '@nl;'
                  # remove the processed line from the input buffer
                next # continue processing the buffer
          -> io buffer
            # return the (maybe) modified input-output object and buffer

[symbols]


# Event Types

$std::READ .
$std::CLOSED .
$std::READ_FAILED .
$std::CONNECT .
$std::WRITE_PENDING .
$std::WRITE_COMPLETED .
$std::WRITE_FAILED .
$std::PROCESS_JOINED .
$std::SIGNAL .
$std::JOB_COMPLETED .
$std::JOB_FAILED .

# Methods

$std::initialize ()
$std::get_events ()
$std::start_reading_from ()
$std::stop_reading_from ()
$std::cancel_write ()
$std::join_process ()
$std::start_injecting_window_change_events ()
$std::stop_injecting_window_change_events ()
$std::start_catching_signals ()
$std::stop_catching_signals ()
$std::set_timeout ()
$std::enable_logging ()
$std::disable_logging ()
$std::log ()
$std::register_handlers ()
$std::deregister_handlers ()
$std::deregister_all_handlers ()
$std::register_resource ()
$std::run ()
$std::run_at ()
$std::finalize ()

# Attributes

$std::random_seed_of ()
$std::step_no_of ()
$std::current_time_of ()
$std_types::io std_types::object
$std_types::io.current_time_of undefined
$std_types::io.read_jobs_of empty_hash_table
$std_types::io.write_jobs_of empty_hash_table
$std_types::io.close_jobs_of empty_hash_set
$std_types::io.start_jobs_of empty_list
$std_types::io.timed_jobs_of empty_list
$std_types::io.resources_of empty_insert_order_table
$std_types::io.watched_pids_of empty_hash_set
$std_types::io.exit_codes_of empty_hash_table
$std_types::io.do_inject_window_change_events false
$std_types::io.window_change_event_occurred false
$std_types::io.catched_signals_of empty_hash_set
$std_types::io.log_level_of 0
$std_types::io.exit_code_of undefined
$std_types::io.timeout_of undefined
$std_types::io.handlers_of empty_hash_table
$std_types::io.random_seed_of undefined
$std_types::io.step_no_of 0
$std::do_log_of ()
$std_types::resource std_types::object
$std_types::resource.name_of "anonymous resource"
$std_types::io.do_log_of false
$std_types::resource/enable_logging:
$std_types::resource/disable_logging:
$std_types::event tuple(undefined undefined undefined)
$std_types::io/start_reading_from:
$std_types::io/stop_reading_from:
$std_types::io/print_to:
$std_types::io/write:
$std_types::io/cancel_write:
$std_types::io/close:
$std_types::io/join_process:
$std_types::io/start_injecting_window_change_events:
$std_types::io/stop_injecting_window_change_events:
$std_types::io/start_catching_signals:
$std_types::io/stop_catching_signals:
$std_types::io/set_timeout:
$std::initialize_logging:
$std_types::io/enable_logging:
$std_types::io/disable_logging:
$std_types::io/log:
$std_types::io/register_handlers:
$std_types::io/deregister_handlers:
$std_types::io/deregister_all_handlers:
$std_types::io/register_resource:
$std_types::io/run:
$std_types::io/run_at:
$std_types::io/exit:
$std_types::io/is_empty:
$std::log_unhandled_event: (io event)
$std_types::io/initialize:
$std_types::io/get_events:
$std::handle_events: (io events)

$std_types::io/register_handlers:
  (
    self
    id
    type_handlers*
  )
  $handlers default_value(handlers_of(self)(id) empty_hash_table)
  for_each type_handlers
    : (type_handler)
      type_handler $type $handler
      !handlers(type) handler
      next
    :
      !self.handlers_of(id) handlers
      -> self

$std_types::io/deregister_handlers:
  (
    self
    id
    types*
  )
  $handlers handlers_of(self)(id)
  if
    handlers.is_undefined
    -> self
    :
      for_each types
        : (type)
          !handlers(type) undefined
          next
        :
          !self.handlers_of(id) handlers
          -> self

$std_types::io/deregister_all_handlers:
  (
    self
    id
  )
  !self.handlers_of(id) empty_hash_table
  -> self

$std_types::io/register_resource:
  (
    self
    key
    resource
  )
  !self.resources_of(key) resource
  -> self

$std_types::io/run:
  (
    self
    command
    arguments*
  )
  push &self.start_jobs_of tuple(command arguments)
  -> self

$std_types::io/run_at:
  (
    self
    time
    command
    arguments*
  )
  update_if time.is_a_number &time -> current_time_of(self)+time
  push &self.timed_jobs_of tuple(command arguments time)
  -> self

$std_types::io/exit:
  (
    self
    exit_code
  )
  ->
    self
      .exit_code_of exit_code
      .read_jobs_of empty_hash_table

$std_types::io/is_empty:
  (
    self
  )
  ->
    &&
      read_jobs_of(self).is_empty
      write_jobs_of(self).is_empty
      close_jobs_of(self).is_empty
      watched_pids_of(self).is_empty

$std::log_unhandled_event: (io event)
  event $type $fd $_argument
  if
    &&
      ||
        type == WRITE_FAILED
        type == WRITE_PENDING
        type == WRITE_COMPLETED
      fd == STDERR_FILENO
    -> io # prevent recursive logging
    :
      $log_level
        case
          type
          WRITE_PENDING,WRITE_COMPLETED -> 4
          -> 2
      log io log_level -> "
        unhandled event @(serialize(type).trim_right) - @(serialize(fd))@

$std_types::io/initialize:
  (
    self
  )
  current_time! $t
  -> self(.current_time_of t)

$std_types::io/get_events:
  (
    self
  )
  #
    <pselect> does not check for interrupts if a file descriptor is available
    without the need to wait

  inc &self.step_no_of

  attempt_close_operations! &self
    # perform all close jobs without pending writes
  attempt_exit! &self
    # exit if nothing to do and exit code is defined

  $events empty_list
  $want_to_write empty_list

  current_time! $t
  $start_jobs start_jobs_of(self)
  !self.start_jobs_of empty_list
  $first_job_time undefined
  $remaining_timed_jobs empty_list
  $timeout undefined
  for_each timed_jobs_of(self)
    : (timed_job)
      timed_job $_command $_arguments $time
      if
        time <= t:
          push &start_jobs timed_job
          next!
        :
          push &remaining_timed_jobs timed_job
          if
            first_job_time.is_undefined || time < first_job_time:
              !first_job_time time
              next!
            next
    :
      !self.timed_jobs_of remaining_timed_jobs
      set_timeout!

  $set_timeout:
    !timeout timeout_of(self)
    if
      timeout.is_defined || first_job_time.is_defined:
        update_if timeout.is_undefined || first_job_time < timeout
          &timeout -> first_job_time
        !self.timeout_of undefined
        !timeout max(timeout-t 0)
        if
          &&
            timeout > 0
            any_of
              exit_codes_of(self): (pid _exit_code)
                -> watched_pids_of(self)(pid)
          :
            !timeout 0
            handle_start_jobs!
          handle_start_jobs
      handle_start_jobs

  $handle_start_jobs:
    for_each start_jobs
      : (job)
        job $command $arguments
        apply! command &self arguments $new_event
        if
          new_event.is_defined:
            if
              new_event.is_a_list:
                append &events new_event
                next!
              :
                push &events new_event
                next!
          next
      handle_write_jobs

  $handle_write_jobs:
    for_each write_jobs_of(self)
      : (fd _text)
        push &want_to_write fd
        next!
      wait_for_events

    $wait_for_events:
      $read_descriptor_list empty_list
      for_each !read_descriptor_list read_jobs_of(self)
        : (fd _info)
          push &read_descriptor_list fd
          next!
        -> read_descriptor_list
      pselect!
        $signals
        $can_read read_descriptor_list
        $can_write want_to_write
        $_has_out_of_band_data empty_list
        timeout
      current_time! !self.current_time_of
      $injected_into_stdin false
      $write_jobs write_jobs_of(self)
      for_each signals
        : (signal)
          case signal
            CHILD_CHANGED_STATE:
              wait! $pid $status
              exitstatus &status
              if
                watched_pids_of(self)(pid):
                  !self.watched_pids_of(pid) false
                  push &events new(std_types::event PROCESS_JOINED pid status)
                  next!
                :
                  !self.exit_codes_of(pid) status
                  next!
            WINDOW_CHANGED_SIZE:
              !self.window_change_event_occurred true
              next!
            :
              if
                catched_signals_of(self)(signal):
                  push &events new(std_types::event SIGNAL undefined signal)
                  next!
                next
        handle_write_requests

      $handle_write_requests:
        if
          &&
            self.window_change_event_occurred
            self.do_inject_window_change_events
            read_jobs_of(self)(STDIN_FILENO).is_defined
          :
            get_terminal_size! STDIN_FILENO $width $height
            !self.window_change_event_occurred false
            $buf "@esc;[8;@(height);@(width)t"
            push &events new(std_types::event READ STDIN_FILENO buf)
            !injected_into_stdin true
            check_file_descriptors!
          :
            check_file_descriptors!

      $check_file_descriptors:
        for_each can_write
          : (fd)
            $job write_jobs(fd)
            write! $bytes_written fd job
            if
              bytes_written.is_an_error:
                !self.write_jobs_of(fd) undefined
                push &events
                  new
                    std_types::event WRITE_FAILED
                    fd
                    bytes_written #tuple(bytes_written job)
                next!
              :
                if
                  bytes_written < length_of(job):
                    range &job bytes_written+1 -1
                    !self.write_jobs_of(fd) job # remaining text to write
                    push &events new(std_types::event WRITE_PENDING fd job)
                    next!
                  :
                    !self.write_jobs_of(fd) undefined
                    push &events
                      new(std_types::event WRITE_COMPLETED fd undefined)
                    next!
          attempt_reads

      $attempt_reads:
        for_each can_read
          : (fd)
            if_not fd != STDIN_FILENO || not(injected_into_stdin) next:
              fstat! fd $info
              if
                type_of(info) == SOCKET:
                  is_listening! $does_listen fd
                  if
                    does_listen:
                      accept! $conn fd
                      if
                        conn.is_an_error:
                          push &events
                            new(std_types::event READ_FAILED fd conn)
                          next!
                        :
                          push &events
                            new(std_types::event CONNECT fd conn)
                          next!
                    do_read
                do_read

              $do_read:
                $do_close_and_max_length read_jobs_of(self)(fd)
                do_close_and_max_length $do_close $max_length
                $length
                  if
                    max_length.is_defined && max_length < 0x10'0000
                    -> max_length
                    -> 0x10'0000
                read! $buf fd length
                if
                  buf.is_an_error:
                    push &events new(std_types::event READ_FAILED fd buf)
                    if
                      do_close:
                        close &self fd
                        next!
                      next
                  :
                    if
                      buf.is_empty:
                        stop_reading_from &self fd
                        push &events new(std_types::event CLOSED fd undefined)
                        if
                          do_close:
                            close &self fd
                            next!
                          next
                      :
                        push &events new(std_types::event READ fd buf)
                        if
                          max_length.is_defined:
                            if
                              length_of(buf) < max_length:
                                !self.read_jobs_of(fd)
                                  tuple(true max_length-length_of(buf))
                                next!
                              :
                                stop_reading_from &self fd
                                if
                                  do_close:
                                    close &self fd
                                    next!
                                  next
                          next
          :
            attempt_close_operations! &self
              # perform all close jobs without pending writes
            attempt_exit! &self
              # exit if nothing to do and exit code is defined
            -> self events

$attempt_close_operations: (io)
  for_each close_jobs_of(io)
    : (fd)
      if
        write_jobs_of(io)(fd).is_undefined:
          close! fd
          !io.close_jobs_of(fd) false
          next!
        next
    -> io

$attempt_exit: (io)
  if
    exit_code_of(io).is_defined:
      for_each resources_of(io)
        : (resource)
          if
            do_log_of(resource):
              log &io 3 "finalizing @(name_of(resource))"
              finalize_resource!
            finalize_resource

          $finalize_resource:
            finalize! resource &io
            next!
        :
          !io.resources_of empty_list
          if
            io.is_empty:
              exit! exit_code_of(io)
            -> io
    -> io

$std::handle_events: (io events)
  $new_events empty_list
  $handlers handlers_of(io)
  for_each events
    : (event)
      event $type $id $argument
      $id_handlers handlers(id)
      if
        id_handlers.is_undefined
        keep_event
        :
          $handler id_handlers(type)
          if
            handler.is_undefined
            keep_event
            :
              handler &io $new_event id argument
              if
                new_event.is_defined:
                  update_if_not new_event.is_a_list
                    &new_event -> list(new_event)
                  handle_events &io &new_event
                  append &new_events new_event
                  next
                next

      $keep_event:
        push &new_events event
        next
    -> io new_events

[source]

$std::handle_events: (io events)
  $new_events empty_list
  $handlers handlers_of(io)
  for_each events
    : (event)
      event $type $id $argument
      $id_handlers handlers(id)
      if
        id_handlers.is_undefined
        keep_event
        :
          $handler id_handlers(type)
          if
            handler.is_undefined
            keep_event
            :
              handler &io $new_event id argument
              if
                new_event.is_defined:
                  update_if_not new_event.is_a_list
                    &new_event -> list(new_event)
                  handle_events &io &new_event
                  append &new_events new_event
                  next
                next

      $keep_event:
        push &new_events event
        next
    -> io new_events

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Input-Output Events

# std::handle_events (a function)

