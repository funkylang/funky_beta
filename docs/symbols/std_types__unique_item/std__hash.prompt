[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

METHOD std_types::positive_integer/plus
{
  CHECK_ARGUMENTS(2)
  CHECK_RESULTS(1)
  if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::positive_integer)) {
    if (ARGUMENTS(0)->integer.value+ARGUMENTS(1)->integer.value >= ARGUMENTS(0)->integer
      RETURN_SINGLE_RESULT(CREATE(std_types::positive_integer, ARGUMENTS(0)->integer.val
    }
  } else if (TYPEOF(ARGUMENTS(1)) == TYPE(negative_integer)) {
    if (ARGUMENTS(0)->integer.value >= ARGUMENTS(1)->integer.value) {
      RETURN_SINGLE_RESULT(CREATE(std_types::positive_integer, ARGUMENTS(0)->integer.val
    } else {
      RETURN_SINGLE_RESULT(CREATE(negative_integer, ARGUMENTS(1)->integer.value-ARGUMENT
    }
  } else if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::real)) {
    RETURN_SINGLE_RESULT(CREATE(std_types::real, ARGUMENTS(0)->integer.value+ARGUMENTS(1
  }
  INVALID_ARGUMENTS
}

[documentation remark]

# std_types::positive_integer/std::plus (a method)

  implements the plus operation for positive integers

  Parameters:
    left: a positive integer value
    right: any numeric value

  Result:
    sum: the sum of the two operands

  Topic: Numbers

  See also: std_types::positive_integer/std::minus,
            std_types::positive_integer/std::times,
            std_types::positive_integer/std::over,
            std_types::positive_integer/std::div,
            std_types::positive_integer/std::mod

[EXERCISE]

[symbols]

TYPE std_types::unique_item -> std_types::object
FUNCTION NODE *register_unique_item
METHOD std_types::unique_item/_type
METHOD long std_types::unique_item/_debug_string
METHOD std_types::unique_item/to_string
METHOD std_types::unique_item/equal
METHOD std_types::unique_item/hash
FUNCTION std::unique_item

#
  Copyright (C) 2021 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Topic: Basics

CODE
  static long unique_idx = 1;
  static const char **my_unique_item_names;

TYPE std_types::unique_item -> std_types::object
  #
    this is the prototype object for all unique items
  long id

FUNCTION NODE *register_unique_item
  (
    const char *name
  )
  {
    if (unique_idx == 0) {
      my_unique_item_names = allocate_memory(sizeof(const char *));
    } else if (is_a_power_of_two(unique_idx)) {
      my_unique_item_names =
        reallocate_memory(
          my_unique_item_names,
          2*unique_idx*sizeof(const char *));
    }
    my_unique_item_names[unique_idx] = name;
    return CREATE(std_types::unique_item, unique_idx++);
  }

METHOD std_types::unique_item/_type
  {
    RUNTIME_ERROR("Attempt to call a unique item as a function!")
  }

METHOD long std_types::unique_item/_debug_string
  (
    NODE *node,
    int indent,
    int max_depth,
    char *buf
  )
  {
    return debug_print(
      indent, buf,
      node->unique_item.id == 0 ? "<unique_item>" :
      my_unique_item_names[node->unique_item.id]);
  }

METHOD std_types::unique_item/to_string
  {
    CHECK_ARGUMENTS(1)
    RETURN_SINGLE_RESULT(
      from_c_string(my_unique_item_names[ARGUMENTS(0)->unique_item.id]))
  }

METHOD std_types::unique_item/equal
  #
    compares two unique items for equality
  {
    CHECK_ARGUMENTS(2)
    NODE *right = ARGUMENTS(1);
    if (TYPEOF(right) == TYPE(std_types::unique_item)) {
      RETURN_SINGLE_RESULT(
        from_bool(ARGUMENTS(0)->unique_item.id == right->unique_item.id))
    } else if (TYPEOF(right) == TYPE(std_types::error)) {
      INVALID_ARGUMENTS
    } else {
      RETURN_FALSE
    }
  }

METHOD std_types::unique_item/hash
  #
    returns a numerical hash value
  {
    CHECK_ARGUMENTS(1)
    uint32_t hash = ARGUMENTS(0)->unique_item.id;
    hash *= 1893456841;
    hash ^= hash >> 25 | hash << 7;
    RETURN_SINGLE_RESULT(from_uint32(hash));
  }

FUNCTION std::unique_item
  #
    returns the specified unique item

    This function should be used for deserialization only!

    Only namespaced unique items can be retrieved.
  {
    CHECK_ARGUMENTS(1)
    char *name;
    CHECK(to_c_string(ARGUMENTS(0), &name))
    long i;
    for (i = 1; i < unique_idx; ++i) {
      if (strcmp(name, my_unique_item_names[i]) == 0) {
        PREPARE_SINGLE_RESULT(CREATE(std_types::unique_item, i))
        goto cleanup;
      }
    }
    RUNTIME_ERROR("NO SUCH UNIQUE ITEM")

    cleanup:

    deallocate_memory(name);
  }

[source]

POLY std::hash
  #
    returns a hash value

    Parameter:
      object # the object to be hashed

    Result:
      hash # an integer hash value

    The returned integer number will always be the same for an object. The
    returned number might not depend on the platform the program is running!

    It must be computed from the object's contents solely!

    Topics: Numbers, Objects, Strings

    See also: std::equal

METHOD std_types::unique_item/hash
  #
    returns a numerical hash value
  {
    CHECK_ARGUMENTS(1)
    uint32_t hash = ARGUMENTS(0)->unique_item.id;
    hash *= 1893456841;
    hash ^= hash >> 25 | hash << 7;
    RETURN_SINGLE_RESULT(from_uint32(hash));
  }

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Basics

# std_types::unique_item/std::hash (a builtin method)

