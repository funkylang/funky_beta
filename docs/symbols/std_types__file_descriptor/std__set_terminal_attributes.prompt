[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

METHOD std_types::positive_integer/plus
{
  CHECK_ARGUMENTS(2)
  CHECK_RESULTS(1)
  if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::positive_integer)) {
    if (ARGUMENTS(0)->integer.value+ARGUMENTS(1)->integer.value >= ARGUMENTS(0)->integer
      RETURN_SINGLE_RESULT(CREATE(std_types::positive_integer, ARGUMENTS(0)->integer.val
    }
  } else if (TYPEOF(ARGUMENTS(1)) == TYPE(negative_integer)) {
    if (ARGUMENTS(0)->integer.value >= ARGUMENTS(1)->integer.value) {
      RETURN_SINGLE_RESULT(CREATE(std_types::positive_integer, ARGUMENTS(0)->integer.val
    } else {
      RETURN_SINGLE_RESULT(CREATE(negative_integer, ARGUMENTS(1)->integer.value-ARGUMENT
    }
  } else if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::real)) {
    RETURN_SINGLE_RESULT(CREATE(std_types::real, ARGUMENTS(0)->integer.value+ARGUMENTS(1
  }
  INVALID_ARGUMENTS
}

[documentation remark]

# std_types::positive_integer/std::plus (a method)

  implements the plus operation for positive integers

  Parameters:
    left: a positive integer value
    right: any numeric value

  Result:
    sum: the sum of the two operands

  Topic: Numbers

  See also: std_types::positive_integer/std::minus,
            std_types::positive_integer/std::times,
            std_types::positive_integer/std::over,
            std_types::positive_integer/std::div,
            std_types::positive_integer/std::mod

[EXERCISE]

[symbols]

POLY std::get_terminal_attributes
POLY std::set_terminal_attributes
POLY std::backspace_character_of
POLY std::use_canonical_mode
POLY std::echo_characters
POLY std::echo_new_lines
POLY std::enable_xon_xoff_for_input
POLY std::enable_xon_xoff_for_output
POLY std::restart_output_on_any_character
POLY std::ignore_cr_on_input
POLY std::generate_signals
POLY std::map_cr_to_lf_on_input
POLY std::hangup_on_close
POLY std::map_lf_to_crlf_on_output
POLY std::minimum_characters_for_canoncial_read
POLY std::timeout_for_reads
POLY std::input_speed
POLY std::output_speed
TYPE std_types::terminal_attributes -> std_types::object
METHOD std_types::terminal_attributes/_type
METHOD long std_types::terminal_attributes/_debug_string
METHOD std_types::file_descriptor/get_terminal_attributes
METHOD std_types::file_descriptor/set_terminal_attributes
METHOD std_types::terminal_attributes/backspace_character_of
METHOD std_types::terminal_attributes/use_canonical_mode
METHOD std_types::terminal_attributes/echo_characters
METHOD std_types::terminal_attributes/echo_new_lines
METHOD std_types::terminal_attributes/enable_xon_xoff_for_input
METHOD std_types::terminal_attributes/enable_xon_xoff_for_output
METHOD std_types::terminal_attributes/restart_output_on_any_character
METHOD std_types::terminal_attributes/ignore_cr_on_input
METHOD std_types::terminal_attributes/generate_signals
METHOD std_types::terminal_attributes/map_cr_to_lf_on_input
METHOD std_types::terminal_attributes/hangup_on_close
METHOD std_types::terminal_attributes/map_lf_to_crlf_on_output
METHOD std_types::terminal_attributes/minimum_characters_for_canoncial_read
METHOD std_types::terminal_attributes/timeout_for_reads
METHOD std_types::terminal_attributes/input_speed
METHOD std_types::terminal_attributes/output_speed

POLY std::backspace_character_of
  #
    retrieve the character sent by the backspace key

POLY std::use_canonical_mode
  #
    set or clear ICANON in c_lflag

POLY std::echo_characters
  #
    set or clear ECHO in c_lflag

POLY std::echo_new_lines
  #
    set or clear ECHONL in c_lflag

POLY std::enable_xon_xoff_for_input
  #
    set or clear IXOFF in c_iflag

POLY std::enable_xon_xoff_for_output
  #
    set or clear IXON in c_iflag

POLY std::restart_output_on_any_character
  #
    set or clear IXANY in c_iflag

POLY std::ignore_cr_on_input
  #
    set or clear IGNCR in c_iflag

POLY std::generate_signals
  #
    set or clear ISIG in c_lflag

POLY std::map_cr_to_lf_on_input
  #
    set or clear ICRNL in c_iflag

POLY std::hangup_on_close
  #
    set or clear HUPCL in c_oflag

POLY std::map_lf_to_crlf_on_output
  #
    set or clear ONLCR in c_oflag

POLY std::minimum_characters_for_canoncial_read
  #
    set or get the value of VMIN in c_cc

POLY std::timeout_for_reads
  #
    set or get the value of VTIME in c_cc; timeout is converted to/from seconds!

POLY std::input_speed
  #
    call cfsetispeed() or cfgetispeed()

POLY std::output_speed
  #
    call cfsetospeed() or cfgetospeed()

DATA
  typedef struct {
    struct termios termios;
  } TERMIO_DATA;

TYPE std_types::terminal_attributes -> std_types::object
  #
    a structure that stores the terminal attributes
  TERMIO_DATA *data

METHOD std_types::terminal_attributes/_type
  {
    RUNTIME_ERROR("Attempt to call terminal attributes as a function!");
  }

METHOD long std_types::terminal_attributes/_debug_string
  (
    NODE *node,
    int indent,
    int max_depth,
    char *buf
  )
  {
    return debug_print(indent, buf, "<terminal_attributes>");
  }

METHOD std_types::file_descriptor/get_terminal_attributes
  {
    CHECK_ARGUMENTS(1)
    CHECK_IO_ACCESS_RIGHTS

    int fd = ARGUMENTS(0)->file_descriptor.value;
    TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
    if (tcgetattr(fd, &data->termios) == 0) {
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    } else {
      RETURN_UNDEFINED
    }
  }

METHOD std_types::file_descriptor/set_terminal_attributes
  {
    CHECK_ARGUMENTS(2)
    CHECK_IO_ACCESS_RIGHTS

    int fd = ARGUMENTS(0)->file_descriptor.value;
    NODE *attributes = ARGUMENTS(1);
    if (TYPEOF(attributes) != TYPEOF(VAR(std_types::terminal_attributes)))
      INVALID_ARGUMENTS
    if (tcsetattr(fd, TCSANOW, &attributes->terminal_attributes.data->termios) == 0) {
      RETURN_TRUE
    } else {
      RETURN_FALSE
    }
  }

METHOD std_types::terminal_attributes/backspace_character_of
  {
    CHECK_ARGUMENTS(1)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    RETURN_SINGLE_RESULT(from_uchar32(termios->c_cc[VERASE]))
  }

METHOD std_types::terminal_attributes/use_canonical_mode
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      RETURN_SINGLE_RESULT(from_bool(termios->c_lflag & ICANON))
    } else {
      int do_set;
      CHECK(to_bool(ARGUMENTS(1), &do_set));
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      if (do_set) {
        data->termios.c_lflag |= ICANON;
      } else {
        data->termios.c_lflag &= ~ICANON;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

METHOD std_types::terminal_attributes/echo_characters
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      RETURN_SINGLE_RESULT(from_bool(termios->c_lflag & ECHO))
    } else {
      int do_set;
      CHECK(to_bool(ARGUMENTS(1), &do_set));
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      if (do_set) {
        data->termios.c_lflag |= ECHO;
      } else {
        data->termios.c_lflag &= ~ECHO;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

METHOD std_types::terminal_attributes/echo_new_lines
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      RETURN_SINGLE_RESULT(from_bool(termios->c_lflag & ECHONL))
    } else {
      int do_set;
      CHECK(to_bool(ARGUMENTS(1), &do_set));
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      if (do_set) {
        data->termios.c_lflag |= ECHONL;
      } else {
        data->termios.c_lflag &= ~ECHONL;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

METHOD std_types::terminal_attributes/enable_xon_xoff_for_input
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      RETURN_SINGLE_RESULT(from_bool(termios->c_iflag & IXOFF))
    } else {
      int do_set;
      CHECK(to_bool(ARGUMENTS(1), &do_set));
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      if (do_set) {
        data->termios.c_iflag |= IXOFF;
      } else {
        data->termios.c_iflag &= ~IXOFF;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

METHOD std_types::terminal_attributes/enable_xon_xoff_for_output
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      RETURN_SINGLE_RESULT(from_bool(termios->c_iflag & IXON))
    } else {
      int do_set;
      CHECK(to_bool(ARGUMENTS(1), &do_set));
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      if (do_set) {
        data->termios.c_iflag |= IXON;
      } else {
        data->termios.c_iflag &= ~IXON;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

METHOD std_types::terminal_attributes/restart_output_on_any_character
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      RETURN_SINGLE_RESULT(from_bool(termios->c_iflag & IXANY))
    } else {
      int do_set;
      CHECK(to_bool(ARGUMENTS(1), &do_set));
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      if (do_set) {
        data->termios.c_iflag |= IXANY;
      } else {
        data->termios.c_iflag &= ~IXANY;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

METHOD std_types::terminal_attributes/ignore_cr_on_input
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      RETURN_SINGLE_RESULT(from_bool(termios->c_iflag & IGNCR))
    } else {
      int do_set;
      CHECK(to_bool(ARGUMENTS(1), &do_set));
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      if (do_set) {
        data->termios.c_iflag |= IGNCR;
      } else {
        data->termios.c_iflag &= ~IGNCR;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

METHOD std_types::terminal_attributes/generate_signals
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      RETURN_SINGLE_RESULT(from_bool(termios->c_lflag & ISIG))
    } else {
      int do_set;
      CHECK(to_bool(ARGUMENTS(1), &do_set));
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      if (do_set) {
        data->termios.c_lflag |= ISIG;
      } else {
        data->termios.c_lflag &= ~ISIG;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

METHOD std_types::terminal_attributes/map_cr_to_lf_on_input
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      RETURN_SINGLE_RESULT(from_bool(termios->c_iflag & ICRNL))
    } else {
      int do_set;
      CHECK(to_bool(ARGUMENTS(1), &do_set));
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      if (do_set) {
        data->termios.c_iflag |= ICRNL;
      } else {
        data->termios.c_iflag &= ~ICRNL;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

METHOD std_types::terminal_attributes/hangup_on_close
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      RETURN_SINGLE_RESULT(from_bool(termios->c_oflag & HUPCL))
    } else {
      int do_set;
      CHECK(to_bool(ARGUMENTS(1), &do_set));
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      if (do_set) {
        data->termios.c_oflag |= HUPCL;
      } else {
        data->termios.c_oflag &= ~HUPCL;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

METHOD std_types::terminal_attributes/map_lf_to_crlf_on_output
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      RETURN_SINGLE_RESULT(from_bool(termios->c_oflag & ONLCR))
    } else {
      int do_set;
      CHECK(to_bool(ARGUMENTS(1), &do_set));
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      if (do_set) {
        data->termios.c_oflag |= ONLCR;
      } else {
        data->termios.c_oflag &= ~ONLCR;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

METHOD std_types::terminal_attributes/minimum_characters_for_canoncial_read
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      RETURN_SINGLE_RESULT(from_int(termios->c_cc[VMIN]))
    } else {
      int value;
      CHECK(to_int(ARGUMENTS(1), &value))
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      data->termios.c_cc[VMIN] = value;
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

METHOD std_types::terminal_attributes/timeout_for_reads
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      RETURN_SINGLE_RESULT(from_double((double)termios->c_cc[VTIME]/10))
    } else {
      double value;
      CHECK(to_double(ARGUMENTS(1), &value))
      value *= 10;
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      data->termios.c_cc[VTIME] = value;
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

METHOD std_types::terminal_attributes/input_speed
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    struct termios *termios = &ARGUMENTS(0)->terminal_attributes.data->termios;
    if (ARGUMENT_COUNT == 1) {
      int speed = cfgetispeed(termios);
      switch (speed) {
        case B0:
          speed = 0;
          break;
        case B50:
          speed = 50;
          break;
        case B75:
          speed = 75;
          break;
        case B110:
          speed = 110;
          break;
        case B134:
          speed = 134;
          break;
        case B150:
          speed = 150;
          break;
        case B200:
          speed = 200;
          break;
        case B300:
          speed = 300;
          break;
        case B600:
          speed = 600;
          break;
        case B1200:
          speed = 1200;
          break;
        case B1800:
          speed = 1800;
          break;
        case B2400:
          speed = 2400;
          break;
        case B4800:
          speed = 4800;
          break;
        case B9600:
          speed = 9600;
          break;
        case B19200:
          speed = 19200;
          break;
        case B38400:
          speed = 38400;
          break;
        case B57600:
          speed = 57600;
          break;
        case B115200:
          speed = 115200;
          break;
        case B230400:
          speed = 230400;
          break;
        default:
          speed = -1;
      }
      if (speed < 0) {
        RETURN_UNDEFINED
      } else {
        RETURN_SINGLE_RESULT(from_int(speed))
      }
    } else {
      int speed;
      CHECK(to_int(ARGUMENTS(1), &speed));
      switch (speed) {
        case 0:
          speed = B0;
          break;
        case 50:
          speed = B50;
          break;
        case 75:
          speed = B75;
          break;
        case 110:
          speed = B110;
          break;
        case 134:
          speed = B134;
          break;
        case 150:
          speed = B150;
          break;
        case 200:
          speed = B200;
          break;
        case 300:
          speed = B300;
          break;
        case 600:
          speed = B600;
          break;
        case 1200:
          speed = B1200;
          break;
        case 1800:
          speed = B1800;
          break;
        case 2400:
          speed = B2400;
          break;
        case 4800:
          speed = B4800;
          break;
        case 9600:
          speed = B9600;
          break;
        case 19200:
          speed = B19200;
          break;
        case 38400:
          speed = B38400;
          break;
        case 57600:
          speed = B57600;
          break;
        case 115200:
          speed = B115200;
          break;
        case 230400:
          speed = B230400;
          break;
        default:
          INVALID_ARGUMENTS
      }
      TERMIO_DATA *data = allocate(sizeof(TERMIO_DATA));
      data->termios = *termios;
      cfsetispeed(&data->termios, speed);
      RETURN_SINGLE_RESULT(CREATE(std_types::terminal_attributes, data))
    }
  }

[source]

POLY std::set_terminal_attributes
  #
    update the current terminal attributes

METHOD std_types::file_descriptor/set_terminal_attributes
  {
    CHECK_ARGUMENTS(2)
    CHECK_IO_ACCESS_RIGHTS

    int fd = ARGUMENTS(0)->file_descriptor.value;
    NODE *attributes = ARGUMENTS(1);
    if (TYPEOF(attributes) != TYPEOF(VAR(std_types::terminal_attributes)))
      INVALID_ARGUMENTS
    if (tcsetattr(fd, TCSANOW, &attributes->terminal_attributes.data->termios) == 0) {
      RETURN_TRUE
    } else {
      RETURN_FALSE
    }
  }

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: POSIX, Input-Output, Input-Output

# std_types::file_descriptor/std::set_terminal_attributes (a builtin I/O-method)

