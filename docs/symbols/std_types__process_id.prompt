[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

TYPE std_types::object

[documentation remark]

# std_types::object (a builtin type)

  the prototype object for all "normal" objects

  This is one of the three Funky root objects.

  Topics: Basics, Objects

  See also: std_types::undefined, std_types::error

[source]

TYPE std_types::number -> std_types::object

[documentation remark]

# std_types::number (a builtin type derived from std_types::object)

  the prototype object for all kinds of numbers

  Topic: Numbers

  See also: std_types::integer, std_types::real

[source]

METHOD std_types::array/_type
  {
    ARRAY_DATA *data = MYSELF->array.data;
    int dimension_count = data->info->dimension_count;
    MIN_ARGUMENTS(dimension_count)
    MAX_ARGUMENTS(dimension_count+1)
    if (ARGUMENT_COUNT == dimension_count) {
      // get item
      data = apply_array_updates((ARRAY *)MYSELF);
      // info and view could have been updated!
      long offset = compute_array_read_offset(
        MYSELF, data->info, MYSELF->array.view);
      if (offset < 0) return;
      NODE *value;
      value = data->items[offset];
      RETURN_SINGLE_RESULT(value);
    } else {
      // set item
      long offset = compute_array_write_offset(
        MYSELF, data->info, MYSELF->array.view);
      if (offset < 0) return;
      NODE *value;
      value = ARGUMENTS(dimension_count);
      long length = MYSELF->array.updates_length;
      MYSELF =
        add_update(
          (ARRAY *)MYSELF, sizeof(UPDATE_ARRAY_DATA_SET_VALUE));
      UPDATE_ARRAY_DATA_SET_VALUE *update =
        (UPDATE_ARRAY_DATA_SET_VALUE *)
        (MYSELF->array.updates->buffer+length);
      update->tag = SET_VALUE;
      update->offset = offset;
      update->value = value;
      RETURN_SINGLE_RESULT(MYSELF)
    }
  }

TYPE std_types::array -> std_types::generic_array

[documentation remark]

# std_types::array (a builtin type derived from std_types::generic_array)

  the prototype object for all arrays

  Parameters:
    indices: the indices of the array elements
    value: the new value (only for updates)

  Result:
    value_or_array: the value at the specified position or the updated array

  Updates to arrays are delayed until the array is read.

  Array indices are one-based.

  Arrays can hold any kind of values.

  Topics: Arrays, Collections

  See also: std_types::list

  Example:

    $a array(3 2) # a new array with 3 rows and 2 columns
    !a(2 1) 47 # use syntactic sugar to assign a value to an array element
    !a a(3 2 11) # without syntactic sugar
    println! a(2 1)
    println! a(3 2)

  Output:

    47
    11

[EXERCISE]

[symbols]

OBJECT std::BLOCK_DEVICE -> std_types::file_type
OBJECT std::CHARACTER_DEVICE -> std_types::file_type
OBJECT std::DIRECTORY -> std_types::file_type
OBJECT std::NAMED_PIPE -> std_types::file_type
OBJECT std::SYMBOLIC_LINK -> std_types::file_type
OBJECT std::REGULAR_FILE -> std_types::file_type
OBJECT std::SOCKET -> std_types::file_type
OBJECT std::UNKNOWN_FILE_TYPE -> std_types::file_type
OBJECT std::STDIN_FILENO -> std_types::file_descriptor
OBJECT std::STDOUT_FILENO -> std_types::file_descriptor
OBJECT std::STDERR_FILENO -> std_types::file_descriptor
OBJECT std::SHUT_RD -> std_types::shutdown_type
OBJECT std::SHUT_WR -> std_types::shutdown_type
OBJECT std::SHUT_RDWR -> std_types::shutdown_type
OBJECT std::SEEK_SET -> std_types::seek_type
OBJECT std::SEEK_CUR -> std_types::seek_type
OBJECT std::SEEK_END -> std_types::seek_type
OBJECT std::ENOERR -> std_types::error_number
OBJECT std::EPERM -> std_types::error_number
OBJECT std::ENOENT -> std_types::error_number
OBJECT std::ESRCH -> std_types::error_number
OBJECT std::EINTR -> std_types::error_number
OBJECT std::EIO -> std_types::error_number
OBJECT std::ENXIO -> std_types::error_number
OBJECT std::E2BIG -> std_types::error_number
OBJECT std::ENOEXEC -> std_types::error_number
OBJECT std::EBADF -> std_types::error_number
OBJECT std::ECHILD -> std_types::error_number
OBJECT std::EAGAIN -> std_types::error_number
OBJECT std::ENOMEM -> std_types::error_number
OBJECT std::EACCES -> std_types::error_number
OBJECT std::EFAULT -> std_types::error_number
OBJECT std::ENOTBLK -> std_types::error_number
OBJECT std::EBUSY -> std_types::error_number
OBJECT std::EEXIST -> std_types::error_number
OBJECT std::EXDEV -> std_types::error_number
OBJECT std::ENODEV -> std_types::error_number
OBJECT std::ENOTDIR -> std_types::error_number
OBJECT std::EISDIR -> std_types::error_number
OBJECT std::EINVAL -> std_types::error_number
OBJECT std::ENFILE -> std_types::error_number
OBJECT std::EMFILE -> std_types::error_number
OBJECT std::ENOTTY -> std_types::error_number
OBJECT std::ETXTBSY -> std_types::error_number
OBJECT std::EFBIG -> std_types::error_number
OBJECT std::ENOSPC -> std_types::error_number
OBJECT std::ESPIPE -> std_types::error_number
OBJECT std::EROFS -> std_types::error_number
OBJECT std::EMLINK -> std_types::error_number
OBJECT std::EPIPE -> std_types::error_number
OBJECT std::EDOM -> std_types::error_number
OBJECT std::ERANGE -> std_types::error_number
OBJECT std::EDEADLK -> std_types::error_number
OBJECT std::ENAMETOOLONG -> std_types::error_number
OBJECT std::ENOLCK -> std_types::error_number
OBJECT std::ENOSYS -> std_types::error_number
OBJECT std::ENOTEMPTY -> std_types::error_number
OBJECT std::EILSEQ -> std_types::error_number
OBJECT std::ELOOP -> std_types::error_number
OBJECT std::ENOMSG -> std_types::error_number
OBJECT std::EIDRM -> std_types::error_number
OBJECT std::ECHRNG -> std_types::error_number
OBJECT std::EL2NSYNC -> std_types::error_number
OBJECT std::EL3HLT -> std_types::error_number
OBJECT std::EL3RST -> std_types::error_number
OBJECT std::ELNRNG -> std_types::error_number
OBJECT std::EUNATCH -> std_types::error_number
OBJECT std::ENOCSI -> std_types::error_number
OBJECT std::EL2HLT -> std_types::error_number
OBJECT std::EBADE -> std_types::error_number
OBJECT std::EBADR -> std_types::error_number
OBJECT std::EXFULL -> std_types::error_number
OBJECT std::ENOANO -> std_types::error_number
OBJECT std::EBADRQC -> std_types::error_number
OBJECT std::EBADSLT -> std_types::error_number
OBJECT std::EBFONT -> std_types::error_number
OBJECT std::ENOSTR -> std_types::error_number
OBJECT std::ENODATA -> std_types::error_number
OBJECT std::ETIME -> std_types::error_number
OBJECT std::ENOSR -> std_types::error_number
OBJECT std::ENONET -> std_types::error_number
OBJECT std::ENOPKG -> std_types::error_number
OBJECT std::EREMOTE -> std_types::error_number
OBJECT std::ENOLINK -> std_types::error_number
OBJECT std::EADV -> std_types::error_number
OBJECT std::ESRMNT -> std_types::error_number
OBJECT std::ECOMM -> std_types::error_number
OBJECT std::EPROTO -> std_types::error_number
OBJECT std::EMULTIHOP -> std_types::error_number
OBJECT std::EDOTDOT -> std_types::error_number
OBJECT std::EBADMSG -> std_types::error_number
OBJECT std::EOVERFLOW -> std_types::error_number
OBJECT std::ENOTUNIQ -> std_types::error_number
OBJECT std::EBADFD -> std_types::error_number
OBJECT std::EREMCHG -> std_types::error_number
OBJECT std::ELIBACC -> std_types::error_number
OBJECT std::ELIBBAD -> std_types::error_number
OBJECT std::ELIBSCN -> std_types::error_number
OBJECT std::ELIBMAX -> std_types::error_number
OBJECT std::ELIBEXEC -> std_types::error_number
OBJECT std::ESTRPIPE -> std_types::error_number
OBJECT std::EUSERS -> std_types::error_number
OBJECT std::ENOTSOCK -> std_types::error_number
OBJECT std::EDESTADDRREQ -> std_types::error_number
OBJECT std::EMSGSIZE -> std_types::error_number
OBJECT std::EPROTOTYPE -> std_types::error_number
OBJECT std::ENOPROTOOPT -> std_types::error_number
OBJECT std::EPROTONOSUPPORT -> std_types::error_number
OBJECT std::ESOCKTNOSUPPORT -> std_types::error_number
OBJECT std::EOPNOTSUPP -> std_types::error_number
OBJECT std::EPFNOSUPPORT -> std_types::error_number
OBJECT std::EAFNOSUPPORT -> std_types::error_number
OBJECT std::EADDRINUSE -> std_types::error_number
OBJECT std::EADDRNOTAVAIL -> std_types::error_number
OBJECT std::ENETDOWN -> std_types::error_number
OBJECT std::ENETUNREACH -> std_types::error_number
OBJECT std::ENETRESET -> std_types::error_number
OBJECT std::ECONNABORTED -> std_types::error_number
OBJECT std::ECONNRESET -> std_types::error_number
OBJECT std::ENOBUFS -> std_types::error_number
OBJECT std::EISCONN -> std_types::error_number
OBJECT std::ENOTCONN -> std_types::error_number
OBJECT std::ESHUTDOWN -> std_types::error_number
OBJECT std::ETOOMANYREFS -> std_types::error_number
OBJECT std::ETIMEDOUT -> std_types::error_number
OBJECT std::ECONNREFUSED -> std_types::error_number
OBJECT std::EHOSTDOWN -> std_types::error_number
OBJECT std::EHOSTUNREACH -> std_types::error_number
OBJECT std::EALREADY -> std_types::error_number
OBJECT std::EINPROGRESS -> std_types::error_number
OBJECT std::ESTALE -> std_types::error_number
OBJECT std::EDQUOT -> std_types::error_number
OBJECT std::ENOMEDIUM -> std_types::error_number
OBJECT std::ECANCELED -> std_types::error_number
OBJECT std::EOWNERDEAD -> std_types::error_number
OBJECT std::ENOTRECOVERABLE -> std_types::error_number
ATTR std::access_time_nanoseconds_of
ATTR std::access_time_seconds_of
ATTR std::block_count_of
ATTR std::block_size_of
ATTR std::device_of
ATTR std::group_id_of
ATTR std::home_directory_of
ATTR std::inode_number_of
ATTR std::link_count_of
ATTR std::mode_of
ATTR std::modification_time_nanoseconds_of
ATTR std::modification_time_seconds_of
ATTR std::password_of
ATTR std::root_device_of
ATTR std::shell_of
ATTR std::size_of
ATTR std::status_change_time_nanoseconds_of
ATTR std::status_change_time_seconds_of
ATTR std::type_of
ATTR std::user_id_of
ATTR std::user_information_of
ATTR std::username_of
ATTR std::name_of
TYPE std_types::file_type -> std_types::object
METHOD std_types::file_type/_type
METHOD long std_types::file_type/_debug_string
METHOD std_types::file_type/equal
METHOD std_types::file_type/hash
FUNCTION std::file_type
METHOD std_types::file_type/to_integer
TYPE std_types::file_descriptor -> std_types::object
METHOD std_types::file_descriptor/_type
METHOD long std_types::file_descriptor/_debug_string
METHOD std_types::file_descriptor/equal
METHOD std_types::file_descriptor/hash
FUNCTION std::file_descriptor
METHOD std_types::file_descriptor/to_integer
TYPE std_types::shutdown_type -> std_types::object
METHOD std_types::shutdown_type/_type
METHOD long std_types::shutdown_type/_debug_string
METHOD std_types::shutdown_type/equal
METHOD std_types::shutdown_type/hash
FUNCTION std::shutdown_type
METHOD std_types::shutdown_type/to_integer
TYPE std_types::seek_type -> std_types::object
METHOD std_types::seek_type/_type
METHOD long std_types::seek_type/_debug_string
METHOD std_types::seek_type/equal
METHOD std_types::seek_type/hash
FUNCTION std::seek_type
METHOD std_types::seek_type/to_integer
TYPE std_types::device_id -> std_types::object
METHOD std_types::device_id/_type
METHOD long std_types::device_id/_debug_string
METHOD std_types::device_id/equal
METHOD std_types::device_id/hash
FUNCTION std::device_id
METHOD std_types::device_id/to_integer
TYPE std_types::directory -> std_types::object
METHOD std_types::directory/_type
METHOD long std_types::directory/_debug_string
METHOD std_types::directory/equal
METHOD std_types::directory/hash
TYPE std_types::group_id -> std_types::object
METHOD std_types::group_id/_type
METHOD long std_types::group_id/_debug_string
METHOD std_types::group_id/equal
METHOD std_types::group_id/hash
FUNCTION std::group_id
METHOD std_types::group_id/to_integer
TYPE std_types::inode_number -> std_types::object
METHOD std_types::inode_number/_type
METHOD long std_types::inode_number/_debug_string
METHOD std_types::inode_number/equal
METHOD std_types::inode_number/hash
FUNCTION std::inode_number
METHOD std_types::inode_number/to_integer
TYPE std_types::process_id -> std_types::object
METHOD std_types::process_id/_type
METHOD long std_types::process_id/_debug_string
METHOD std_types::process_id/equal
METHOD std_types::process_id/hash
FUNCTION std::process_id
METHOD std_types::process_id/to_integer
TYPE std_types::user_id -> std_types::object
METHOD std_types::user_id/_type
METHOD long std_types::user_id/_debug_string
METHOD std_types::user_id/equal
METHOD std_types::user_id/hash
FUNCTION std::user_id
METHOD std_types::user_id/to_integer
TYPE std_types::error_number -> std_types::object
METHOD std_types::error_number/_type
METHOD long std_types::error_number/_debug_string
METHOD std_types::error_number/equal
METHOD std_types::error_number/hash
FUNCTION std::error_number
METHOD std_types::error_number/to_integer
TYPE std_types::passwd -> std_types::object
METHOD std_types::passwd/_type
TYPE std_types::stat -> std_types::object
METHOD std_types::stat/_type
TYPE std_types::dirent -> std_types::object
METHOD std_types::dirent/_type
FUNCTION std::access
FUNCTION std::chdir
FUNCTION std::chmod
FUNCTION std::chown
FUNCTION std::chroot
METHOD std_types::file_descriptor/close
FUNCTION std::closedir
FUNCTION std::dup2
FUNCTION std::fstat
FUNCTION std::fsync
FUNCTION std::getcwd
FUNCTION std::getenv
FUNCTION std::getegid
FUNCTION std::geteuid
FUNCTION std::getgid
FUNCTION std::gethostname
FUNCTION std::getlogin
FUNCTION std::getpid
FUNCTION std::getppid
FUNCTION std::getpwuid
FUNCTION std::getsid
FUNCTION std::getuid
FUNCTION std::isatty
FUNCTION std::link
FUNCTION std::lseek
FUNCTION std::mkdir
FUNCTION std::mkfifo
FUNCTION std::open
FUNCTION std::opendir
METHOD std_types::file_descriptor/read
FUNCTION std::readdir
FUNCTION std::realpath
FUNCTION std::rename
FUNCTION std::sethostname
FUNCTION std::shutdown
FUNCTION std::stat
FUNCTION std::strerror
FUNCTION std::wait
METHOD std_types::file_descriptor/write
FUNCTION std::umask
FUNCTION std::unlink
FUNCTION std::usleep

CODE
  static NODE *group_id_from_int
    (
      int value
    )
    {
      return create__std_types___group_id(value);
    }

METHOD std_types::group_id/equal
  {
    CHECK_ARGUMENTS(2)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::group_id))
      RETURN_SINGLE_RESULT(
        from_bool(
          ARGUMENTS(0)->group_id.value ==
          ARGUMENTS(1)->group_id.value))
    RETURN_FALSE
  }

METHOD std_types::group_id/hash
  {
    CHECK_ARGUMENTS(1)
    uint32_t hash = ARGUMENTS(0)->group_id.value;
    hash += 1390477003u;
    hash *= 1893456841;
    hash ^= hash >> 19 | hash << 13;
    RETURN_SINGLE_RESULT(from_uint32(hash));
  }

FUNCTION std::group_id
  {
    CHECK_ARGUMENTS(1)
    int value;
    if (!(to_int(ARGUMENTS(0), &value))) return;
    RETURN_SINGLE_RESULT(create__std_types___group_id(value))
  }

METHOD std_types::group_id/to_integer
  {
    CHECK_ARGUMENTS(1)
    int value = ARGUMENTS(0)->group_id.value;
    RETURN_SINGLE_RESULT(from_int(value))
  }

TYPE std_types::inode_number -> std_types::object
  unsigned long value

METHOD std_types::inode_number/_type
  {
    RUNTIME_ERROR("Attempt to call a inode number as a function!")
  }

METHOD long std_types::inode_number/_debug_string
  (
    NODE *node,
    int indent,
    int max_depth,
    char *buf
  )
  {
    return debug_print(
      indent, buf, "<inode_number %d>", node->inode_number.value);
  }

CODE
  static int inode_number_to_ulong
    (
      NODE *node,
      unsigned long *result_p
    )
    {
      if (TYPEOF(node) != TYPE(std_types::inode_number)) {
        invalid_arguments();
        return false;
      } else {
        *result_p = node->inode_number.value;
        return true;
      }
    }

CODE
  static NODE *inode_number_from_ulong
    (
      unsigned long value
    )
    {
      return create__std_types___inode_number(value);
    }

METHOD std_types::inode_number/equal
  {
    CHECK_ARGUMENTS(2)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::inode_number))
      RETURN_SINGLE_RESULT(
        from_bool(
          ARGUMENTS(0)->inode_number.value ==
          ARGUMENTS(1)->inode_number.value))
    RETURN_FALSE
  }

METHOD std_types::inode_number/hash
  {
    CHECK_ARGUMENTS(1)
    uint32_t hash = ARGUMENTS(0)->inode_number.value;
    hash += 524255112u;
    hash *= 1893456841;
    hash ^= hash >> 19 | hash << 13;
    RETURN_SINGLE_RESULT(from_uint32(hash));
  }

FUNCTION std::inode_number
  {
    CHECK_ARGUMENTS(1)
    unsigned long value;
    if (!(to_ulong(ARGUMENTS(0), &value))) return;
    RETURN_SINGLE_RESULT(create__std_types___inode_number(value))
  }

METHOD std_types::inode_number/to_integer
  {
    CHECK_ARGUMENTS(1)
    unsigned long value = ARGUMENTS(0)->inode_number.value;
    RETURN_SINGLE_RESULT(from_ulong(value))
  }

TYPE std_types::process_id -> std_types::object
  int value

METHOD std_types::process_id/_type
  {
    RUNTIME_ERROR("Attempt to call a process id as a function!")
  }

METHOD long std_types::process_id/_debug_string
  (
    NODE *node,
    int indent,
    int max_depth,
    char *buf
  )
  {
    return debug_print(
      indent, buf, "<process_id %d>", node->process_id.value);
  }

CODE
  static int process_id_to_int
    (
      NODE *node,
      int *result_p
    )
    {
      if (TYPEOF(node) != TYPE(std_types::process_id)) {
        invalid_arguments();
        return false;
      } else {
        *result_p = node->process_id.value;
        return true;
      }
    }

CODE
  static NODE *process_id_from_int
    (
      int value
    )
    {
      return create__std_types___process_id(value);
    }

METHOD std_types::process_id/equal
  {
    CHECK_ARGUMENTS(2)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::process_id))
      RETURN_SINGLE_RESULT(
        from_bool(
          ARGUMENTS(0)->process_id.value ==
          ARGUMENTS(1)->process_id.value))
    RETURN_FALSE
  }

METHOD std_types::process_id/hash
  {
    CHECK_ARGUMENTS(1)
    uint32_t hash = ARGUMENTS(0)->process_id.value;
    hash += 3109630881u;
    hash *= 1893456841;
    hash ^= hash >> 19 | hash << 13;
    RETURN_SINGLE_RESULT(from_uint32(hash));
  }

FUNCTION std::process_id
  {
    CHECK_ARGUMENTS(1)
    int value;
    if (!(to_int(ARGUMENTS(0), &value))) return;
    RETURN_SINGLE_RESULT(create__std_types___process_id(value))
  }

METHOD std_types::process_id/to_integer
  {
    CHECK_ARGUMENTS(1)
    int value = ARGUMENTS(0)->process_id.value;
    RETURN_SINGLE_RESULT(from_int(value))
  }

TYPE std_types::user_id -> std_types::object
  int value

METHOD std_types::user_id/_type
  {
    RUNTIME_ERROR("Attempt to call a user id as a function!")
  }

METHOD long std_types::user_id/_debug_string
  (
    NODE *node,
    int indent,
    int max_depth,
    char *buf
  )
  {
    return debug_print(
      indent, buf, "<user_id %d>", node->user_id.value);
  }

CODE
  static int user_id_to_int
    (
      NODE *node,
      int *result_p
    )
    {
      if (TYPEOF(node) != TYPE(std_types::user_id)) {
        invalid_arguments();
        return false;
      } else {
        *result_p = node->user_id.value;
        return true;
      }
    }

CODE
  static NODE *user_id_from_int
    (
      int value
    )
    {
      return create__std_types___user_id(value);
    }

METHOD std_types::user_id/equal
  {
    CHECK_ARGUMENTS(2)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::user_id))
      RETURN_SINGLE_RESULT(
        from_bool(
          ARGUMENTS(0)->user_id.value ==
          ARGUMENTS(1)->user_id.value))
    RETURN_FALSE
  }

[source]

METHOD std_types::process_id/_type
  {
    RUNTIME_ERROR("Attempt to call a process id as a function!")
  }

TYPE std_types::process_id -> std_types::object
  int value

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: POSIX

# std_types::process_id (a builtin type derived from std_types::object)

