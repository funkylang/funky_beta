[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

METHOD std_types::positive_integer/plus
{
  CHECK_ARGUMENTS(2)
  CHECK_RESULTS(1)
  if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::positive_integer)) {
    if (ARGUMENTS(0)->integer.value+ARGUMENTS(1)->integer.value >= ARGUMENTS(0)->integer
      RETURN_SINGLE_RESULT(CREATE(std_types::positive_integer, ARGUMENTS(0)->integer.val
    }
  } else if (TYPEOF(ARGUMENTS(1)) == TYPE(negative_integer)) {
    if (ARGUMENTS(0)->integer.value >= ARGUMENTS(1)->integer.value) {
      RETURN_SINGLE_RESULT(CREATE(std_types::positive_integer, ARGUMENTS(0)->integer.val
    } else {
      RETURN_SINGLE_RESULT(CREATE(negative_integer, ARGUMENTS(1)->integer.value-ARGUMENT
    }
  } else if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::real)) {
    RETURN_SINGLE_RESULT(CREATE(std_types::real, ARGUMENTS(0)->integer.value+ARGUMENTS(1
  }
  INVALID_ARGUMENTS
}

[documentation remark]

# std_types::positive_integer/std::plus (a method)

  implements the plus operation for positive integers

  Parameters:
    left: a positive integer value
    right: any numeric value

  Result:
    sum: the sum of the two operands

  Topic: Numbers

  See also: std_types::positive_integer/std::minus,
            std_types::positive_integer/std::times,
            std_types::positive_integer/std::over,
            std_types::positive_integer/std::div,
            std_types::positive_integer/std::mod

[EXERCISE]

[symbols]

POLY std::to_utf8
TYPE std_types::string -> std_types::generic_list
METHOD std_types::string/_type
TYPE std_types::octet_string -> std_types::string
TYPE std_types::wide_string -> std_types::string
OBJECT std::empty_string -> std_types::octet_string
METHOD std_types::octet_string/_type
METHOD std_types::wide_string/_type
METHOD long std_types::octet_string/_debug_string
METHOD long std_types::wide_string/_debug_string
METHOD int std_types::octet_string/_get_item_of
METHOD int std_types::wide_string/_get_item_of
METHOD int std_types::octet_string/_to_c_string
METHOD int std_types::octet_string/_to_octets
FUNCTION NODE *from_latin_1_string
FUNCTION NODE *from_uint32_string
FUNCTION NODE *from_c_string
METHOD int std_types::octet_string/_length_of
METHOD int std_types::wide_string/_length_of
METHOD std_types::octet_string/length_of
METHOD std_types::wide_string/length_of
METHOD std_types::octet_string/is_empty
METHOD std_types::octet_string/is_not_empty
METHOD std_types::wide_string/is_empty
METHOD std_types::wide_string/is_not_empty
METHOD std_types::octet_string/push
METHOD std_types::wide_string/push
METHOD std_types::octet_string/append
METHOD std_types::wide_string/append
METHOD std_types::octet_string/range
METHOD std_types::wide_string/range
METHOD std_types::octet_string/hash
METHOD std_types::wide_string/hash
METHOD std_types::octet_string/equal
METHOD std_types::wide_string/equal
METHOD std_types::octet_string/less
METHOD std_types::wide_string/less
METHOD std_types::octet_string/width_of
METHOD std_types::wide_string/width_of
METHOD std_types::octet_string/from_utf8
METHOD std_types::octet_string/to_utf8
METHOD std_types::wide_string/to_utf8

METHOD std_types::octet_string/is_not_empty
  #
    returns whether the octet string is empty or not
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    RETURN_BOOLEAN(ARGUMENTS(0)->octet_string.length > 0)
  }

METHOD std_types::wide_string/is_empty
  #
    returns whether the quad-octet string is empty or not
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    RETURN_BOOLEAN(ARGUMENTS(0)->wide_string.length == 0)
  }

METHOD std_types::wide_string/is_not_empty
  #
    returns whether the quad-octet string is empty or not
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    RETURN_BOOLEAN(ARGUMENTS(0)->wide_string.length > 0)
  }

METHOD std_types::octet_string/push
  #
    adds a single character at the front of the string
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    uint32_t chr_code;
    CHECK(to_uchar32(ARGUMENTS(1), &chr_code));
    NODE *self = ARGUMENTS(0);
    long left_start_offset = self->octet_string.offset;
    long length = self->octet_string.length;
    long end_offset = left_start_offset+length;
    long new_length = length+1;
    OCTET_DATA *data = self->octet_string.data;
    if (chr_code <= 0xff) {
      if (!data || data->size < end_offset+1 || data->length != end_offset) {
        long new_size = ALLOCATION_SIZE(2*new_length);
        OCTET_DATA *new_data = allocate_large(sizeof(OCTET_DATA)+new_size);
        if (data) {
          memcpy(
            new_data->buffer,
            data->buffer+left_start_offset,
            length);
        }
        left_start_offset = 0;
        end_offset = length;
        new_data->size = new_size;
        data = new_data;
      }
      data->buffer[end_offset] = (uint8_t)chr_code;
      data->length = end_offset+1;
      RETURN_SINGLE_RESULT(
        CREATE(std_types::octet_string, left_start_offset, new_length, data))
    } else {
      long new_size = ALLOCATION_SIZE(4*2*new_length);
      WIDE_DATA *new_data = allocate_large(sizeof(WIDE_DATA)+new_size);
      new_data->size = new_size;
      new_data->length = new_length;
      if (data) {
        long idx;
        for (idx = 0; idx < length; ++idx) {
          new_data->buffer[idx] = data->buffer[left_start_offset+idx];
        }
      }
      new_data->buffer[length] = chr_code;
      RETURN_SINGLE_RESULT(
        CREATE(std_types::wide_string, 0, new_length, new_data))
    }
  }

METHOD std_types::wide_string/push
  #
    adds a single character at the front of the string
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    uint32_t chr_code;
    CHECK(to_uchar32(ARGUMENTS(1), &chr_code));
    NODE *self = ARGUMENTS(0);
    long start_offset = self->wide_string.offset;
    long length = self->wide_string.length;
    long end_offset = start_offset+length;
    long new_length = length+1;
    WIDE_DATA *data = self->wide_string.data;
    if (!data || data->size < 4*(end_offset+1) || data->length != end_offset) {
      long new_size = ALLOCATION_SIZE(4*2*new_length);
      WIDE_DATA *new_data = allocate_large(sizeof(WIDE_DATA)+new_size);
      if (data) {
        memcpy(
          new_data->buffer,
          data->buffer+start_offset,
          4*length);
      }
      start_offset = 0;
      end_offset = length;
      new_data->size = new_size;
      data = new_data;
    }
    data->buffer[end_offset] = chr_code;
    data->length = end_offset+1;
    RETURN_SINGLE_RESULT(
      CREATE(std_types::wide_string, start_offset, new_length, data))
  }

METHOD std_types::octet_string/append
  #
    appends two or more strings
  {
    MIN_ARGUMENTS(2)
    CHECK_RESULTS(1)
    NODE *left = ARGUMENTS(0);
    long left_length = left->octet_string.length;
    long new_length = left_length;
    int is_a_std_types::wide_string = false;
    int i;
    for (i = 1; i < ARGUMENT_COUNT; ++i) {
      NODE *right = ARGUMENTS(i);
      if (TYPEOF(right) == TYPE(std_types::wide_string)) {
        is_a_std_types::wide_string = true;
      } else if (TYPEOF(right) != TYPE(std_types::octet_string)) {
        INVALID_ARGUMENTS
      }
      new_length += right->octet_string.length;
    }
    if (new_length == left_length) RETURN_SINGLE_RESULT(left)
    if (left_length == 0 && ARGUMENT_COUNT == 2) {
      RETURN_SINGLE_RESULT(ARGUMENTS(1))
    }
    long left_offset = left->octet_string.offset;
    OCTET_DATA *data = left->octet_string.data;
    if (is_a_std_types::wide_string) {
      long new_size = ALLOCATION_SIZE(4*2*new_length);
      WIDE_DATA *new_data =
        allocate_large(sizeof(WIDE_DATA)+new_size);
      new_data->size = new_size;
      new_data->length = new_length;
      long idx;
      for (idx = 0; idx < left_length; ++idx) {
        new_data->buffer[idx] = data->buffer[left_offset+idx];
      }
      long offset = left_length;
      for (i = 1; i < ARGUMENT_COUNT; ++i) {
        NODE *right = ARGUMENTS(i);
        long right_offset = right->octet_string.offset;
        long right_length = right->octet_string.length;
        if (TYPEOF(right) == TYPE(std_types::wide_string)) {
          memcpy(
            new_data->buffer+offset,
            right->wide_string.data->buffer+right_offset,
            4*right_length);
        } else {
          for (idx = 0; idx < right_length; ++idx) {
            new_data->buffer[offset+idx] =
              right->octet_string.data->buffer[right_offset+idx];
          }
        }
        offset += right_length;
      }
      RETURN_SINGLE_RESULT(
        CREATE(std_types::wide_string, 0, new_length, new_data))
    } else {
      if (
        !data || data->size < left_offset+new_length ||
        data->length != left_offset+left_length
      ) {
        long new_size = ALLOCATION_SIZE(2*new_length);
        OCTET_DATA *new_data = allocate_large(sizeof(OCTET_DATA)+new_size);
        if (data) {
          memcpy(new_data->buffer, data->buffer+left_offset, left_length);
        }
        left_offset = 0;
        new_data->size = new_size;
        data = new_data;
      }
      long offset = left_offset+left_length;
      for (i = 1; i < ARGUMENT_COUNT; ++i) {
        NODE *right = ARGUMENTS(i);
        long right_length = right->octet_string.length;
        memcpy(
          data->buffer+offset,
          right->octet_string.data->buffer+right->octet_string.offset,
          right_length);
        offset += right_length;
      }
      data->length = left_offset+new_length;
      RETURN_SINGLE_RESULT(
        CREATE(std_types::octet_string, left_offset, new_length, data))
    }
  }

METHOD std_types::wide_string/append
  #
    appends two or more strings
  {
    MIN_ARGUMENTS(2)
    CHECK_RESULTS(1)
    NODE *left = ARGUMENTS(0);
    long left_length = left->wide_string.length;
    long new_length = left_length;
    int i;
    for (i = 1; i < ARGUMENT_COUNT; ++i) {
      NODE *right = ARGUMENTS(i);
      if (
        TYPEOF(right) == TYPE(std_types::octet_string) ||
        TYPEOF(right) == TYPE(std_types::wide_string)
      ) {
        new_length += right->octet_string.length;
      } else {
        INVALID_ARGUMENTS
      }
    }
    if (new_length == left_length) RETURN_SINGLE_RESULT(left)
    if (left_length == 0 && ARGUMENT_COUNT == 2) {
      RETURN_SINGLE_RESULT(ARGUMENTS(1))
    }
    long left_offset = left->wide_string.offset;
    WIDE_DATA *data = left->wide_string.data;
    if (
      data->size < 4*(left_offset+new_length) ||
      data->length != left_offset+left_length
    ) {
      long new_size = ALLOCATION_SIZE(4*2*new_length);
      WIDE_DATA *new_data =
        allocate_large(sizeof(WIDE_DATA)+new_size);
      memcpy(new_data->buffer, data->buffer+left_offset, 4*left_length);
      left_offset = 0;
      new_data->size = new_size;
      data = new_data;
    }
    long offset = left_offset+left_length;
    for (i = 1; i < ARGUMENT_COUNT; ++i) {
      NODE *right = ARGUMENTS(i);
      long right_offset = right->octet_string.offset;
      long right_length = right->octet_string.length;
      if (TYPEOF(right) == TYPE(std_types::wide_string)) {
        memcpy(
          data->buffer+offset,
          right->wide_string.data->buffer+right_offset,
          4*right_length);
      } else {
        long idx;
        for (idx = 0; idx < right_length; ++idx) {
          data->buffer[offset+idx] =
            right->octet_string.data->buffer[right_offset+idx];
        }
      }
      offset += right_length;
    }
    data->length = left_offset+new_length;
    RETURN_SINGLE_RESULT(
      CREATE(std_types::wide_string, left_offset, new_length, data))
  }

METHOD std_types::octet_string/range
  #
    returns a string containing the specified subrange
  {
    CHECK_ARGUMENTS(3)
    CHECK_RESULTS(1)
    NODE *self = ARGUMENTS(0);
    long first_idx, last_idx;
    CHECK(to_long(ARGUMENTS(1), &first_idx))
    CHECK(to_long(ARGUMENTS(2), &last_idx))
    long length = self->octet_string.length;
    if (first_idx < 0) first_idx = length+first_idx+1;
    if (last_idx < 0) last_idx = length+last_idx+1;
    if (first_idx < 1 || first_idx > length+1) INVALID_INDEX(self);
    if (last_idx < 0 || last_idx > length) INVALID_INDEX(self);
    if (first_idx > last_idx+1) INVALID_ARGUMENTS
    if (first_idx == 1 && last_idx == length) RETURN_SINGLE_RESULT(self)
    long new_len = last_idx-first_idx+1;
    if (new_len == 0) RETURN_SINGLE_RESULT(VAR(std::empty_string))
    RETURN_SINGLE_RESULT(
      CREATE(
        std_types::octet_string,
        self->octet_string.offset+first_idx-1,
        new_len, self->octet_string.data))
  }

METHOD std_types::wide_string/range
  #
    returns a string containing the specified subrange
  {
    CHECK_ARGUMENTS(3)
    CHECK_RESULTS(1)
    NODE *self = ARGUMENTS(0);
    long first_idx, last_idx;
    CHECK(to_long(ARGUMENTS(1), &first_idx));
    CHECK(to_long(ARGUMENTS(2), &last_idx));
    long length = self->octet_string.length;
    if (first_idx < 0) first_idx = length+first_idx+1;
    if (last_idx < 0) last_idx = length+last_idx+1;
    if (first_idx < 1 || first_idx > length+1) INVALID_INDEX(self);
    if (last_idx < 0 || last_idx > length) INVALID_INDEX(self);
    if (first_idx > last_idx+1) INVALID_ARGUMENTS
    if (first_idx == 1 && last_idx == length) RETURN_SINGLE_RESULT(self)
    long new_len = last_idx-first_idx+1;
    if (new_len == 0) RETURN_SINGLE_RESULT(VAR(std::empty_string))
    long idx;
    long offset = self->wide_string.offset;
    WIDE_DATA *data = self->wide_string.data;
    for (idx = first_idx-1; idx < last_idx; ++idx) {
      if (data->buffer[offset+idx] > 0xff) {
        RETURN_SINGLE_RESULT(
          CREATE(
            std_types::wide_string, offset+first_idx-1, new_len, data))
      }
    }
    long new_size = ALLOCATION_SIZE(new_len);
    OCTET_DATA *new_data = allocate_large(sizeof(OCTET_DATA)+new_size);
    new_data->size = new_size;
    new_data->length = new_len;
    offset += first_idx-1;
    for (idx = 0; idx < new_len; ++idx) {
      new_data->buffer[idx] = data->buffer[idx+offset];
    }
    RETURN_SINGLE_RESULT(CREATE(std_types::octet_string, 0, new_len, new_data))
  }

METHOD std_types::octet_string/hash
  #
    returns a numerical hash value
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    NODE *self = ARGUMENTS(0);
    uint8_t *buf = self->octet_string.data->buffer+self->octet_string.offset;
    long length = self->octet_string.length;
    uint32_t hash = 0x7890abcd;
    long i;
    if (length > 16) {
      for (i = length-8; i < length; ++i) {
        hash = (hash << 7) | (hash >> 25);
        hash ^= buf[i];
      }
      length = 8;
    }
    for (i = 0; i < length; ++i) {
      hash = (hash << 7) | (hash >> 25);
      hash ^= buf[i];
    }
    hash *= 234256597;
    hash ^= hash >> 26 | hash << 6;
    RETURN_SINGLE_RESULT(from_uint32(hash))
  }

METHOD std_types::wide_string/hash
  #
    returns a numerical hash value
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    NODE *self = ARGUMENTS(0);
    uint32_t *buf =
      self->wide_string.data->buffer+self->wide_string.offset;
    long length = self->wide_string.length;
    uint32_t hash = 0x3456789a;
    long i;
    if (length > 16) {
      for (i = length-8; i < length; ++i) {
        hash = (hash << 13) | (hash >> 19);
        hash ^= buf[i];
      }
      length = 8;
    }
    for (i = 0; i < length; ++i) {
      hash = (hash << 13) | (hash >> 19);
      hash ^= buf[i];
    }
    hash *= 234256597;
    hash ^= hash >> 22 | hash << 10;
    RETURN_SINGLE_RESULT(from_uint32(hash))
  }

METHOD std_types::octet_string/equal
  #
    returns <true> if both strings have the same contents
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    NODE *left = ARGUMENTS(0);
    NODE *right = ARGUMENTS(1);
    if (left == right) RETURN_TRUE
    if (TYPEOF(right) != TYPE(std_types::octet_string)) {
      if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::error)) {
        INVALID_ARGUMENTS
      } else {
        RETURN_FALSE
      }
    }
    OCTET_DATA *left_data = left->octet_string.data;
    OCTET_DATA *right_data = right->octet_string.data;
    long left_offset = left->octet_string.offset;
    long right_offset = right->octet_string.offset;
    long length = left->octet_string.length;
    if (length != right->octet_string.length) RETURN_FALSE
    if (left_offset == right_offset && left_data == right_data) RETURN_TRUE
    long i;
    for (i = 0; i < length; ++i) {
      if (left_data->buffer[left_offset+i] != right_data->buffer[right_offset+i]) RETURN_FALSE
    }
    if (left_offset == right_offset) {
      // join the two versions of the string data to simplify future comparisons
      join_nodes(&left->octet_string.data, &right->octet_string.data);
    }
    RETURN_TRUE
  }

[source]

POLY std::range
  #
    returns a subrange of a collection

    Parameters:
      collection # the collection to be analyzed
      start # the first item to be included
      end # the first item to be excluded

    Result:
      range # the subrange

    The first argument specifies the collection.

    The second argument specifies the first index of the first item to include
    in the subrange.

    The third argument specifies the last index of the first item to include in
    the subrange.

    It is okay if the subrange is empty:

    *first_index* == *last_index* + 1

    It is an error if the size of the subrange would be negative:

    *first_index* > *last_index* + 1

    If an index is negativ it is counted from the end of the collection.

    So -1 denotes the last item of the collection, -2 denotes the next-to-last
    item and so on.

    Topics: Strings, Lists

METHOD std_types::octet_string/range
  #
    returns a string containing the specified subrange
  {
    CHECK_ARGUMENTS(3)
    CHECK_RESULTS(1)
    NODE *self = ARGUMENTS(0);
    long first_idx, last_idx;
    CHECK(to_long(ARGUMENTS(1), &first_idx))
    CHECK(to_long(ARGUMENTS(2), &last_idx))
    long length = self->octet_string.length;
    if (first_idx < 0) first_idx = length+first_idx+1;
    if (last_idx < 0) last_idx = length+last_idx+1;
    if (first_idx < 1 || first_idx > length+1) INVALID_INDEX(self);
    if (last_idx < 0 || last_idx > length) INVALID_INDEX(self);
    if (first_idx > last_idx+1) INVALID_ARGUMENTS
    if (first_idx == 1 && last_idx == length) RETURN_SINGLE_RESULT(self)
    long new_len = last_idx-first_idx+1;
    if (new_len == 0) RETURN_SINGLE_RESULT(VAR(std::empty_string))
    RETURN_SINGLE_RESULT(
      CREATE(
        std_types::octet_string,
        self->octet_string.offset+first_idx-1,
        new_len, self->octet_string.data))
  }

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Strings

# std_types::octet_string/std::range (a builtin method)

