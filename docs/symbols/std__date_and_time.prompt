[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

FUNCTION std::real
{
  CHECK_ARGUMENTS(1)
  char *str;
  CHECK(to_c_string(ARGUMENTS(0), &str))
  NODE *result = from_double(atof(str));
  deallocate_memory(str);
  RETURN_SINGLE_RESULT(result)
}

[documentation remark]

# std::real (a function)

  constructs a real number from its string representation

  Parameters:
    str: the string representation of the real number

  Result:
    value: the real number

  Topic: Numbers

  See also: std::integer, std_types::real

[EXERCISE]

[symbols]

POLY std::year_of
POLY std::month_of
POLY std::day_of
POLY std::day_of_week_of
POLY std::hour_of
POLY std::minute_of
POLY std::second_of
POLY std::time_shift_of
POLY std::seconds_since_epoch
TYPE std_types::date_and_time -> std_types::object
METHOD std_types::date_and_time/_type
METHOD long std_types::date_and_time/_debug_string
FUNCTION std::from_unix_time
FUNCTION std::date_and_time
METHOD std_types::date_and_time/year_of
METHOD std_types::date_and_time/month_of
METHOD std_types::date_and_time/day_of
METHOD std_types::date_and_time/day_of_week_of
METHOD std_types::date_and_time/hour_of
METHOD std_types::date_and_time/minute_of
METHOD std_types::date_and_time/second_of
METHOD std_types::date_and_time/time_shift_of
METHOD std_types::date_and_time/seconds_since_epoch
METHOD std_types::date_and_time/plus
METHOD std_types::date_and_time/minus
METHOD std_types::date_and_time/equal
METHOD std_types::date_and_time/less
FUNCTION std::current_time

#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,

# Topic: Date and Time

POLY std::year_of
  #
    the calendar year of a date-and-time object

    Parameter:
      self: the date-and-time object

    Result:
      year: the calendar year of the date-and-time object

    Topic: Date and Time

    See also: std::month_of, std::day_of, std::day_of_week_of, std::hour_of,
              std::minute_of, std::second_of, std::time_shift_of

    Example:

      current_time! $t
      println! year_of(t)

    Output:

      2024

POLY std::month_of

POLY std::day_of

POLY std::day_of_week_of

POLY std::hour_of

POLY std::minute_of

POLY std::second_of

POLY std::time_shift_of

POLY std::seconds_since_epoch

TYPE std_types::date_and_time -> std_types::object
  int64_t seconds
  int32_t nanoseconds

METHOD std_types::date_and_time/_type
  {
    RUNTIME_ERROR("Attempt to call a date-and-time object as a function!")
  }

METHOD long std_types::date_and_time/_debug_string
  (
    NODE *node,
    int indent,
    int max_depth,
    char *buf
  )
  {
    return debug_print(indent, buf, "<date and time %d.%09d>",
      node->date_and_time.seconds, node->date_and_time.nanoseconds);
  }

FUNCTION std::from_unix_time
  {
    CHECK_ARGUMENTS(1)
    int64_t sec;
    CHECK(to_int64(ARGUMENTS(0), &sec))
    RETURN_SINGLE_RESULT(CREATE(std_types::date_and_time, sec, 0))
  }

FUNCTION std::date_and_time
  {
    CHECK_ARGUMENTS(6)
    int year, month, day, hour, minute;
    double second;

    CHECK(to_int(ARGUMENTS(0), &year))
    CHECK(to_int(ARGUMENTS(1), &month))
    CHECK(to_int(ARGUMENTS(2), &day))
    CHECK(to_int(ARGUMENTS(3), &hour))
    CHECK(to_int(ARGUMENTS(4), &minute))
    CHECK(to_double(ARGUMENTS(5), &second))
    int64_t seconds = floor(second);
    int32_t nanoseconds = 1000000000*(second-seconds);
    if (
      year < 1970 ||
      month < 1 || month > 12 ||
      day < 1 ||
      hour < 0 || hour > 23 ||
      minute < 0 || minute > 59 ||
      seconds < 0 || seconds > 59
    ) RETURN_UNDEFINED
    int64_t days = 0;
    year -= 1970;
    if (year >= 2) {
      days += 730;
      year -= 2;
      days += 1461*(year/4);
      year %= 4;
      days += 365*year;
      if (year > 0) ++days;
    } else {
      if (year == 1971) days += 365;
      year += 2;
    }
    int m;
    for (m = 1; m <= 12; ++m) {
      int d;
      switch (m) {
        case 2:
          d = year == 0 ? 29 : 28;
          break;
        case 4: case 6: case 9: case 11:
          d = 30;
          break;
        default:
          d = 31;
      }
      if (month > m) days += d;
      if (month == m && day > d) RETURN_UNDEFINED
    }
    days += day-1;
    seconds += 86400*(uint64_t)days+3600*hour+60*minute;
    RETURN_SINGLE_RESULT(
      CREATE(std_types::date_and_time, seconds, nanoseconds))
  }

# ATTENTION: These algorithms break on January 1st, 2100!

CODE
  static void year_month_day
    (
      NODE *node,
      int *year_p,
      int *month_p,
      int *day_p
    )
    {
      long days;
      int year, month, day, quads;
      int is_a_leap_year;
      days = node->date_and_time.seconds/86400;
      is_a_leap_year = false;
      if (days < 730) { // 1970, 1971
        year = days/365;
        days -= 365*year;
        year += 1970;
      } else { // 1972 and later
        days -= 730;
        quads = days/1461;
        days -= 1461*quads;
        year = 1972+4*quads;
        if (days >= 1096) {
          year += 3;
          days -= 1096;
        } else if (days >= 731) {
          year += 2;
          days -= 731;
        } else if (days >= 366) {
          ++year;
          days -= 366;
        } else {
          is_a_leap_year = true;
        }
      }
      month = 1;
      if (days < 31) goto done; // January
      days -= 31;
      ++month;
      if (is_a_leap_year) {
        if (days < 29) goto done; // February
        days -= 29;
      } else {
        if (days < 28) goto done; // February
        days -= 28;
      }
      ++month;
      if (days < 31) goto done; // March
      days -= 31;
      ++month;
      if (days < 30) goto done; // April
      days -= 30;
      ++month;
      if (days < 31) goto done; // May
      days -= 31;
      ++month;
      if (days < 30) goto done; // June
      days -= 30;
      ++month;
      if (days < 31) goto done; // July
      days -= 31;
      ++month;
      if (days < 31) goto done; // August
      days -= 31;
      ++month;
      if (days < 30) goto done; // September
      days -= 30;
      ++month;
      if (days < 31) goto done; // October
      days -= 31;
      ++month;
      if (days < 30) goto done; // November
      days -= 30;
      ++month; // December
      done:
      if (year_p) *year_p = year;
      if (month_p) *month_p = month;
      if (day_p) *day_p = days+1;
    }

METHOD std_types::date_and_time/year_of
  {
    CHECK_ARGUMENTS(1)
    int year;
    year_month_day(ARGUMENTS(0), &year, NULL, NULL);
    RETURN_SINGLE_RESULT(from_int(year))
  }

METHOD std_types::date_and_time/month_of
  {
    CHECK_ARGUMENTS(1)
    int month;
    year_month_day(ARGUMENTS(0), NULL, &month, NULL);
    RETURN_SINGLE_RESULT(from_int(month))
  }

METHOD std_types::date_and_time/day_of
  {
    CHECK_ARGUMENTS(1)
    int day;
    year_month_day(ARGUMENTS(0), NULL, NULL, &day);
    RETURN_SINGLE_RESULT(from_int(day))
  }

METHOD std_types::date_and_time/day_of_week_of
  {
    CHECK_ARGUMENTS(1)
    RETURN_SINGLE_RESULT(
      from_long(
        (3+ARGUMENTS(0)->date_and_time.seconds/86400)%7+1))
  }

METHOD std_types::date_and_time/hour_of
  {
    CHECK_ARGUMENTS(1)
    int seconds = ARGUMENTS(0)->date_and_time.seconds%86400;
    RETURN_SINGLE_RESULT(from_int(seconds/3600))
  }

METHOD std_types::date_and_time/minute_of
  {
    CHECK_ARGUMENTS(1)
    int seconds = ARGUMENTS(0)->date_and_time.seconds%3600;
    RETURN_SINGLE_RESULT(from_int(seconds/60))
  }

METHOD std_types::date_and_time/second_of
  {
    CHECK_ARGUMENTS(1)
    RETURN_SINGLE_RESULT(
      from_double(
        ARGUMENTS(0)->date_and_time.seconds%60+
        ARGUMENTS(0)->date_and_time.nanoseconds/1000000000.0))
  }

METHOD std_types::date_and_time/time_shift_of
  {
    CHECK_ARGUMENTS(1)
    // This insane looking sequence of calls correctly computes the time shift!!!
    struct tm tm;
    time_t t1 = ARGUMENTS(0)->date_and_time.seconds;
    localtime_r(&t1, &tm);
    int isdst = tm.tm_isdst;
    gmtime_r(&t1, &tm);
    tm.tm_isdst = isdst;
    time_t t2 = mktime(&tm);
    RETURN_SINGLE_RESULT(from_uint64(t1-t2))
  }

METHOD std_types::date_and_time/seconds_since_epoch
  {
    CHECK_ARGUMENTS(1)
    RETURN_SINGLE_RESULT(from_uint64(ARGUMENTS(0)->date_and_time.seconds))
  }

METHOD std_types::date_and_time/plus
  {
    CHECK_ARGUMENTS(2)
    int64_t seconds = ARGUMENTS(0)->date_and_time.seconds;
    int32_t nanoseconds = ARGUMENTS(0)->date_and_time.nanoseconds;
    double delta;
    CHECK(to_double(ARGUMENTS(1), &delta))
    int64_t delta_seconds = round(delta);
    int32_t delta_nanoseconds = 1000000000*(delta-delta_seconds);
    seconds += delta_seconds;
    nanoseconds += delta_nanoseconds;
    if (nanoseconds >= 1000000000) {
      nanoseconds -= 1000000000;
      ++seconds;
    }
    RETURN_SINGLE_RESULT(CREATE(std_types::date_and_time, seconds, nanoseconds))
  }

METHOD std_types::date_and_time/minus
  {
    CHECK_ARGUMENTS(2)
    int64_t seconds = ARGUMENTS(0)->date_and_time.seconds;
    int32_t nanoseconds = ARGUMENTS(0)->date_and_time.nanoseconds;
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::date_and_time)) {
      int64_t seconds_2 = ARGUMENTS(1)->date_and_time.seconds;
      int32_t nanoseconds_2 = ARGUMENTS(1)->date_and_time.nanoseconds;
      RETURN_SINGLE_RESULT(from_double(
        seconds-seconds_2+(nanoseconds-nanoseconds_2)/1000000000.0))
    } else {
      double delta;
      CHECK(to_double(ARGUMENTS(1), &delta))
      int64_t delta_seconds = round(delta);
      int32_t delta_nanoseconds = 1000000000*(delta-delta_seconds);
      seconds -= delta_seconds;
      nanoseconds -= delta_nanoseconds;
      if (nanoseconds < 0) {
        nanoseconds += 1000000000;
        --seconds;
      }
      RETURN_SINGLE_RESULT(CREATE(std_types::date_and_time, seconds, nanoseconds))
    }
  }

METHOD std_types::date_and_time/equal
  {
    CHECK_ARGUMENTS(2)
    NODE *left, *right;
    left = ARGUMENTS(0);
    right = ARGUMENTS(1);
    if (TYPEOF(ARGUMENTS(1)) != TYPE(std_types::date_and_time)) RETURN_FALSE
    RETURN_BOOLEAN(
      left->date_and_time.seconds == right->date_and_time.seconds &&
      left->date_and_time.nanoseconds == right->date_and_time.nanoseconds)
  }

METHOD std_types::date_and_time/less
  {
    CHECK_ARGUMENTS(2)
    NODE *left, *right;
    left = ARGUMENTS(0);
    right = ARGUMENTS(1);
    if (TYPEOF(ARGUMENTS(1)) != TYPE(std_types::date_and_time)) INVALID_ARGUMENTS
    RETURN_BOOLEAN(
      left->date_and_time.seconds < right->date_and_time.seconds ||
      left->date_and_time.seconds == right->date_and_time.seconds &&
      left->date_and_time.nanoseconds < right->date_and_time.nanoseconds)
  }

FUNCTION std::current_time
  {
    CHECK_ARGUMENTS(0)
    CHECK_IO_ACCESS_RIGHTS
    struct timespec timespec;
    clock_gettime(CLOCK_REALTIME, &timespec);
    RETURN_SINGLE_RESULT(
      CREATE(std_types::date_and_time, timespec.tv_sec, timespec.tv_nsec))
  }

[source]

FUNCTION std::date_and_time
  {
    CHECK_ARGUMENTS(6)
    int year, month, day, hour, minute;
    double second;

    CHECK(to_int(ARGUMENTS(0), &year))
    CHECK(to_int(ARGUMENTS(1), &month))
    CHECK(to_int(ARGUMENTS(2), &day))
    CHECK(to_int(ARGUMENTS(3), &hour))
    CHECK(to_int(ARGUMENTS(4), &minute))
    CHECK(to_double(ARGUMENTS(5), &second))
    int64_t seconds = floor(second);
    int32_t nanoseconds = 1000000000*(second-seconds);
    if (
      year < 1970 ||
      month < 1 || month > 12 ||
      day < 1 ||
      hour < 0 || hour > 23 ||
      minute < 0 || minute > 59 ||
      seconds < 0 || seconds > 59
    ) RETURN_UNDEFINED
    int64_t days = 0;
    year -= 1970;
    if (year >= 2) {
      days += 730;
      year -= 2;
      days += 1461*(year/4);
      year %= 4;
      days += 365*year;
      if (year > 0) ++days;
    } else {
      if (year == 1971) days += 365;
      year += 2;
    }
    int m;
    for (m = 1; m <= 12; ++m) {
      int d;
      switch (m) {
        case 2:
          d = year == 0 ? 29 : 28;
          break;
        case 4: case 6: case 9: case 11:
          d = 30;
          break;
        default:
          d = 31;
      }
      if (month > m) days += d;
      if (month == m && day > d) RETURN_UNDEFINED
    }
    days += day-1;
    seconds += 86400*(uint64_t)days+3600*hour+60*minute;
    RETURN_SINGLE_RESULT(
      CREATE(std_types::date_and_time, seconds, nanoseconds))
  }

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Date and Time

# std::date_and_time (a builtin function)

