[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

TYPE std_types::object

[documentation remark]

# std_types::object (a builtin type)

  the prototype object for all "normal" objects

  This is one of the three Funky root objects.

  Topics: Basics, Objects

  See also: std_types::undefined, std_types::error

[source]

TYPE std_types::number -> std_types::object

[documentation remark]

# std_types::number (a builtin type derived from std_types::object)

  the prototype object for all kinds of numbers

  Topic: Numbers

  See also: std_types::integer, std_types::real

[source]

METHOD std_types::array/_type
  {
    ARRAY_DATA *data = MYSELF->array.data;
    int dimension_count = data->info->dimension_count;
    MIN_ARGUMENTS(dimension_count)
    MAX_ARGUMENTS(dimension_count+1)
    if (ARGUMENT_COUNT == dimension_count) {
      // get item
      data = apply_array_updates((ARRAY *)MYSELF);
      // info and view could have been updated!
      long offset = compute_array_read_offset(
        MYSELF, data->info, MYSELF->array.view);
      if (offset < 0) return;
      NODE *value;
      value = data->items[offset];
      RETURN_SINGLE_RESULT(value);
    } else {
      // set item
      long offset = compute_array_write_offset(
        MYSELF, data->info, MYSELF->array.view);
      if (offset < 0) return;
      NODE *value;
      value = ARGUMENTS(dimension_count);
      long length = MYSELF->array.updates_length;
      MYSELF =
        add_update(
          (ARRAY *)MYSELF, sizeof(UPDATE_ARRAY_DATA_SET_VALUE));
      UPDATE_ARRAY_DATA_SET_VALUE *update =
        (UPDATE_ARRAY_DATA_SET_VALUE *)
        (MYSELF->array.updates->buffer+length);
      update->tag = SET_VALUE;
      update->offset = offset;
      update->value = value;
      RETURN_SINGLE_RESULT(MYSELF)
    }
  }

TYPE std_types::array -> std_types::generic_array

[documentation remark]

# std_types::array (a builtin type derived from std_types::generic_array)

  the prototype object for all arrays

  Parameters:
    indices: the indices of the array elements
    value: the new value (only for updates)

  Result:
    value_or_array: the value at the specified position or the updated array

  Updates to arrays are delayed until the array is read.

  Array indices are one-based.

  Arrays can hold any kind of values.

  Topics: Arrays, Collections

  See also: std_types::list

  Example:

    $a array(3 2) # a new array with 3 rows and 2 columns
    !a(2 1) 47 # use syntactic sugar to assign a value to an array element
    !a a(3 2 11) # without syntactic sugar
    println! a(2 1)
    println! a(3 2)

  Output:

    47
    11

[EXERCISE]

[symbols]

TYPE std_types::true -> std_types::object
METHOD std_types::true/_type
METHOD int std_types::true/_to_bool
METHOD long std_types::true/_debug_string
METHOD std_types::true/equal
TYPE std_types::false -> std_types::object
METHOD std_types::false/_type
METHOD int std_types::false/_to_bool
METHOD long std_types::false/_debug_string
METHOD std_types::false/equal
FUNCTION NODE *from_bool

#
  Copyright (C) 2021 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Topics: Boolean

TYPE std_types::true -> std_types::object
  #
    the *type* of the boolean value **true**

    Use <std::true> for constants in your programs (not <std_types::true>).

    Use <std_types::true> to add new functionality to the *true*-type.

    See also: std_types::false, std::true

METHOD std_types::true/_type
  {
    RUNTIME_ERROR("Attempt to call the boolean value true as a function!")
  }

METHOD int std_types::true/_to_bool
  (
    NODE *node,
    int *result_p
  )
  {
    *result_p = true;
    return true;
  }

METHOD long std_types::true/_debug_string
  (
    NODE *node,
    int indent,
    int max_depth,
    char *buf
  )
  {
    return debug_print(indent, buf, "true");
  }

METHOD std_types::true/equal
  #
    is only equal to itself
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::true)) {
      RETURN_TRUE
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::error)) {
      INVALID_ARGUMENTS
    } else {
      RETURN_FALSE
    }
  }

# false

TYPE std_types::false -> std_types::object
  #
    the *type* of the boolean value **false**

    Use <std::false> for constants in your programs (not <std_types::false>).

    Use <std_types::false> to add new functionality to the *false*-type.

    See also: std_types::true, std::false

METHOD std_types::false/_type
  {
    RUNTIME_ERROR("Attempt to call the boolean value false as a function!")
  }

METHOD int std_types::false/_to_bool
  (
    NODE *node,
    int *result_p
  )
  {
    *result_p = false;
    return true;
  }

METHOD long std_types::false/_debug_string
  (
    NODE *node,
    int indent,
    int max_depth,
    char *buf
  )
  {
    return debug_print(indent, buf, "false");
  }

METHOD std_types::false/equal
  #
    is only equal to itself
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::false)) {
      RETURN_TRUE
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::error)) {
      INVALID_ARGUMENTS
    } else {
      RETURN_FALSE
    }
  }

# boolean

FUNCTION NODE *from_bool
  (
    int val
  )
  {
    if (val)
      return VAR(std_types::true);
    else
      return VAR(std_types::false);
  }

[source]

METHOD std_types::false/_type
  {
    RUNTIME_ERROR("Attempt to call the boolean value false as a function!")
  }

TYPE std_types::false -> std_types::object
  #
    the *type* of the boolean value **false**

    Use <std::false> for constants in your programs (not <std_types::false>).

    Use <std_types::false> to add new functionality to the *false*-type.

    See also: std_types::true, std::false

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Boolean

# std_types::false (a builtin type derived from std_types::object)

