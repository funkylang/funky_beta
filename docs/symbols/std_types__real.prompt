[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

TYPE std_types::object

[documentation remark]

# std_types::object (a builtin type)

  the prototype object for all "normal" objects

  This is one of the three Funky root objects.

  Topics: Basics, Objects

  See also: std_types::undefined, std_types::error

[source]

TYPE std_types::number -> std_types::object

[documentation remark]

# std_types::number (a builtin type derived from std_types::object)

  the prototype object for all kinds of numbers

  Topic: Numbers

  See also: std_types::integer, std_types::real

[source]

METHOD std_types::array/_type
  {
    ARRAY_DATA *data = MYSELF->array.data;
    int dimension_count = data->info->dimension_count;
    MIN_ARGUMENTS(dimension_count)
    MAX_ARGUMENTS(dimension_count+1)
    if (ARGUMENT_COUNT == dimension_count) {
      // get item
      data = apply_array_updates((ARRAY *)MYSELF);
      // info and view could have been updated!
      long offset = compute_array_read_offset(
        MYSELF, data->info, MYSELF->array.view);
      if (offset < 0) return;
      NODE *value;
      value = data->items[offset];
      RETURN_SINGLE_RESULT(value);
    } else {
      // set item
      long offset = compute_array_write_offset(
        MYSELF, data->info, MYSELF->array.view);
      if (offset < 0) return;
      NODE *value;
      value = ARGUMENTS(dimension_count);
      long length = MYSELF->array.updates_length;
      MYSELF =
        add_update(
          (ARRAY *)MYSELF, sizeof(UPDATE_ARRAY_DATA_SET_VALUE));
      UPDATE_ARRAY_DATA_SET_VALUE *update =
        (UPDATE_ARRAY_DATA_SET_VALUE *)
        (MYSELF->array.updates->buffer+length);
      update->tag = SET_VALUE;
      update->offset = offset;
      update->value = value;
      RETURN_SINGLE_RESULT(MYSELF)
    }
  }

TYPE std_types::array -> std_types::generic_array

[documentation remark]

# std_types::array (a builtin type derived from std_types::generic_array)

  the prototype object for all arrays

  Parameters:
    indices: the indices of the array elements
    value: the new value (only for updates)

  Result:
    value_or_array: the value at the specified position or the updated array

  Updates to arrays are delayed until the array is read.

  Array indices are one-based.

  Arrays can hold any kind of values.

  Topics: Arrays, Collections

  See also: std_types::list

  Example:

    $a array(3 2) # a new array with 3 rows and 2 columns
    !a(2 1) 47 # use syntactic sugar to assign a value to an array element
    !a a(3 2 11) # without syntactic sugar
    println! a(2 1)
    println! a(3 2)

  Output:

    47
    11

[EXERCISE]

[symbols]

TYPE std_types::number -> std_types::object
METHOD std_types::number/_type
TYPE std_types::integer -> std_types::number
METHOD std_types::integer/_type
PUBLIC TYPE builtin_types::positive_integer -> std_types::integer
METHOD builtin_types::positive_integer/_type
PUBLIC TYPE builtin_types::negative_integer -> std_types::integer
METHOD builtin_types::negative_integer/_type
TYPE std_types::real -> std_types::number
METHOD std_types::real/_type
METHOD long builtin_types::positive_integer/_debug_string
METHOD long builtin_types::negative_integer/_debug_string
METHOD long std_types::real/_debug_string
FUNCTION NODE *from_float
FUNCTION NODE *from_double
METHOD int builtin_types::positive_integer/_to_double
METHOD int builtin_types::positive_integer/_to_float
METHOD int builtin_types::negative_integer/_to_double
METHOD int builtin_types::negative_integer/_to_float
METHOD int std_types::real/_to_double
METHOD int std_types::real/_to_float
METHOD builtin_types::positive_integer/negate
METHOD builtin_types::negative_integer/negate
METHOD std_types::real/negate
METHOD builtin_types::positive_integer/times
METHOD builtin_types::negative_integer/times
METHOD builtin_types::positive_integer/to_integer
METHOD builtin_types::negative_integer/to_integer
METHOD std_types::real/to_integer
METHOD std_types::real/floor
METHOD std_types::real/ceil
METHOD std_types::real/round
METHOD builtin_types::negative_integer/to_string
METHOD builtin_types::positive_integer/to_string
METHOD std_types::real/to_string
METHOD builtin_types::positive_integer/over
METHOD builtin_types::negative_integer/over
METHOD builtin_types::positive_integer/div
METHOD builtin_types::negative_integer/div
METHOD builtin_types::positive_integer/mod
METHOD builtin_types::negative_integer/mod
METHOD builtin_types::positive_integer/hash
METHOD builtin_types::negative_integer/hash
METHOD std_types::real/hash
METHOD builtin_types::positive_integer/ln
METHOD builtin_types::negative_integer/ln
METHOD std_types::real/ln
METHOD builtin_types::positive_integer/exp
METHOD builtin_types::negative_integer/exp
METHOD std_types::real/exp
FUNCTION std::real
FUNCTION std::integer
FUNCTION std::sqrt
FUNCTION std::pow
METHOD builtin_types::positive_integer/exit
FUNCTION NODE *from_int
FUNCTION NODE *from_long
FUNCTION NODE *from_uint
FUNCTION NODE *from_ulong
FUNCTION NODE *from_int8
FUNCTION NODE *from_int16
FUNCTION NODE *from_int32
FUNCTION NODE *from_int64
FUNCTION NODE *from_uint8
FUNCTION NODE *from_uint16
FUNCTION NODE *from_uint32
FUNCTION NODE *from_uint64
METHOD int builtin_types::positive_integer/_to_int
METHOD int builtin_types::negative_integer/_to_int
METHOD int builtin_types::positive_integer/_to_long
METHOD int builtin_types::negative_integer/_to_long
METHOD int builtin_types::positive_integer/_to_uint
METHOD int builtin_types::positive_integer/_to_ulong
METHOD int builtin_types::positive_integer/_to_int8
METHOD int builtin_types::negative_integer/_to_int8
METHOD int builtin_types::positive_integer/_to_int16
METHOD int builtin_types::negative_integer/_to_int16
METHOD int builtin_types::positive_integer/_to_int32
METHOD int builtin_types::negative_integer/_to_int32
METHOD int builtin_types::positive_integer/_to_int64
METHOD int builtin_types::negative_integer/_to_int64
METHOD int builtin_types::positive_integer/_to_uint8
METHOD int builtin_types::positive_integer/_to_uint16
METHOD int builtin_types::positive_integer/_to_uint32
METHOD int builtin_types::positive_integer/_to_uint64
METHOD builtin_types::positive_integer/plus
METHOD builtin_types::negative_integer/plus
METHOD std_types::real/plus
METHOD builtin_types::positive_integer/minus
METHOD builtin_types::negative_integer/minus
METHOD std_types::real/minus
METHOD std_types::real/times
METHOD std_types::real/over
METHOD builtin_types::positive_integer/equal
METHOD builtin_types::negative_integer/equal
METHOD std_types::real/equal
METHOD builtin_types::positive_integer/less
METHOD builtin_types::negative_integer/less
METHOD std_types::real/less
METHOD builtin_types::positive_integer/shift_left
METHOD builtin_types::positive_integer/shift_right
METHOD builtin_types::positive_integer/bit_and
METHOD builtin_types::positive_integer/bit_or
METHOD builtin_types::positive_integer/bit_xor
FUNCTION std::sin
FUNCTION std::cos
FUNCTION std::tan
FUNCTION std::asin
FUNCTION std::acos
FUNCTION std::atan

#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Topic: Numbers

TYPE std_types::number -> std_types::object
  #
    the prototype object for all kinds of numbers

    Topic: Numbers

    See also: std_types::integer, std_types::real

METHOD std_types::number/_type
  {
    RUNTIME_ERROR("Attempt to call a numeric value as a function!")
  }

TYPE std_types::integer -> std_types::number
  #
    the prototype object for all integral numbers

    Topic: Numbers

    See also: std_types::positive_integer, std_types::number, std_types::real

  uint64_t value

METHOD std_types::integer/_type
  {
    RUNTIME_ERROR("Attempt to call the integer protoype object as a function!")
  }

PUBLIC TYPE builtin_types::positive_integer -> std_types::integer
  #
    the prototype object for all non-negative integers

    Topic: Numbers

    See also: std_types::integer, std_types::number, std_types::real

METHOD builtin_types::positive_integer/_type
  {
    RUNTIME_ERROR("Attempt to call a positive integer value as a function!")
  }

PUBLIC TYPE builtin_types::negative_integer -> std_types::integer

METHOD builtin_types::negative_integer/_type
  {
    RUNTIME_ERROR("Attempt to call a negative integer value as a function!")
  }

TYPE std_types::real -> std_types::number
  #
    the prototype object for all non-integral numbers

    Topic: Numbers

    See also: std_types::integer, std_types::number

  double value

METHOD std_types::real/_type
  {
    RUNTIME_ERROR("Attempt to call a real number as a function!")
  }

METHOD long builtin_types::positive_integer/_debug_string
  (
    NODE *node,
    int indent,
    int max_depth,
    char *buf
  )
  {
    return debug_print(indent, buf, "%" PRIu64, node->integer.value);
  }

METHOD long builtin_types::negative_integer/_debug_string
  (
    NODE *node,
    int indent,
    int max_depth,
    char *buf
  )
  {
    return debug_print(indent, buf, "-%" PRIu64, node->integer.value);
  }

METHOD long std_types::real/_debug_string
  (
    NODE *node,
    int indent,
    int max_depth,
    char *buf
  )
  {
    return debug_print(indent, buf, "%.15g", node->real.value);
  }

FUNCTION NODE *from_float
  (
    float value
  )
  {
    return CREATE(std_types::real, value);
  }

FUNCTION NODE *from_double
  (
    double value
  )
  {
    return CREATE(std_types::real, value);
  }

METHOD int builtin_types::positive_integer/_to_double
  (
    NODE *node,
    double *result_p
  )
  {
    *result_p = node->integer.value;
    return true;
  }

METHOD int builtin_types::positive_integer/_to_float
  (
    NODE *node,
    float *result_p
  )
  {
    *result_p = (float) node->integer.value;
    return true;
  }

METHOD int builtin_types::negative_integer/_to_double
  (
    NODE *node,
    double *result_p
  )
  {
    *result_p = -(double)node->integer.value;
    return true;
  }

METHOD int builtin_types::negative_integer/_to_float
  (
    NODE *node,
    float *result_p
  )
  {
    *result_p = -(float)node->integer.value;
    return true;
  }

METHOD int std_types::real/_to_double
  (
    NODE *node,
    double *result_p
  )
  {
    *result_p = node->real.value;
    return true;
  }

METHOD int std_types::real/_to_float
  (
    NODE *node,
    float *result_p
  )
  {
    *result_p = (float) node->real.value;
    return true;
  }

METHOD builtin_types::positive_integer/negate
  #
    returns a builtin_types::negative_integer or 0

    Parameter:
      self: a positive integer value

    Result:
      result: the negated integer value

    Topic: Numbers

    See also: builtin_types::positive_integer, std_types::integer
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    if (ARGUMENTS(0)->integer.value == 0) RETURN
    RETURN_SINGLE_RESULT(
      CREATE(builtin_types::negative_integer, ARGUMENTS(0)->integer.value))
  }

METHOD builtin_types::negative_integer/negate
  #
    returns a <builtin_types::positive_integer>
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    RETURN_SINGLE_RESULT(
      CREATE(builtin_types::positive_integer, ARGUMENTS(0)->integer.value))
  }

METHOD std_types::real/negate
  #
    returns the negated real value

    Parameter:
      self: a real value

    Result:
      result: the negated real value

    Topic: Numbers

    See also: std_types::real
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    RETURN_SINGLE_RESULT(CREATE(std_types::real, -ARGUMENTS(0)->real.value))
  }

CODE
  #if TARGET_64
    static inline uint64_t umul64
      (
        uint64_t left,
        uint64_t right,
        uint64_t *result_low_p
      )
      {
        __uint128_t result = (__uint128_t)left * right;

        *result_low_p = result;
        return result >> 64;
      }
  #else
    static uint64_t umul64
      (
        uint64_t left,
        uint64_t right,
        uint64_t *result_low_p
      )
      {
        uint64_t left_high = left >> 32;
        uint64_t left_low  = left & 0xffffffff;
        uint64_t right_high = right >> 32;
        uint64_t right_low  = right & 0xffffffff;

        uint64_t result_low = left_low * right_low;
        uint64_t result_mid_1 = left_low * right_high;
        uint64_t result_mid_2 = left_high * right_low;
        uint64_t result_high = left_high * right_high;

        uint64_t carry =
          (
            (result_low >> 32) +
            (result_mid_1 & 0xffffffff) +
            (result_mid_2 & 0xffffffff)
          ) >> 32;

        *result_low_p =
          result_low + (result_mid_1 << 32) + (result_mid_2 << 32);
        return
          result_high + (result_mid_1 >> 32) + (result_mid_2 >> 32) + carry;
      }
  #endif

METHOD builtin_types::positive_integer/times
  #
    implements the times operation

    Parameters:
      left: a positive integer value
      right: any kind of number

    Result:
      result: the product of left and right

    Topic: Numbers

    See also: builtin_types::positive_integer, over, plus, minus
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    uint64_t low, high;
    if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::positive_integer)) {
      high =
        umul64(ARGUMENTS(0)->integer.value, ARGUMENTS(1)->integer.value, &low);
      if (high == 0) {
        RETURN_SINGLE_RESULT(CREATE(builtin_types::positive_integer, low))
      }
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::negative_integer)) {
      high =
        umul64(ARGUMENTS(0)->integer.value, ARGUMENTS(1)->integer.value, &low);
      if (high == 0) {
        RETURN_SINGLE_RESULT(CREATE(builtin_types::negative_integer, low))
      }
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::real)) {
      RETURN_SINGLE_RESULT(CREATE(std_types::real,
        ARGUMENTS(0)->integer.value*ARGUMENTS(1)->real.value))
    }
    INVALID_ARGUMENTS
  }

METHOD builtin_types::negative_integer/times
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    uint64_t low, high;
    if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::positive_integer)) {
      high =
        umul64(ARGUMENTS(0)->integer.value, ARGUMENTS(1)->integer.value, &low);
      if (high == 0) {
        RETURN_SINGLE_RESULT(CREATE(builtin_types::negative_integer, low))
      }
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::negative_integer)) {
      high =
        umul64(ARGUMENTS(0)->integer.value, ARGUMENTS(1)->integer.value, &low);
      if (high == 0) {
        RETURN_SINGLE_RESULT(CREATE(builtin_types::positive_integer, low))
      }
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::real)) {
      RETURN_SINGLE_RESULT(CREATE(std_types::real,
        -(ARGUMENTS(0)->integer.value*ARGUMENTS(1)->real.value)))
    }
    INVALID_ARGUMENTS
  }

METHOD builtin_types::positive_integer/to_integer
  #
    returns the (unaltered) integer value

    Parameter:
      self: a positive integer value

    Result:
      result: the unaltered input value

    Topic: Numbers

    See also: builtin_types::positive_integer, std_types::integer
  {
    CHECK_ARGUMENTS(1)
    RETURN_SINGLE_RESULT(ARGUMENTS(0))
  }

METHOD builtin_types::negative_integer/to_integer
  #
    returns the integer value
  {
    CHECK_ARGUMENTS(1)
    RETURN_SINGLE_RESULT(ARGUMENTS(0))
  }

METHOD std_types::real/to_integer
  #
    returns the integral part of the floating point number

    Parameter:
      self: a real value

    Result:
      result: the integral part of the input value

    Topic: Numbers

    See also: std_types::real, std_types::integer
  {
    CHECK_ARGUMENTS(1)
    long val = floor(ARGUMENTS(0)->real.value);
    RETURN_SINGLE_RESULT(from_long(val))
  }

METHOD std_types::real/floor
  #
    returns the floor of the real value

    Parameter:
      self: a real value

    Result:
      result: the (real) floor of the input value

    The result does not contain any fractional part.

    Topic: Numbers

    See also: std_types::real, std_types::integer

    Example:

      println! floor(3.1414)

    Output:

      3

    Example:

      println! floor(-3.1414)

    Output:

      -4
  {
    CHECK_ARGUMENTS(1)
    RETURN_SINGLE_RESULT(CREATE(std_types::real, floor(ARGUMENTS(0)->real.value)))
  }

METHOD std_types::real/ceil
  #
    returns the ceiling of the real value

    Parameter:
      self: a real value

    Result:
      result: the (real) ceiling of the input value

    The result does not contain any fractional part.

    Topic: Numbers

    See also: std_types::real, std_types::integer

    Example:

      println! ceil(3.1414)

    Output:

      4

    Example:

      println! ceil(-3.1414)

    Output:

      -3
  {
    CHECK_ARGUMENTS(1)
    RETURN_SINGLE_RESULT(CREATE(std_types::real, ceil(ARGUMENTS(0)->real.value)))
  }

METHOD std_types::real/round
  #
    returns a *floating point* number
  {
    CHECK_ARGUMENTS(1)
    RETURN_SINGLE_RESULT(CREATE(std_types::real, round(ARGUMENTS(0)->real.value)))
  }

METHOD builtin_types::negative_integer/to_string
  #
    returns a human readable string representation
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    char buf[24];
    sprintf(buf, "-%" PRIu64, ARGUMENTS(0)->integer.value);
    RETURN_SINGLE_RESULT(from_c_string(buf))
  }

METHOD builtin_types::positive_integer/to_string
  #
    returns a human readable string representation
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    char buf[24];
    sprintf(buf, "%" PRIu64, ARGUMENTS(0)->integer.value);
    RETURN_SINGLE_RESULT(from_c_string(buf))
  }

METHOD std_types::real/to_string
  #
    returns a human readable string representation
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    char buf[24];
    sprintf(buf, "%.15g", ARGUMENTS(0)->real.value);
    RETURN_SINGLE_RESULT(from_c_string(buf))
  }

[source]

METHOD std_types::real/_type
  {
    RUNTIME_ERROR("Attempt to call a real number as a function!")
  }

TYPE std_types::real -> std_types::number
  #
    the prototype object for all non-integral numbers

    Topic: Numbers

    See also: std_types::integer, std_types::number

  double value

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Numbers

# std_types::real (a builtin type derived from std_types::number)

