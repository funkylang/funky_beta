[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std::wrap_words:
  (
    text
    width
  )
  $lines empty_list
  $n length_of(text)
  $s 1 # start of line
  $b undefined # possible break position
  $i 0
  loop:
    inc &i
    if
      i > n:
        if
          s > n
          -> lines
          -> push(lines range(text s n))
      :
        $chr text(i)
        case chr
          '
':
            push &lines range(text s i-1)
            !s i+1
            !b undefined
            next
          :
            if
              chr == ' ':
                if
                  i-s == width: # break
                    push &lines range(text s i-1)
                    !s i+1
                    !b undefined
                    next
                  :
                    !b i
                    next
              :
                if
                  i-s < width
                  next
                  :
                    if
                      b.is_defined: # wrap
                        push &lines range(text s b-1)
                        !s b+1
                        !b undefined
                        next
                      : # hard break
                        push &lines range(text s i-1)
                        !s i
                        next

[documentation remark]

# std::wrap_words (a function)

  wraps a string consisting of words onto multiple lines

  Parameters:
    text: the text to wrap
    width: the maximum width of a line

  Result:
    lines: a list of (wrapped) lines

  The string is split into multiple lines according to the specified line
  width.

  Topic: Strings

  See also: std::indented

  Example:

    $str "This is a very long string that should be wrapped onto multiple lines"
    $lines wrap_words(str 30)
    dump! 2 `lines

  Output:

    lines:
      list
        "This is a very long string"
        "that should be wrapped"
        "onto multiple lines"

[EXERCISE]

#
  Topic: Lists

  A list is a variable sized collection of elements.

  The elements are accessed using a one-based index.

  Negative indices are supported and count from the end of the list.

  Lists are one of the basic data types in Funky.

  They are used to hold the values of so-called "rest parameters".

[symbols]

$basic_loops::self undefined
$std::is_a_generic_list () # obvious
$std::is_a_list () # obvious
$std_types::object.is_a_generic_list false
$std_types::object.is_a_list false
$std_types::generic_list.is_a_generic_list true
$std_types::list.is_a_list true
$std_types::list.neutral_element_of empty_list
$std_types::generic_list/put:
$std_types::generic_list/get:
$std_types::generic_list/pop:
$std_types::generic_list/truncate:
$std_types::generic_list/append_or_error: (left right)
$std::concatenate: (separator)
$std::concatenate_non_empty: (separator)
$std_types::generic_list/reverse:
$std_types::generic_list/for_each:
$std_types::generic_list/map:
$std_types::generic_list/map_or_error:
$std_types::generic_list/std::reduce:
$std_types::generic_list/map_reduce:
$std_types::generic_list/sort:
$std_types::generic_list/intersection: (left right)
$std_types::generic_list/merge:
$std_types::generic_list/zip:
$std_types::generic_list/flatten: (self) -> self # for strings
$std_types::list/flatten:
$std_types::generic_list/dup:
$std_types::generic_list/contains:
$std_types::generic_list/find_first: (self test)
$std_types::generic_list/filter: (self test)
$std::levenshtein_distance:

# serialization

$std_types::list/to_list: (self) -> self
$std_types::list.serialization_tag_of "list"
$std_types::list/serialize:
$std_types::list.deserializer_of:
$std_types::list.empty_collection_of empty_list

$std_types::generic_list/pop:
  #
    removes and returns the last element of the list
  (
    self
  )
  -> range(self 1 -2) self(-1)

$std_types::generic_list/truncate:
  #
    truncates a list to the specified number of items
  (
    self
    n # the maximum length of the result list
  )
  $len length_of(self)
  if
    len > n
    -> range(self 1 n)
    -> self

$std_types::generic_list/append_or_error: (left right)
  if
    left.is_an_error
    -> left
    :
      if
        right.is_an_error
        -> right
        -> append(left right)

$separator_of ()

$std::concatenate: (separator)
  $func: (myself^ left right) append append(left separator_of(myself)) right
  -> func(.separator_of separator)

$std::concatenate_non_empty: (separator)
  $func: (myself^ left right)
    if
      left.is_empty
      -> right
      :
        if
          right.is_empty
          -> left
          -> append(append(left separator_of(myself)) right)
  -> func(.separator_of separator)

$std_types::generic_list/reverse:
  #
    reverse the order of all items of the list
  (
    self
  )
  $result empty_collection_of(self)
  from_to_by length_of(self) 1 -1
    : (idx)
      push &result self(idx)
      next
    -> result

$std_types::generic_list/for_each:
  #
    iterates over all items of the list

    For each item the statement sequence supplied as *body* is called
    with one or two arguments (depending on *body*'s parameter count).

    If called with two arguments the first argument is the position number
    of the item within the list.

    To start the next iteration of the loop a tail call to the *next*-function
    has to be performed.

    The loop is exited when the end of the loop is reached without calling
    the *next*-function.

    This is a sequential loop.

    Example:

      $persons list("Peter" "Mary" "Paul" "John" "David" "Emma")

      for_each persons: (person)
        writeln! person
        next

    Output:

      Peter
      Mary
      Paul
      John
      David
      Emma

    Example:

      $persons list("Peter" "Mary" "Paul" "John" "David" "Emma")

      $total_length 0
      $hash_sum 0
      for_each persons
        : (person)
          plus &total_length length_of(person)
          plus &hash_sum hash(person)
          next
        -> !total_length !hash_sum
      writeln "total length: " total_length
      writeln "hash sum: " hash_sum

    Output:

      total length: 26
      hash sum: 17062575543

    Topic: Lists

    See also: std_types::list/update_each
  (
    self # the list to iterate over
    body # the statement sequence to execute for each item
    finally # called after all items have been iterated over
  )
  $saved_context
    tuple
      next
      break
      basic_loops::from
      basic_loops::to
      basic_loops::self
      basic_loops::body
      basic_loops::finally

  !basic_loops::from 1 # the first ...
  !basic_loops::to length_of(self) # ... and last index of the list
  !basic_loops::self self
  !basic_loops::body body
  !basic_loops::finally finally

  $iterate_1:
    if
      basic_loops::from <= basic_loops::to # another item available?
      :
        basic_loops::body! basic_loops::self(basic_loops::from)
          # supply only the value of each item
      :
        break!

  $iterate_2:
    if
      basic_loops::from <= basic_loops::to # another item available?
      :
        basic_loops::body! basic_loops::from basic_loops::self(basic_loops::from)
          # supply index *and* value of each item
      :
        break!

  !break: (myself^)
    !finally basic_loops::finally
    basic_loops::saved_context_of(myself)
      !next !break
      !basic_loops::from !basic_loops::to !basic_loops::self
      !basic_loops::body !basic_loops::finally
    finally!

  !break.basic_loops::saved_context_of saved_context

  if
    parameter_count_of(body) == 2:
      !next:
        !basic_loops::from basic_loops::from+1 # increase the list index
        iterate_2! # start the next iteration
      iterate_2! # start the first iteration
    :
      !next:
        !basic_loops::from basic_loops::from+1 # increase the list index
        iterate_1! # start the next iteration
      iterate_1! # start the first iteration

$std_types::generic_list/map:
  #
    applies a function to all elements of the list

    A list of the "mapped" items is returned.

    Topic: Lists

    See also: reduce, map_reduce
  (
    self # the list which items will be mapped
    function # the function to apply to each element of the list
  )
  if
    self.is_empty
    -> self
    :
      $map
        if
          parameter_count_of(function) == 2
          ->
            : (s e)
              if
                s < e:
                  $m (s+e) >> 1
                  append
                    map(s m)
                    map(m+1 e)
                -> list(function(s self(s)))
          ->
            : (s e)
              if
                s < e:
                  $m (s+e) >> 1
                  append
                    map(s m)
                    map(m+1 e)
                -> list(function(self(s)))

      map 1 length_of(self)

$std_types::generic_list/map_or_error:
  #
    applies a function to all elements of the list

    A list of the "mapped" items is returned.

    If any item ist mapped to an error object than the result ist not a
    collection but the first (left-to-right-order) error object created.

    Topic: Lists

    See also: reduce, map_reduce
  (
    self # the list which items will be mapped
    function # the function to apply to each element of the list
  )
  if
    self.is_empty
    -> self
    :
      $map
        if
          parameter_count_of(function) == 2
          ->
            : (s e)
              if
                s < e:
                  $m (s+e) >> 1
                  append_or_error
                    map(s m)
                    map(m+1 e)
                :
                  $mapped_item function(s self(s))
                  if
                    mapped_item.is_an_error
                    -> mapped_item
                    -> list(mapped_item)
          ->
            : (s e)
              if
                s < e:
                  $m (s+e) >> 1
                  append_or_error
                    map(s m)
                    map(m+1 e)
                :
                  $mapped_item function(self(s))
                  if
                    mapped_item.is_an_error
                    -> mapped_item
                    -> list(mapped_item)

      map 1 length_of(self)

$std_types::generic_list/std::reduce:
  #
    computes a kind of sum from the values stored in the list

    There is no guarantee in which order the values will be reduced (folded).

    So the reduction function must obey to the law of assosiativity!

    Topic: Lists

    See also: map, map_reduce
  (
    self # the list to build the "sum" from
    function = append # the function to apply to pairs of values
    unit = undefined # the value to return for empty lists
  )
  if
    self.is_empty
    -> unit
    :
      $reduce: (items)
        $n length_of(items)
        if
          n >= 2:
            $m n >> 1
            function
              reduce(range(items 1 m))
              reduce(range(items m+1 -1))
          -> items(1)

      reduce self

$std_types::generic_list/map_reduce:
  #
    combines a map and a reduce operation into a single operation

    Does not create an intermediate list to hold the "mapped" values.

    Topic: Lists

    See also: map, reduce
  (
    self # the list to work on
    map_function # the function to apply to each element of the list
    reduce_function = append # the function to apply to pairs of values
    unit = undefined # the value to return for empty lists
  )
  if
    result_count() == 2: # updates the list *and* returns the reduction
      if
        self.is_empty
        -> self unit
        :
          $map_reduce
            if
              parameter_count_of(map_function) == 2
              ->
                : (s e)
                  if
                    s < e:
                      $m (s+e) >> 1
                      map_reduce s m $left_items $left_value
                      map_reduce m+1 e $right_items $right_value
                      ->
                        append(left_items right_items)
                        reduce_function(left_value right_value)
                    :
                      map_function s self(s) $item $value
                      -> list(item) value
              ->
                : (s e)
                  if
                    s < e:
                      $m (s+e) >> 1
                      map_reduce s m $left_items $left_value
                      map_reduce m+1 e $right_items $right_value
                      ->
                        append(left_items right_items)
                        reduce_function(left_value right_value)
                    :
                      map_function self(s) $item $value
                      -> list(item) value
          map_reduce 1 length_of(self)
    :
      if
        self.is_empty
        -> unit
        :
          $map_reduce
            if
              parameter_count_of(map_function) == 2
              ->
                : (s e)
                  if
                    s < e:
                      $m (s+e) >> 1
                      reduce_function
                        map_reduce(s m)
                        map_reduce(m+1 e)
                    -> map_function(s self(s))
              ->
                : (s e)
                  if
                    s < e:
                      $m (s+e) >> 1
                      reduce_function
                        map_reduce(s m)
                        map_reduce(m+1 e)
                    -> map_function(self(s))

          map_reduce 1 length_of(self)

$std_types::generic_list/sort:
  (
    self
    compare = less # the comparison function
  )
  sort self

  $sort: (items)
    $n length_of(items)
    if
      n > 1:
        $m n >> 1
        merge sort(range(items 1 m)) sort(range(items m+1 n)) compare
      -> items

$std_types::generic_list/intersection: (left right)
  if
    left.is_empty || right.is_empty
    -> empty_list
    ->
      map_reduce
        left: (item)
          if
            right .contains. item
            -> list(item)
            -> empty_list
        append
        empty_list

$std_types::generic_list/merge:
  #
    merge two sorted lists into a single (sorted) list keeping duplicates
  (
    left # the first list
    right # the second list
    compare = less # the comparison function
  )
  $i 1
  $j i
  $n length_of(left)
  $m length_of(right)
  $result new(left empty_list)
  loop:
    if
      i <= n:
        if
          j <= m:
            if
              compare(left(i) right(j)):
                push &result left(i)
                !i i+1
                next
              :
                push &result right(j)
                !j j+1
                next
          :
            append result range(left i n)
      :
        append result range(right j m)

$std_types::generic_list/zip:
  #
    zip (merge) two collections

    All odd numbered items are taken from the first collection; all even
    numbered items from the second collection.

    If a collection runs out of items the remaining items of the other
    collection are simply appended.
  (
    left # the first list
    right # the second list
  )
  $n length_of(left)
  $m length_of(right)
  $k min(n m)
  $result new(left empty_list)
  from_to 1 k
    : (i)
      push &result left(i)
      push &result right(i)
      next
    :
      cond
        -> n > k -> append(result range(left k+1 n))
        -> m > k -> append(result range(right k+1 m))
        -> true -> result

$std_types::generic_list/flatten: (self) -> self # for strings

$std_types::list/flatten:
  #
    flattens a list of lists ( ...of lists ...)
  (
    self
  )
  map_reduce self
    : (item)
      if
        item.is_a_list
        -> flatten(item)
        -> list(item)
    append
    empty_list

$std_types::generic_list/dup:
  #
    creates a list containing *n* copies of the specified list

    The function aims to duplicate the specified string in a smart way.

    Topic: Strings

    See also: spaces
  (
    self # the string to duplicate
    n # the duplication count
  )
  case n
    0 -> empty_list
    1 -> self
    :
      $h n >> 1 # fails if <n> is not a positive integer
      $lst dup(self h)
      $dlst append(lst lst)
      if
        2*h == n
        -> dlst
        -> append(dlst self)

$std_types::generic_list/contains:
  #
    checks whether the list contains the specified item or not
  (
    self
    item
  )
  if
    self.is_empty
    -> false
    :
      if
        self(1) == item
        -> true
        :
          contains range(self 2 -1) item

$std_types::generic_list/find_first: (self test)
  if
    result_count() == 2:
      for_each self
        : (idx item)
          if
            test(item)
            -> idx item
            next
        -> undefined undefined
    :
      for_each self
        : (item)
          if
            test(item)
            -> item
            next
        -> undefined

$std_types::generic_list/filter: (self test)
  if
    result_count() == 2:
      if
        self.is_empty
        -> self self
        :
          $good empty_list
          $bad empty_list
          for_each self
            : (item)
              if
                test(item):
                  push &good item
                  next
                :
                  push &bad item
                  next
            -> good bad
    :
      if
        self.is_empty
        -> self
        :
          $filter: (s e)
            if
              s < e:
                $m (s+e) >> 1
                append
                  filter(s m)
                  filter(m+1 e)
              :
                if
                  test(self(s))
                  -> list(self(s))
                  -> empty_list

          filter 1 length_of(self)

$std::levenshtein_distance:
  (
    s
    t
  )
  $m length_of(s)
  $n length_of(t)
  $v0 int16_array(n+1)
  $v1 int16_array(n+1)
  from_to !v0 0 n
    : (i)
      !v0(i+1) i
      next
    -> v0
  from_to 1 m
    : (i)
      !v1(1) i
      from_to 1 n
        : (j)
          $deletion_cost v0(j+1)+1
          $insertion_cost v1(j)+1
          $substitution_cost
            if
              s(i) == t(j)
              -> v0(j)
              -> v0(j)+1
          !v1(j+1) min(deletion_cost insertion_cost substitution_cost)
          next
        :
          assign
            !v0 v1
            !v1 v0
          next
    -> v0(n+1)

###

# serialization

$std_types::list/to_list: (self) -> self

$std_types::list.serialization_tag_of "list"

$std_types::list/serialize:
  (
    self
    indent = undefined
  )
  $new_indent
    if
      indent.is_defined
      -> indent+2
      -> undefined
  map_reduce $contents
    self: (item) -> serialize(item new_indent)
    append
    ""
  $header
    "
      @(serialization_tag_of(self)) <@(length_of(self))>
  update_if indent.is_defined &header -> append(tabs_and_spaces(indent) header)
  append header contents

$std_types::list.deserializer_of:
  (
    _type
    items
  )
  -> items

$std_types::list.empty_collection_of empty_list

[source]

$std::levenshtein_distance:
  (
    s
    t
  )
  $m length_of(s)
  $n length_of(t)
  $v0 int16_array(n+1)
  $v1 int16_array(n+1)
  from_to !v0 0 n
    : (i)
      !v0(i+1) i
      next
    -> v0
  from_to 1 m
    : (i)
      !v1(1) i
      from_to 1 n
        : (j)
          $deletion_cost v0(j+1)+1
          $insertion_cost v1(j)+1
          $substitution_cost
            if
              s(i) == t(j)
              -> v0(j)
              -> v0(j)+1
          !v1(j+1) min(deletion_cost insertion_cost substitution_cost)
          next
        :
          assign
            !v0 v1
            !v1 v0
          next
    -> v0(n+1)

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Lists

# std::levenshtein_distance (a function)

