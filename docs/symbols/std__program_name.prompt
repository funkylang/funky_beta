[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

OBJECT std::CHARACTER_DEVICE -> std_types::file_type
  {DT_CHR}

[documentation remark]

# std_types::CHARACTER_DEVICE (an object derived from std_types::file_type)

  the file type for character devices

  Topic: POSIX

  See also: std_types::file_type, std::BLOCK_DEVICE, std::DIRECTORY,
            std::NAMED_PIPE, std::SYMBOLIC_LINK, std::REGULAR_FILE,
            std::SOCKET, std::UNKNOWN_FILE_TYPE

[EXERCISE]

[symbols]

OBJECT std::program_name -> std_types::octet_string
OBJECT std::command_line_arguments -> std_types::list
OBJECT std::environment_variables -> std_types::list
FUNCTION void initialize_environment

#
  Copyright (C) 2021 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Topic: Environment

OBJECT std::program_name -> std_types::octet_string
  #
    the name of the current process

    Topic: Parameters

    See also: command_line_arguments

    Example:

      println! program_name

    Output:

      /tmp/create_output

  0, 0, NULL

OBJECT std::command_line_arguments -> std_types::list
  #
    a list containing the application's command line arguments

    **Attention**: The first list item is **really** the first **argument**.

    The name of the current process is stored in <program_name>.

    Topic: Parameters

    See also: program_name

    Example:

      for_each command_line_arguments
        : (argument)
          println! argument
          next!
        pass

  0, 0,  NULL

OBJECT std::environment_variables -> std_types::list
  #
    a list containing the environment variables

    Topic: Parameters

    See also: program_name, command_line_arguments, environment

    Example:

      for_each environment_variables
        : (environment_variable)
          println! environment_variable
          next!
        pass

    Output:

      ...
      TERM=xterm-256color
      ...

  0, 0,  NULL

CODE
  extern char **environ;

FUNCTION void initialize_environment
  (
    void
  )
  {
    memcpy(
      VAR(std::program_name), from_c_string(main_argv[0]),
      sizeof(std::program_name));
    NODE *args = create_list(main_argc-1);
    int i;
    for (i = 1; i < main_argc; ++i) {
      set_list_item(args, i-1, from_c_string(main_argv[i]));
    }
    memcpy(
      VAR(std::command_line_arguments), args,
      sizeof(std::command_line_arguments));
    char **p = environ;
    while (*p++);
    int n = p-environ-1;
    NODE *env_vars = create_list(n);
    for (i = 0; i < n; ++i) {
      set_list_item(env_vars, i, from_c_string(environ[i]));
    }
    memcpy(
      VAR(std::environment_variables), env_vars,
      sizeof(std::environment_variables));
  }

[source]

OBJECT std::program_name -> std_types::octet_string
  #
    the name of the current process

    Topic: Parameters

    See also: command_line_arguments

    Example:

      println! program_name

    Output:

      /tmp/create_output

  0, 0, NULL

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Environment

# std::program_name (a builtin object)

