[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

METHOD std_types::positive_integer/plus
{
  CHECK_ARGUMENTS(2)
  CHECK_RESULTS(1)
  if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::positive_integer)) {
    if (ARGUMENTS(0)->integer.value+ARGUMENTS(1)->integer.value >= ARGUMENTS(0)->integer
      RETURN_SINGLE_RESULT(CREATE(std_types::positive_integer, ARGUMENTS(0)->integer.val
    }
  } else if (TYPEOF(ARGUMENTS(1)) == TYPE(negative_integer)) {
    if (ARGUMENTS(0)->integer.value >= ARGUMENTS(1)->integer.value) {
      RETURN_SINGLE_RESULT(CREATE(std_types::positive_integer, ARGUMENTS(0)->integer.val
    } else {
      RETURN_SINGLE_RESULT(CREATE(negative_integer, ARGUMENTS(1)->integer.value-ARGUMENT
    }
  } else if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::real)) {
    RETURN_SINGLE_RESULT(CREATE(std_types::real, ARGUMENTS(0)->integer.value+ARGUMENTS(1
  }
  INVALID_ARGUMENTS
}

[documentation remark]

# std_types::positive_integer/std::plus (a method)

  implements the plus operation for positive integers

  Parameters:
    left: a positive integer value
    right: any numeric value

  Result:
    sum: the sum of the two operands

  Topic: Numbers

  See also: std_types::positive_integer/std::minus,
            std_types::positive_integer/std::times,
            std_types::positive_integer/std::over,
            std_types::positive_integer/std::div,
            std_types::positive_integer/std::mod

[EXERCISE]

[symbols]

TYPE std_types::generic_array -> std_types::object
METHOD std_types::generic_array/_type
TYPE std_types::array -> std_types::generic_array
METHOD std_types::array/_type
METHOD long std_types::array/_debug_string
METHOD std_types::array/length_of
METHOD std_types::array/dimension_count_of
FUNCTION std::array
FUNCTION std::initialized_array
METHOD std_types::array/new
METHOD std_types::array/range
TYPE std_types::boolean_array -> std_types::generic_array
METHOD std_types::boolean_array/_type
METHOD long std_types::boolean_array/_debug_string
METHOD std_types::boolean_array/length_of
METHOD std_types::boolean_array/dimension_count_of
METHOD std_types::boolean_array/equal
METHOD std_types::boolean_array/bit_and
METHOD std_types::boolean_array/bit_or
METHOD std_types::boolean_array/bit_xor
FUNCTION std::boolean_array
FUNCTION std::initialized_boolean_array
METHOD std_types::boolean_array/new
METHOD std_types::boolean_array/range
TYPE std_types::character_array -> std_types::generic_array
METHOD std_types::character_array/_type
METHOD long std_types::character_array/_debug_string
METHOD std_types::character_array/length_of
METHOD std_types::character_array/dimension_count_of
METHOD std_types::character_array/equal
FUNCTION std::character_array
FUNCTION std::initialized_character_array
METHOD std_types::character_array/new
METHOD std_types::character_array/range
TYPE std_types::int8_array -> std_types::generic_array
METHOD std_types::int8_array/_type
METHOD long std_types::int8_array/_debug_string
METHOD std_types::int8_array/length_of
METHOD std_types::int8_array/dimension_count_of
METHOD std_types::int8_array/equal
METHOD std_types::int8_array/times
FUNCTION std::int8_array
FUNCTION std::initialized_int8_array
METHOD std_types::int8_array/new
METHOD std_types::int8_array/range
TYPE std_types::uint8_array -> std_types::generic_array
METHOD std_types::uint8_array/_type
METHOD long std_types::uint8_array/_debug_string
METHOD std_types::uint8_array/length_of
METHOD std_types::uint8_array/dimension_count_of
METHOD std_types::uint8_array/equal
METHOD std_types::uint8_array/bit_and
METHOD std_types::uint8_array/bit_or
METHOD std_types::uint8_array/bit_xor
METHOD std_types::uint8_array/times
FUNCTION std::uint8_array
FUNCTION std::initialized_uint8_array
METHOD std_types::uint8_array/new
METHOD std_types::uint8_array/range
TYPE std_types::int16_array -> std_types::generic_array
METHOD std_types::int16_array/_type
METHOD long std_types::int16_array/_debug_string
METHOD std_types::int16_array/length_of
METHOD std_types::int16_array/dimension_count_of
METHOD std_types::int16_array/equal
METHOD std_types::int16_array/times
FUNCTION std::int16_array
FUNCTION std::initialized_int16_array
METHOD std_types::int16_array/new
METHOD std_types::int16_array/range
TYPE std_types::uint16_array -> std_types::generic_array
METHOD std_types::uint16_array/_type
METHOD long std_types::uint16_array/_debug_string
METHOD std_types::uint16_array/length_of
METHOD std_types::uint16_array/dimension_count_of
METHOD std_types::uint16_array/equal
METHOD std_types::uint16_array/bit_and
METHOD std_types::uint16_array/bit_or
METHOD std_types::uint16_array/bit_xor
METHOD std_types::uint16_array/times
FUNCTION std::uint16_array
FUNCTION std::initialized_uint16_array
METHOD std_types::uint16_array/new
METHOD std_types::uint16_array/range
TYPE std_types::int32_array -> std_types::generic_array
METHOD std_types::int32_array/_type
METHOD long std_types::int32_array/_debug_string
METHOD std_types::int32_array/length_of
METHOD std_types::int32_array/dimension_count_of
METHOD std_types::int32_array/equal
METHOD std_types::int32_array/times
FUNCTION std::int32_array
FUNCTION std::initialized_int32_array
METHOD std_types::int32_array/new
METHOD std_types::int32_array/range
TYPE std_types::uint32_array -> std_types::generic_array
METHOD std_types::uint32_array/_type
METHOD long std_types::uint32_array/_debug_string
METHOD std_types::uint32_array/length_of
METHOD std_types::uint32_array/dimension_count_of
METHOD std_types::uint32_array/equal
METHOD std_types::uint32_array/bit_and
METHOD std_types::uint32_array/bit_or
METHOD std_types::uint32_array/bit_xor
METHOD std_types::uint32_array/times
FUNCTION std::uint32_array
FUNCTION std::initialized_uint32_array
METHOD std_types::uint32_array/new
METHOD std_types::uint32_array/range
TYPE std_types::int64_array -> std_types::generic_array
METHOD std_types::int64_array/_type
METHOD long std_types::int64_array/_debug_string
METHOD std_types::int64_array/length_of
METHOD std_types::int64_array/dimension_count_of
METHOD std_types::int64_array/equal
METHOD std_types::int64_array/times
FUNCTION std::int64_array
FUNCTION std::initialized_int64_array
METHOD std_types::int64_array/new
METHOD std_types::int64_array/range
TYPE std_types::uint64_array -> std_types::generic_array
METHOD std_types::uint64_array/_type
METHOD long std_types::uint64_array/_debug_string
METHOD std_types::uint64_array/length_of
METHOD std_types::uint64_array/dimension_count_of
METHOD std_types::uint64_array/equal
METHOD std_types::uint64_array/bit_and
METHOD std_types::uint64_array/bit_or
METHOD std_types::uint64_array/bit_xor
METHOD std_types::uint64_array/times
FUNCTION std::uint64_array
FUNCTION std::initialized_uint64_array
METHOD std_types::uint64_array/new
METHOD std_types::uint64_array/range
TYPE std_types::float32_array -> std_types::generic_array
METHOD std_types::float32_array/_type
METHOD long std_types::float32_array/_debug_string
METHOD std_types::float32_array/length_of
METHOD std_types::float32_array/dimension_count_of
METHOD std_types::float32_array/equal
METHOD std_types::float32_array/times
FUNCTION std::float32_array
FUNCTION std::initialized_float32_array
METHOD std_types::float32_array/new
METHOD std_types::float32_array/range
TYPE std_types::float64_array -> std_types::generic_array
METHOD std_types::float64_array/_type
METHOD long std_types::float64_array/_debug_string
METHOD std_types::float64_array/length_of
METHOD std_types::float64_array/dimension_count_of
METHOD std_types::float64_array/equal
METHOD std_types::float64_array/times
FUNCTION std::float64_array
FUNCTION std::initialized_float64_array
METHOD std_types::float64_array/new
METHOD std_types::float64_array/range

#######

# ARRAY OF OBJECTS

#

RECORD ARRAY_DATA
  ARRAY_INFO *info
  long size
  NODE *items[]

UNION UPDATE_ARRAY_DATA/SET_VALUE
  long offset
  NODE *value

TYPE std_types::array -> std_types::generic_array
  #
    an array of objects

    Topic: Collections

    See also:

    std_types::boolean_array,
    std_types::character_array,
    std_types::int8_array,
    std_types::uint8_array,
    std_types::int16_array,
    std_types::uint16_array,
    std_types::int32_array,
    std_types::uint32_array,
    std_types::int64_array,
    std_types::uint64_array,
    std_types::float32_array,
    std_types::float64_array

  long updates_length
  ARRAY_VIEW *view
  ARRAY_DATA *data
  ARRAY_UPDATES *updates

CODE
  static ARRAY_DATA *apply_array_updates(ARRAY *node)
    {
      ARRAY_DATA *data = node->data;
      if (node->updates_length > 0) {
        ARRAY_VIEW *view = create_new_array_view(node->view);
        data = (ARRAY_DATA *)
          create_array_info_and_data(view, sizeof(NODE *));
        // copy items
        copy_array(
          node->view, (ARRAY_DATA *)node->data, 0, 0,
          sizeof(NODE *), data->items);
        // apply updates
        char *update = node->updates->buffer;
        char *end_p = update+node->updates_length;
        while (update < end_p) {
          switch (*(TAG *)update) {
            case SET_VALUE:;
              UPDATE_ARRAY_DATA_SET_VALUE *set_value = (void *)update;
              data->items[set_value->offset] = set_value->value;
              update += sizeof(UPDATE_ARRAY_DATA_SET_VALUE);
              break;
          }
        }
        node->updates_length = 0;
        node->view = view;
        node->data = data;
        node->updates = NULL;
      }
      return data;
    }

METHOD std_types::array/_type
  {
    ARRAY_DATA *data = MYSELF->array.data;
    int dimension_count = data->info->dimension_count;
    MIN_ARGUMENTS(dimension_count)
    MAX_ARGUMENTS(dimension_count+1)
    if (ARGUMENT_COUNT == dimension_count) {
      // get item
      data = apply_array_updates((ARRAY *)MYSELF);
      // info and view could have been updated!
      long offset = compute_array_read_offset(
        MYSELF, data->info, MYSELF->array.view);
      if (offset < 0) return;
      NODE *value;
      value = data->items[offset];
      RETURN_SINGLE_RESULT(value);
    } else {
      // set item
      long offset = compute_array_write_offset(
        MYSELF, data->info, MYSELF->array.view);
      if (offset < 0) return;
      NODE *value;
      value = ARGUMENTS(dimension_count);
      long length = MYSELF->array.updates_length;
      MYSELF =
        add_update(
          (ARRAY *)MYSELF, sizeof(UPDATE_ARRAY_DATA_SET_VALUE));
      UPDATE_ARRAY_DATA_SET_VALUE *update =
        (UPDATE_ARRAY_DATA_SET_VALUE *)
        (MYSELF->array.updates->buffer+length);
      update->tag = SET_VALUE;
      update->offset = offset;
      update->value = value;
      RETURN_SINGLE_RESULT(MYSELF)
    }
  }

METHOD long std_types::array/_debug_string
  (
    NODE *node,
    int indent,
    int max_depth,
    char *buf
  )
  {
    return array_debug_string(
      node->array.data->info, node->array.view,
      indent, buf, "");
  }

METHOD std_types::array/length_of
  #
    implements the *length_of* operation

    An extra argument can be supplied to specify the dimension to query.

    This argument can be omitted, if the array is one-dimensional.
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    CHECK_RESULTS(1)
    ARRAY_VIEW *view = ARGUMENTS(0)->array.view;
    int dimension = 1;
    if (ARGUMENT_COUNT == 2) {
      CHECK(to_int(ARGUMENTS(1), &dimension))
      if (dimension < 1 || dimension > view->dimension_count) {
        invalid_dimension(ARGUMENTS(0));
        return;
      }
    }
    RETURN_SINGLE_RESULT(from_long(view->dimensions[dimension-1].width))
  }

METHOD std_types::array/dimension_count_of
  #
    implements the *dimension_count_of* operation
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    ARRAY_DATA *data = ARGUMENTS(0)->array.data;
    RETURN_SINGLE_RESULT(from_long(data->info->dimension_count))
  }

FUNCTION std::array
  #
    constructs an empty array

    See also: std_types::array/new, std::initialized_array
  {
    MIN_ARGUMENTS(1)
    ARRAY_VIEW *view = create_array_view(ARGUMENT_COUNT);
    if (!view) return;
    ARRAY_DATA *data = (ARRAY_DATA *)
      create_array_info_and_data(view, sizeof(NODE *));
    if (!data) return;
    int i;
    for (i = 0; i < data->size; ++i) {
      data->items[i] = (NODE *)&std_types::undefined;
    }
    RETURN_SINGLE_RESULT(CREATE(std_types::array, 0, view, data, NULL))
  }

FUNCTION std::initialized_array
  #
    constructs an initialized array

    The last argument specifies the initial value for all array items.

    See also: std::array, std_types::array/new
  {
    MIN_ARGUMENTS(2)
    ARRAY_VIEW *view = create_array_view(ARGUMENT_COUNT-1);
    if (!view) return;
    NODE *initial_value;
    initial_value = ARGUMENTS(ARGUMENT_COUNT-1);
    ARRAY_DATA *data = (ARRAY_DATA *)
      create_array_info_and_data(view, sizeof(NODE *));
    if (!data) return;
    int i;
    for (i = 0; i < data->size; ++i) {
      data->items[i] = initial_value;
    }
    RETURN_SINGLE_RESULT(CREATE(std_types::array, 0, view, data, NULL))
  }

METHOD std_types::array/new
  #
    creates an empty new array based on the given template array
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    ARRAY_DATA *data = (ARRAY_DATA *)
      create_array_data(ARGUMENTS(0)->array.data->info,
        ARGUMENTS(0)->array.data->size, sizeof(NODE *));
    if (!data) return;
    int i;
    for (i = 0; i < data->size; ++i) {
      data->items[i] = (NODE *)&std_types::undefined;
    }
    RETURN_SINGLE_RESULT(CREATE(std_types::array, 0,
      ARGUMENTS(0)->array.view, data, NULL))
  }

METHOD std_types::array/range
  #
    creates a new array with the elements in the given ranges
  {
    ARRAY *array = (ARRAY *)ARGUMENTS(0);
    int dimension_count = array->view->dimension_count;
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(1+dimension_count)
    ARRAY_VIEW *view = create_sub_view(array->view);
    if (!view) return;
    ARRAY_DATA *data = apply_array_updates(array);
    RETURN_SINGLE_RESULT(CREATE(std_types::array, 0, view, data, NULL))
  }

#######

# ARRAY OF BOOLEAN VALUES

#

RECORD BOOLEAN_ARRAY_DATA
  ARRAY_INFO *info
  long size
  int items[]

UNION UPDATE_BOOLEAN_ARRAY_DATA/SET_VALUE
  long offset
  int value

TYPE std_types::boolean_array -> std_types::generic_array
  # an array of boolean values
  long updates_length
  ARRAY_VIEW *view
  BOOLEAN_ARRAY_DATA *data
  ARRAY_UPDATES *updates

CODE
  static BOOLEAN_ARRAY_DATA *apply_boolean_array_updates(BOOLEAN_ARRAY *node)
    {
      BOOLEAN_ARRAY_DATA *data = node->data;
      if (node->updates_length > 0) {
        ARRAY_VIEW *view = create_new_array_view(node->view);
        data = (BOOLEAN_ARRAY_DATA *)
          create_array_info_and_data(view, sizeof(int));
        // copy items
        copy_array(
          node->view, (ARRAY_DATA *)node->data, 0, 0,
          sizeof(int), data->items);
        // apply updates
        char *update = node->updates->buffer;
        char *end_p = update+node->updates_length;
        while (update < end_p) {
          switch (*(TAG *)update) {
            case SET_VALUE:;
              UPDATE_BOOLEAN_ARRAY_DATA_SET_VALUE *set_value = (void *)update;
              data->items[set_value->offset] = set_value->value;
              update += sizeof(UPDATE_BOOLEAN_ARRAY_DATA_SET_VALUE);
              break;
          }
        }
        node->updates_length = 0;
        node->view = view;
        node->data = data;
        node->updates = NULL;
      }
      return data;
    }

METHOD std_types::boolean_array/_type
  {
    BOOLEAN_ARRAY_DATA *data = MYSELF->boolean_array.data;
    int dimension_count = data->info->dimension_count;
    MIN_ARGUMENTS(dimension_count)
    MAX_ARGUMENTS(dimension_count+1)
    if (ARGUMENT_COUNT == dimension_count) {
      // get item
      data = apply_boolean_array_updates((BOOLEAN_ARRAY *)MYSELF);
      // info and view could have been updated!
      long offset = compute_array_read_offset(
        MYSELF, data->info, MYSELF->boolean_array.view);
      if (offset < 0) return;
      int value;
      value = data->items[offset];
      RETURN_SINGLE_RESULT(from_bool(value));
    } else {
      // set item
      long offset = compute_array_write_offset(
        MYSELF, data->info, MYSELF->boolean_array.view);
      if (offset < 0) return;
      int value;
      CHECK(to_bool(ARGUMENTS(dimension_count), &value))
      long length = MYSELF->boolean_array.updates_length;
      MYSELF =
        add_update(
          (ARRAY *)MYSELF, sizeof(UPDATE_BOOLEAN_ARRAY_DATA_SET_VALUE));
      UPDATE_BOOLEAN_ARRAY_DATA_SET_VALUE *update =
        (UPDATE_BOOLEAN_ARRAY_DATA_SET_VALUE *)
        (MYSELF->boolean_array.updates->buffer+length);
      update->tag = SET_VALUE;
      update->offset = offset;
      update->value = value;
      RETURN_SINGLE_RESULT(MYSELF)
    }
  }

METHOD long std_types::boolean_array/_debug_string
  (
    NODE *node,
    int indent,
    int max_depth,
    char *buf
  )
  {
    return array_debug_string(
      node->boolean_array.data->info, node->boolean_array.view,
      indent, buf, "boolean");
  }

METHOD std_types::boolean_array/length_of
  #
    implements the *length_of* operation

    An extra argument can be supplied to specify the dimension to query.

    This argument can be omitted, if the array is one-dimensional.
  {
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(2)
    CHECK_RESULTS(1)
    ARRAY_VIEW *view = ARGUMENTS(0)->boolean_array.view;
    int dimension = 1;
    if (ARGUMENT_COUNT == 2) {
      CHECK(to_int(ARGUMENTS(1), &dimension))
      if (dimension < 1 || dimension > view->dimension_count) {
        invalid_dimension(ARGUMENTS(0));
        return;
      }
    }
    RETURN_SINGLE_RESULT(from_long(view->dimensions[dimension-1].width))
  }

METHOD std_types::boolean_array/dimension_count_of
  #
    implements the *dimension_count_of* operation
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    BOOLEAN_ARRAY_DATA *data = ARGUMENTS(0)->boolean_array.data;
    RETURN_SINGLE_RESULT(from_long(data->info->dimension_count))
  }

[source]

POLY std::range
  #
    returns a subrange of a collection

    Parameters:
      collection # the collection to be analyzed
      start # the first item to be included
      end # the first item to be excluded

    Result:
      range # the subrange

    The first argument specifies the collection.

    The second argument specifies the first index of the first item to include
    in the subrange.

    The third argument specifies the last index of the first item to include in
    the subrange.

    It is okay if the subrange is empty:

    *first_index* == *last_index* + 1

    It is an error if the size of the subrange would be negative:

    *first_index* > *last_index* + 1

    If an index is negativ it is counted from the end of the collection.

    So -1 denotes the last item of the collection, -2 denotes the next-to-last
    item and so on.

    Topics: Strings, Lists

METHOD std_types::array/range
  #
    creates a new array with the elements in the given ranges
  {
    ARRAY *array = (ARRAY *)ARGUMENTS(0);
    int dimension_count = array->view->dimension_count;
    MIN_ARGUMENTS(1)
    MAX_ARGUMENTS(1+dimension_count)
    ARRAY_VIEW *view = create_sub_view(array->view);
    if (!view) return;
    ARRAY_DATA *data = apply_array_updates(array);
    RETURN_SINGLE_RESULT(CREATE(std_types::array, 0, view, data, NULL))
  }

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Arrays, Collections

# std_types::array/std::range (a builtin method)

