[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std::wrap_words:
  (
    text
    width
  )
  $lines empty_list
  $n length_of(text)
  $s 1 # start of line
  $b undefined # possible break position
  $i 0
  loop:
    inc &i
    if
      i > n:
        if
          s > n
          -> lines
          -> push(lines range(text s n))
      :
        $chr text(i)
        case chr
          '
':
            push &lines range(text s i-1)
            !s i+1
            !b undefined
            next
          :
            if
              chr == ' ':
                if
                  i-s == width: # break
                    push &lines range(text s i-1)
                    !s i+1
                    !b undefined
                    next
                  :
                    !b i
                    next
              :
                if
                  i-s < width
                  next
                  :
                    if
                      b.is_defined: # wrap
                        push &lines range(text s b-1)
                        !s b+1
                        !b undefined
                        next
                      : # hard break
                        push &lines range(text s i-1)
                        !s i
                        next

[documentation remark]

# std::wrap_words (a function)

  wraps a string consisting of words onto multiple lines

  Parameters:
    text: the text to wrap
    width: the maximum width of a line

  Result:
    lines: a list of (wrapped) lines

  The string is split into multiple lines according to the specified line
  width.

  Topic: Strings

  See also: std::indented

  Example:

    $str "This is a very long string that should be wrapped onto multiple lines"
    $lines wrap_words(str 30)
    dump! 2 `lines

  Output:

    lines:
      list
        "This is a very long string"
        "that should be wrapped"
        "onto multiple lines"

[EXERCISE]

#
  Topic: Terminal

  The terminal library offers an interface for using text-terminals in a
  comfortable way.

  The base data type is the <std_types::screen>, a rectangular array of
  characters and associated draw and clear colors.

  All coordinates are one-based.

  Each colour supports 256 shades of red, green and blue.

  To update the state of a <std_types::screen> or <std_types::terminal) no
  I/O-acccess rights are necessary.

  There are methods to set draw and clear colors, to draw text, lines
  or more complex shapes, to clear the screen or parts of it, to scroll the
  screen or copy arbitrary rectangular areas between screens ("blitting").

  Horizontal and vertical lines are drawn using the appropriate unicode graphics
  characters.

  Screens and terminals also support Unicode Emojis.

  The terminal library is somewhat similar to the curses library. It tries to
  update the contents of a terminal in a smart way.

  To start using the functions of this library one must first create a
  <std_types::terminal> object (see <std::create_terminal>) supplying the
  terminal's width and height. The current terminal size can be retrieved via
  the I/O-function <std::get_terminal_size>.

  As an alternative one can use the high-level function
  <std::initialize_terminal>. When using this function one gets automatic
  cleanup "for free".

  <std_types::terminal> objects are an in-memory representation of the
  terminal's contents. To update the terminal's contents one must call the
  method <std_types::terminal/std::update> to create a character string
  representing the changes to the terminal's contents and then write this
  string to the terminal.

  Related topics: Input-Output, Colours

  Example:

    <require basic/stdlib>
    <require terminal/terminal>

    get_terminal_size! STDIN_FILENO $width $height
    create_terminal $terminal width height
    draw_text &terminal 10 5 "Hello, world!"
    update_terminal &terminal $output # create output character stream
    print! output # print the generated character stream

  Example:

    <require basic/stdlib>
    <require terminal/terminal>

    initialize_terminal!: (terminal)
      draw_text &terminal 10 5 "Hello, world!"
      update_terminal &terminal $output # create output character stream
      print! output # print the generated character stream

#
  Topic: Colours

  The <@Terminal> library uses <std_types::character>s for text and background
  colours.

  Related topics: Terminal

[symbols]


# Methods

$std::resize ()
$std::set_cursor ()
$std::set_character_at ()
$std::get_character_at ()
$std::set_draw_colour_at ()
$std::get_draw_colour_at ()
$std::set_clear_colour_at ()
$std::get_clear_colour_at ()
$std::draw_character ()
$std::draw_line ()
$std::draw_rectangle ()
$std::plot ()
$std::plot_line ()
$std::fill_trapezoid ()
$std::copy ()
$std::scroll_left ()
$std::scroll_right ()
$std::scroll_up ()
$std::scroll_down ()
$std::create_text_screen ()
$std::cursor_x_of (!)
$std::cursor_y_of (!)

# Attributes

$std_types::screen std_types::generic_terminal
$std::is_a_screen ()
$std_types::screen.is_a_screen true
$std_types::object.is_a_screen false

# Screen types

$std::TEXT .
$std::VISIBLE_CURSOR .
$std_types::screen.type_of TEXT
$std_types::screen.plot_y_resolution_of 0.5
$std_types::screen.serialization_tag_of "screen"
$std_types::screen.serialization_fields_of
$std_types::terminal std_types::screen
$std_types::terminal.name_of "terminal"
$std_types::terminal.serialization_tag_of "terminal"
$std_types::terminal.serialization_fields_of
$std::create_screen ()
$std_types::screen/create_screen:
$std_types::screen/resize:
$std::character_at:
$std::draw_colour_at:
$std::clear_colour_at:
$std_types::screen/scroll_up:
$std_types::screen/scroll_down:
$std_types::screen/scroll_left:
$std_types::screen/scroll_right:
$std_types::screen/clear:
$std_types::screen/std_private::clear:
$std::move ()
$std_types::screen/move:
$std_types::screen/copy:
$std::FILE_DESCRIPTOR .
$std::RECEIVE_CTRL_C_AND_CTRL_Z .
$std::RECEIVE_CTRL_Q_AND_CTRL_S .
$std::MAP_CR .
$std::RECEIVE_SIGWINCH .
$std::RECEIVE_MOUSE_CLICKS .
$std::CURSOR_OFF .
$std::TITLE .
$terminal_private::backspace_character '@del;'
$std::initialize_terminal ()
$std_types::object/initialize_terminal:
$std_types::io/initialize_terminal:
$std_types::terminal.original_attributes_of undefined
$std_types::terminal.fd_of undefined
$std_types::terminal.do_switch_cursor_on_of undefined
$std_types::terminal.do_cancel_mouse_clicks_of undefined
$std_types::terminal/finalize:
$std_types::terminal/update update_terminal
$std::update_terminal:
$std_types::screen/plot:
$std_types::screen/plot_line:
$std_types::screen/fill_trapezoid:
$std_types::screen/set_draw_colour:
$std_types::screen/set_clear_colour:
$std_types::screen/set_cursor:
$std_types::screen/set_character_at:
$std_types::view/set_character_at:
$std_types::screen/get_character_at:
$std_types::view/get_character_at:
$std_types::screen/set_draw_colour_at:
$std_types::view/set_draw_colour_at:
$std_types::screen/get_draw_colour_at:
$std_types::view/get_draw_colour_at:
$std_types::screen/set_clear_colour_at:
$std_types::view/set_clear_colour_at:
$std_types::screen/get_clear_colour_at:
$std_types::view/get_clear_colour_at:
$std_types::screen/draw_character:
$std_types::screen/draw_text:
$std_types::screen/std_private::draw_text:
$std_types::screen/draw_attributed_text:
$std_types::screen/std_private::draw_attributed_text:
$std_types::screen/draw_line:
$std_types::screen/draw_rectangle:
$std::create_terminal:
$std_types::terminal/resize:
$std::cursor_off:
$std::cursor_on:
$std::cursor_home:
$std::clear_screen:
$std::rows_and_columns:
$std::add_attributes:
$std_types::screen/create_text_screen:
$std_types::screen/append:
$std_types::screen/adjoin:
$std_types::screen/pad_left:
$std_types::screen/pad_right:
$std_types::screen/truncate:
$std_types::screen/range:

$std_types::screen/draw_rectangle:
  (
    self
    x1
    y1
    x2
    y2
  )
  draw_line &self x1 y1 x1 y2
  draw_line &self x1 y2 x2 y2
  draw_line &self x2 y2 x2 y1
  draw_line self x2 y1 x1 y1

$std::create_terminal:
  #
    Example:

      <require basic/stdlib>
      <require terminal/terminal>

      get_terminal_size! STDIN_FILENO $width $height
      create_terminal $terminal width height
        DRAW_COLOUR = WHITE
        CLEAR_COLOUR = BLUE
      draw_text &terminal
        10 # column
        5 # row
        "
          This is a multi-line
          text.
      update_terminal &terminal $output # create output character stream
      print! output # print the generated character stream
  (
    width
    height
    options*
  )
  extract_options options
    DRAW_COLOUR = BLACK $draw_colour
    CLEAR_COLOUR = WHITE $clear_colour
    VISIBLE_CURSOR = true $visible_cursor
  $row dup(string(' ' draw_colour clear_colour) width)
  $rows dup(list(row) height)
  $terminal
    std_types::terminal
      .cursor_x_of 1
      .cursor_y_of 1
      .width_of width
      .height_of height
      .draw_colour_of draw_colour
      .clear_colour_of clear_colour
      .has_a_visible_cursor visible_cursor
      .rows_of rows
  $buffer
    create_buffer
      width height
      DRAW_COLOUR = INVALID_COLOUR
      CLEAR_COLOUR = INVALID_COLOUR
  ->
    terminal
      .current_buffer_of
        buffer
          .cursor_x_of undefined # cursor column
          .cursor_y_of undefined # cursor row

$std_types::terminal/resize:
  (
    self
    new_width
    new_height
  )
  resize_rows &self
    new_width new_height
    draw_colour_of(self) clear_colour_of(self)
  $buffer # invalidate buffer
    create_buffer
      new_width new_height
      DRAW_COLOUR = INVALID_COLOUR
      CLEAR_COLOUR = INVALID_COLOUR
  !buffer
    buffer
      .cursor_x_of undefined # cursor column
      .cursor_y_of undefined # cursor row
  -> self(.current_buffer_of buffer)

$std::cursor_off:
  print! "@esc;[?25l"

$std::cursor_on:
  print! "@esc;[?25h"

$std::cursor_home:
  print! "@esc;[1;1H"

$std::clear_screen:
  cursor_home!
  print! "@esc;[2J"

$std::rows_and_columns:
  (
    text
  )
  $rows 0
  $longest 0
  $length 0
  for_each text
    : (chr)
      if
        chr == '@nl;':
          max &longest length
          inc &rows
          !length 0
          next
        :
          inc &length
          next
    :
      if
        text(-1) != '@nl;':
          max &longest length
          -> rows+1 longest
        -> rows longest

$std::add_attributes:
  (
    text
    draw_colour
    clear_colour
  )
  $buf ""
  for_each text
    : (chr)
      push &buf chr
      push &buf draw_colour
      push &buf clear_colour
      if
        chr.is_a_wide_character:
          push &buf INVALID_CHARACTER
          push &buf draw_colour
          push &buf clear_colour
          next
        next
    -> buf

$std_types::screen/create_text_screen:
  (
    template
    text
    draw_colour = undefined
    clear_colour = undefined
  )
  update_if draw_colour.is_undefined &draw_colour -> draw_colour_of(template)
  update_if clear_colour.is_undefined &clear_colour -> clear_colour_of(template)
  std_types::screen
    .width_of width_of(text)
    .height_of 1
    .draw_colour_of draw_colour
    .clear_colour_of clear_colour
    .rows_of list(add_attributes(text draw_colour clear_colour))

$std_types::screen/append:
  (
    self
    screens*
  )
  $width width_of(self)
  $height height_of(self)
  $rows rows_of(self)
  for_each screens
    : (screen)
      if
        width_of(screen) != width:
          error RUNTIME_ERROR "INVALID ARGUMENTS" screen
        :
          plus &height height_of(screen)
          append &rows rows_of(screen)
          next
    ->
      self
        .height_of height
        .rows_of rows

$std_types::screen/adjoin:
  (
    self
    screens*
  )
  $width width_of(self)
  $height height_of(self)
  $rows rows_of(self)
  for_each screens
    : (screen)
      if
        height_of(screen) != height:
          error RUNTIME_ERROR "INVALID ARGUMENTS" screen
        :
          plus &width width_of(screen)
          map &rows: (idx row) append row rows_of(screen)(idx)
          next
    ->
      self
        .width_of width
        .rows_of rows

$std_types::screen/pad_left:
  (
    self
    width
    clear_colour = undefined
  )
  if
    width <= width_of(self)
    -> self
    :
      update_if clear_colour.is_undefined &clear_colour -> clear_colour_of(self)
      $pad
        dup
          string
            ' '
            draw_colour_of(self)
            clear_colour
          width-width_of(self)
      map &self.rows_of: (row) append pad row
      -> self(.width_of width)

$std_types::screen/pad_right:
  (
    self
    width
    clear_colour = undefined
  )
  if
    width <= width_of(self)
    -> self
    :
      update_if clear_colour.is_undefined &clear_colour -> clear_colour_of(self)
      $pad
        dup
          string
            ' '
            draw_colour_of(self)
            clear_colour
          width-width_of(self)
      map &self.rows_of: (row) append row pad
      -> self(.width_of width)

$std_types::screen/truncate:
  (
    self
    width
    height = undefined
  )
  update_if height.is_undefined &height -> height_of(self)
  if
    width >= width_of(self) && height >= height_of(self)
    -> self
    :
      $rows
        map
          range(rows_of(self) 1 height): (row)
            -> range(row 1 3*width)
      ->
        self
          .width_of width
          .height_of height
          .rows_of rows

$std_types::screen/range:
  (
    self
    x1
    y1
    x2
    y2
  )
  # check arguments
  if
    x1 < 1 || x2 > width_of(self) || y1 < 1 || y2 > height_of(self):
      error RUNTIME_ERROR "INVALID ARGUMENTS"
    :
      $width x2-x1+1
      $height y2-y1+1
      $rows map(range(rows_of(self) y1 y2): (row) range row 3*x1-2 3*x2)
      ->
        self
          .width_of width
          .height_of height
          .rows_of rows

[source]

$std::add_attributes:
  (
    text
    draw_colour
    clear_colour
  )
  $buf ""
  for_each text
    : (chr)
      push &buf chr
      push &buf draw_colour
      push &buf clear_colour
      if
        chr.is_a_wide_character:
          push &buf INVALID_CHARACTER
          push &buf draw_colour
          push &buf clear_colour
          next
        next
    -> buf

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Terminal, Colours

# std::add_attributes (a function)

