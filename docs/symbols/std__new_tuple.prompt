[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

FUNCTION std::real
{
  CHECK_ARGUMENTS(1)
  char *str;
  CHECK(to_c_string(ARGUMENTS(0), &str))
  NODE *result = from_double(atof(str));
  deallocate_memory(str);
  RETURN_SINGLE_RESULT(result)
}

[documentation remark]

# std::real (a function)

  constructs a real number from its string representation

  Parameters:
    str: the string representation of the real number

  Result:
    value: the real number

  Topic: Numbers

  See also: std::integer, std_types::real

[EXERCISE]

[symbols]

TYPE std_types::tuple -> std_types::object
METHOD std_types::tuple/_type
METHOD std_types::tuple/new
FUNCTION NODE *create_tuple
FUNCTION void set_tuple_item
TYPE builtin_types::tuple2 -> std_types::tuple
METHOD builtin_types::tuple2/_type
METHOD long builtin_types::tuple2/_debug_string
METHOD builtin_types::tuple2/to_list
METHOD builtin_types::tuple2/new
TYPE builtin_types::tuple3 -> std_types::tuple
METHOD builtin_types::tuple3/_type
METHOD long builtin_types::tuple3/_debug_string
METHOD builtin_types::tuple3/to_list
METHOD builtin_types::tuple3/new
TYPE builtin_types::tuple4 -> std_types::tuple
METHOD builtin_types::tuple4/_type
METHOD long builtin_types::tuple4/_debug_string
METHOD builtin_types::tuple4/to_list
METHOD builtin_types::tuple4/new
TYPE builtin_types::tuple5 -> std_types::tuple
METHOD builtin_types::tuple5/_type
METHOD long builtin_types::tuple5/_debug_string
METHOD builtin_types::tuple5/to_list
METHOD builtin_types::tuple5/new
TYPE builtin_types::tuple6 -> std_types::tuple
METHOD builtin_types::tuple6/_type
METHOD long builtin_types::tuple6/_debug_string
METHOD builtin_types::tuple6/to_list
METHOD builtin_types::tuple6/new
TYPE builtin_types::tuple7 -> std_types::tuple
METHOD builtin_types::tuple7/_type
METHOD long builtin_types::tuple7/_debug_string
METHOD builtin_types::tuple7/to_list
METHOD builtin_types::tuple7/new
TYPE builtin_types::tuple8 -> std_types::tuple
METHOD builtin_types::tuple8/_type
METHOD long builtin_types::tuple8/_debug_string
METHOD builtin_types::tuple8/to_list
METHOD builtin_types::tuple8/new
FUNCTION std::tuple
FUNCTION std::tuple_or_error
FUNCTION std::new_tuple

METHOD builtin_types::tuple6/new
  {
    CHECK_ARGUMENTS(7)
    NODE *prototype = ARGUMENTS(0);
    NODE *clone =
      CREATE(
        builtin_types::tuple6,
        ARGUMENTS(1),
        ARGUMENTS(2),
        ARGUMENTS(3),
        ARGUMENTS(4),
        ARGUMENTS(5),
        ARGUMENTS(6)
      );
    clone->attributes = prototype->attributes;
    RETURN_SINGLE_RESULT(clone)
  }

TYPE builtin_types::tuple7 -> std_types::tuple
  NODE *node_0
  NODE *node_1
  NODE *node_2
  NODE *node_3
  NODE *node_4
  NODE *node_5
  NODE *node_6

METHOD builtin_types::tuple7/_type
  {
    CHECK_ARGUMENTS(0)
    MIN_RESULTS(1)
    MAX_RESULTS(7)
    START_ARGUMENTS(RESULT_COUNT)
    switch (RESULT_COUNT) {
      case 7: ARGUMENTS(6) = MYSELF->tuple7.node_6;
      case 6: ARGUMENTS(5) = MYSELF->tuple7.node_5;
      case 5: ARGUMENTS(4) = MYSELF->tuple7.node_4;
      case 4: ARGUMENTS(3) = MYSELF->tuple7.node_3;
      case 3: ARGUMENTS(2) = MYSELF->tuple7.node_2;
      case 2: ARGUMENTS(1) = MYSELF->tuple7.node_1;
      case 1: ARGUMENTS(0) = MYSELF->tuple7.node_0;
    }
    RETURN
  }

METHOD long builtin_types::tuple7/_debug_string
  (
    NODE *node,
    int indent,
    int max_depth,
    char *buf
  )
  {
    /*NODE *subtype = get_attribute(node, poly_idx__std___subtype_of);
    if (CONTAINS_AN_ATTRIBUTE_VALUE(subtype)) {
      subtype = RETRIEVE_ATTRIBUTE_VALUE(subtype);
      if (TYPEOF(subtype) == TYPE(std_types::undefined)) {
        subtype = NULL;
      }
    } else {
      subtype = NULL;
    }*/
    long n, len;
    if (max_depth <= 1) {
      /*if (subtype) {
        n = 0;
        if (indent < 0) {
          if (buf) *buf++ = ' ';
          ++n;
        }
        n += print(&buf, "<tuple-");
        len = debug_string(subtype, 0, max_depth, buf);
        --len; // remove trailing newline
        if (buf) buf += len;
        n += len;
        n += print(&buf, ">\n");
        return n;
      } else {*/
        return debug_print(indent, buf, "<tuple of 7 items>");
      /*}*/
    } else {
      long i;
      n = debug_print_head(&indent, &buf, "tuple");
      /*if (subtype) {
        // replace the trailing newline with a hyphen
        if (buf) buf[-1] = '-';
        len = debug_string(subtype, 0, max_depth, buf);
        if (buf) buf += len;
        n += len;
      }*/
      const char *contents_indent = indent_to_string(indent);
      NODE **node_p = &node->tuple7.node_0;
      for (i = 0; i < 7; ++i) {
        n += print(&buf, contents_indent);
        len = debug_string(node_p[i], indent, max_depth-1, buf);
        if (buf) buf += len;
        n += len;
      }
      return n;
    }
  }

METHOD builtin_types::tuple7/to_list
  {
    CHECK_ARGUMENTS(1)
    NODE *self = ARGUMENTS(0);
    LIST_DATA *data = allocate(sizeof(LIST_DATA)+7*sizeof(NODE *));
    data->size = 7;
    data->length = 7;
    data->items[0] = self->tuple7.node_0;
    data->items[1] = self->tuple7.node_1;
    data->items[2] = self->tuple7.node_2;
    data->items[3] = self->tuple7.node_3;
    data->items[4] = self->tuple7.node_4;
    data->items[5] = self->tuple7.node_5;
    data->items[6] = self->tuple7.node_6;
    RETURN_SINGLE_RESULT(CREATE(std_types::list, 0, 7, data))
  }

METHOD builtin_types::tuple7/new
  {
    CHECK_ARGUMENTS(8)
    NODE *prototype = ARGUMENTS(0);
    NODE *clone =
      CREATE(
        builtin_types::tuple7,
        ARGUMENTS(1),
        ARGUMENTS(2),
        ARGUMENTS(3),
        ARGUMENTS(4),
        ARGUMENTS(5),
        ARGUMENTS(6),
        ARGUMENTS(7)
      );
    clone->attributes = prototype->attributes;
    RETURN_SINGLE_RESULT(clone)
  }

TYPE builtin_types::tuple8 -> std_types::tuple
  NODE *node_0
  NODE *node_1
  NODE *node_2
  NODE *node_3
  NODE *node_4
  NODE *node_5
  NODE *node_6
  NODE *node_7

METHOD builtin_types::tuple8/_type
  {
    CHECK_ARGUMENTS(0)
    MIN_RESULTS(1)
    MAX_RESULTS(8)
    START_ARGUMENTS(RESULT_COUNT)
    switch (RESULT_COUNT) {
      case 8: ARGUMENTS(7) = MYSELF->tuple8.node_7;
      case 7: ARGUMENTS(6) = MYSELF->tuple8.node_6;
      case 6: ARGUMENTS(5) = MYSELF->tuple8.node_5;
      case 5: ARGUMENTS(4) = MYSELF->tuple8.node_4;
      case 4: ARGUMENTS(3) = MYSELF->tuple8.node_3;
      case 3: ARGUMENTS(2) = MYSELF->tuple8.node_2;
      case 2: ARGUMENTS(1) = MYSELF->tuple8.node_1;
      case 1: ARGUMENTS(0) = MYSELF->tuple8.node_0;
    }
    RETURN
  }

METHOD long builtin_types::tuple8/_debug_string
  (
    NODE *node,
    int indent,
    int max_depth,
    char *buf
  )
  {
    /*NODE *subtype = get_attribute(node, poly_idx__std___subtype_of);
    if (CONTAINS_AN_ATTRIBUTE_VALUE(subtype)) {
      subtype = RETRIEVE_ATTRIBUTE_VALUE(subtype);
      if (TYPEOF(subtype) == TYPE(std_types::undefined)) {
        subtype = NULL;
      }
    } else {
      subtype = NULL;
    }*/
    long n, len;
    if (max_depth <= 1) {
      /*if (subtype) {
        n = 0;
        if (indent < 0) {
          if (buf) *buf++ = ' ';
          ++n;
        }
        n += print(&buf, "<tuple-");
        len = debug_string(subtype, 0, max_depth, buf);
        --len; // remove trailing newline
        if (buf) buf += len;
        n += len;
        n += print(&buf, ">\n");
        return n;
      } else {*/
        return debug_print(indent, buf, "<tuple of 8 items>");
      /*}*/
    } else {
      long i;
      n = debug_print_head(&indent, &buf, "tuple");
      /*if (subtype) {
        // replace the trailing newline with a hyphen
        if (buf) buf[-1] = '-';
        len = debug_string(subtype, 0, max_depth, buf);
        if (buf) buf += len;
        n += len;
      }*/
      const char *contents_indent = indent_to_string(indent);
      NODE **node_p = &node->tuple8.node_0;
      for (i = 0; i < 8; ++i) {
        n += print(&buf, contents_indent);
        len = debug_string(node_p[i], indent, max_depth-1, buf);
        if (buf) buf += len;
        n += len;
      }
      return n;
    }
  }

METHOD builtin_types::tuple8/to_list
  {
    CHECK_ARGUMENTS(1)
    NODE *self = ARGUMENTS(0);
    LIST_DATA *data = allocate(sizeof(LIST_DATA)+8*sizeof(NODE *));
    data->size = 8;
    data->length = 8;
    data->items[0] = self->tuple8.node_0;
    data->items[1] = self->tuple8.node_1;
    data->items[2] = self->tuple8.node_2;
    data->items[3] = self->tuple8.node_3;
    data->items[4] = self->tuple8.node_4;
    data->items[5] = self->tuple8.node_5;
    data->items[6] = self->tuple8.node_6;
    data->items[7] = self->tuple8.node_7;
    RETURN_SINGLE_RESULT(CREATE(std_types::list, 0, 8, data))
  }

METHOD builtin_types::tuple8/new
  {
    CHECK_ARGUMENTS(9)
    NODE *prototype = ARGUMENTS(0);
    NODE *clone =
      CREATE(
        builtin_types::tuple8,
        ARGUMENTS(1),
        ARGUMENTS(2),
        ARGUMENTS(3),
        ARGUMENTS(4),
        ARGUMENTS(5),
        ARGUMENTS(6),
        ARGUMENTS(7),
        ARGUMENTS(8)
      );
    clone->attributes = prototype->attributes;
    RETURN_SINGLE_RESULT(clone)
  }

FUNCTION std::tuple
  #
    constructs a tuple from the specified arguments
  {
    MIN_ARGUMENTS(2)
    MAX_ARGUMENTS(8)
    switch (ARGUMENT_COUNT) {
      case 2:
        RETURN_SINGLE_RESULT(
          CREATE(builtin_types::tuple2,
            ARGUMENTS(0),
            ARGUMENTS(1)
          )
        )
      case 3:
        RETURN_SINGLE_RESULT(
          CREATE(builtin_types::tuple3,
            ARGUMENTS(0),
            ARGUMENTS(1),
            ARGUMENTS(2)
          )
        )
      case 4:
        RETURN_SINGLE_RESULT(
          CREATE(builtin_types::tuple4,
            ARGUMENTS(0),
            ARGUMENTS(1),
            ARGUMENTS(2),
            ARGUMENTS(3)
          )
        )
      case 5:
        RETURN_SINGLE_RESULT(
          CREATE(builtin_types::tuple5,
            ARGUMENTS(0),
            ARGUMENTS(1),
            ARGUMENTS(2),
            ARGUMENTS(3),
            ARGUMENTS(4)
          )
        )
      case 6:
        RETURN_SINGLE_RESULT(
          CREATE(builtin_types::tuple6,
            ARGUMENTS(0),
            ARGUMENTS(1),
            ARGUMENTS(2),
            ARGUMENTS(3),
            ARGUMENTS(4),
            ARGUMENTS(5)
          )
        )
      case 7:
        RETURN_SINGLE_RESULT(
          CREATE(builtin_types::tuple7,
            ARGUMENTS(0),
            ARGUMENTS(1),
            ARGUMENTS(2),
            ARGUMENTS(3),
            ARGUMENTS(4),
            ARGUMENTS(5),
            ARGUMENTS(6)
          )
        )
      case 8:
        RETURN_SINGLE_RESULT(
          CREATE(builtin_types::tuple8,
            ARGUMENTS(0),
            ARGUMENTS(1),
            ARGUMENTS(2),
            ARGUMENTS(3),
            ARGUMENTS(4),
            ARGUMENTS(5),
            ARGUMENTS(6),
            ARGUMENTS(7)
          )
        )
    }
  }

FUNCTION std::tuple_or_error
  #
    constructs a tuple from the specified arguments

    If any of the arguments is an error object then this error object (the
    leftmost one in case there is more than one) is returned instead of the
    tuple.
  {
    MIN_ARGUMENTS(2)
    MAX_ARGUMENTS(8)
    int i;
    for (i = 0; i < ARGUMENT_COUNT; ++i) {
      if (TYPEOF(ARGUMENTS(i)) == TYPE(std_types::error))
        RETURN_SINGLE_RESULT(ARGUMENTS(i))
    }
    switch (ARGUMENT_COUNT) {
      case 2:
        RETURN_SINGLE_RESULT(
          CREATE(builtin_types::tuple2,
            ARGUMENTS(0),
            ARGUMENTS(1)
          )
        )
      case 3:
        RETURN_SINGLE_RESULT(
          CREATE(builtin_types::tuple3,
            ARGUMENTS(0),
            ARGUMENTS(1),
            ARGUMENTS(2)
          )
        )
      case 4:
        RETURN_SINGLE_RESULT(
          CREATE(builtin_types::tuple4,
            ARGUMENTS(0),
            ARGUMENTS(1),
            ARGUMENTS(2),
            ARGUMENTS(3)
          )
        )
      case 5:
        RETURN_SINGLE_RESULT(
          CREATE(builtin_types::tuple5,
            ARGUMENTS(0),
            ARGUMENTS(1),
            ARGUMENTS(2),
            ARGUMENTS(3),
            ARGUMENTS(4)
          )
        )
      case 6:
        RETURN_SINGLE_RESULT(
          CREATE(builtin_types::tuple6,
            ARGUMENTS(0),
            ARGUMENTS(1),
            ARGUMENTS(2),
            ARGUMENTS(3),
            ARGUMENTS(4),
            ARGUMENTS(5)
          )
        )
      case 7:
        RETURN_SINGLE_RESULT(
          CREATE(builtin_types::tuple7,
            ARGUMENTS(0),
            ARGUMENTS(1),
            ARGUMENTS(2),
            ARGUMENTS(3),
            ARGUMENTS(4),
            ARGUMENTS(5),
            ARGUMENTS(6)
          )
        )
      case 8:
        RETURN_SINGLE_RESULT(
          CREATE(builtin_types::tuple8,
            ARGUMENTS(0),
            ARGUMENTS(1),
            ARGUMENTS(2),
            ARGUMENTS(3),
            ARGUMENTS(4),
            ARGUMENTS(5),
            ARGUMENTS(6),
            ARGUMENTS(7)
          )
        )
    }
  }

FUNCTION std::new_tuple
  #
    constructs a tuple with specified type and fields

    This function should be used for deserialization only!
  {
    CHECK_ARGUMENTS(2)
    NODE *prototype = ARGUMENTS(0);
    NODE *list = ARGUMENTS(1);
    if (TYPEOF(list) != TYPE(std_types::list)) INVALID_ARGUMENTS
    long offset = list->list.offset;
    long length = list->list.length;
    if (length < 2) {
      RUNTIME_ERROR("tuple_from_list - TOO FEW ITEMS")
      return;
    } else if (length > 8) {
      RUNTIME_ERROR("tuple_from_list - TOO MANY ITEMS")
      return;
    }
    LIST_DATA *data = list->list.data;
    NODE *tuple;
    switch (length) {
      case 2:
        tuple =
          CREATE(builtin_types::tuple2,
            data->items[offset+0],
            data->items[offset+1]
          );
        break;
      case 3:
        tuple =
          CREATE(builtin_types::tuple3,
            data->items[offset+0],
            data->items[offset+1],
            data->items[offset+2]
          );
        break;
      case 4:
        tuple =
          CREATE(builtin_types::tuple4,
            data->items[offset+0],
            data->items[offset+1],
            data->items[offset+2],
            data->items[offset+3]
          );
        break;
      case 5:
        tuple =
          CREATE(builtin_types::tuple5,
            data->items[offset+0],
            data->items[offset+1],
            data->items[offset+2],
            data->items[offset+3],
            data->items[offset+4]
          );
        break;
      case 6:
        tuple =
          CREATE(builtin_types::tuple6,
            data->items[offset+0],
            data->items[offset+1],
            data->items[offset+2],
            data->items[offset+3],
            data->items[offset+4],
            data->items[offset+5]
          );
        break;
      case 7:
        tuple =
          CREATE(builtin_types::tuple7,
            data->items[offset+0],
            data->items[offset+1],
            data->items[offset+2],
            data->items[offset+3],
            data->items[offset+4],
            data->items[offset+5],
            data->items[offset+6]
          );
        break;
      case 8:
        tuple =
          CREATE(builtin_types::tuple8,
            data->items[offset+0],
            data->items[offset+1],
            data->items[offset+2],
            data->items[offset+3],
            data->items[offset+4],
            data->items[offset+5],
            data->items[offset+6],
            data->items[offset+7]
          );
        break;
    }
    if (TYPEOF(prototype) != TYPE(std_types::tuple)) {
      // std_types::tuple is generic and cannot be used!
      tuple->attributes = prototype->attributes;
    }
    RETURN_SINGLE_RESULT(tuple)
  }

[source]

FUNCTION std::new_tuple
  #
    constructs a tuple with specified type and fields

    This function should be used for deserialization only!
  {
    CHECK_ARGUMENTS(2)
    NODE *prototype = ARGUMENTS(0);
    NODE *list = ARGUMENTS(1);
    if (TYPEOF(list) != TYPE(std_types::list)) INVALID_ARGUMENTS
    long offset = list->list.offset;
    long length = list->list.length;
    if (length < 2) {
      RUNTIME_ERROR("tuple_from_list - TOO FEW ITEMS")
      return;
    } else if (length > 8) {
      RUNTIME_ERROR("tuple_from_list - TOO MANY ITEMS")
      return;
    }
    LIST_DATA *data = list->list.data;
    NODE *tuple;
    switch (length) {
      case 2:
        tuple =
          CREATE(builtin_types::tuple2,
            data->items[offset+0],
            data->items[offset+1]
          );
        break;
      case 3:
        tuple =
          CREATE(builtin_types::tuple3,
            data->items[offset+0],
            data->items[offset+1],
            data->items[offset+2]
          );
        break;
      case 4:
        tuple =
          CREATE(builtin_types::tuple4,
            data->items[offset+0],
            data->items[offset+1],
            data->items[offset+2],
            data->items[offset+3]
          );
        break;
      case 5:
        tuple =
          CREATE(builtin_types::tuple5,
            data->items[offset+0],
            data->items[offset+1],
            data->items[offset+2],
            data->items[offset+3],
            data->items[offset+4]
          );
        break;
      case 6:
        tuple =
          CREATE(builtin_types::tuple6,
            data->items[offset+0],
            data->items[offset+1],
            data->items[offset+2],
            data->items[offset+3],
            data->items[offset+4],
            data->items[offset+5]
          );
        break;
      case 7:
        tuple =
          CREATE(builtin_types::tuple7,
            data->items[offset+0],
            data->items[offset+1],
            data->items[offset+2],
            data->items[offset+3],
            data->items[offset+4],
            data->items[offset+5],
            data->items[offset+6]
          );
        break;
      case 8:
        tuple =
          CREATE(builtin_types::tuple8,
            data->items[offset+0],
            data->items[offset+1],
            data->items[offset+2],
            data->items[offset+3],
            data->items[offset+4],
            data->items[offset+5],
            data->items[offset+6],
            data->items[offset+7]
          );
        break;
    }
    if (TYPEOF(prototype) != TYPE(std_types::tuple)) {
      // std_types::tuple is generic and cannot be used!
      tuple->attributes = prototype->attributes;
    }
    RETURN_SINGLE_RESULT(tuple)
  }

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Tuples, Collections

# std::new_tuple (a builtin function)

