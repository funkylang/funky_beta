[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std_types::screen/std::clear:
  (
    self
    x = 1
    y = 1
    width = undefined
    height = undefined
  )
  update_if width.is_undefined &width -> width_of(self)-x+1
  update_if height.is_undefined &height -> height_of(self)-y+1
  std_private::clear self self x y width height

[documentation remark]

# std_types::screen/clear (a method)

  clears the specified rectangular area

  Parameters:
    self: the screen to be (partially) cleared
    x: x-coordinate of the upper left corner
    y: y-coordinate of the upper left corner
    width: width of the area
    height: height of the area

  Result:
    screen: the updated screen

  The specified area is filled with spaces using the the current draw-
  and clear colour.

  The area is clipped at the screen's borders.

  This function also works for "graphical screens" (line_height != 1).

  Topic: Terminal

  See also: std_types::screen/std::set_clear_colour,
            std_types::screen/std::copy

[source]

$std_types::string/match:
  (
    self
    stream
  )
  $rc result_count()
  $len length_of(self)
  if
    length_of(stream) >= len:
      if
        range(stream 1 len) == self:
          if
            rc == 1
            -> len
            -> len undefined
        fail
    fail

  $fail:
    if
      rc == 1
      -> undefined
      -> undefined undefined

[documentation remark]

# std_types::string/std::match (a method)

  matches the start of the stream with the string

  Parameters:
    self: the string to match
    stream: the stream to match against

  Results:
    length: the number of matched characters (or <undefined> on fail)
    capture: the matched string (if requested)

  Attempts to match the start of the stream with the specified string.

  If the match is successful the length of the match (= the length of the
  string) is returned.

  If the caller requested two result values then in addition to the string
  length the string itself ("the capture") is also returned.

  If the match fails then one or two <std::undefined>-values are returned.

  Topic: Strings

  See also: std_types::string/std::match_back, std_types::string/std::search

[source]

$std_types::generic_list/map_or_error:
  (
    self
    function
  )
  if
    self.is_empty
    -> self
    :
      $map
        if
          parameter_count_of(function) == 2
          ->
            : (s e)
              if
                s < e:
                  $m (s+e) >> 1
                  append_or_error
                    map(s m)
                    map(m+1 e)
                :
                  $mapped_item function(s self(s))
                  if
                    mapped_item.is_an_error
                    -> mapped_item
                    -> list(mapped_item)
          ->
            : (s e)
              if
                s < e:
                  $m (s+e) >> 1
                  append_or_error
                    map(s m)
                    map(m+1 e)
                :
                  $mapped_item function(self(s))
                  if
                    mapped_item.is_an_error
                    -> mapped_item
                    -> list(mapped_item)

      map 1 length_of(self)

[documentation remark]

# std_types::generic_list/std::map_or_error (a method)

  applies a function to all elements of the list

  Parameters:

    self: the list which items will be mapped
    function: the function to apply to each element of the list

  Result:
    list: the list of "mapped" items

  A list of the "mapped" items is returned.

  If any item ist mapped to an error object than the result ist not a
  collection but the first (left-to-right-order) error object created.

  Topic: Lists

  See also: std_types::generic_list/std::reduce,
            std_types::generic_list/std::map_reduce

[EXERCISE]

#
  Topic: Boolean

  There is no common prototype for "true" and "false" in Funky.

[symbols]

$std::is_a_boolean ()
$std::true std_types::true
$std::false std_types::false
$std_types::object.is_a_boolean false
$std_types::true.is_a_boolean true
$std_types::false.is_a_boolean true
$std::and ()
$std::or ()
$std::not ()
$std::if ()
$std::if_not ()
$std::update_if ()
$std::update_if_not ()
$std::on ()
$std::on_not ()
$std_types::true.not false
$std_types::false.not true
$std_types::true/and:
$std_types::false/and:
$std_types::true/or:
$std_types::false/or:
$std_types::true/if:
$std_types::false/if:
$std_types::true/if_not:
$std_types::false/if_not:
$std_types::true/update_if:
$std_types::false/update_if:
$std_types::true/update_if_not:
$std_types::false/update_if_not:
$std_types::true/on:
$std_types::false/on:
$std_types::true/on_not:
$std_types::false/on_not:
$std_types::true/serialize:
$std_types::false/serialize:

#
  Copyright (C) 2023 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
  Topic: Boolean

  There is no common prototype for "true" and "false" in Funky.

$std::is_a_boolean ()
  #
    succeeds for <true> and <false>

    Topic: Branches

$std::true std_types::true
  #
    the boolean value "true"

    There is no common basetype (e.g. "boolean") for <true> and <false>!

    See also: std::false, std_types::true

$std::false std_types::false
  #
    the boolean value "false"

    There is no common basetype (e.g. "boolean") for <true> and <false>!

    See also: std::true, std_types::false

$std_types::object.is_a_boolean false
  #
    obvious

    Topic: Objects

    See also: true, false

$std_types::true.is_a_boolean true
  #
    obvious

    Topic: Branches

    See also: std_types::true

$std_types::false.is_a_boolean true
  #
    obvious

    Topic: Branches

    See also: std_types::false

$std::and ()
  #
    "short cut" and-operation

    The left argument must be <std::true> or <std::false>.

    The right argument must be a function that evaluates to <true> or <false>.

    *a* && *b*

    is converted by the compiler to

    <std::and>(*a* -> *b*)

    See also: std::or, std::if

$std::or ()
  #
    "short cut" or- operation

    The left argument must be <std::true> or <std::false>.

    The right argument must be a function that evaluates to
    <std::true> or <std::false>.

    *a* || *b*

    is converted by the compiler to

    <std::or>(*a* -> *b*)

    See also: std::and, std::if

$std::not ()
  #
    negates its boolean argument

    <not>(true>) yields <false)

    <not>(false>) yields <true)

    See also: equal, less, if, if_not

$std::if ()
  #
    classic if; can be used as a function or a procedure

    Parameters:
      condition # true or false
      then_part # the function to be evaluated if the condition is true
      else_part # the function to be evaluated if the condition is false


    The "then-part"- and "else-part" functions can return any number of results
    (including none). But both should return the same number of results.

    Topic: Branches

    See also: if_not, on, on_not, cond, case, and, or, default_value

    Example:

      # "if" as a procedure

      $x 5
      if
        x > 3:
          println! "x is larger than 3"
        :
          println! "x is not larger than 3"

    Output:

      x is larger than 3

    Example:

      # "if" as a function

      $x 5
      println!
        if
          x > 3
          -> "x is larger than 3"
          -> "x is not larger than 3"

    Output:

      x is larger than 3

    Example:

      # "if" with multiple results

      $x 5

      if $a $b
        x > 7
        -> x*x x+1
        -> 2*x*x x+3

      print! "
        a = @(a)
        b = @(b)

    Output:

      a = 50
      b = 8

$std::if_not ()
  #
    can be used as a function or a procedure

    Parameters:
      condition # true or false
      then_part # the function to be evaluated if the condition is not true
      else_part # the function to be evaluated if the condition is true

    The "then-part"- and "else-part" functions can return any number of results
    (including none). But both should return the same number of results.

    *if_not* is usually used with a simple then-part and a complex else-part.

    Topic: Branches

    See also: if, cond, case, and, or, default_value

    Example:

      # "if_not" as a procedure

      $x 5
      if_not
        x > 3:
          println! "x is not larger than 3"
        :
          println! "x is larger than 3"

    Output:

      x is larger than 3

    Example:

      # "if_not" as a function

      $x 5
      println!
        if_not
          x > 3
          -> "x is not larger than 3"
          -> "x is larger than 3"

    Output:

      x is larger than 3

$std::update_if ()
  #
    updates one or more variables depending on a condition

    Parameters:
      condition # true or false
      values* # the original values of the variables to be updated
      body # a function used to update the variables

    Results:
      values* # the maybe updated values

    Topic: Branches

    See also: update_if_not, if, if_not

    Example:

      $x -5
      update_if x < 0 &x -> -x
      println! x

    Output:

      5

    Example:

      $items list("apples" "bananas" "cherries")
      $already_processed_items list()

      update_if items.is_not_empty &items &already_processed_items
        -> range(items 2 -1) push(already_processed_items items(1))

      dump! `items `already_processed_items

    Output:

      items: list <2>
        "bananas"
        "cherries"
      already_processed_items: list <1>
        "apples"

$std::update_if_not ()
  #
    updates one or more variables depending on a condition

    Parameters:
      condition # true or false
      values* # the original values of the variables to be updated
      body # a function used to update the variables

    Results:
      values* # the maybe updated values

    Topic: Branches

    See also: update_if, if_not, if

    Example:

      $x -5
      update_if_not x > 0 &x -> -x
      println! x

    Output:

      5

    Example:

      $items list("apples" "bananas" "cherries")
      $already_processed_items list()

      update_if_not items.is_empty &items &already_processed_items
        -> range(items 2 -1) push(already_processed_items items(1))

      dump! `items `already_processed_items

    Output:

      items: list <2>
        "bananas"
        "cherries"
      already_processed_items: list <1>
        "apples"

$std::on ()
  #
    if the specified condition is true then perform the specified action

    Parameters:
      condition # true or false
      action # an action to be performed when the condition is true

    *on* is a conditional without an else-part. It is therefor performed only
    for the side-effects of the action.

    Topic: Branches

    See also: on_no, if, if_not

    Example:

      $x 5
      on x > 3: println! "x is larger than 3"

    Output:

      x is larger than 3

$std::on_not ()
  #
    if the specified condition is false then perform the specified action

    Parameters:
      condition # true or false
      action # an action to be performed when the condition is false

    *on_not* is a conditional without an else-part. It is therefor performed
    only for the side-effects of the action.

    Topic: Branches

    See also: on, if_not, if

    Example:

      $x 2
      on_not x > 3: println! "x is not larger than 3"

    Output:

      x is not larger than 3

$std_types::true.not false
  #
    returns false

    Topic: Branches

    See also: std_types::true, std_types::false, not

$std_types::false.not true
  #
    returns true

    Topic: Branches

    See also: std_types::true, std_types::false, not

$std_types::true/and:
  #
    evaluates its second argument and returns its result

    The first argument is already <true>, so the second argument decides
    whether the *and*-expression ist *true* or not.

    Topic: Branches

    See also: std_types::true, std_types::false, and
  (
    _left # <std_types::true>
    right # an expression that evaluates to <true> or <false>
  )
  right

$std_types::false/and:
  #
    returns <false>

    The second argument is not evaluated at all!

    Topic: Branches

    See also: std_types::true, std_types::false, and
  (
    _left # <std_types::false>
    _right # an expression that is ignored
  )
  -> false

$std_types::true/or:
  #
    returns <true>

    The second argument is not evaluated at all!

    Topic: Branches

    See also: std_types::true, std_types::false, or
  (
    _left # <std_types::true>
    _right # an expression that is ignored
  )
  -> true

$std_types::false/or:
  #
    evaluates its second argument and returns its result

    The first argument is already <false>, so the second argument decides
    whether the *or*-expression ist *true* or not.

    Topic: Branches

    See also: std_types::true, std_types::false, or
  (
    _left # <std_types::false>
    right # an expression that evaluates to <true> or <false>
  )
  right

$std_types::true/if:
  #
    evaluates the then-part and returns its result(s)

    This function passes I/O-access rights to the *then-part*.

    Topic: Branches

    See also: std_types::true, std_types::false, if
  (
    _condition # <std_types::true>_
    then # a function that evaluates to any number of results
    _else # a function that is ignored
  )
  then!

$std_types::false/if:
  #
    evaluates the else-part and returns its result(s)

    This function passes I/O-access rights to the *else-part*.

    Topic: Branches

    See also: std_types::true, std_types::false, if
  (
    _condition # <std_types::false>
    _then # a function that is ignored
    else # a function that evaluates to any number of results
  )
  else!

$std_types::true/if_not:
  #
    evaluates the else-part and returns its result(s)

    This function passes I/O-access rights to the *else-part*.

    Topic: Branches

    See also: std_types::true, std_types::false, if_not
  (
    _condition # <std_types::true>
    _then # a function that is ignored
    else # a function that evaluates to any number of results
  )
  else!

$std_types::false/if_not:
  #
    evaluates the then-part and returns its result(s)

    This function passes I/O-access rights to the *then-part*.

    Topic: Branches

    See also: std_types::true, std_types::false, if_not
  (
    _condition # <std_types::false>
    then # a function that evaluates to any number of results
    _else # a function that is ignored
  )
  then!

$std_types::true/update_if:
  #
    updates the specified variable(s)

    Topic: Branches

    See also: std_types::true, std_types::false, update_if
  (
    _condition # <std_types::true>_
    _values* # the original values of the variables to be updated
    body # a function which results are used to update the variables
  )
  body

$std_types::false/update_if:
  #
    does not update the specified variable(s)

    Topic: Branches

    See also: std_types::true, std_types::false, update_if
  (
    _condition # <std_types::false>
    values* # the original values of the variables to be updated
    _body # a function which is not called
  )
  spread values

$std_types::true/update_if_not:
  #
    does not update the specified variable(s)

    Topic: Branches

    See also: std_types::true, std_types::false, update_if_not
  (
    _condition # <std_types::true>
    values* # the original values of the variables to be updated
    _body # a function which is not called
  )
  spread values

$std_types::false/update_if_not:
  #
    updates the specified variable(s)

    Topic: Branches

    See also: std_types::true, std_types::false, update_if_not
  (
    _condition # <std_types::false>
    _values* # the original values of the variables to be updated
    body # a function which results are used to update the variables
  )
  body

$std_types::true/on:
  #
    performs the specified action

    This function passes I/O-access rights to the action

    Topic: Branches

    See also: std_types::true, std_types::false, on
  (
    _condition # <std_types::true>
    action # an action to be performed
  )
  action!

$std_types::false/on:
  #
    does not perform the specified action

    Topic: Branches

    See also: std_types::true, std_types::false, on
  (
    _condition # <std_types::false>
    _action # an action which is not performed
  )
  pass

$std_types::true/on_not:
  #
    does not perform the specified action

    Topic: Branches

    See also: std_types::true, std_types::false, on_not
  (
    _condition # <std_types::true>
    _action # an action which is not performed
  )
  pass

$std_types::false/on_not:
  #
    performs the specified action

    This function passes I/O-access rights to the action

    Topic: Branches

    See also: std_types::true, std_types::false, on_not
  (
    _condition # <std_types::false>
    action # an action to be performed
  )
  action!

$std_types::true/serialize:
  #
    returns the string "<true>" and a newline character

    The optional *indent* is obeyed.

    Topic: Branches

    See also: std_types::true, std_types::false, serialize
  (
    _self # <std_types::true>
    indent = undefined # optional indentation value
  )
  $str "<true>@nl;"
  if
    indent.is_defined
    -> append(tabs_and_spaces(indent) str)
    -> str

$std_types::false/serialize:
  #
    returns the string "<false>" and a newline character

    The optional *indent* is obeyed.

    Topic: Branches

    See also: std_types::true, std_types::false, serialize
  (
    _self # <std_types::false>
    indent = undefined # optional indentation value
  )
  $str "<false>@nl;"
  if
    indent.is_defined
    -> append(tabs_and_spaces(indent) str)
    -> str

[source]

$std::on ()
  #
    if the specified condition is true then perform the specified action

    Parameters:
      condition # true or false
      action # an action to be performed when the condition is true

    *on* is a conditional without an else-part. It is therefor performed only
    for the side-effects of the action.

    Topic: Branches

    See also: on_no, if, if_not

    Example:

      $x 5
      on x > 3: println! "x is larger than 3"

    Output:

      x is larger than 3

$std_types::false/on:
  #
    does not perform the specified action

    Topic: Branches

    See also: std_types::true, std_types::false, on
  (
    _condition # <std_types::false>
    _action # an action which is not performed
  )
  pass

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Boolean

# std_types::false/std::on (a method)

