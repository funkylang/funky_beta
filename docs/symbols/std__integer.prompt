[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

FUNCTION std::real
{
  CHECK_ARGUMENTS(1)
  char *str;
  CHECK(to_c_string(ARGUMENTS(0), &str))
  NODE *result = from_double(atof(str));
  deallocate_memory(str);
  RETURN_SINGLE_RESULT(result)
}

[documentation remark]

# std::real (a function)

  constructs a real number from its string representation

  Parameters:
    str: the string representation of the real number

  Result:
    value: the real number

  Topic: Numbers

  See also: std::integer, std_types::real

[EXERCISE]

[symbols]

TYPE std_types::number -> std_types::object
METHOD std_types::number/_type
TYPE std_types::integer -> std_types::number
METHOD std_types::integer/_type
PUBLIC TYPE builtin_types::positive_integer -> std_types::integer
METHOD builtin_types::positive_integer/_type
PUBLIC TYPE builtin_types::negative_integer -> std_types::integer
METHOD builtin_types::negative_integer/_type
TYPE std_types::real -> std_types::number
METHOD std_types::real/_type
METHOD long builtin_types::positive_integer/_debug_string
METHOD long builtin_types::negative_integer/_debug_string
METHOD long std_types::real/_debug_string
FUNCTION NODE *from_float
FUNCTION NODE *from_double
METHOD int builtin_types::positive_integer/_to_double
METHOD int builtin_types::positive_integer/_to_float
METHOD int builtin_types::negative_integer/_to_double
METHOD int builtin_types::negative_integer/_to_float
METHOD int std_types::real/_to_double
METHOD int std_types::real/_to_float
METHOD builtin_types::positive_integer/negate
METHOD builtin_types::negative_integer/negate
METHOD std_types::real/negate
METHOD builtin_types::positive_integer/times
METHOD builtin_types::negative_integer/times
METHOD builtin_types::positive_integer/to_integer
METHOD builtin_types::negative_integer/to_integer
METHOD std_types::real/to_integer
METHOD std_types::real/floor
METHOD std_types::real/ceil
METHOD std_types::real/round
METHOD builtin_types::negative_integer/to_string
METHOD builtin_types::positive_integer/to_string
METHOD std_types::real/to_string
METHOD builtin_types::positive_integer/over
METHOD builtin_types::negative_integer/over
METHOD builtin_types::positive_integer/div
METHOD builtin_types::negative_integer/div
METHOD builtin_types::positive_integer/mod
METHOD builtin_types::negative_integer/mod
METHOD builtin_types::positive_integer/hash
METHOD builtin_types::negative_integer/hash
METHOD std_types::real/hash
METHOD builtin_types::positive_integer/ln
METHOD builtin_types::negative_integer/ln
METHOD std_types::real/ln
METHOD builtin_types::positive_integer/exp
METHOD builtin_types::negative_integer/exp
METHOD std_types::real/exp
FUNCTION std::real
FUNCTION std::integer
FUNCTION std::sqrt
FUNCTION std::pow
METHOD builtin_types::positive_integer/exit
FUNCTION NODE *from_int
FUNCTION NODE *from_long
FUNCTION NODE *from_uint
FUNCTION NODE *from_ulong
FUNCTION NODE *from_int8
FUNCTION NODE *from_int16
FUNCTION NODE *from_int32
FUNCTION NODE *from_int64
FUNCTION NODE *from_uint8
FUNCTION NODE *from_uint16
FUNCTION NODE *from_uint32
FUNCTION NODE *from_uint64
METHOD int builtin_types::positive_integer/_to_int
METHOD int builtin_types::negative_integer/_to_int
METHOD int builtin_types::positive_integer/_to_long
METHOD int builtin_types::negative_integer/_to_long
METHOD int builtin_types::positive_integer/_to_uint
METHOD int builtin_types::positive_integer/_to_ulong
METHOD int builtin_types::positive_integer/_to_int8
METHOD int builtin_types::negative_integer/_to_int8
METHOD int builtin_types::positive_integer/_to_int16
METHOD int builtin_types::negative_integer/_to_int16
METHOD int builtin_types::positive_integer/_to_int32
METHOD int builtin_types::negative_integer/_to_int32
METHOD int builtin_types::positive_integer/_to_int64
METHOD int builtin_types::negative_integer/_to_int64
METHOD int builtin_types::positive_integer/_to_uint8
METHOD int builtin_types::positive_integer/_to_uint16
METHOD int builtin_types::positive_integer/_to_uint32
METHOD int builtin_types::positive_integer/_to_uint64
METHOD builtin_types::positive_integer/plus
METHOD builtin_types::negative_integer/plus
METHOD std_types::real/plus
METHOD builtin_types::positive_integer/minus
METHOD builtin_types::negative_integer/minus
METHOD std_types::real/minus
METHOD std_types::real/times
METHOD std_types::real/over
METHOD builtin_types::positive_integer/equal
METHOD builtin_types::negative_integer/equal
METHOD std_types::real/equal
METHOD builtin_types::positive_integer/less
METHOD builtin_types::negative_integer/less
METHOD std_types::real/less
METHOD builtin_types::positive_integer/shift_left
METHOD builtin_types::positive_integer/shift_right
METHOD builtin_types::positive_integer/bit_and
METHOD builtin_types::positive_integer/bit_or
METHOD builtin_types::positive_integer/bit_xor
FUNCTION std::sin
FUNCTION std::cos
FUNCTION std::tan
FUNCTION std::asin
FUNCTION std::acos
FUNCTION std::atan

METHOD builtin_types::negative_integer/over
  #
    implements the *over* operation
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::negative_integer)) {
      if (ARGUMENTS(0)->integer.value % ARGUMENTS(1)->integer.value == 0) {
        RETURN_SINGLE_RESULT(
          CREATE(
            builtin_types::positive_integer,
            ARGUMENTS(0)->integer.value / ARGUMENTS(1)->integer.value))
      } else {
        RETURN_SINGLE_RESULT(
          CREATE(
            std_types::real,
            (double)ARGUMENTS(0)->integer.value /
            ARGUMENTS(1)->integer.value))
      }
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::positive_integer)) {
      if (ARGUMENTS(1)->integer.value == 0) goto invalid_arguments;
      if (ARGUMENTS(0)->integer.value % ARGUMENTS(1)->integer.value == 0) {
        RETURN_SINGLE_RESULT(
          CREATE(
            builtin_types::negative_integer,
            ARGUMENTS(0)->integer.value / ARGUMENTS(1)->integer.value))
      } else {
        RETURN_SINGLE_RESULT(
          CREATE(
            std_types::real,
            -((double)ARGUMENTS(0)->integer.value /
            ARGUMENTS(1)->integer.value)))
      }
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::real)) {
      RETURN_SINGLE_RESULT(
        CREATE(
          std_types::real,
          -(ARGUMENTS(0)->integer.value/ARGUMENTS(1)->real.value)))
    }
    invalid_arguments:
    INVALID_ARGUMENTS
  }

METHOD builtin_types::positive_integer/div
  #
    implements the *div* operation
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::positive_integer)) {
      if (ARGUMENTS(1)->integer.value) {
        RETURN_SINGLE_RESULT(
          CREATE(builtin_types::positive_integer,
            ARGUMENTS(0)->integer.value / ARGUMENTS(1)->integer.value))
      } else DIVIDE_BY_ZERO
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::negative_integer)) {
      RETURN_SINGLE_RESULT(
        CREATE(builtin_types::negative_integer,
          (ARGUMENTS(0)->integer.value+ARGUMENTS(1)->integer.value-1) /
          ARGUMENTS(1)->integer.value))
    }
    INVALID_ARGUMENTS
  }

METHOD builtin_types::negative_integer/div
  #
    implements the *div* operation
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::positive_integer)) {
      if (ARGUMENTS(1)->integer.value) {
        RETURN_SINGLE_RESULT(
          CREATE(builtin_types::negative_integer,
            (ARGUMENTS(0)->integer.value+ARGUMENTS(1)->integer.value-1) /
            ARGUMENTS(1)->integer.value))
      } else DIVIDE_BY_ZERO
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::negative_integer)) {
      RETURN_SINGLE_RESULT(
        CREATE(builtin_types::positive_integer,
          ARGUMENTS(0)->integer.value / ARGUMENTS(1)->integer.value))
    }
    INVALID_ARGUMENTS
  }

METHOD builtin_types::positive_integer/mod
  #
    implements the *mod* operation
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::positive_integer)) {
      if (ARGUMENTS(1)->integer.value) {
        RETURN_SINGLE_RESULT(
          CREATE(
            builtin_types::positive_integer,
            ARGUMENTS(0)->integer.value % ARGUMENTS(1)->integer.value))
      } else DIVIDE_BY_ZERO
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::negative_integer)) {
      long result = ARGUMENTS(0)->integer.value % ARGUMENTS(1)->integer.value;
      RETURN_SINGLE_RESULT(
        CREATE(
          builtin_types::negative_integer,
          result ? ARGUMENTS(1)->integer.value-result : 0))
    }
    INVALID_ARGUMENTS
  }

METHOD builtin_types::negative_integer/mod
  #
    implements the *mod* operation
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::positive_integer)) {
      if (ARGUMENTS(1)->integer.value) {
        long result = ARGUMENTS(0)->integer.value % ARGUMENTS(1)->integer.value;
        RETURN_SINGLE_RESULT(
          CREATE(
            builtin_types::positive_integer,
            result ? ARGUMENTS(1)->integer.value-result : 0))
      } else DIVIDE_BY_ZERO
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::negative_integer)) {
      RETURN_SINGLE_RESULT(
        CREATE(
          builtin_types::negative_integer,
          ARGUMENTS(0)->integer.value % ARGUMENTS(1)->integer.value))
    }
    INVALID_ARGUMENTS
  }

METHOD builtin_types::positive_integer/hash
  #
    returns an integer hash value
  {
    CHECK_ARGUMENTS(1)
    uint32_t hash =
      (uint32_t)ARGUMENTS(0)->integer.value ^ (ARGUMENTS(0)->integer.value >> 32);
    hash *= 179234567;
    hash ^= hash >> 27 | hash << 5;
    //hash *= 257913241;
    //hash ^= hash >> 21 | hash << 11;
    RETURN_SINGLE_RESULT(from_uint32(hash))
  }

METHOD builtin_types::negative_integer/hash
  #
    returns an integer hash value
  {
    CHECK_ARGUMENTS(1)
    uint32_t hash =
      (uint32_t)ARGUMENTS(0)->integer.value ^ (ARGUMENTS(0)->integer.value >> 32);
    hash *= 179234567;
    hash ^= hash >> 27 | hash << 5;
    //hash *= 326987239;
    //hash ^= hash >> 21 | hash << 11;
    RETURN_SINGLE_RESULT(from_uint32(hash))
  }

METHOD std_types::real/hash
  #
    returns an integer hash value
  {
    CHECK_ARGUMENTS(1)
    uint32_t hash =
      (uint32_t)ARGUMENTS(0)->integer.value ^ (ARGUMENTS(0)->integer.value >> 32);
    hash ^= hash >> 23 | hash << 9;
    RETURN_SINGLE_RESULT(from_uint32(hash))
  }

METHOD builtin_types::positive_integer/ln
  #
    computes the logarithm to the base e
  {
    CHECK_ARGUMENTS(1)
    RETURN_SINGLE_RESULT(CREATE(std_types::real, log(ARGUMENTS(0)->integer.value)))
  }

METHOD builtin_types::negative_integer/ln
  #
    computes the logarithm to the base e
  {
    CHECK_ARGUMENTS(1)
    RETURN_SINGLE_RESULT(CREATE(std_types::real, log(-ARGUMENTS(0)->integer.value)))
  }

METHOD std_types::real/ln
  #
    computes the logarithm to the base e
  {
    CHECK_ARGUMENTS(1)
    RETURN_SINGLE_RESULT(CREATE(std_types::real, log(ARGUMENTS(0)->real.value)))
  }

METHOD builtin_types::positive_integer/exp
  #
    computes the exponential function of its argument
  {
    CHECK_ARGUMENTS(1)
    RETURN_SINGLE_RESULT(CREATE(std_types::real, exp(ARGUMENTS(0)->integer.value)))
  }

METHOD builtin_types::negative_integer/exp
  #
    computes the exponential function of its argument
  {
    CHECK_ARGUMENTS(1)
    RETURN_SINGLE_RESULT(CREATE(std_types::real, exp(-ARGUMENTS(0)->integer.value)))
  }

METHOD std_types::real/exp
  #
    computes the exponential function of its argument
  {
    CHECK_ARGUMENTS(1)
    RETURN_SINGLE_RESULT(CREATE(std_types::real, exp(ARGUMENTS(0)->real.value)))
  }

FUNCTION std::real
  #
    constructs a real number from its string representation
  {
    CHECK_ARGUMENTS(1)
    char *str;
    CHECK(to_c_string(ARGUMENTS(0), &str))
    NODE *result = from_double(atof(str));
    deallocate_memory(str);
    RETURN_SINGLE_RESULT(result)
  }

FUNCTION std::integer
  #
    constructs an integer from its string representation
  {
    CHECK_ARGUMENTS(1)
    char *buf;
    CHECK(to_c_string(ARGUMENTS(0), &buf))
    int sign = 1;
    unsigned long value = 0;
    char *str = buf;
    if (*str == '-') {
      sign = -1;
      ++str;
    } else if (*str == '+') {
      ++str;
    }
    if (*str < '0' || *str > '9') {
      invalid_arguments();
      goto cleanup;
    }
    char c;
    next:
    c = *str++;
    if (c < '0' || c > '9') {
      NODE *result;
      if (sign < 0 && value != 0) {
        result = CREATE(builtin_types::negative_integer, value);
      } else {
        result = CREATE(builtin_types::positive_integer, value);
      }
      PREPARE_SINGLE_RESULT(result)
      goto cleanup;
    } else {
      unsigned long old_value = value;
      value <<= 1;
      if (value < old_value) goto overflow;
      unsigned long intermediate_value = value;
      value <<= 1;
      if (value < intermediate_value) goto overflow;
      intermediate_value = value;
      value += old_value;
      if (value < intermediate_value) goto overflow;
      intermediate_value = value;
      value <<= 1;
      if (value < intermediate_value) goto overflow;
      intermediate_value = value;
      value += c-'0';
      if (value < intermediate_value) goto overflow;
      goto next;
    }

    overflow:

    create_error_message(
      module__builtin.constants_base[unique__std___RUNTIME_ERROR-1],
      "std::integer OVERFLOW", 0, 0, NULL);

    cleanup:

    deallocate_memory(buf);
    return;
  }

FUNCTION std::sqrt
  #
    computes the square root of its argument

    This function calls the *sqrt*-function of the C library.

    Parameter:
      value # a real number

    Result:
      result # the computed square root

    Topic: Numbers

    See also: std::exp, std::ln, std::pow

    Example:

      println! sqrt(9)

    Output:

      3

    Example:

      println! sqrt(8)

    Output:

      2.82842712474619
  {
    CHECK_ARGUMENTS(1)
    double arg;
    CHECK(to_double(ARGUMENTS(0), &arg))
    RETURN_SINGLE_RESULT(CREATE(std_types::real, sqrt(arg)))
  }

FUNCTION std::pow
  #
    computes the power of its first argument to the second argument

    This function calls the *pow*-function of the C library.

    Parameter:
      base # a real number
      exponent # a real number

    Result:
      result # the computed power

    Topic: Numbers

    See also: std::exp, std::ln, std::sqrt

    Example:

      println! pow(2 3)

    Output:

      8

    Example:

      println! pow(2 -3)

    Output:

      0.125
  {
    CHECK_ARGUMENTS(2)
    double base;
    CHECK(to_double(ARGUMENTS(0), &base))
    double exponent;
    CHECK(to_double(ARGUMENTS(1), &exponent))
    RETURN_SINGLE_RESULT(CREATE(std_types::real, pow(base, exponent)))
  }

METHOD builtin_types::positive_integer/exit
  #
    terminates the process and returns the specified exit-code

    Parameter:
      exit_code # the exit-code to return

    This function does not return and therefor returns no results.

    This function must be called with I/O-access rights.

    It cleanly shuts down the runtime system and terminates the process.

    Example:

      exit! EXIT_SUCCESS

    Topic: Input-Output

    See also: std::EXIT_SUCCESS, std::EXIT_FAILURE, debug::exit
  {
    CHECK_ARGUMENTS(1)
    CHECK_IO_ACCESS_RIGHTS
    int status;
    CHECK(to_int(ARGUMENTS(0), &status))
    exit(status);
  }

FUNCTION NODE *from_int
  (
    int value
  )
  {
    if (value >= 0)
      return CREATE(builtin_types::positive_integer, value);
    else
      return CREATE(builtin_types::negative_integer, -value);
  }

FUNCTION NODE *from_long
  (
    long value
  )
  {
    if (value >= 0)
      return CREATE(builtin_types::positive_integer, value);
    else
      return CREATE(builtin_types::negative_integer, -value);
  }

FUNCTION NODE *from_uint
  (
    unsigned int value
  )
  {
    return CREATE(builtin_types::positive_integer, value);
  }

FUNCTION NODE *from_ulong
  (
    unsigned long value
  )
  {
    return CREATE(builtin_types::positive_integer, value);
  }

FUNCTION NODE *from_int8
  (
    int8_t value
  )
  {
    if (value >= 0)
      return CREATE(builtin_types::positive_integer, value);
    else
      return CREATE(builtin_types::negative_integer, -value);
  }

FUNCTION NODE *from_int16
  (
    int16_t value
  )
  {
    if (value >= 0)
      return CREATE(builtin_types::positive_integer, value);
    else
      return CREATE(builtin_types::negative_integer, -value);
  }

FUNCTION NODE *from_int32
  (
    int32_t value
  )
  {
    if (value >= 0)
      return CREATE(builtin_types::positive_integer, value);
    else
      return CREATE(builtin_types::negative_integer, -value);
  }

FUNCTION NODE *from_int64
  (
    int64_t value
  )
  {
    if (value >= 0)
      return CREATE(builtin_types::positive_integer, value);
    else
      return CREATE(builtin_types::negative_integer, -value);
  }

FUNCTION NODE *from_uint8
  (
    uint8_t value
  )
  {
    return CREATE(builtin_types::positive_integer, value);
  }

FUNCTION NODE *from_uint16
  (
    uint16_t value
  )
  {
    return CREATE(builtin_types::positive_integer, value);
  }

FUNCTION NODE *from_uint32
  (
    uint32_t value
  )
  {
    return CREATE(builtin_types::positive_integer, value);
  }

FUNCTION NODE *from_uint64
  (
    uint64_t value
  )
  {
    return CREATE(builtin_types::positive_integer, value);
  }

METHOD int builtin_types::positive_integer/_to_int
  (
    NODE *node,
    int *result_p
  )
  {
    if (node->integer.value > INT_MAX) {
      CREATE_RUNTIME_ERROR("Conversion of integer value to \"int\" failed!")
      return false;
    }
    *result_p = node->integer.value;
    return true;
  }

METHOD int builtin_types::negative_integer/_to_int
  (
    NODE *node,
    int *result_p
  )
  {
    if (node->integer.value > -(uint64_t)INT_MIN) {
      CREATE_RUNTIME_ERROR("Conversion of integer value to \"int\" failed!")
      return false;
    }
    *result_p = -node->integer.value;
    return true;
  }

[source]

FUNCTION std::integer
  #
    constructs an integer from its string representation
  {
    CHECK_ARGUMENTS(1)
    char *buf;
    CHECK(to_c_string(ARGUMENTS(0), &buf))
    int sign = 1;
    unsigned long value = 0;
    char *str = buf;
    if (*str == '-') {
      sign = -1;
      ++str;
    } else if (*str == '+') {
      ++str;
    }
    if (*str < '0' || *str > '9') {
      invalid_arguments();
      goto cleanup;
    }
    char c;
    next:
    c = *str++;
    if (c < '0' || c > '9') {
      NODE *result;
      if (sign < 0 && value != 0) {
        result = CREATE(builtin_types::negative_integer, value);
      } else {
        result = CREATE(builtin_types::positive_integer, value);
      }
      PREPARE_SINGLE_RESULT(result)
      goto cleanup;
    } else {
      unsigned long old_value = value;
      value <<= 1;
      if (value < old_value) goto overflow;
      unsigned long intermediate_value = value;
      value <<= 1;
      if (value < intermediate_value) goto overflow;
      intermediate_value = value;
      value += old_value;
      if (value < intermediate_value) goto overflow;
      intermediate_value = value;
      value <<= 1;
      if (value < intermediate_value) goto overflow;
      intermediate_value = value;
      value += c-'0';
      if (value < intermediate_value) goto overflow;
      goto next;
    }

    overflow:

    create_error_message(
      module__builtin.constants_base[unique__std___RUNTIME_ERROR-1],
      "std::integer OVERFLOW", 0, 0, NULL);

    cleanup:

    deallocate_memory(buf);
    return;
  }

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Numbers

# std::integer (a builtin function)

