[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std::clear_colour_of ()

[documentation remark]

# std::clear_colour_of (a polymorphic function)

  the clear colour to use

  Parameter:
    self: the object from which to get the clear colour

  Result:
    colour: the clear colour

  Returns the clear colour of the object.

  Topic: Terminal

  See also: std::draw_colour_of, std::set_clear_colour

[source]

$std_types::screen/clear:
  (
    self
    x = 1
    y = 1
    width = undefined
    height = undefined
  )
  update_if width.is_undefined &width -> width_of(self)-x+1
  update_if height.is_undefined &height -> height_of(self)-y+1
  std_private::clear self self x y width height

$std::clear ()

[documentation remark]

# std::clear (a polymorphic function)

  clears a rectangular area

  Parameters:
    screen # some kind of screen
    x: x-coordinate of the upper left corner
    y: y-coordinate of the upper left corner
    width: width of the area
    height: height of the area

  Result:
    screen: the updated screen

  The area is cleared using the current clear colour. Use
  <std::set_clear_colour> to change the current clear colour.

  The area is clipped at the screen's borders.

  Topic: Terminal

  See also: std_types::screen/std::clear, std::draw_text,
            std::set_clear_colour

  Example:

    $my_screen create_screen(terminal 40 25)
    set_clear_colour &my_screen GREEN
    clear &my_screen 11 6 20 15

[EXERCISE]

#
  Topic: Terminal

  The terminal library offers an interface for using text-terminals in a
  comfortable way.

  The base data type is the <std_types::screen>, a rectangular array of
  characters and associated draw and clear colors.

  All coordinates are one-based.

  Each colour supports 256 shades of red, green and blue.

  To update the state of a <std_types::screen> or <std_types::terminal) no
  I/O-acccess rights are necessary.

  There are methods to set draw and clear colors, to draw text, lines
  or more complex shapes, to clear the screen or parts of it, to scroll the
  screen or copy arbitrary rectangular areas between screens ("blitting").

  Horizontal and vertical lines are drawn using the appropriate unicode graphics
  characters.

  Screens and terminals also support Unicode Emojis.

  The terminal library is somewhat similar to the curses library. It tries to
  update the contents of a terminal in a smart way.

  To start using the functions of this library one must first create a
  <std_types::terminal> object (see <std::create_terminal>) supplying the
  terminal's width and height. The current terminal size can be retrieved via
  the I/O-function <std::get_terminal_size>.

  As an alternative one can use the high-level function
  <std::initialize_terminal>. When using this function one gets automatic
  cleanup "for free".

  <std_types::terminal> objects are an in-memory representation of the
  terminal's contents. To update the terminal's contents one must call the
  method <std_types::terminal/std::update> to create a character string
  representing the changes to the terminal's contents and then write this
  string to the terminal.

  Related topics: Input-Output, Colours

  Example:

    <require basic/stdlib>
    <require terminal/terminal>

    get_terminal_size! STDIN_FILENO $width $height
    create_terminal $terminal width height
    draw_text &terminal 10 5 "Hello, world!"
    update_terminal &terminal $output # create output character stream
    print! output # print the generated character stream

  Example:

    <require basic/stdlib>
    <require terminal/terminal>

    initialize_terminal!: (terminal)
      draw_text &terminal 10 5 "Hello, world!"
      update_terminal &terminal $output # create output character stream
      print! output # print the generated character stream

#
  Topic: Colours

  The <@Terminal> library uses <std_types::character>s for text and background
  colours.

  Related topics: Terminal

[symbols]


# Methods

$std::resize ()
$std::set_cursor ()
$std::set_character_at ()
$std::get_character_at ()
$std::set_draw_colour_at ()
$std::get_draw_colour_at ()
$std::set_clear_colour_at ()
$std::get_clear_colour_at ()
$std::draw_character ()
$std::draw_line ()
$std::draw_rectangle ()
$std::plot ()
$std::plot_line ()
$std::fill_trapezoid ()
$std::copy ()
$std::scroll_left ()
$std::scroll_right ()
$std::scroll_up ()
$std::scroll_down ()
$std::create_text_screen ()
$std::cursor_x_of (!)
$std::cursor_y_of (!)

# Attributes

$std_types::screen std_types::generic_terminal
$std::is_a_screen ()
$std_types::screen.is_a_screen true
$std_types::object.is_a_screen false

# Screen types

$std::TEXT .
$std::VISIBLE_CURSOR .
$std_types::screen.type_of TEXT
$std_types::screen.plot_y_resolution_of 0.5
$std_types::screen.serialization_tag_of "screen"
$std_types::screen.serialization_fields_of
$std_types::terminal std_types::screen
$std_types::terminal.name_of "terminal"
$std_types::terminal.serialization_tag_of "terminal"
$std_types::terminal.serialization_fields_of
$std::create_screen ()
$std_types::screen/create_screen:
$std_types::screen/resize:
$std::character_at:
$std::draw_colour_at:
$std::clear_colour_at:
$std_types::screen/scroll_up:
$std_types::screen/scroll_down:
$std_types::screen/scroll_left:
$std_types::screen/scroll_right:
$std_types::screen/clear:
$std_types::screen/std_private::clear:
$std::move ()
$std_types::screen/move:
$std_types::screen/copy:
$std::FILE_DESCRIPTOR .
$std::RECEIVE_CTRL_C_AND_CTRL_Z .
$std::RECEIVE_CTRL_Q_AND_CTRL_S .
$std::MAP_CR .
$std::RECEIVE_SIGWINCH .
$std::RECEIVE_MOUSE_CLICKS .
$std::CURSOR_OFF .
$std::TITLE .
$terminal_private::backspace_character '@del;'
$std::initialize_terminal ()
$std_types::object/initialize_terminal:
$std_types::io/initialize_terminal:
$std_types::terminal.original_attributes_of undefined
$std_types::terminal.fd_of undefined
$std_types::terminal.do_switch_cursor_on_of undefined
$std_types::terminal.do_cancel_mouse_clicks_of undefined
$std_types::terminal/finalize:
$std_types::terminal/update update_terminal
$std::update_terminal:
$std_types::screen/plot:
$std_types::screen/plot_line:
$std_types::screen/fill_trapezoid:
$std_types::screen/set_draw_colour:
$std_types::screen/set_clear_colour:
$std_types::screen/set_cursor:
$std_types::screen/set_character_at:
$std_types::view/set_character_at:
$std_types::screen/get_character_at:
$std_types::view/get_character_at:
$std_types::screen/set_draw_colour_at:
$std_types::view/set_draw_colour_at:
$std_types::screen/get_draw_colour_at:
$std_types::view/get_draw_colour_at:
$std_types::screen/set_clear_colour_at:
$std_types::view/set_clear_colour_at:
$std_types::screen/get_clear_colour_at:
$std_types::view/get_clear_colour_at:
$std_types::screen/draw_character:
$std_types::screen/draw_text:
$std_types::screen/std_private::draw_text:
$std_types::screen/draw_attributed_text:
$std_types::screen/std_private::draw_attributed_text:
$std_types::screen/draw_line:
$std_types::screen/draw_rectangle:
$std::create_terminal:
$std_types::terminal/resize:
$std::cursor_off:
$std::cursor_on:
$std::cursor_home:
$std::clear_screen:
$std::rows_and_columns:
$std::add_attributes:
$std_types::screen/create_text_screen:
$std_types::screen/append:
$std_types::screen/adjoin:
$std_types::screen/pad_left:
$std_types::screen/pad_right:
$std_types::screen/truncate:
$std_types::screen/range:

#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

<namespace terminal_private>

<require ./keys>

<require ./events>

#
  Topic: Terminal

  The terminal library offers an interface for using text-terminals in a
  comfortable way.

  The base data type is the <std_types::screen>, a rectangular array of
  characters and associated draw and clear colors.

  All coordinates are one-based.

  Each colour supports 256 shades of red, green and blue.

  To update the state of a <std_types::screen> or <std_types::terminal) no
  I/O-acccess rights are necessary.

  There are methods to set draw and clear colors, to draw text, lines
  or more complex shapes, to clear the screen or parts of it, to scroll the
  screen or copy arbitrary rectangular areas between screens ("blitting").

  Horizontal and vertical lines are drawn using the appropriate unicode graphics
  characters.

  Screens and terminals also support Unicode Emojis.

  The terminal library is somewhat similar to the curses library. It tries to
  update the contents of a terminal in a smart way.

  To start using the functions of this library one must first create a
  <std_types::terminal> object (see <std::create_terminal>) supplying the
  terminal's width and height. The current terminal size can be retrieved via
  the I/O-function <std::get_terminal_size>.

  As an alternative one can use the high-level function
  <std::initialize_terminal>. When using this function one gets automatic
  cleanup "for free".

  <std_types::terminal> objects are an in-memory representation of the
  terminal's contents. To update the terminal's contents one must call the
  method <std_types::terminal/std::update> to create a character string
  representing the changes to the terminal's contents and then write this
  string to the terminal.

  Related topics: Input-Output, Colours

  Example:

    <require basic/stdlib>
    <require terminal/terminal>

    get_terminal_size! STDIN_FILENO $width $height
    create_terminal $terminal width height
    draw_text &terminal 10 5 "Hello, world!"
    update_terminal &terminal $output # create output character stream
    print! output # print the generated character stream

  Example:

    <require basic/stdlib>
    <require terminal/terminal>

    initialize_terminal!: (terminal)
      draw_text &terminal 10 5 "Hello, world!"
      update_terminal &terminal $output # create output character stream
      print! output # print the generated character stream

#
  Topic: Colours

  The <@Terminal> library uses <std_types::character>s for text and background
  colours.

  Related topics: Terminal

# Methods

$std::resize ()

$std::set_cursor ()

$std::set_character_at ()

$std::get_character_at ()

$std::set_draw_colour_at ()

$std::get_draw_colour_at ()

$std::set_clear_colour_at ()

$std::get_clear_colour_at ()

$std::draw_character ()

$std::draw_line ()

$std::draw_rectangle ()

$std::plot ()

$std::plot_line ()

$std::fill_trapezoid ()

$std::copy ()

$std::scroll_left ()

$std::scroll_right ()

$std::scroll_up ()

$std::scroll_down ()

$std::create_text_screen ()

$std::cursor_x_of (!)

$std::cursor_y_of (!)

# Attributes

$rows_of (!)

$has_a_visible_cursor (!)

$current_buffer_of (!)

$INVALID_COLOUR '@0xffffffff;'

$std_types::screen std_types::generic_terminal

$std::is_a_screen ()

$std_types::screen.is_a_screen true

$std_types::object.is_a_screen false

# Screen types

$std::TEXT .

$std::VISIBLE_CURSOR .

$std_types::screen.type_of TEXT

$std_types::screen.plot_y_resolution_of 0.5

$std_types::screen.serialization_tag_of "screen"

$std_types::screen.serialization_fields_of
  list
    `rows_of
    `cursor_x_of
    `cursor_y_of
    `std::width_of
    `std::height_of
    `draw_colour_of
    `clear_colour_of

$std_types::terminal std_types::screen

$std_types::terminal.name_of "terminal"

$std_types::terminal.serialization_tag_of "terminal"

$std_types::terminal.serialization_fields_of
  list
    `rows_of
    `cursor_x_of
    `cursor_y_of
    `std::width_of
    `std::height_of
    `draw_colour_of
    `clear_colour_of
    `has_a_visible_cursor
    `current_buffer_of

$std::create_screen ()

$std_types::screen/create_screen:
  (
    screen
    width = undefined
    height = undefined
    options*
  )
  update_if width.is_undefined &width -> width_of(screen)
  update_if height.is_undefined &height -> height_of(screen)
  extract_options options
    DRAW_COLOUR = draw_colour_of(screen) $draw_colour
    CLEAR_COLOUR = clear_colour_of(screen) $clear_colour
  $row dup(string(' ' draw_colour clear_colour) width)
  $rows dup(list(row) height)
  ->
    std_types::screen
      .width_of width
      .height_of height
      .draw_colour_of draw_colour
      .clear_colour_of clear_colour
      .rows_of rows

$create_buffer:
  (
    width
    height
    options*
  )
  extract_options options
    DRAW_COLOUR = BLACK $draw_colour
    CLEAR_COLOUR = WHITE $clear_colour
  $row dup(string(' ' draw_colour clear_colour) width)
  $rows dup(list(row) height)
  ->
    std_types::screen
      .cursor_x_of 1
      .cursor_y_of 1
      .width_of width
      .height_of height
      .draw_colour_of draw_colour
      .clear_colour_of clear_colour
      .rows_of rows

$std_types::screen/resize:
  (
    screen
    new_width
    new_height
  )
  resize_rows &screen
    new_width new_height
    draw_colour_of(screen) clear_colour_of(screen)
  -> screen

$resize_rows: (screen new_width new_height draw_colour clear_colour)
  $width width_of(screen)
  $height height_of(screen)
  $rows rows_of(screen)
  update_if new_height < height &rows -> range(rows 1 new_height)
  update_if new_width != width &rows:
    if
      new_width < width: map rows: (row) range row 1 3*new_width
      :
        $empty dup(string(' ' draw_colour clear_colour) new_width-width)
        map rows: (row) append row empty
  update_if new_height > height &rows:
    $empty dup(string(' ' draw_colour clear_colour) new_width)
    append rows dup(list(empty) new_height-height)
  ->
    screen
      .width_of new_width
      .height_of new_height
      .rows_of rows

$std::character_at:
  (
    screen
    x
    y
  )
  -> rows_of(screen)(y)(3*x-2)

$std::draw_colour_at:
  (
    screen
    x
    y
  )
  -> rows_of(screen)(y)(3*x-1)

$std::clear_colour_at:
  (
    screen
    x
    y
  )
  -> rows_of(screen)(y)(3*x)

$std_types::screen/scroll_up:
  (
    screen
    delta = 1
  )
  min &delta height_of(screen)
  $empty_line
    dup
      string
        ' '
        draw_colour_of(screen)
        clear_colour_of(screen)
      width_of(screen)
  $empty_lines dup(list(empty_line) delta)
  ->
    screen
      .rows_of
        append
          range(rows_of(screen) delta+1 -1)
          empty_lines

$std_types::screen/scroll_down:
  (
    screen
    delta = 1
  )
  min &delta height_of(screen)
  $empty_line
    dup
      string
        ' '
        draw_colour_of(screen)
        clear_colour_of(screen)
      width_of(screen)
  $empty_lines dup(list(empty_line) delta)
  ->
    screen
      .rows_of
        append
          empty_lines
          range(rows_of(screen) 1 -(delta+1))

$std_types::screen/scroll_left:
  (
    screen
    delta = 1
  )
  $pad
    dup
      string
        ' '
        draw_colour_of(screen)
        clear_colour_of(screen)
      delta
  map &screen.rows_of: (row) append range(row 3*delta+1 -1) pad
  -> screen

$std_types::screen/scroll_right:
  (
    screen
    delta = 1
  )
  $pad
    dup
      string
        ' '
        draw_colour_of(screen)
        clear_colour_of(screen)
      delta
  map &screen.rows_of: (row) append pad range(row 1 -(3*delta+1))
  -> screen

$std_types::screen/clear:
  (
    self
    x = 1
    y = 1
    width = undefined
    height = undefined
  )
  update_if width.is_undefined &width -> width_of(self)-x+1
  update_if height.is_undefined &height -> height_of(self)-y+1
  std_private::clear self self x y width height

[source]

$std_types::screen/plot_line:
  #
    draws a line from a point to another point

    Example:

      <require basic/stdlib>
      <require terminal/terminal>

      initialize_terminal! CURSOR_OFF: (terminal)
        draw_text &terminal 1 1 "12345678901"
        from_to 2 9
          : (y)
            draw_text &terminal 1 y y "__________"
            next!
          :
            plot_line &terminal 3 3 11 9
            update_terminal &terminal $output # create output character stream
            print! output # print the generated character stream
            get_key! $_key
            pass

    Output:

      12345678901
      2__________
      3_▀▄_______
      4__▀▄______
      5____█_____
      6_____▀▄___
      7______▀▄__
      8________█_
      9_________▀
  (
    screen
    x1
    y1
    x2
    y2
  )
  !y1 (2*(y1-1)).to_integer+1
  !y2 (2*(y2-1)).to_integer+1
  std_private::abs_x screen &x1
  std_private::abs_y screen &y1
  std_private::abs_x screen &x2
  std_private::abs_y screen &y2
  $dx x2-x1
  $dy y2-y1
  if
    abs(dx) >= abs(dy):
      $iter bresenham(abs(dx)+1 y1 y2)
      if
        x2 >= x1:
          from_to x1 x2
            : (x)
              next_value &iter $y
              plot &screen x y
              next
            -> screen
        :
          from_to_by x1 x2 -1
            : (x)
              next_value &iter $y
              plot &screen x y
              next
            -> screen
    :
      $iter bresenham(abs(dy)+1 x1 x2)
      if
        y2 >= y1:
          from_to y1 y2
            : (y)
              next_value &iter $x
              plot &screen x y
              next
            -> screen
        :
          from_to_by y1 y2 -1
            : (y)
              next_value &iter $x
              plot &screen x y
              next
            -> screen

$std_types::web_terminal/plot_line: (self x1 y1 x2 y2)
  append &self.script_of "
    plot_line(@(x1),@(y1),@(x2),@(y2))
  -> self

$std::plot_line ()

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Do not create completely new examples on your own

### Use only one of the following topics: Terminal, Colours

# std::plot_line (a polymorphic function)

