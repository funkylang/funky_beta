[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std::clear_colour_of ()

[documentation remark]

# std::clear_colour_of (a polymorphic function)

  the clear colour to use

  Parameter:
    self: the object from which to get the clear colour

  Result:
    colour: the clear colour

  Returns the clear colour of the object.

  Topic: Terminal

  See also: std::draw_colour_of, std::set_clear_colour

[source]

$std_types::screen/clear:
  (
    self
    x = 1
    y = 1
    width = undefined
    height = undefined
  )
  update_if width.is_undefined &width -> width_of(self)-x+1
  update_if height.is_undefined &height -> height_of(self)-y+1
  std_private::clear self self x y width height

$std::clear ()

[documentation remark]

# std::clear (a polymorphic function)

  clears a rectangular area

  Parameters:
    screen # some kind of screen
    x: x-coordinate of the upper left corner
    y: y-coordinate of the upper left corner
    width: width of the area
    height: height of the area

  Result:
    screen: the updated screen

  The area is cleared using the current clear colour. Use
  <std::set_clear_colour> to change the current clear colour.

  The area is clipped at the screen's borders.

  Topic: Terminal

  See also: std_types::screen/std::clear, std::draw_text,
            std::set_clear_colour

  Example:

    $my_screen create_screen(terminal 40 25)
    set_clear_colour &my_screen GREEN
    clear &my_screen 11 6 20 15

[EXERCISE]

#
  Topic: Grammar Objects

  Grammar objects support methods for matching and searching.

[symbols]

$std::match ()
$std::match_back ()
$std::search ()
$std_types::FUNKY_IDENTIFIER std_types::object
$std::FUNKY_IDENTIFIER std_types::FUNKY_IDENTIFIER
$std_types::FUNKY_IDENTIFIER/match:
$std_types::FUNKY_IDENTIFIER/match_back:
$std_types::FUNKY_IDENTIFIER/search:
$std_types::WHITESPACE std_types::object
$std::WHITESPACE std_types::WHITESPACE
$std_types::WHITESPACE/match:
$std_types::WHITESPACE/match_back:
$std_types::WHITESPACE/search:
$std_types::many std_types::object # "many" means "one or more"
$std::many:
$std_types::many/match:
$std_types::many/match_back:
$std_types::many/search:
$std_types::some std_types::object # "some" means "zero or more"
$std::some:
$std_types::some/match:
$std_types::optional std_types::object
$std::optional:
$std_types::optional/match:
$std_types::anything std_types::object
$std::ANYTHING std_types::anything
$std_types::anything/match:
$std_types::anything/match_back:
$std_types::anything/search:
$std_types::any_character_but std_types::object
$std::any_character_but:
$std_types::any_character_but/match:
$std_types::capture std_types::object
$std::capture: (expr)
$std_types::capture/match:
$std::DIGIT '0'..'9'
$std::LETTER 'a'..'z', 'A'..'Z'
$std::alt std::hash_set

#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
  Topic: Grammar Objects

  Grammar objects support methods for matching and searching.

$std::match ()

$std::match_back ()

$std::search ()

$std_types::FUNKY_IDENTIFIER std_types::object

$std::FUNKY_IDENTIFIER std_types::FUNKY_IDENTIFIER

$std_types::FUNKY_IDENTIFIER/match:
  (
    _self
    str
  )
  $rc result_count()
  $i 1
  $n length_of(str)

  if
    n == 0
    fail
    :
      case str(1)
        'a' .. 'z', 'A' .. 'Z' within_word
        fail

  $within_word:
    inc &i
    if
      i > n:
        if
          rc == 1
          -> n
          -> n range(str 1 n)
      :
        case str(i)
          'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
          '_' word_start
          :
            if
              rc == 1
              -> i-1
              -> i-1 range(str 1 i-1)

  $word_start:
    inc &i
    if
      i > n:
        if
          rc == 1
          -> n
          -> n range(str 1 n)
      :
        case str(i)
          'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
          fail

  $fail:
    if
      rc == 1
      -> undefined
      -> undefined undefined

$std_types::FUNKY_IDENTIFIER/match_back:
  (
    _self
    str
  )
  $n length_of(str)
  $i n+1
  word_end

  $word_end:
    dec &i
    if
      i < 1
      -> undefined
      :
        case str(i)
          'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
          -> undefined

  $within_word:
    dec &i
    if
      i < 1
      check_start
      :
        case str(i)
          'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
          '_' word_end
          check_start

  $check_start:
    if
      str(i+1) >= '0' && str(i+1) <= '9'
      -> undefined
      -> n-i

$std_types::FUNKY_IDENTIFIER/search:
  (
    _self
    str
    nth = 1
  )
  $n length_of(str)
  if
    nth < 0
    search_backwards
    search_forwards

  $search_forwards:
    $i 0
    $s undefined
    search_for_word_start

    $search_for_word_start:
      inc &i
      if
        i > n
        -> undefined undefined
        :
          case str(i)
            'a' .. 'z', 'A' .. 'Z':
              if
                i == 1:
                  !s 1
                  within_word
                :
                  case str(i-1)
                    'a' .. 'z', 'A' .. 'Z', '0' .. '9', '_'
                    search_for_word_start
                    :
                      !s i
                      within_word
            search_for_word_start

    $within_word:
      inc &i
      if
        i > n:
          if
            nth > 1
            -> undefined undefined
            -> s i-s
        :
          case str(i)
            'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
            '_' word_start
            :
              if
                nth > 1:
                  dec &nth
                  search_for_word_start
                -> s i-s

    $word_start:
      inc &i
      if
        i > n
        -> undefined undefined
        :
          case str(i)
            'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
            search_for_word_start

  $search_backwards:
    $i n+1
    $e undefined
    search_for_word_end

    $search_for_word_end:
      dec &i
      if
        i < 1
        -> undefined undefined
        :
          case str(i)
            'a' .. 'z', 'A' .. 'Z', '0' .. '9':
              !e i
              within_word
            search_for_word_end

    $within_word:
      dec &i
      if
        i < 1:
          check_start -> undefined undefined
        :
          case str(i)
            'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
            '_' word_end
            :
              check_start search_for_word_end

    $word_end:
      dec &i
      if
        i < 1
        -> undefined undefined
        :
          case str(i)
            'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
            search_for_word_end

    $check_start: (continuation)
      $chr str(i+1)
      if
        chr >= '0' && chr <= '9'
        continuation
        :
          inc &nth
          if
            nth == 0
            -> i+1 e-i
            continuation

$std_types::WHITESPACE std_types::object

$std::WHITESPACE std_types::WHITESPACE

$std_types::WHITESPACE/match:
  #
    Example:

      $str "@ht;  This is a text."
      match WHITESPACE str $len
      dump! `len

    Output:

      len: 3

    Example:

      $str "This is a text."
      match WHITESPACE str $len
      dump! `len

    Output:

      len: <undefined>
  (
    _self
    str
  )
  $i 0
  $n length_of(str)
  if
    n == 0
    -> undefined
    :
      loop:
        inc &i
        if
          i > n
          -> n
          :
            if
              str(i).is_a_whitespace_character
              next
              :
                if
                  i > 1
                  -> i-1
                  -> undefined

$std_types::WHITESPACE/match_back:
  (
    _self
    str
  )
  $n length_of(str)
  if
    n == 0
    -> undefined
    :
      $i n+1
      loop:
        dec &i
        if
          i < 1
          -> n
          :
            if
              str(i).is_a_whitespace_character
              next
              :
                if
                  i < n
                  -> n-i
                  -> undefined

[source]

$std_types::FUNKY_IDENTIFIER/match:
  (
    _self
    str
  )
  $rc result_count()
  $i 1
  $n length_of(str)

  if
    n == 0
    fail
    :
      case str(1)
        'a' .. 'z', 'A' .. 'Z' within_word
        fail

  $within_word:
    inc &i
    if
      i > n:
        if
          rc == 1
          -> n
          -> n range(str 1 n)
      :
        case str(i)
          'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
          '_' word_start
          :
            if
              rc == 1
              -> i-1
              -> i-1 range(str 1 i-1)

  $word_start:
    inc &i
    if
      i > n:
        if
          rc == 1
          -> n
          -> n range(str 1 n)
      :
        case str(i)
          'a' .. 'z', 'A' .. 'Z', '0' .. '9' within_word
          fail

  $fail:
    if
      rc == 1
      -> undefined
      -> undefined undefined

$std_types::WHITESPACE/match:
  #
    Example:

      $str "@ht;  This is a text."
      match WHITESPACE str $len
      dump! `len

    Output:

      len: 3

    Example:

      $str "This is a text."
      match WHITESPACE str $len
      dump! `len

    Output:

      len: <undefined>
  (
    _self
    str
  )
  $i 0
  $n length_of(str)
  if
    n == 0
    -> undefined
    :
      loop:
        inc &i
        if
          i > n
          -> n
          :
            if
              str(i).is_a_whitespace_character
              next
              :
                if
                  i > 1
                  -> i-1
                  -> undefined

$std_types::many/match:
  #
    Example:

      $str "12345abcdef"
      match many(DIGIT) str $len
      dump! `len

    Output:

      len: 5
  (
    self
    str
  )
  $rc result_count()
  $expr expression_of(self)
  if
    rc == 1:
      match $i expr str
      if
        i.is_undefined
        -> undefined
        :
          if
            i == 0
            -> 0
            :
              !i i+1
              $n length_of(str)
              loop:
                if
                  i > n
                  -> n
                  :
                    match $len expr range(str i n)
                    if
                      len.is_undefined || len == 0
                      -> i-1
                      :
                        plus &i len
                        next
    :
      $captured_items empty_list
      match $i expr str $captured_item
      if
        i.is_undefined
        -> undefined undefined
        :
          if
            i == 0
            -> 0 undefined
            :
              update_if captured_item.is_defined &captured_items
                -> list(captured_item)
              !i i+1
              $n length_of(str)
              loop:
                if
                  i > n
                  -> n captured_items
                  :
                    match $len expr range(str i n) !captured_item
                    if
                      len.is_undefined || len == 0
                      -> i-1 captured_items
                      :
                        plus &i len
                        if
                          captured_item.is_defined:
                            push &captured_items captured_item
                            next
                          next

$std_types::some/match:
  #
    checks whether the specified string starts with zero or more occurrences
    of the specified expression

    Result:
      len # the number of matched characters or <undefined> if the match is
            unsuccessful

    Topic: Grammar Objects, Strings

    See also: std_types::some, std_types::some/std::match_back,
              std_types::some/std::search

    Example:

      $str "abcdef"
      match some(DIGIT) str $len
      dump! `len

    Output:

      len: 0
  (
    self
    str
  )
  $rc result_count()
  $expr expression_of(self)
  if
    rc == 1:
      match $i expr str
      if
        i.is_undefined || i == 0
        -> 0
        :
          !i i+1
          $n length_of(str)
          loop:
            if
              i > n
              -> n
              :
                match $len expr range(str i n)
                if
                  len.is_undefined || len == 0
                  -> i-1
                  :
                    plus &i len
                    next
    :
      $captured_items empty_list
      match $i expr str $captured_item
      if
        i.is_undefined || i == 0
        -> 0 undefined
        :
          update_if captured_item.is_defined &captured_items
            -> list(captured_item)
          !i i+1
          $n length_of(str)
          loop:
            if
              i > n
              -> n captured_items
              :
                match $len expr range(str i n) !captured_item
                if
                  len.is_undefined || len == 0
                  -> i-1 captured_items
                  :
                    plus &i len
                    if
                      captured_item.is_defined:
                        push &captured_items captured_item
                        next
                      next

$std_types::optional/match:
  (
    self
    str
  )
  $rc result_count()
  $expr expression_of(self)
  if
    rc == 1:
      match $i expr str
      if
        i.is_undefined
        -> 0
        -> i
    :
      match $i expr str $captured_item
      if
        i.is_undefined
        -> 0 undefined
        -> i captured_item

$std_types::anything/match:
  (
    _self
    str
  )
  -> length_of(str)

$std_types::any_character_but/match:
  (
    self
    str
  )
  $expr expression_of(self)
  match $i expr str
  if
    i.is_undefined
    -> 1
    -> undefined

$std_types::capture/match:
  (
    self
    str
  )
  $rc result_count()
  $expr expression_of(self)
  match expr str $len
  if
    rc == 1
    -> len
    :
      if
        len.is_undefined
        -> len undefined
        -> len range(str 1 len)

$std_types::character/match:
  #
    matches the start of a string with the character

    Result:
      len # 1 if the character is the first character of the string

    If the match is unsuccessful, then *len* is <undefined>.

    Topic: Strings

    See also: match_back, search

    Example:

      $str "abcdef"
      $len match('a' str)
      dump! `len

    Output:

      len: 1

    Example:

      $str "abcdef"
      $len match('z' str)
      dump! `len

    Output:

      len: <undefined>
  (
    self # the character to match with
    str # the string which's start is matched
  )
  $rc result_count()
  if
    str.is_empty
    fail
    :
      if
        str(1) == self:
          if
            rc == 1
            -> 1
            -> 1 undefined
        fail

  $fail:
    if
      rc == 1
      -> undefined
      -> undefined undefined

$std_types::string/match:
  #
    matches the start of the stream with the string

    Result: the number of matched characters or <undefined> if the match fails

    Attempts to match the start of the stream with the specified string.

    If the match is successful the length of the string is returned.

    Otherwise <undefined> is returned.

    Topic: Strings

    See also: std_types::string/search
  (
    self # the string to match
    stream # the stream to match against
  )
  $rc result_count()
  $len length_of(self)
  if
    length_of(stream) >= len:
      if
        range(stream 1 len) == self:
          if
            rc == 1
            -> len
            -> len undefined
        fail
    fail

  $fail:
    if
      rc == 1
      -> undefined
      -> undefined undefined

$std_types::set/match:
  #
    matches the start of a string with the set's characters

    Result:
      len # 1 if any character in the set matches the start of the string

    If the match is unsuccessful, then *len* is <undefined>.

    Use the <alt>-function to construct a set of characters.

    Topic: Strings

    See also: alt, match_back, search

    Example:

      $str "[abc]"
      $len match(alt('(' '[' '{') str)
      dump! `len

    Output:

      len: 1

    Example:

      $str "abc"
      $len match(alt('(' ']' '}') str)
      dump! `len

    Output:

      len: <undefined>
  (
    self # a set of characters
    str # the string which's start is matched
  )
  $rc result_count
  if
    str.is_empty
    fail
    :
      if
        self(str(1)):
          if
            rc == 1
            -> 1
            -> 1 undefined
        fail

  $fail:
    if
      rc == 1
      -> undefined
      -> undefined undefined

$std_types::sequence/match:
  #
    checks whether the specified string starts with the specified sequence
    of expressions

    Result:
      len # the number of matched characters or <undefined> if the match is
            unsuccessful

    Topic: Grammar Objects, Strings

    See also: std_types::sequence, std_types::sequence/match_back,
              std_types::sequence/search

    Example:

      $str "123abc---"
      match many(DIGIT), many(CHARACTER) str $len
      dump! `len

    Output:

      len: 6
  (
    self
    str
  )
  $rc result_count()
  $pos 1
  if
    rc == 1:
      for_each self
        : (item)
          match item range(str pos -1) $len
          if
            len.is_undefined
            -> undefined
            :
              plus &pos len
              next
        -> pos-1
    :
      $captured_items empty_list
      for_each self
        : (item)
          match item range(str pos -1) $len $captured_item
          if
            len.is_undefined
            -> undefined undefined
            :
              plus &pos len
              if
                captured_item.is_defined:
                  push &captured_items captured_item
                  next
                next
        -> pos-1 captured_items

$std_types::value_range/match:
  #
    Example:

      $range 'a'..'z'
      match range "@" $len
      dump! `len

    Output:

      len: <undefined>

    Example:

      $range 'a'..'z'
      match range "xyz" $len
      dump! `len

    Output:

      len: 1
  (
    expr
    str
  )
  $rc result_count()
  if
    str.is_empty
    fail
    :
      $chr str(1)
      if
        chr >= lower_bound_of(expr) && chr <= upper_bound_of(expr):
          if
            rc == 1
            -> 1
            -> 1 undefined
        fail

  $fail:
    if
      rc == 1
      -> undefined
      -> undefined undefined

$std::match ()

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Do not create completely new examples on your own

### Use only one of the following topics: Grammar Objects

# std::match (a polymorphic function)

