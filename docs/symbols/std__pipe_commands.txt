# std::pipe_commands (an I/O-function)

  executes a sequence of commands in a pipeline

  Parameters:
    feed_or_fd: the input to the first command (a string or file descriptor)
    commands: a list of commands

  Results:
    ret: a list of exit codes (one from each command)
    out: the standard output from the last command in the pipeline
    err: a list of error outputs (one from each command)

  **Attention**: This function must be called with I/O-access rights!

  The function executes a sequence of commands. The output of each command is
  connected to the input of the next command. The output of the last command
  is returned as the first result.

  If <feed_or_fd> is a string, it is used as the input to the first command.

  If <feed_or_fd> is a file descriptor, it is used to "feed" the first command.

  Each of the <commands> is a tuple consisting of a command and a list of arguments.

  Topic: Input-Output

  See also: std::pipe, std::call, std::execute, std::system,
	   std::extern

  Example:

    load! $buf "compiler/funky.fky"

    pipe_commands! $ret $out $err
      buf
      list(tuple("grep" list("^\$f")))

    if
      any_of(ret: (value) -> value != 0):
	eprint! reduce(err).from_utf8
      :
	print! out.from_utf8

  Example:

    open! $fd "compiler/funky.fky" "r"

    pipe_commands! $ret $out $err
      fd
      list(tuple("grep" list("^\$f")))

    if
      any_of(ret: (value) -> value != 0):
	eprint! reduce(err).from_utf8
      :
	print! out.from_utf8

((defined in basic/io/io.fky))
((generated manually))
((2025-05-07 17:29:58))
