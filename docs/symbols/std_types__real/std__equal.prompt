[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

METHOD std_types::positive_integer/plus
{
  CHECK_ARGUMENTS(2)
  CHECK_RESULTS(1)
  if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::positive_integer)) {
    if (ARGUMENTS(0)->integer.value+ARGUMENTS(1)->integer.value >= ARGUMENTS(0)->integer
      RETURN_SINGLE_RESULT(CREATE(std_types::positive_integer, ARGUMENTS(0)->integer.val
    }
  } else if (TYPEOF(ARGUMENTS(1)) == TYPE(negative_integer)) {
    if (ARGUMENTS(0)->integer.value >= ARGUMENTS(1)->integer.value) {
      RETURN_SINGLE_RESULT(CREATE(std_types::positive_integer, ARGUMENTS(0)->integer.val
    } else {
      RETURN_SINGLE_RESULT(CREATE(negative_integer, ARGUMENTS(1)->integer.value-ARGUMENT
    }
  } else if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::real)) {
    RETURN_SINGLE_RESULT(CREATE(std_types::real, ARGUMENTS(0)->integer.value+ARGUMENTS(1
  }
  INVALID_ARGUMENTS
}

[documentation remark]

# std_types::positive_integer/std::plus (a method)

  implements the plus operation for positive integers

  Parameters:
    left: a positive integer value
    right: any numeric value

  Result:
    sum: the sum of the two operands

  Topic: Numbers

  See also: std_types::positive_integer/std::minus,
            std_types::positive_integer/std::times,
            std_types::positive_integer/std::over,
            std_types::positive_integer/std::div,
            std_types::positive_integer/std::mod

[EXERCISE]

[symbols]

TYPE std_types::number -> std_types::object
METHOD std_types::number/_type
TYPE std_types::integer -> std_types::number
METHOD std_types::integer/_type
PUBLIC TYPE builtin_types::positive_integer -> std_types::integer
METHOD builtin_types::positive_integer/_type
PUBLIC TYPE builtin_types::negative_integer -> std_types::integer
METHOD builtin_types::negative_integer/_type
TYPE std_types::real -> std_types::number
METHOD std_types::real/_type
METHOD long builtin_types::positive_integer/_debug_string
METHOD long builtin_types::negative_integer/_debug_string
METHOD long std_types::real/_debug_string
FUNCTION NODE *from_float
FUNCTION NODE *from_double
METHOD int builtin_types::positive_integer/_to_double
METHOD int builtin_types::positive_integer/_to_float
METHOD int builtin_types::negative_integer/_to_double
METHOD int builtin_types::negative_integer/_to_float
METHOD int std_types::real/_to_double
METHOD int std_types::real/_to_float
METHOD builtin_types::positive_integer/negate
METHOD builtin_types::negative_integer/negate
METHOD std_types::real/negate
METHOD builtin_types::positive_integer/times
METHOD builtin_types::negative_integer/times
METHOD builtin_types::positive_integer/to_integer
METHOD builtin_types::negative_integer/to_integer
METHOD std_types::real/to_integer
METHOD std_types::real/floor
METHOD std_types::real/ceil
METHOD std_types::real/round
METHOD builtin_types::negative_integer/to_string
METHOD builtin_types::positive_integer/to_string
METHOD std_types::real/to_string
METHOD builtin_types::positive_integer/over
METHOD builtin_types::negative_integer/over
METHOD builtin_types::positive_integer/div
METHOD builtin_types::negative_integer/div
METHOD builtin_types::positive_integer/mod
METHOD builtin_types::negative_integer/mod
METHOD builtin_types::positive_integer/hash
METHOD builtin_types::negative_integer/hash
METHOD std_types::real/hash
METHOD builtin_types::positive_integer/ln
METHOD builtin_types::negative_integer/ln
METHOD std_types::real/ln
METHOD builtin_types::positive_integer/exp
METHOD builtin_types::negative_integer/exp
METHOD std_types::real/exp
FUNCTION std::real
FUNCTION std::integer
FUNCTION std::sqrt
FUNCTION std::pow
METHOD builtin_types::positive_integer/exit
FUNCTION NODE *from_int
FUNCTION NODE *from_long
FUNCTION NODE *from_uint
FUNCTION NODE *from_ulong
FUNCTION NODE *from_int8
FUNCTION NODE *from_int16
FUNCTION NODE *from_int32
FUNCTION NODE *from_int64
FUNCTION NODE *from_uint8
FUNCTION NODE *from_uint16
FUNCTION NODE *from_uint32
FUNCTION NODE *from_uint64
METHOD int builtin_types::positive_integer/_to_int
METHOD int builtin_types::negative_integer/_to_int
METHOD int builtin_types::positive_integer/_to_long
METHOD int builtin_types::negative_integer/_to_long
METHOD int builtin_types::positive_integer/_to_uint
METHOD int builtin_types::positive_integer/_to_ulong
METHOD int builtin_types::positive_integer/_to_int8
METHOD int builtin_types::negative_integer/_to_int8
METHOD int builtin_types::positive_integer/_to_int16
METHOD int builtin_types::negative_integer/_to_int16
METHOD int builtin_types::positive_integer/_to_int32
METHOD int builtin_types::negative_integer/_to_int32
METHOD int builtin_types::positive_integer/_to_int64
METHOD int builtin_types::negative_integer/_to_int64
METHOD int builtin_types::positive_integer/_to_uint8
METHOD int builtin_types::positive_integer/_to_uint16
METHOD int builtin_types::positive_integer/_to_uint32
METHOD int builtin_types::positive_integer/_to_uint64
METHOD builtin_types::positive_integer/plus
METHOD builtin_types::negative_integer/plus
METHOD std_types::real/plus
METHOD builtin_types::positive_integer/minus
METHOD builtin_types::negative_integer/minus
METHOD std_types::real/minus
METHOD std_types::real/times
METHOD std_types::real/over
METHOD builtin_types::positive_integer/equal
METHOD builtin_types::negative_integer/equal
METHOD std_types::real/equal
METHOD builtin_types::positive_integer/less
METHOD builtin_types::negative_integer/less
METHOD std_types::real/less
METHOD builtin_types::positive_integer/shift_left
METHOD builtin_types::positive_integer/shift_right
METHOD builtin_types::positive_integer/bit_and
METHOD builtin_types::positive_integer/bit_or
METHOD builtin_types::positive_integer/bit_xor
FUNCTION std::sin
FUNCTION std::cos
FUNCTION std::tan
FUNCTION std::asin
FUNCTION std::acos
FUNCTION std::atan

METHOD builtin_types::negative_integer/minus
  #
    implements the minus operation for negative integers

    Parameters:
      left: a negative integer value
      right: any numeric value

    Result:
      result: the difference of left and right

    Topic: Numbers

    See also: std_types::integer, std_types::real
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::negative_integer)) {
      if (ARGUMENTS(0)->integer.value > ARGUMENTS(1)->integer.value) {
        RETURN_SINGLE_RESULT(CREATE(builtin_types::negative_integer, ARGUMENTS(0)->integer.value-ARGUMENTS(1)->integer.value))
      } else {
        RETURN_SINGLE_RESULT(CREATE(builtin_types::positive_integer, ARGUMENTS(1)->integer.value-ARGUMENTS(0)->integer.value))
      }
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::positive_integer)) {
      if (ARGUMENTS(0)->integer.value+ARGUMENTS(1)->integer.value >= ARGUMENTS(0)->integer.value) {
        RETURN_SINGLE_RESULT(CREATE(builtin_types::negative_integer, ARGUMENTS(0)->integer.value+ARGUMENTS(1)->integer.value))
      }
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::real)) {
      RETURN_SINGLE_RESULT(CREATE(std_types::real, -(ARGUMENTS(0)->integer.value+ARGUMENTS(1)->real.value)))
    }
    INVALID_ARGUMENTS
  }

METHOD std_types::real/minus
  #
    implements the minus operation for real numbers

    Parameters:
      left: a real number
      right: any numeric value

    Result:
      result: the difference of left and right

    Topic: Numbers

    See also: std_types::real, std_types::integer
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::real)) {
      RETURN_SINGLE_RESULT(CREATE(std_types::real, ARGUMENTS(0)->real.value-ARGUMENTS(1)->real.value))
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::positive_integer)) {
      RETURN_SINGLE_RESULT(CREATE(std_types::real, ARGUMENTS(0)->real.value-ARGUMENTS(1)->integer.value))
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::negative_integer)) {
      RETURN_SINGLE_RESULT(CREATE(std_types::real, ARGUMENTS(0)->real.value+ARGUMENTS(1)->integer.value))
    }
    INVALID_ARGUMENTS
  }

METHOD std_types::real/times
  #
    implements the times operation for real numbers

    Parameters:
      left: a real number
      right: any numeric value

    Result:
      result: the product of left and right

    Topic: Numbers

    See also: std_types::real, std_types::integer
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::real)) {
      RETURN_SINGLE_RESULT(CREATE(std_types::real, ARGUMENTS(0)->real.value*ARGUMENTS(1)->real.value))
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::positive_integer)) {
      RETURN_SINGLE_RESULT(CREATE(std_types::real, ARGUMENTS(0)->real.value*ARGUMENTS(1)->integer.value))
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::negative_integer)) {
      RETURN_SINGLE_RESULT(CREATE(std_types::real, -(ARGUMENTS(0)->real.value*ARGUMENTS(1)->integer.value)))
    }
    INVALID_ARGUMENTS
  }

METHOD std_types::real/over
  #
    implements the over operation for real numbers

    Parameters:
      left: a real number
      right: any numeric value

    Result:
      result: the quotient of left and right

    Topic: Numbers

    See also: std_types::real, std_types::integer
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::real)) {
      RETURN_SINGLE_RESULT(CREATE(std_types::real, ARGUMENTS(0)->real.value/ARGUMENTS(1)->real.value))
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::positive_integer)) {
      RETURN_SINGLE_RESULT(CREATE(std_types::real, ARGUMENTS(0)->real.value/ARGUMENTS(1)->integer.value))
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::negative_integer)) {
      RETURN_SINGLE_RESULT(CREATE(std_types::real, -(ARGUMENTS(0)->real.value/ARGUMENTS(1)->integer.value)))
    }
    INVALID_ARGUMENTS
  }

METHOD builtin_types::positive_integer/equal
  #
    returns true if both arguments are numerically equal

    Parameters:
      left: a positive integer value
      right: any numeric value

    Result:
      result: true if left and right are numerically equal, false otherwise

    If the *right* argument is a real number then *left* is converted to a real
    value before the comparison.

    Topic: Numbers

    See also: std_types::integer, std_types::real, std::less

    Example:

      dump! `(4 == 4)

    Output:

      (4 == 4): <true>

    Example:

      dump! `(4 == 4.0)

    Output:

      (4 == 4.0): <true>
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::positive_integer)) {
      RETURN_BOOLEAN(ARGUMENTS(0)->integer.value == ARGUMENTS(1)->integer.value)
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::real)) {
      RETURN_BOOLEAN(ARGUMENTS(0)->integer.value == ARGUMENTS(1)->real.value)
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::error)) {
      INVALID_ARGUMENTS
    } else {
      RETURN_FALSE
    }
  }

METHOD builtin_types::negative_integer/equal
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::negative_integer)) {
      RETURN_BOOLEAN(ARGUMENTS(0)->integer.value == ARGUMENTS(1)->integer.value)
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::real)) {
      RETURN_BOOLEAN(ARGUMENTS(0)->integer.value == -ARGUMENTS(1)->real.value)
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::error)) {
      INVALID_ARGUMENTS
    } else {
      RETURN_FALSE
    }
  }

METHOD std_types::real/equal
  #
    implements the *equal* operation for real numbers

    Parameters:
      left: a real number
      right: any numeric value

    Result:
      result: true if left and right are numerically equal, false otherwise

    If the *right* argument is an integer then *right* is converted to a real
    value before the comparison.

    Topic: Numbers

    See also: std_types::integer, std_types::real, std::less

    Example:

      dump! `(4.0 == 4.0)

    Output:

      (4.0 == 4.0): <true>

    Example:

      dump! `(4.0 == 4)

    Output:

      (4.0 == 4): <true>
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::real)) {
      RETURN_BOOLEAN(ARGUMENTS(0)->real.value == ARGUMENTS(1)->real.value)
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::positive_integer)) {
      RETURN_BOOLEAN(ARGUMENTS(0)->real.value == ARGUMENTS(1)->integer.value)
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::negative_integer)) {
      RETURN_BOOLEAN(-ARGUMENTS(0)->real.value == ARGUMENTS(1)->integer.value)
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::error)) {
      INVALID_ARGUMENTS
    } else {
      RETURN_FALSE
    }
  }

METHOD builtin_types::positive_integer/less
  #
    returns true if the left argument is less than the right argument

    Parameters:
      left: a positive integer value
      right: any numeric value

    Result:
      result: true if left is less than right, false otherwise

    If the *right* argument is a real number then *left* is converted to a real
    value before the comparison.

    Topic: Numbers

    See also: std_types::integer, std_types::real, std::equal

    Example:

      dump! `(4 < 4)

    Output:

      (4 < 4): <false>

    Example:

      dump! `(4 < 4.0)

    Output:

      (4 < 4.0): <false>
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::positive_integer)) {
      RETURN_BOOLEAN(ARGUMENTS(0)->integer.value < ARGUMENTS(1)->integer.value)
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::negative_integer)) {
      RETURN_FALSE
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::real)) {
      RETURN_BOOLEAN(ARGUMENTS(0)->integer.value < ARGUMENTS(1)->real.value)
    }
    INVALID_ARGUMENTS
  }

METHOD builtin_types::negative_integer/less
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::negative_integer)) {
      RETURN_BOOLEAN(ARGUMENTS(0)->integer.value > ARGUMENTS(1)->integer.value)
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::positive_integer)) {
      RETURN_TRUE
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::real)) {
      RETURN_BOOLEAN(ARGUMENTS(0)->integer.value > -ARGUMENTS(1)->real.value)
    }
    INVALID_ARGUMENTS
  }

METHOD std_types::real/less
  #
    implements the *less* operation for real numbers

    Parameters:
      left: a real number
      right: any numeric value

    Result:
      result: true if left is less than right, false otherwise

    If the *right* argument is an integer then *right* is converted to a real
    value before the comparison.

    Topic: Numbers

    See also: std_types::integer, std_types::real, std::equal

    Example:

      dump! `(4.0 < 4.0)

    Output:

      (4.0 < 4.0): <false>

    Example:

      dump! `(4.0 < 4)


    Output:

      (4.0 < 4): <false>
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::real)) {
      RETURN_BOOLEAN(ARGUMENTS(0)->real.value < ARGUMENTS(1)->real.value)
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::positive_integer)) {
      RETURN_BOOLEAN(ARGUMENTS(0)->real.value < ARGUMENTS(1)->integer.value)
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::negative_integer)) {
      RETURN_BOOLEAN(-ARGUMENTS(0)->real.value > ARGUMENTS(1)->integer.value)
    }
    INVALID_ARGUMENTS
  }

METHOD builtin_types::positive_integer/shift_left
  #
    returns the left-shifted value

    Parameters:
      self: a positive integer value
      shift_count: a positive integer value

    Result:
      result: the left-shifted integer value

    Topic: Numbers

    See also: std_types::integer, builtin_types::positive_integer

    Example:

      println! 4 << 2

    Output:

      16
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::positive_integer)) {
      RETURN_SINGLE_RESULT(CREATE(builtin_types::positive_integer, ARGUMENTS(0)->integer.value << ARGUMENTS(1)->integer.value))
    }
    INVALID_ARGUMENTS
  }

METHOD builtin_types::positive_integer/shift_right
  #
    returns the right-shifted value

    Parameters:
      self: a positive integer value
      shift_count: a positive integer value

    Result:
      result: the right-shifted integer value

    Topic: Numbers

    See also: std_types::integer, builtin_types::positive_integer

    Example:

      println! 4 >> 2

    Output:

      1
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::positive_integer)) {
      RETURN_SINGLE_RESULT(CREATE(builtin_types::positive_integer, ARGUMENTS(0)->integer.value >> ARGUMENTS(1)->integer.value))
    }
    INVALID_ARGUMENTS
  }

METHOD builtin_types::positive_integer/bit_and
  #
    returns the bit-wise AND of the two arguments

    Parameters:
      left: a positive integer value
      right: a positive integer value

    Result:
      result: the bit-wise AND of the two arguments

    Topic: Numbers

    See also: std_types::integer, builtin_types::positive_integer

    Example:

      println! 6 & 3

    Output:

      2
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::positive_integer)) {
      RETURN_SINGLE_RESULT(CREATE(builtin_types::positive_integer, ARGUMENTS(0)->integer.value & ARGUMENTS(1)->integer.value))
    }
    INVALID_ARGUMENTS
  }

[source]

POLY std::equal
  #
    compares two objects for equality

    Parameters:
      left # the left operand
      right # the right operand

    Result:
      equal # true if left and right are equal, false otherwise

    Two objects are equal if the equal function says so ... ^^

    Two identical objects should always be equal.

    <std::undefined> should only be equal to itself and to no other object.

    There is no separate function to test non-equality.

    *a* != *b*

    is converted by the compiler to

    <std::not>(<std::equal>(*a* *b*))

    Topic: Objects, Numbers

    See also: std::less

METHOD std_types::real/equal
  #
    implements the *equal* operation for real numbers

    Parameters:
      left: a real number
      right: any numeric value

    Result:
      result: true if left and right are numerically equal, false otherwise

    If the *right* argument is an integer then *right* is converted to a real
    value before the comparison.

    Topic: Numbers

    See also: std_types::integer, std_types::real, std::less

    Example:

      dump! `(4.0 == 4.0)

    Output:

      (4.0 == 4.0): <true>

    Example:

      dump! `(4.0 == 4)

    Output:

      (4.0 == 4): <true>
  {
    CHECK_ARGUMENTS(2)
    CHECK_RESULTS(1)
    if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::real)) {
      RETURN_BOOLEAN(ARGUMENTS(0)->real.value == ARGUMENTS(1)->real.value)
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::positive_integer)) {
      RETURN_BOOLEAN(ARGUMENTS(0)->real.value == ARGUMENTS(1)->integer.value)
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(builtin_types::negative_integer)) {
      RETURN_BOOLEAN(-ARGUMENTS(0)->real.value == ARGUMENTS(1)->integer.value)
    } else if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::error)) {
      INVALID_ARGUMENTS
    } else {
      RETURN_FALSE
    }
  }

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Numbers

# std_types::real/std::equal (a builtin method)

