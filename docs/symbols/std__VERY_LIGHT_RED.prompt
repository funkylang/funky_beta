[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[symbols]

$std::CURSOR_LEFT .
$std::CURSOR_RIGHT .
$std::CURSOR_UP .
$std::CURSOR_DOWN .
$std::CURSOR_HOME .
$std::CURSOR_END .

$std::DRAW_COLOUR .

$std::BLACK '@0x000000;'
$std::WHITE '@0xffffff;'
$std::RED '@0xff0000;'
$std::GREEN '@0x00ff00;'
$std::BLUE '@0x0000ff;'
$std::CYAN '@0x00ffff;'
$std::MAGENTA '@0xff00ff;'
$std::YELLOW '@0xffff00;'

$std::set_draw_colour ()
$std::set_clear_colour ()

$std_types::screen/create_screen:
  (
    screen
    width = undefined
    height = undefined
    options*
  )
  update_if width.is_undefined &width -> width_of(screen)
  update_if height.is_undefined &height -> height_of(screen)
  extract_options options
    DRAW_COLOUR = draw_colour_of(screen) $draw_colour
    CLEAR_COLOUR = clear_colour_of(screen) $clear_colour
    LINE_HEIGHT = line_height_of(screen) $line_height
  $row dup(string(' ' draw_colour clear_colour) width)
  $rows dup(list(row) height .div. line_height)
  ->
    std_types::screen
      .width_of width
      .height_of height
      .draw_colour_of draw_colour
      .clear_colour_of clear_colour
      .line_height_of line_height
      .rows_of rows

[source]

$std::RED '0xff0000;'

[documentation remark]

# std::RED (a literal)

  the colour red as used by the terminal library

  Topic: Colours

  Colour literals are used to set the draw or clear colour.

  See also: std::BLACK, std::WHITE, std::GREEN, std::BLUE, std::CYAN,
            std::MAGENTA, std::YELLOW, std::GREY, std::set_draw_colour,
            std::set_clear_colour

[source]

$std::CURSOR_LEFT .
  #
    Example:

      $x ...
      get_key! $key
      case key
        CURSOR_LEFT:
          dec &x
          next!
        ...

[documentation remark]

# std::CURSOR_LEFT (a unique item)

  used to identify the cursor left key

  Topic: Terminal

  See also: std::CURSOR_RIGHT, std::CURSOR_UP, std::CURSOR_DOWN,
            std::CURSOR_HOME, std::CURSOR_END

  Example:

    $x ...
    get_key! $key
    case key
      CURSOR_LEFT:
        dec &x
        next!
      ...

[source]

$std:DRAW_COLOUR .

[documentation remark]

# std::DRAW_COLOUR (a unique item)

  used to specifiy a draw colour

  Topic: Terminal

  See also: std_types::create/screen

[EXERCISE]

#
  Topic: Colours

[symbols]

$std::red_component_of (!)
$std::green_component_of (!)
$std::blue_component_of (!)
$std::DRAW_COLOUR .
$std::CLEAR_COLOUR .
$std::BLACK '@0x000000;'
$std::WHITE '@0xffffff;'
$std::RED '@0xff0000;'
$std::LIGHT_RED '@0xff8080;'
$std::VERY_LIGHT_RED '@0xffc0c0;'
$std::DARK_RED '@0x800000;'
$std::VERY_DARK_RED '@0x400000;'
$std::GREEN '@0x00ff00;'
$std::LIGHT_GREEN '@0x80ff80;'
$std::VERY_LIGHT_GREEN '@0xc0ffc0;'
$std::DARK_GREEN '@0x008000;'
$std::VERY_DARK_GREEN '@0x004000;'
$std::BLUE '@0x0000ff;'
$std::LIGHT_BLUE '@0x8080ff;'
$std::VERY_LIGHT_BLUE '@0xc0c0ff;'
$std::DARK_BLUE '@0x000080;'
$std::VERY_DARK_BLUE '@0x000040;'
$std::CYAN '@0x00ffff;'
$std::LIGHT_CYAN '@0x80ffff;'
$std::VERY_LIGHT_CYAN '@0xc0ffff;'
$std::DARK_CYAN '@0x008080;'
$std::VERY_DARK_CYAN '@0x000080;'
$std::MAGENTA '@0xff00ff;'
$std::LIGHT_MAGENTA '@0xff8080;'
$std::VERY_LIGHT_MAGENTA '@0xffc0c0;'
$std::DARK_MAGENTA '@0x800080;'
$std::VERY_DARK_MAGENTA '@0x400040;'
$std::YELLOW '@0xffff00;'
$std::LIGHT_YELLOW '@0xffff80;'
$std::VERY_LIGHT_YELLOW '@0xffffc0;'
$std::DARK_YELLOW '@0x808000;'
$std::GREY '@0x808080;'
$std::LIGHT_GREY '@0xc0c0c0;'
$std::VERY_LIGHT_GREY '@0xe0e0e0;'
$std::DARK_GREY '@0x404040;'
$std::VERY_DARK_GREY '@0x202020;'
$std::rgb_character:
$std_types::character/red_component_of:
$std_types::character/green_component_of:
$std_types::character/blue_component_of:
$std::colour_mixture:
$std::ansi_text_colour:
$std::ansi_background_colour:
$std::ansi_reset_colour:
$std::restore_colours:
$std::csi: (arguments* command)

#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
  Topic: Colours

$std::red_component_of (!)

$std::green_component_of (!)

$std::blue_component_of (!)

$std::DRAW_COLOUR .

$std::CLEAR_COLOUR .

$std::BLACK '@0x000000;'

$std::WHITE '@0xffffff;'

$std::RED '@0xff0000;'

$std::LIGHT_RED '@0xff8080;'

$std::VERY_LIGHT_RED '@0xffc0c0;'

$std::DARK_RED '@0x800000;'

$std::VERY_DARK_RED '@0x400000;'

$std::GREEN '@0x00ff00;'

$std::LIGHT_GREEN '@0x80ff80;'

$std::VERY_LIGHT_GREEN '@0xc0ffc0;'

$std::DARK_GREEN '@0x008000;'

$std::VERY_DARK_GREEN '@0x004000;'

$std::BLUE '@0x0000ff;'

$std::LIGHT_BLUE '@0x8080ff;'

$std::VERY_LIGHT_BLUE '@0xc0c0ff;'

$std::DARK_BLUE '@0x000080;'

$std::VERY_DARK_BLUE '@0x000040;'

$std::CYAN '@0x00ffff;'

$std::LIGHT_CYAN '@0x80ffff;'

$std::VERY_LIGHT_CYAN '@0xc0ffff;'

$std::DARK_CYAN '@0x008080;'

$std::VERY_DARK_CYAN '@0x000080;'

$std::MAGENTA '@0xff00ff;'

$std::LIGHT_MAGENTA '@0xff8080;'

$std::VERY_LIGHT_MAGENTA '@0xffc0c0;'

$std::DARK_MAGENTA '@0x800080;'

$std::VERY_DARK_MAGENTA '@0x400040;'

$std::YELLOW '@0xffff00;'

$std::LIGHT_YELLOW '@0xffff80;'

$std::VERY_LIGHT_YELLOW '@0xffffc0;'

$std::DARK_YELLOW '@0x808000;'

$std::GREY '@0x808080;'

$std::LIGHT_GREY '@0xc0c0c0;'

$std::VERY_LIGHT_GREY '@0xe0e0e0;'

$std::DARK_GREY '@0x404040;'

$std::VERY_DARK_GREY '@0x202020;'

$std::rgb_character:
  (
    red
    green
    blue
  )
  -> character((red << 16) | (green << 8) | blue)

$std_types::character/red_component_of:
  (
    chr
  )
  -> (chr.to_integer >> 16) & 0xff

$std_types::character/green_component_of:
  (
    chr
  )
  -> (chr.to_integer >> 8) & 0xff

$std_types::character/blue_component_of:
  (
    chr
  )
  -> chr.to_integer & 0xff

$std::colour_mixture:
  #
    Example:

      $RED rgb_character(0xff 0 0)
      $BLUE rgb_character(0 0 0xff)

      $VIOLET colour_mixture(RED BLUE = 2) # one part red, two parts blue
  (
    args*
  )
  $total_parts 0
  $red 0
  $green 0
  $blue 0
  for_each args
    : (arg)
      if
        arg.is_a_key_value_pair:
          $colour key_of(arg)
          $parts value_of(arg)
          plus &red parts*red_component_of(colour)
          plus &green parts*green_component_of(colour)
          plus &blue parts*blue_component_of(colour)
          plus &total_parts parts
          next
        :
          plus &red red_component_of(arg)
          plus &green green_component_of(arg)
          plus &blue blue_component_of(arg)
          inc &total_parts
          next
    ->
      rgb_character
        round(red/total_parts).to_integer
        round(green/total_parts).to_integer
        round(blue/total_parts).to_integer

$std::ansi_text_colour:
  (
    colour
  )
  $colour_value colour.to_integer
  $red colour_value >> 16
  $green (colour_value >> 8) & 0xff
  $blue colour_value & 0xff
  -> csi(38 2 red green blue 'm')

$std::ansi_background_colour:
  (
    colour
  )
  $colour_value colour.to_integer
  $red colour_value >> 16
  $green (colour_value >> 8) & 0xff
  $blue colour_value & 0xff
  -> csi(48 2 red green blue 'm')

$std::ansi_reset_colour:
  -> csi("0m")

$std::restore_colours:
  print! "@esc;[39m@esc;[49m"

$std::csi: (arguments* command)
  -> string("@esc;[" join(arguments ';') command)

[source]

$std::VERY_LIGHT_RED '@0xffc0c0;'

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Colours

# std::VERY_LIGHT_RED (a constant)

