[MANUAL]

In Funky function calls are either written on a single line with arguments
enclosed within parentheses and separated by single spaces, e.g.:

print! f(a b c) g(x y z)

or they are written in indentation style using mutliple lines:

print!
  f
    a
    b
    c
  g
    x
    y
    z

Functions that create any output or read any input need I/O-access rights.

A function that needs I/O-access rights must be called with a trailing
exclamation mark after the function name, e.g.:

println! "Hello, World!"

The expression

key = value

denotes a key-value-pair.

Collection types cannot be printed directly. You can use "dump!" to
dump the contents of a collection, e.g.:

$ages
  hash_table
    "John" = 42
    "Mary" = 25
    "Irene" = 49

dump! `ages

Output:

ages: hash_table <6>
  "Mary"
  25
  "Irene"
  49
  "John"
  42

Note: The number in angular brackets after the typename denotes the number
of (indented) lines that follow the head.

A tail call returns the result of the called function; e.g.:

$calc:
  (
    x
    y
  )
  plus x*x y*y

println! calc(2 3)

prints

13

[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

$std_types::screen/std::clear:
  (
    self
    x = 1
    y = 1
    width = undefined
    height = undefined
  )
  update_if width.is_undefined &width -> width_of(self)-x+1
  update_if height.is_undefined &height -> height_of(self)-y+1
  std_private::clear self self x y width height

[documentation remark]

# std_types::screen/clear (a method)

  clears the specified rectangular area

  Parameters:
    self: the screen to be (partially) cleared
    x: x-coordinate of the upper left corner
    y: y-coordinate of the upper left corner
    width: width of the area
    height: height of the area

  Result:
    screen: the updated screen

  The specified area is filled with spaces using the the current draw-
  and clear colour.

  The area is clipped at the screen's borders.

  This function also works for "graphical screens" (line_height != 1).

  Topic: Terminal

  See also: std_types::screen/std::set_clear_colour,
            std_types::screen/std::copy

[source]

$std_types::string/match:
  (
    self
    stream
  )
  $rc result_count()
  $len length_of(self)
  if
    length_of(stream) >= len:
      if
        range(stream 1 len) == self:
          if
            rc == 1
            -> len
            -> len undefined
        fail
    fail

  $fail:
    if
      rc == 1
      -> undefined
      -> undefined undefined

[documentation remark]

# std_types::string/std::match (a method)

  matches the start of the stream with the string

  Parameters:
    self: the string to match
    stream: the stream to match against

  Results:
    length: the number of matched characters (or <undefined> on fail)
    capture: the matched string (if requested)

  Attempts to match the start of the stream with the specified string.

  If the match is successful the length of the match (= the length of the
  string) is returned.

  If the caller requested two result values then in addition to the string
  length the string itself ("the capture") is also returned.

  If the match fails then one or two <std::undefined>-values are returned.

  Topic: Strings

  See also: std_types::string/std::match_back, std_types::string/std::search

[source]

$std_types::generic_list/map_or_error:
  (
    self
    function
  )
  if
    self.is_empty
    -> self
    :
      $map
        if
          parameter_count_of(function) == 2
          ->
            : (s e)
              if
                s < e:
                  $m (s+e) >> 1
                  append_or_error
                    map(s m)
                    map(m+1 e)
                :
                  $mapped_item function(s self(s))
                  if
                    mapped_item.is_an_error
                    -> mapped_item
                    -> list(mapped_item)
          ->
            : (s e)
              if
                s < e:
                  $m (s+e) >> 1
                  append_or_error
                    map(s m)
                    map(m+1 e)
                :
                  $mapped_item function(self(s))
                  if
                    mapped_item.is_an_error
                    -> mapped_item
                    -> list(mapped_item)

      map 1 length_of(self)

[documentation remark]

# std_types::generic_list/std::map_or_error (a method)

  applies a function to all elements of the list

  Parameters:

    self: the list which items will be mapped
    function: the function to apply to each element of the list

  Result:
    list: the list of "mapped" items

  A list of the "mapped" items is returned.

  If any item ist mapped to an error object than the result ist not a
  collection but the first (left-to-right-order) error object created.

  Topic: Lists

  See also: std_types::generic_list/std::reduce,
            std_types::generic_list/std::map_reduce

[EXERCISE]

#
  Topic: Terminal

  The terminal library offers an interface for using text-terminals in a
  comfortable way.

  The base data type is the <std_types::screen>, a rectangular array of
  characters and associated draw and clear colors.

  All coordinates are one-based.

  Each colour supports 256 shades of red, green and blue.

  To update the state of a <std_types::screen> or <std_types::terminal) no
  I/O-acccess rights are necessary.

  There are methods to set draw and clear colors, to draw text, lines
  or more complex shapes, to clear the screen or parts of it, to scroll the
  screen or copy arbitrary rectangular areas between screens ("blitting").

  Horizontal and vertical lines are drawn using the appropriate unicode graphics
  characters.

  Screens and terminals also support Unicode Emojis.

  The terminal library is somewhat similar to the curses library. It tries to
  update the contents of a terminal in a smart way.

  To start using the functions of this library one must first create a
  <std_types::terminal> object (see <std::create_terminal>) supplying the
  terminal's width and height. The current terminal size can be retrieved via
  the I/O-function <std::get_terminal_size>.

  As an alternative one can use the high-level function
  <std::initialize_terminal>. When using this function one gets automatic
  cleanup "for free".

  <std_types::terminal> objects are an in-memory representation of the
  terminal's contents. To update the terminal's contents one must call the
  method <std_types::terminal/std::update> to create a character string
  representing the changes to the terminal's contents and then write this
  string to the terminal.

  Related topics: Input-Output, Colours

  Example:

    <require basic/stdlib>
    <require terminal/terminal>

    get_terminal_size! STDIN_FILENO $width $height
    create_terminal $terminal width height
    draw_text &terminal 10 5 "Hello, world!"
    update_terminal &terminal $output # create output character stream
    print! output # print the generated character stream

  Example:

    <require basic/stdlib>
    <require terminal/terminal>

    initialize_terminal!: (terminal)
      draw_text &terminal 10 5 "Hello, world!"
      update_terminal &terminal $output # create output character stream
      print! output # print the generated character stream

#
  Topic: Colours

  The <@Terminal> library uses <std_types::character>s for text and background
  colours.

  Related topics: Terminal

[symbols]


# Methods

$std::resize ()
$std::set_cursor ()
$std::set_character_at ()
$std::get_character_at ()
$std::set_draw_colour_at ()
$std::get_draw_colour_at ()
$std::set_clear_colour_at ()
$std::get_clear_colour_at ()
$std::draw_character ()
$std::draw_line ()
$std::draw_rectangle ()
$std::plot ()
$std::plot_line ()
$std::fill_trapezoid ()
$std::copy ()
$std::scroll_left ()
$std::scroll_right ()
$std::scroll_up ()
$std::scroll_down ()
$std::create_text_screen ()
$std::cursor_x_of (!)
$std::cursor_y_of (!)

# Attributes

$std_types::screen std_types::generic_terminal
$std::is_a_screen ()
$std_types::screen.is_a_screen true
$std_types::object.is_a_screen false

# Screen types

$std::TEXT .
$std::VISIBLE_CURSOR .
$std_types::screen.type_of TEXT
$std_types::screen.plot_y_resolution_of 0.5
$std_types::screen.serialization_tag_of "screen"
$std_types::screen.serialization_fields_of
$std_types::terminal std_types::screen
$std_types::terminal.name_of "terminal"
$std_types::terminal.serialization_tag_of "terminal"
$std_types::terminal.serialization_fields_of
$std::create_screen ()
$std_types::screen/create_screen:
$std_types::screen/resize:
$std::character_at:
$std::draw_colour_at:
$std::clear_colour_at:
$std_types::screen/scroll_up:
$std_types::screen/scroll_down:
$std_types::screen/scroll_left:
$std_types::screen/scroll_right:
$std_types::screen/clear:
$std_types::screen/std_private::clear:
$std::move ()
$std_types::screen/move:
$std_types::screen/copy:
$std::FILE_DESCRIPTOR .
$std::RECEIVE_CTRL_C_AND_CTRL_Z .
$std::RECEIVE_CTRL_Q_AND_CTRL_S .
$std::MAP_CR .
$std::RECEIVE_SIGWINCH .
$std::RECEIVE_MOUSE_CLICKS .
$std::CURSOR_OFF .
$std::TITLE .
$terminal_private::backspace_character '@del;'
$std::initialize_terminal ()
$std_types::object/initialize_terminal:
$std_types::io/initialize_terminal:
$std_types::terminal.original_attributes_of undefined
$std_types::terminal.fd_of undefined
$std_types::terminal.do_switch_cursor_on_of undefined
$std_types::terminal.do_cancel_mouse_clicks_of undefined
$std_types::terminal/finalize:
$std_types::terminal/update update_terminal
$std::update_terminal:
$std_types::screen/plot:
$std_types::screen/plot_line:
$std_types::screen/fill_trapezoid:
$std_types::screen/set_draw_colour:
$std_types::screen/set_clear_colour:
$std_types::screen/set_cursor:
$std_types::screen/set_character_at:
$std_types::view/set_character_at:
$std_types::screen/get_character_at:
$std_types::view/get_character_at:
$std_types::screen/set_draw_colour_at:
$std_types::view/set_draw_colour_at:
$std_types::screen/get_draw_colour_at:
$std_types::view/get_draw_colour_at:
$std_types::screen/set_clear_colour_at:
$std_types::view/set_clear_colour_at:
$std_types::screen/get_clear_colour_at:
$std_types::view/get_clear_colour_at:
$std_types::screen/draw_character:
$std_types::screen/draw_text:
$std_types::screen/std_private::draw_text:
$std_types::screen/draw_attributed_text:
$std_types::screen/std_private::draw_attributed_text:
$std_types::screen/draw_line:
$std_types::screen/draw_rectangle:
$std::create_terminal:
$std_types::terminal/resize:
$std::cursor_off:
$std::cursor_on:
$std::cursor_home:
$std::clear_screen:
$std::rows_and_columns:
$std::add_attributes:
$std_types::screen/create_text_screen:
$std_types::screen/append:
$std_types::screen/adjoin:
$std_types::screen/pad_left:
$std_types::screen/pad_right:
$std_types::screen/truncate:
$std_types::screen/range:

$original_attributes_of ()

$fd_of ()

$do_switch_cursor_on_of ()

$do_cancel_mouse_clicks_of ()

$std_types::terminal.original_attributes_of undefined

$std_types::terminal.fd_of undefined

$std_types::terminal.do_switch_cursor_on_of undefined

$std_types::terminal.do_cancel_mouse_clicks_of undefined

$std_types::terminal/finalize:
  (
    self
    io
  )
  $buf ""
  append &buf "@esc;[u" # restore cursor position
  append &buf "@esc;[?47l" # switch to default screen
  append &buf "@esc;[0m" # set default colours
  append &buf "@esc;]112;@bel;" # restore default cursor colour
  update_if do_switch_cursor_on_of(self) &buf: append buf "@esc;[?25h"
  update_if do_cancel_mouse_clicks_of(self) &buf:
    append buf "@esc;[?9;1006;1015l"
  write &io STDOUT_FILENO buf
  run io reset_attributes self

$reset_attributes: (io terminal)
  set_terminal_attributes! $_success
    fd_of(terminal)
    original_attributes_of(terminal)
  -> io undefined

$std_types::terminal/update update_terminal

$std::update_terminal:
  (
    terminal # the terminal to be updated
    do_log = false # log updates to <stderr>
  )
  $output ""
  $current_buffer current_buffer_of(terminal)
  $current_y cursor_y_of(current_buffer)
  $current_x cursor_x_of(current_buffer)
  $current_draw_colour draw_colour_of(current_buffer)
  $current_clear_colour clear_colour_of(current_buffer)
  $new_rows rows_of(terminal)
  $current_rows rows_of(current_buffer)
  $terminal_width width_of(terminal)
  $terminal_height height_of(terminal)
  from_to 1 terminal_height
    !output
    !current_y !current_x
    !current_clear_colour !current_draw_colour
    : (y)
      $new_row new_rows(y)
      $current_row current_rows(y)
      $last_column find_last_non_empty_column(new_row)
      from_to 1 terminal_width
        : (x)
          $new_chr new_row(3*x-2)
          if
            new_chr == INVALID_CHARACTER
            next
            :
              $new_draw_colour new_row(3*x-1)
              $new_clear_colour new_row(3*x)
              if
                ||
                  new_chr != current_row(3*x-2)
                  new_draw_colour != current_row(3*x-1)
                  new_clear_colour != current_row(3*x)
                :
                  if
                    x > last_column:
                      move_to last_column+1 y:
                        use_clear_colour new_row(-1):
                          append &output csi('K') # clear to the end of the line
                          break
                    :
                      move_to x y:
                        use_draw_colour new_draw_colour:
                          use_clear_colour new_clear_colour:
                            emit_character new_chr:
                              next
                next
        next
    ->
      output
      current_y current_x
      current_clear_colour current_draw_colour

  if
    current_y.is_undefined:
      !current_y 1
      !current_x 1
      log! "move cursor to @(current_y), @(current_x)"
      append &output csi(current_y current_x 'H')
      finish
    finish

  $log:
    (
      args*
    )
    if
      do_log:
        debug::print push(create_string(args) '@nl;')
      pass

  $csi: (arguments* command)
    -> string("@esc;[" join(arguments ';') command)

  $osc: (arguments* command)
    -> string("@esc;]" join(arguments ';') command)

  $move_to: (x y cont)
    if
      y != current_y:
        if
          x != current_x:
            !current_y y
            !current_x x
            log "move cursor to @(y), @(x)"
            append &output csi(y x 'H')
            cont
          :
            if
              y > current_y:
                $delta y-current_y
                !current_y y
                if
                  delta > 1:
                    log "move cursor down by " delta
                    append &output csi(delta 'B')
                    cont

                  :
                    log "move cursor down"
                    append &output csi('B')
                    cont
              :
                $delta current_y-y
                !current_y y
                if
                  delta > 1:
                    log "move cursor up by " delta
                    append &output csi(delta 'A')
                    cont
                  :
                    log "move cursor up"
                    append &output csi('A')
                    cont
      :
        if
          x != current_x:
            if
              x > current_x:
                $delta x-current_x
                !current_x x
                if
                  delta > 1:
                    log "move cursor right by " delta
                    append &output csi(delta 'C')
                    cont
                  :
                    log "move cursor right"
                    append &output csi('C')
                    cont
              :
                $delta current_x-x
                !current_x x
                if
                  delta > 1:
                    log "move cursor left by " delta
                    append &output csi(delta 'D')
                    cont
                  :
                    log "move cursor left"
                    append &output csi('D')
                    cont
          cont

  $use_draw_colour: (colour cont)
    if
      colour != current_draw_colour:
        !current_draw_colour colour
        $colour_value colour.to_integer
        $red (colour_value >> 16) & 0xff
        $green (colour_value >> 8) & 0xff
        $blue colour_value & 0xff
        log "set text colour to @(red), @(green), @(blue)"
        append &output csi(38 2 red green blue 'm')
        cont
      cont

  $use_clear_colour: (colour cont)
    if
      colour != current_clear_colour:
        !current_clear_colour colour
        $colour_value colour.to_integer
        $red (colour_value >> 16) & 0xff
        $green (colour_value >> 8) & 0xff
        $blue colour_value & 0xff
        log "set background colour to @(red), @(green), @(blue)"
        append &output csi(48 2 red green blue 'm')
        cont
      cont

  # set cursor style

    CSI <value> SPC q

      value:
        0  -> blinking block.
        1  -> blinking block (default).
        2  -> steady block.
        3  -> blinking underline.
        4  -> steady underline.
        5  -> blinking bar (xterm).
        6  -> steady bar (xterm).

  # set cursor colour

    OSC 12 ; rgb:xxxx/xxxx/xxxx BEL

    or

    OSC 12 ; #xxxxxx BEL

  # get cursor colour

    OSC 12 ; ? BEL

    reply:

    12;rgb:xxxx/xxxx/xxxx

  $set_cursor_colour: (colour cont)
    $colour_value colour.to_integer
    $red hex((colour_value >> 16) & 0xff 2)
    $green hex((colour_value >> 8) & 0xff 2)
    $blue hex(colour_value & 0xff 2)
    log "set cursor colour to @(red), @(green), @(blue)"
    append &output osc(12 "#@(red)@(green)@(blue)" "@bel;")
    cont

  $auto_cursor_colour: (cont)
    append &output "@esc;]112;@bel;"
    cont

  $emit_character: (chr cont)
    log "print " debug::string(chr).trim
    $chr_width width_of(chr)
    if !chr !chr_width
      current_x == terminal_width && chr_width == 2
      -> ' ' 1
      -> chr chr_width
    push &output chr
    plus &current_x width_of(chr)
    if
      current_x > terminal_width:
        #
          there seems to be *no* autowrap to the start of the next line!
        !current_x undefined
        !current_y undefined
        cont
      cont

  $finish:
    if
      terminal.has_a_visible_cursor:
        $cursor_x cursor_x_of(terminal)
        $cursor_y cursor_y_of(terminal)
        move_to cursor_x cursor_y:
          $row new_rows(current_y)
          if
            row(3*current_x-2) == ' ':
              set_cursor_colour row(3*current_x-1) update_current_buffer
            :
              auto_cursor_colour update_current_buffer
      update_current_buffer

    $update_current_buffer:
      !current_buffer.cursor_y_of current_y
      !current_buffer.cursor_x_of current_x
      !current_buffer.draw_colour_of current_draw_colour
      !current_buffer.clear_colour_of current_clear_colour
      !current_buffer.rows_of new_rows
      -> terminal(.current_buffer_of current_buffer) output

$find_last_non_empty_column: (row)
  $i length_of(row)
  $clear_colour row(i)
  loop:
    if
      i > 0 && row(i-2) == ' ' && row(i) == clear_colour:
        !i i-3
        next
      -> i .div. 3

[source]

$std::finalize ()

$std_types::terminal/finalize:
  (
    self
    io
  )
  $buf ""
  append &buf "@esc;[u" # restore cursor position
  append &buf "@esc;[?47l" # switch to default screen
  append &buf "@esc;[0m" # set default colours
  append &buf "@esc;]112;@bel;" # restore default cursor colour
  update_if do_switch_cursor_on_of(self) &buf: append buf "@esc;[?25h"
  update_if do_cancel_mouse_clicks_of(self) &buf:
    append buf "@esc;[?9;1006;1015l"
  write &io STDOUT_FILENO buf
  run io reset_attributes self

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Terminal, Colours

# std_types::terminal/std::finalize (a method)

