[GUIDELINES]

All documentation remarks must have

* a single short (single line) description written in lower case

* a parameter(s) section (if appropriate)

* a result(s) section (if appropriate)

* a detailed description of how to use the symbol: when describing unique
  items of constants, describe how to use them;
  do not repeat yourself

* one or more associated topic(s) (if appropriate)

* a "See also" entry - mention only a view relevant symbols here

Do not mention unknown symbols!

Do not mention more than 10 symbols in the "See also" entry.

DO NOT MENTION MORE THAN 10 SYMBOLS IN THE "See also" ENTRY!

Do not mention internal details of functions.

Do not start each sentence in the description with "If" or "The".

DO NOT START EACH SENTENCE IN THE DESCRIPTION WITH "If" OR "The"!

Do not tell the user what a function does not do.

When referring to another symbol write it enclosed in angle brackets, e.g.
<std::clear>.

The "self"-parameter is a normal parameter like any other and should be
mentioned in the the parameter description.

Replace symbolic constants by their value.

Operations on I/O-objects are not executed immediately but queued as jobs.
To identify a job, an "id" is used.

I/O-functions and I/O-methods either need I/O-access rights or propagate
them ("if", "for_each", etc.).

An "example" section, if available, must use Funky syntax and shall not be too
long.

If there is an appropriate example in the source code then use this example
in the "example" section!

[EXAMPLES]

[source]

METHOD std_types::positive_integer/plus
{
  CHECK_ARGUMENTS(2)
  CHECK_RESULTS(1)
  if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::positive_integer)) {
    if (ARGUMENTS(0)->integer.value+ARGUMENTS(1)->integer.value >= ARGUMENTS(0)->integer
      RETURN_SINGLE_RESULT(CREATE(std_types::positive_integer, ARGUMENTS(0)->integer.val
    }
  } else if (TYPEOF(ARGUMENTS(1)) == TYPE(negative_integer)) {
    if (ARGUMENTS(0)->integer.value >= ARGUMENTS(1)->integer.value) {
      RETURN_SINGLE_RESULT(CREATE(std_types::positive_integer, ARGUMENTS(0)->integer.val
    } else {
      RETURN_SINGLE_RESULT(CREATE(negative_integer, ARGUMENTS(1)->integer.value-ARGUMENT
    }
  } else if (TYPEOF(ARGUMENTS(1)) == TYPE(std_types::real)) {
    RETURN_SINGLE_RESULT(CREATE(std_types::real, ARGUMENTS(0)->integer.value+ARGUMENTS(1
  }
  INVALID_ARGUMENTS
}

[documentation remark]

# std_types::positive_integer/std::plus (a method)

  implements the plus operation for positive integers

  Parameters:
    left: a positive integer value
    right: any numeric value

  Result:
    sum: the sum of the two operands

  Topic: Numbers

  See also: std_types::positive_integer/std::minus,
            std_types::positive_integer/std::times,
            std_types::positive_integer/std::over,
            std_types::positive_integer/std::div,
            std_types::positive_integer/std::mod

[EXERCISE]

[symbols]

FUNCTION int is_an_upper_case_letter_character
FUNCTION static uint32_t to_upper_case
FUNCTION int is_a_lower_case_letter_character
FUNCTION static uint32_t to_lower_case
FUNCTION int is_a_title_case_letter_character
FUNCTION static uint32_t to_title_case
FUNCTION int is_a_letter_character
FUNCTION int is_a_whitespace_character
FUNCTION int is_a_zero_width_character
FUNCTION int is_a_wide_character
METHOD std_types::character/to_upper_case
FUNCTION std::is_an_upper_case_letter_character
METHOD std_types::character/to_lower_case
FUNCTION std::is_a_lower_case_letter_character
METHOD std_types::character/to_title_case
FUNCTION std::is_a_title_case_letter_character
FUNCTION std::is_a_letter_character
FUNCTION std::is_a_whitespace_character
FUNCTION std::is_a_zero_width_character
FUNCTION std::is_a_wide_character

METHOD std_types::character/to_upper_case
  #
    converts to upper case

    All letter characters are converted to their upper case
    pendants; all other characters are returned unaltered.
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    uint32_t chr_code;
    CHECK(to_uchar32(ARGUMENTS(0), &chr_code));
    RETURN_SINGLE_RESULT(CREATE(std_types::character, to_upper_case(chr_code)))
  }

FUNCTION std::is_an_upper_case_letter_character
  #
    returns <true> for upper case letter characters
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    uint32_t chr_code;
    CHECK(to_uchar32(ARGUMENTS(0), &chr_code));
    RETURN_BOOLEAN(is_an_upper_case_letter_character(chr_code))
  }

METHOD std_types::character/to_lower_case
  #
    converts to lower case

    All letter characters are converted to their lower case
    pendants; all other characters are returned unaltered.
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    uint32_t chr_code;
    CHECK(to_uchar32(ARGUMENTS(0), &chr_code));
    RETURN_SINGLE_RESULT(CREATE(std_types::character, to_lower_case(chr_code)))
  }

FUNCTION std::is_a_lower_case_letter_character
  #
    returns <true> for lower case letter characters
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    uint32_t chr_code;
    CHECK(to_uchar32(ARGUMENTS(0), &chr_code));
    RETURN_BOOLEAN(is_a_lower_case_letter_character(chr_code))
  }

METHOD std_types::character/to_title_case
  #
    converts to title case

    All letter characters are converted to their title case
    pendants; all other characters are returned unaltered.
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    uint32_t chr_code;
    CHECK(to_uchar32(ARGUMENTS(0), &chr_code));
    RETURN_SINGLE_RESULT(CREATE(std_types::character, to_title_case(chr_code)))
  }

FUNCTION std::is_a_title_case_letter_character
  #
    returns <true> for title case letter characters
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    uint32_t chr_code;
    CHECK(to_uchar32(ARGUMENTS(0), &chr_code));
    RETURN_BOOLEAN(is_a_title_case_letter_character(chr_code))
  }

FUNCTION std::is_a_letter_character
  #
    returns <true> for letter characters
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    uint32_t chr_code;
    CHECK(to_uchar32(ARGUMENTS(0), &chr_code));
    RETURN_BOOLEAN(is_a_letter_character(chr_code))
  }

FUNCTION std::is_a_whitespace_character
  #
    returns <true> for whitespace characters
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    uint32_t chr_code;
    CHECK(to_uchar32(ARGUMENTS(0), &chr_code));
    RETURN_BOOLEAN(is_a_whitespace_character(chr_code))
  }

FUNCTION std::is_a_zero_width_character
  #
    returns <true> for zero width characters
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    uint32_t chr_code;
    CHECK(to_uchar32(ARGUMENTS(0), &chr_code));
    RETURN_BOOLEAN(is_a_zero_width_character(chr_code))
  }

FUNCTION std::is_a_wide_character
  #
    returns <true> for wide characters
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    uint32_t chr_code;
    CHECK(to_uchar32(ARGUMENTS(0), &chr_code));
    RETURN_BOOLEAN(is_a_wide_character(chr_code))
  }

[source]

POLY std::to_title_case
  #
    converts the contents to Title Case

    Parameter:
      string # the string to be converted

    Result:
      title # the title case version of string

    All characters but the first character of each word are converted to lower
    case. The first characters of all words are converted to upper case.

    Topic: Strings

    See also: std::to_lower_case, std::to_upper_case

METHOD std_types::character/to_title_case
  #
    converts to title case

    All letter characters are converted to their title case
    pendants; all other characters are returned unaltered.
  {
    CHECK_ARGUMENTS(1)
    CHECK_RESULTS(1)
    uint32_t chr_code;
    CHECK(to_uchar32(ARGUMENTS(0), &chr_code));
    RETURN_SINGLE_RESULT(CREATE(std_types::character, to_title_case(chr_code)))
  }

[documentation remark]

### Always copy examples contained in the symbol's description remark
    into the documentation

### Use only one of the following topics: Characters

# std_types::character/std::to_title_case (a builtin method)

