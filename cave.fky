#!/usr/bin/env fkyrun

  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
  This is a very basic implementation of a scramble like video game to be played
  on a character console.

  https://en.wikipedia.org/wiki/Scramble_(video_game)

  This is by purpose only a skeleton of the game - waiting for *you* to develop
  it into a full fledged action game!

<namespace my_types>

<require basic/stdlib>
<require terminal/terminal>

# Dynamic Items Types

$CANNON .
$SHOT .
$LASER_BEAM .

# Attributes

$type_of () # used for dynamic items
$symbol_of () # used for dynamic items
$colour_of () # used for dynamic items
$frequency_of (!) # used for dynamic items
$tick_of () # used for dynamic items
$x_of () # used for dynamic items
$y_of () # used for dynamic items
$dx_of () # used for dynamic items
$dy_of () # used for dynamic items
$y1_of () # used for dynamic items
$y2_of () # used for dynamic items

# Constants

$WIDTH 80 # the width of the cave in character columns
$HEIGHT 25 # the height of the cave in character rows
$CAVE_HEIGHT 2*HEIGHT # the height of the cave in half character rows

$my_types::cannon std_types::object
  .type_of CANNON
  .x_of undefined
  .y_of undefined
  .dx_of undefined
  .dy_of undefined
  .symbol_of SHOT_SYMBOL
  .colour_of SHOT_COLOUR
  .frequency_of undefined
  .tick_of undefined

$my_types::laser_beam std_types::object
  .type_of LASER_BEAM
  .x_of undefined
  .y1_of undefined
  .y2_of undefined

#
  The height of a character is approximately about twice the size of its width.

  So we use half-blocks to accommodate for this inbalance.

# unicode graphic characters

$FULL_BLOCK '@0x2588;'
$UPPER_HALF_BLOCK '@0x2580;'
$LOWER_HALF_BLOCK '@0x2584;'
$SPACESHIP_HEAD '@0x2326;'
$SPACESHIP_TAIL '@0x2327;'
$CANNON_SYMBOL '@0x25e2;'
$STAR_SYMBOL '@0x2726;'
$MINE_SYMBOL '@0x2738;'
$SHOT_SYMBOL '\'
$LASER_BEAM_SYMBOL '@0x2502;'
$LASER_BEAMER_SYMBOL '@0x2551;'

# additional colours (base colours are defined in the library)

$DARK_GREY '@0x202020;'
$ORANGE '@0xff8000;'
$SKY_BLUE '@0xc0c0ff;'

# game element colours

$SPACESHIP_COLOUR BLUE
$FUEL_TANK_COLOUR BLUE
$FUEL_TANK_TEXT_COLOUR WHITE
$STAR_COLOUR GREEN
$MINE_COLOUR DARK_GREY
$CANNON_COLOUR RED
$SHOT_COLOUR YELLOW
$LASER_BEAMER_COLOUR ORANGE
$LASER_BEAM_COLOUR YELLOW

# Global Variables

$dynamic_items undefined
  # a list of "dynamic items" like cannons, shots or laser beams

$rng undefined
  # our random number generator

$ceiling_y undefined
  # the current y-position of the cave's ceiling measured in half blocks

$floor_y undefined
  # the current y-position of the cave's floor measured in half blocks

$spaceship_x undefined
  # the x-coordinate of the ship's tail in screen coordinates (1..80)

$spaceship_y undefined
  # the y-coordinate of the ship's tail in screen coordinates (1..25)

$cave_length undefined
  # the total length of the cave in character positions

$cave_draw_x undefined
  # the current drawing position measured from the start of the cave (one based)

$cave_start_x undefined
  # the cave position of the current leftmost screen column

$fuel undefined
  # the current amount of fuel

$next_fuel_tank_x undefined
  # the x-position of the next fuel tank measured from the start of the cave

$previous_ceiling_y undefined
  # the previous value of <ceiling_y>

$previous_floor_y undefined
  # the previous value of <floor_y>

$colours_behind_space_ship undefined
  # used to restore the colours under the ship

# Main

  We check for the standard terminal size.

  The cave would look different for other resolutions
  and results (highscores!) could not be compared.

get_terminal_size! STDIN_FILENO $terminal_width $terminal_height
on terminal_width != 80 || terminal_height != 25:
  Error! "
    Please change your terminal size to 80x25!
	   You current size = @(terminal_width)x@(terminal_height).

# Initialize The Terminal

print! "@esc;[?47h" # switch to alternate screen
print! "@esc;[33s" # store cursor position
get_terminal_attributes! STDIN_FILENO $original_attributes
$attributes original_attributes
use_canonical_mode &attributes false #  no line-buffering ...
echo_characters &attributes false # ... and no echoing of typed in characters
set_terminal_attributes! $_success STDIN_FILENO attributes
cursor_off! # we want no blinking cursor

# Create A Terminal Object

create_terminal $terminal terminal_width terminal_height
  # must be called before any other terminal function

# Start The Game And Catch Errors

  catching errors is important to restore the terminal to a sane state

start_game!

$start_game:
  show_welcome_screen! !terminal

  # Initialize Global Variables

  !dynamic_items empty_list
  !rng mersenne_twister(4715)
  next_value &rng !ceiling_y 20
  !ceiling_y ceiling_y+1
  next_value &rng !floor_y 21
  !floor_y CAVE_HEIGHT+1-floor_y
  !spaceship_x 1
  !spaceship_y 13
  !cave_length 600
  !cave_draw_x 0
  !cave_start_x 1
  !fuel 200
  !next_fuel_tank_x 50

  # draw the initial view of the cave

  set_clear_colour &terminal DARK_GREY
  clear &terminal

  draw_cave_columns 1 WIDTH # fill all columns of the screen
    !terminal !rng !cave_draw_x
    !ceiling_y !floor_y
    !previous_ceiling_y !previous_floor_y
    !dynamic_items

  draw_spaceship !terminal !colours_behind_space_ship
    # draw the spaceship and save its background colours

  update_terminal_window! !terminal

  undraw_spaceship !terminal
    # "undraw" the spaceship and restore the original background colours

  current_time! $t # needed to compute timeouts
  loop:
    plus &t 0.08 # one movement per 80 ms
    current_time! $t1
    $timeout t-t1
    get_key! $key timeout
    on key == 'q': quit! # the user wants to quit the game
    on key.is_defined: # the user pressed a key
      current_time! $t2
      sleep! t-t2 # let us sleep for the rest of the slot time

    # check fuel

    if !fuel !spaceship_y
      fuel > 0
      -> fuel-1 spaceship_y
      -> fuel spaceship_y+1 # out of fuel! -> move the spaceship downwards

    # update fuel and space ship position

    if !fuel !spaceship_x !spaceship_y
      fuel >= 3: # fuel needed for steering
	case key
	  'w', 'j' -> fuel-3 spaceship_x spaceship_y-1 # up
	  's', 'n' -> fuel-3 spaceship_x spaceship_y+1 # down
	  'a', 'v':
	    if
	      spaceship_x > 1
	      -> fuel-3 spaceship_x-1 spaceship_y # left
	      do_not_move_the_spaceship
	  'd', 'b':
	    if
	      spaceship_x < WIDTH
	      -> fuel-3 spaceship_x+1 spaceship_y #right
	      do_not_move_the_spaceship
	  do_not_move_the_spaceship
      do_not_move_the_spaceship

    $do_not_move_the_spaceship -> fuel spaceship_x spaceship_y

    # set the background colour for the next column

    inc &cave_start_x
    $distance_to_exit cave_length-cave_draw_x
    set_clear_colour &terminal
      if
	distance_to_exit >= 0:
	  if
	    distance_to_exit > 100
	    -> DARK_GREY
	    :
	      $a distance_to_exit
	      $b 100-a
	      -> colour_mixture(DARK_GREY = a SKY_BLUE = b)
	-> SKY_BLUE
    scroll_left &terminal
      # scroll the whole cave left by 1 character column
    draw_next_cave_column
      !terminal !rng !cave_draw_x
      !ceiling_y !floor_y
      !previous_ceiling_y !previous_floor_y
      !dynamic_items
    draw_fuel !terminal
    draw_dynamic_items !terminal

    # check for collisions

    hit_an_obstacle $msg !fuel
    if
      msg.is_defined:
	draw_message !terminal "
	  Your ship @(msg)!

	  Press 'c' to play again or 'q' to quit.
	restart_or_quit!

      :
	draw_spaceship !terminal !colours_behind_space_ship
	update_terminal_window! !terminal
	undraw_spaceship !terminal
	undraw_dynamic_items !terminal
	update_dynamic_items !dynamic_items

	if
	  cave_draw_x+spaceship_x > cave_length+WIDTH:
	    draw_message !terminal "
	      Congratulations

	       You survived!

	      Press 'q' to end the game
	    restart_or_quit!
	  next

$show_welcome_screen:
  # Draw Welcome Screen

  set_clear_colour &terminal WHITE
  clear &terminal
  draw_text &terminal 10 3 "
			Welcome to the CAVE!

	   (an action game for console/terminal windows)

    Try to survive and escape from the cave into the clear daylight!

    Avoid all obstacles but hit the fuel tanks to refuel your ship!


		'w' or 'j': move shaceship up

		's' or 'n': move shaceship down

		'a' or 'v': move shaceship backwards

		'd' or 'b': move shaceship forwards

		'q':        quit the game


		Press any key to start the game.

  update_terminal_window! !terminal
  get_key! $key
  on key == 'q': quit!
  -> terminal

$update_terminal_window:
  update &terminal $output
    # create output character stream that will update the terminal window
  print! output
    # print the generated character stream
  -> terminal

# Drawing Routines

$draw_vertical_bar:
  #
    draws a vertical stack of block graphics characters

    *x* is the character column where to draw the bar

    *top_y* and *bottom_y* are measured in half rows!
  (
    x
    top_y
    bottom_y
  )
  $y (top_y+1) >> 1 # in rows
  draw_top

  $draw_top:
    if
      top_y.is_even:
	set_draw_colour_at &terminal x y BLACK
	set_character_at &terminal x y LOWER_HALF_BLOCK
	inc &y
	draw_mid
      draw_mid

  $draw_mid:
    repeat (bottom_y >> 1) - (top_y >> 1)
      :
	set_draw_colour_at &terminal x y BLACK
	set_character_at &terminal x y FULL_BLOCK
	inc &y
	next
      draw_bottom

  $draw_bottom:
    if
      bottom_y.is_odd:
	set_draw_colour_at &terminal x y BLACK
	set_character_at &terminal x y UPPER_HALF_BLOCK
	-> terminal
      -> terminal

$draw_next_cave_column:
  set_clear_colour &terminal undefined
  if
    cave_draw_x <= cave_length:
      draw_cave_columns 80 80 # draw a new right-most character column
    ->
      terminal rng cave_draw_x+1
      ceiling_y floor_y
      previous_ceiling_y previous_floor_y
      dynamic_items

$draw_cave_columns:
  #
    draws a new column of the cave
  (
    first_x # the first horizontal screen position
    last_x # the last horizontal screen position
  )
  from_to first_x last_x
    : (x)
      inc &cave_draw_x

      # draw the walls of the cave:

      draw_vertical_bar !terminal x 1 ceiling_y # draw the ceiling
      draw_vertical_bar !terminal x floor_y CAVE_HEIGHT # draw the floor

      # add dynamic content

      $y1 (ceiling_y+1 .div. 2) + 1
      $y2 (floor_y-1 .div. 2)

      maybe_draw_fuel_tank

      $maybe_draw_fuel_tank:
	if
	  cave_draw_x >= next_fuel_tank_x && previous_ceiling_y < ceiling_y:
	    next_value &rng $r 7
	    if
	      r == 1:
		set_draw_colour_at &terminal x y1-1 BLACK
		set_character_at &terminal x y1-1 FULL_BLOCK
		set_clear_colour_at &terminal x y1 FUEL_TANK_COLOUR
		set_draw_colour_at &terminal x y1 FUEL_TANK_TEXT_COLOUR
		set_character_at &terminal x y1 'F'
		!next_fuel_tank_x cave_draw_x+20
		minus &ceiling_y 3
		max &ceiling_y 2
		update_floor_and_ceiling
	      maybe_draw_laser_beam
	  maybe_draw_laser_beam


      $maybe_draw_laser_beam:
	if
	  cave_draw_x > 400 && cave_draw_x <= 500:
	    next_value &rng $r 40
	    if
	      r == 1:
		set_draw_colour_at &terminal x y1-1 LASER_BEAMER_COLOUR
		set_character_at &terminal x y1-1 LASER_BEAMER_SYMBOL
		set_draw_colour_at &terminal x y2+1 LASER_BEAMER_COLOUR
		set_character_at &terminal x y2+1 LASER_BEAMER_SYMBOL
		push &dynamic_items
		  my_types::laser_beam
		    .x_of cave_draw_x
		    .y1_of y1
		    .y2_of y2
		update_floor_and_ceiling
	      maybe_draw_cannon
	  maybe_draw_cannon

      $maybe_draw_cannon:
	if
	  cave_draw_x > 300 && previous_floor_y >= floor_y:
	    next_value &rng $r 20
	    if
	      r == 14:
		set_draw_colour_at &terminal x y2+1 CANNON_COLOUR
		set_character_at &terminal x y2+1 CANNON_SYMBOL
		push &dynamic_items
		  my_types::cannon
		    .x_of cave_draw_x-1
		    .y_of y2
		    .dx_of -1
		    .dy_of -1
		    .frequency_of
		      if
			cave_draw_x > 500
			-> 10
			-> 20
		    .tick_of 0
		update_floor_and_ceiling
	      maybe_draw_mine
	  maybe_draw_mine

      $maybe_draw_mine:
	if
	  cave_draw_x > 200:
	    next_value &rng $r 12
	    if
	      r == 1:
		next_value &rng $mine_y y1 .. y2
		set_draw_colour_at &terminal x mine_y MINE_COLOUR
		set_character_at &terminal x mine_y MINE_SYMBOL
		update_floor_and_ceiling
	      maybe_draw_star
	  maybe_draw_star

      $maybe_draw_star:
	if
	  cave_draw_x > 100:
	    next_value &rng $r 12
	    if
	      r == 1:
		next_value &rng $star_y y1 .. y2
		set_draw_colour_at &terminal x star_y STAR_COLOUR
		set_character_at &terminal x star_y STAR_SYMBOL
		update_floor_and_ceiling
	      update_floor_and_ceiling
	  update_floor_and_ceiling

      $update_floor_and_ceiling:
	!previous_ceiling_y ceiling_y
	!previous_floor_y floor_y

	# update the ceiling height

	next_value &rng $cr 5
	!ceiling_y ceiling_y+cr-3 # make a random change
	max &ceiling_y 2 # not too high
	min &ceiling_y 35 # not too low

	# update the floor height

	next_value &rng $fr 5
	!floor_y floor_y+fr-3 # make a random change
	min &floor_y CAVE_HEIGHT # not too low
	max &floor_y 16 # not too high

	# check whether the cave would be too narrow

	$cave_height floor_y-ceiling_y # the height of the cave
	if
	  cave_height < 15: # too narrow?
	    $delta (15-cave_height) .div. 2 # how much?
	    minus &ceiling_y delta # distribute the change to ceiling ...
	    plus &floor_y delta # ... and floor
	    next
	  next
    -> # return state
      terminal rng cave_draw_x
      ceiling_y floor_y
      previous_ceiling_y previous_floor_y
      dynamic_items

$draw_fuel:
  set_clear_colour &terminal BLACK
  if
    fuel > 0:
      set_draw_colour &terminal WHITE
      draw_text terminal 1 1 "Fuel: @(pad_left(fuel 4))"
    :
      set_draw_colour &terminal RED
      draw_text terminal 1 1 "Out of fuel!"

$draw_dynamic_items:
  for_each dynamic_items
    : (item)
      $x x_of(item)+1-cave_start_x
      case type_of(item)
	LASER_BEAM:
	  if
	    (cave_start_x .mod. 20) >= 15:
	      from_to y1_of(item) y2_of(item)
		: (y)
		  set_draw_colour_at &terminal x y LASER_BEAM_COLOUR
		  set_character_at &terminal x y LASER_BEAM_SYMBOL
		  next
		next
	    next
	SHOT:
	  $y y_of(item)
	  set_draw_colour_at &terminal x y colour_of(item)
	  set_character_at &terminal x y symbol_of(item)
	  next
	next
    -> terminal

$undraw_dynamic_items:
  for_each dynamic_items
    : (item)
      $x x_of(item)+1-cave_start_x
      case type_of(item)
	LASER_BEAM:
	  if
	    (cave_start_x .mod. 20) >= 15:
	      from_to y1_of(item) y2_of(item)
		: (y)
		  set_character_at &terminal x y ' '
		  next
		next
	    next
	SHOT:
	  $y y_of(item)
	  set_character_at &terminal x y ' '
	  next
	next
    -> terminal

$update_dynamic_items:
  #
    a <map_reduce> is used to be able to

    * create new items

    * delete items that are no longer visible

  map_reduce dynamic_items
    : (item)
      if
	x_of(item) <= cave_start_x
	-> empty_list # the item is no longer visible - delete it
	:
	  case type_of(item)
	    CANNON:
	      inc &item.tick_of
	      if
		tick_of(item) == frequency_of(item)
		->
		  list
		    item(.tick_of 0) # reset the tick counter of the cannon
		    item(.type_of SHOT) # add a shot as a new item
		-> list(item)
	    SHOT:
	      $new_x x_of(item)+dx_of(item)
	      $new_y y_of(item)+dy_of(item)
	      if
		&&
		  new_x > cave_start_x
		  new_y > 1
		  character_at(terminal new_x-cave_start_x new_y) == ' '
		->
		  list
		    item
		      .x_of new_x
		      .y_of new_y
		-> empty_list # crashed into an obstacle
	    -> list(item)
    append
    empty_list

$draw_spaceship
  #
    draws the spaceship
  :
    set_draw_colour_at &terminal spaceship_x spaceship_y SPACESHIP_COLOUR
    set_draw_colour_at &terminal spaceship_x+1 spaceship_y SPACESHIP_COLOUR
    set_character_at &terminal spaceship_x spaceship_y SPACESHIP_TAIL
    set_character_at &terminal spaceship_x+1 spaceship_y SPACESHIP_HEAD

    # draw cone of light

    $RX 20
    $RY 5

    $cx spaceship_x
    $cy spaceship_y

    $min_x cx
    $max_x min(cx+RX WIDTH)
    $min_y max(cy-RY 1)
    $max_y min(cy+RY HEIGHT)

    !colours_behind_space_ship empty_list
    from_to min_y max_y
      : (y)
	$clear_colour_line empty_list
	from_to min_x max_x
	  : (x)
	    $clear_colour clear_colour_at(terminal x y)
	    push &clear_colour_line clear_colour
	    $dx x-cx
	    $dy 2*(y-cy)
	    if
	      dx >= 2*abs(dy):
		$distance min(sqrt(dx*dx+dy*dy) RX)
		$lighting_colour
		  colour_mixture
		    GREY = RX-distance
		    clear_colour = distance
		set_clear_colour_at &terminal x y lighting_colour
		next
	      next
	  :
	    push &colours_behind_space_ship clear_colour_line
	    next
      -> terminal colours_behind_space_ship

$undraw_spaceship:
  set_character_at &terminal spaceship_x spaceship_y ' '
  set_character_at &terminal spaceship_x+1 spaceship_y ' '

  $RX 20
  $RY 5

  $cx spaceship_x
  $cy spaceship_y

  $min_x cx
  $max_x min(cx+RX WIDTH)
  $min_y max(cy-RY 1)
  $max_y min(cy+RY HEIGHT)

  from_to min_y max_y
    : (y)
      $clear_colour_line colours_behind_space_ship(y+1-min_y)
      from_to min_x max_x
	: (x)
	  set_clear_colour_at &terminal
	    x y clear_colour_line(x+1-min_x)
	  next
	next
    -> terminal

$draw_message
  #
    draws a message in the center of the screen
  :
    (
      msg # the message to draw
    )
    set_draw_colour &terminal BLACK
    set_clear_colour &terminal WHITE
    rows_and_columns $rows $_columns msg
    $row 13-div(rows 2)
    for_each split(msg '@nl;')
      : (line)
	draw_text &terminal
	  div((WIDTH-length_of(line)) 2)+1 row
	  line
	inc &row
	next
      -> terminal

$hit_an_obstacle:
  # checks whether the ship hit any obstacle and what kind of obstacle was hit

  $msg undefined
  check spaceship_x+1 spaceship_y:
    check spaceship_x spaceship_y -> msg fuel

  $check: (x y continuation)
    $chr character_at(terminal x y)
    if
      chr == 'F': # refuel
	plus &fuel 100
	continuation
      :
	if
	  chr != ' ':
	    !msg "crashed into the walls of the cave"
	    case chr
	      STAR_SYMBOL:
		!msg "hit a floating star"
		continuation
	      MINE_SYMBOL:
		!msg "hit a mine"
		continuation
	      LASER_BEAM_SYMBOL:
		!msg "was hit by a laser beam"
		continuation
	      LASER_BEAMER_SYMBOL:
		!msg "crashed into a laser beamer"
		continuation
	      SHOT_SYMBOL:
		!msg "was hit by the shot of a cannon"
		continuation
	      CANNON_SYMBOL:
		!msg "crashed into a cannon"
		continuation
	      continuation
	  continuation

$restart_or_quit:
  update_terminal_window! !terminal
  loop:
    get_key! $key
    case! key
      'c' start_game
      'q' quit
      next

$quit:
  # restore all changes we made to input buffering and echoing

  set_terminal_attributes! $_success STDIN_FILENO original_attributes
  print! "@esc;[u" # restore cursor position
  print! "@esc;[?47l" # switch to default screen
  print! "@esc;[0m" # set default colours
  cursor_on!
  terminate!
