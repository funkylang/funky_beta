#!/usr/bin/env fkyrun

  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

<require basic/stdlib>
<require terminal/terminal>
<require terminal/events>
<require web/server>
<require web/terminal>

<allow unused>

# io (global data)

$clients_of () # virtual terminals
$board_of ()
$rng_of ()
$player_mask_of ()
$changed_fields_of ()
$job_id_of ()

# virtual terminal (per client data)

$player_no_of () # the index no. of the player using this terminal
$x_of () # the x position of the player within the board
$y_of () # the y position of the player within the board
$sx_of () # the horizontal start position of the board withing the terminal
$sy_of () # the vertical start position of the board withing the terminal
$first_x_of () # the x position of the first visible field within the board
$first_y_of () # the y position of the first visible field within the board
$last_x_of () # the x position of the last visible field within the board
$last_y_of () # the y position of the last visible field within the board

$action_of () # the last key press

$RED_CIRCLE 'ðŸ”´'
$BLUE_CIRCLE 'ðŸ”µ'
$ORANGE_CIRCLE 'ðŸŸ '
$YELLOW_CIRCLE 'ðŸŸ¡'
$GREEN_CIRCLE 'ðŸŸ¢'
$PURPLE_CIRCLE 'ðŸŸ£'
$BROWN_CIRCLE 'ðŸŸ¤'

$circles
  list
    RED_CIRCLE
    BLUE_CIRCLE
    ORANGE_CIRCLE
    YELLOW_CIRCLE
    GREEN_CIRCLE
    PURPLE_CIRCLE
    BROWN_CIRCLE

$FRAME_RATE 6

$std_types::generic_terminal
  .player_no_of undefined
  .x_of undefined
  .y_of undefined
  .first_x_of undefined
  .first_y_of undefined
  .last_x_of undefined
  .last_y_of undefined
  .sx_of undefined
  .sy_of undefined
  .action_of undefined

load! $universal_client "universal_client.html"
append "<!DOCTYPE html>@nl;" &universal_client

$BOARD_WIDTH 100
$BOARD_HEIGHT 100

$proto_io std_types::io
  .clients_of empty_hash_table
  .player_mask_of 0
  .changed_fields_of empty_list
  .rng_of undefined
  .board_of undefined

initialize_terminal: (_terminal)
  $io proto_io
  $full_line dup("â–’" BOARD_WIDTH)
  $board
    append
      list(full_line)
      dup
	list
	  append
	    "â–’"
	    dup(" " BOARD_WIDTH-2)
	    "â–’"
	BOARD_HEIGHT-2
      list(full_line)
  current_time! $t
  !io.rng_of mersenne_twister((1'000'000'000*second_of(t)).to_integer)
  set_random_blocks &io &board 1500
  !io.board_of board
  enable_logging &io 3
  start_web_server! &io 8000
  start_reading_from &io STDIN_FILENO
  loop:
    get_events! &io $events
    handle_web_server_events &io &events
    for_each events
      : (event)
	event $type $fd $argument
	case type
	  WEBSOCKET_CLOSED:
	    logout &io fd
	    next!
	  next
      :
	handle_websocket_terminal_events &io &events
	for_each events
	  : (event)
	    event $type $fd $argument
	    case type
	      CONNECT_TERMINAL:
		login &io fd argument
		next!
	      KEY_PRESS:
		handle_key_press &io fd argument
		next!
	      READ:
		if
		  fd == STDIN_FILENO:
		    stop_web_server &io
		    terminate!
		  :
		    log_unhandled_event &io event
		    next!
	      GET:
		$uri argument
		get_requested_resource &io fd uri
		next!
	      :
		log_unhandled_event &io event
		next!
	  :
	    #handle_jobs &io
	    next!

$set_random_blocks: (io board n)
  repeat n
    :
      get_empty_position &io $x $y board
      !board(y)(x) 'â–’'
      next
    -> io board

$get_empty_position: (io board)
  $x undefined
  $y undefined
  loop:
    next_value &io.rng_of !x BOARD_WIDTH
    next_value &io.rng_of !y BOARD_HEIGHT
    if
      board(y)(x) == ' '
      -> io x y
      next

$get_requested_resource: (io fd uri)
  case uri
    "/":
      return_http_resource io fd uri universal_client
    :
      http_resource_not_found io fd uri

$login: (io fd dom_info)
  log &io 3 -> "login from @(fd.serialize)"
  $player_mask player_mask_of(io)
  from_to $player_no 1 7
    : (no)
      if
	player_mask & (1 << no) != 0
	next
	-> no
    -> undefined
  if
    player_no.is_undefined:
      log &io 1 "too many players"
      close_connection io fd
    :
      !io.player_mask_of player_mask | (1 << player_no)
      $board board_of(io)
      get_empty_position &io $x $y board
      !board(y)(x) circles(player_no)
      !io.board_of board
      log &io 3 -> "board position: @(x) @(y)"
      push &io.changed_fields_of tuple(x y)
      create_web_terminal &io $vt fd dom_info
      !vt.player_no_of player_no
      !vt.x_of x
      !vt.y_of y
      !vt.action_of undefined
      log &io 2 -> "player @(player_no) joined the game at (@(x), @(y))"
      initialize_vt &vt x y
      draw_board &vt board_of(io)
      update &vt $commands
      send_websocket_text_message &io fd commands
      !io.clients_of(fd) vt
      if
	player_mask == 0:
	  log &io 2 -> "game started"
	  run_at io 1/FRAME_RATE next_frame
	-> io

$logout: (io fd)
  $clients clients_of(io)
  $vt clients(fd)
  $player_no player_no_of(vt)
  log &io 2 -> "player @(player_no) left the game"
  !io.player_mask_of player_mask_of(io) ^ (1 << player_no)
  $x x_of(vt)
  $y y_of(vt)
  !io.board_of(y)(x) ' '
  push &io.changed_fields_of tuple(x y)
  !clients(fd) undefined
  !io.clients_of clients
  if
    clients.is_empty:
      #cancel &io job_id_of(io)
      log io 2 "all players left the game"
    -> io

$handle_key_press: (io fd key)
  log &io 4 -> "key press: @(key)"
  $vt clients_of(io)(fd)
  case key
    CURSOR_LEFT, CURSOR_RIGHT, CURSOR_UP, CURSOR_DOWN:
      !vt.action_of key
      !io.clients_of(fd) vt
      -> io
    :
      !vt.action_of undefined
      !io.clients_of(fd) vt
      -> io

$next_frame: (io)
  log &io 4 -> "next frame"
  $clients clients_of(io)
  $board board_of(io)
  $changed_fields empty_list
  for_each changed_fields_of(io)
    : (field)
      field $x $y
      push &changed_fields field
      next
    :
      !io.changed_fields_of empty_list
      for_each clients
	: (fd vt)
	  $x x_of(vt)
	  $y y_of(vt)
	  $first_x first_x_of(vt)
	  $first_y first_y_of(vt)
	  $last_x last_x_of(vt)
	  $last_y last_y_of(vt)
	  $horizontal_border (last_x-first_x+1) .div. 4
	  $vertical_border (last_y-first_y+1) .div. 4
	  $min_x first_x+horizontal_border
	  $max_x last_x-horizontal_border
	  $min_y first_y+vertical_border
	  $max_y last_y-vertical_border
	  case action_of(vt)
	    CURSOR_LEFT:
	      if
		board(y)(x-1) == ' ':
		  !board(y)(x) ' '
		  push &changed_fields tuple(x y)
		  minus &x 1
		  !board(y)(x) circles(player_no_of(vt))
		  push &changed_fields tuple(x y)
		  !vt.x_of x
		  if
		    x < min_x && first_x > 1:
		      move_left &vt board
		      update_vt
		    update_vt
		:
		  !vt.action_of undefined
		  update_vt
	    CURSOR_RIGHT:
	      if
		board(y)(x+1) == ' ':
		  !board(y)(x) ' '
		  push &changed_fields tuple(x y)
		  plus &x 1
		  !board(y)(x) circles(player_no_of(vt))
		  push &changed_fields tuple(x y)
		  !vt.x_of x
		  if
		    x > max_x && last_x < BOARD_WIDTH:
		      move_right &vt board
		      update_vt
		    update_vt
		:
		  !vt.action_of undefined
		  update_vt
	    CURSOR_UP:
	      if
		board(y-1)(x) == ' ':
		  !board(y)(x) ' '
		  push &changed_fields tuple(x y)
		  minus &y 1
		  !board(y)(x) circles(player_no_of(vt))
		  push &changed_fields tuple(x y)
		  !vt.y_of y
		  if
		    y < min_y && first_y > 1:
		      move_up &vt board
		      update_vt
		    update_vt
		:
		  !vt.action_of undefined
		  update_vt
	    CURSOR_DOWN:
	      if
		board(y+1)(x) == ' ':
		  !board(y)(x) ' '
		  push &changed_fields tuple(x y)
		  plus &y 1
		  !board(y)(x) circles(player_no_of(vt))
		  push &changed_fields tuple(x y)
		  !vt.y_of y
		  if
		    y > max_y && last_y < BOARD_HEIGHT:
		      move_down &vt board
		      update_vt
		    update_vt
		:
		  !vt.action_of undefined
		  update_vt
	    next

	  $update_vt:
	    !clients(fd) vt
	    next
	:
	  if
	    changed_fields.is_empty:
	      !io.clients_of clients
	      reschedule
	    :
	      log &io 4 "sending new board"
	      for_each clients
		: (fd vt)
		  $cw character_width_of(vt)
		  $lh line_height_of(vt)
		  set_clear_colour &vt WHITE
		  set_draw_colour &vt BLACK
		  $sx sx_of(vt)
		  $sy sy_of(vt)
		  $first_x first_x_of(vt)
		  $first_y first_y_of(vt)
		  $last_x last_x_of(vt)
		  $last_y last_y_of(vt)
		  for_each changed_fields
		    : (field)
		      field $x $y
		      if
			&&
			  x >= first_x && x <= last_x
			  y >= first_y && y <= last_y
			:
			  $chr board(y)(x)
			  $cx sx+(x-first_x)*2*cw
			  $cy sy+(y-first_y)*lh
			  if
			    width_of(chr) == 2:
			      draw_character &vt cx cy chr
			      next
			    :
			      draw_text &vt cx cy string(chr chr)
			      next
			next
		    :
		      update &vt $commands
		      !clients(fd) vt
		      #log &io 4 -> "sending commands: @(commands)"
		      send_websocket_text_message &io fd commands
		      next
		reschedule

      $reschedule:
	!io.board_of board
	!io.clients_of clients
	run_at &io 1/FRAME_RATE next_frame
	-> io undefined

$move_left: (vt board)
  $sx sx_of(vt)
  $sy sy_of(vt)
  $first_x first_x_of(vt)
  $last_x last_x_of(vt)
  $first_y first_y_of(vt)
  $last_y last_y_of(vt)
  dec &first_x
  dec &last_x
  !vt.first_x_of first_x
  !vt.last_x_of last_x
  $field_width 2*character_width_of(vt)
  $field_height line_height_of(vt)
  move # scroll right
    &vt sx+field_width sy
    sx sy
    (last_x-first_x)*field_width (last_y-first_y+1)*field_height
  draw_text vt sx sy # first column
    map_reduce
      range(board first_y last_y)
      : (row)
	$chr row(first_x)
	if
	  width_of(chr) == 2
	  -> string(chr '@nl;')
	  -> string(chr chr '@nl;')

$move_right: (vt board)
  $sx sx_of(vt)
  $sy sy_of(vt)
  $first_x first_x_of(vt)
  $last_x last_x_of(vt)
  $first_y first_y_of(vt)
  $last_y last_y_of(vt)
  inc &first_x
  inc &last_x
  !vt.first_x_of first_x
  !vt.last_x_of last_x
  $field_width 2*character_width_of(vt)
  $field_height line_height_of(vt)
  move # scroll left
    &vt sx sy
    sx+field_width sy
    (last_x-first_x)*field_width (last_y-first_y+1)*field_height
  draw_text vt sx+(last_x-first_x)*field_width sy # last column
    map_reduce
      range(board first_y last_y)
      : (row)
	$chr row(last_x)
	if
	  width_of(chr) == 2
	  -> string(chr '@nl;')
	  -> string(chr chr '@nl;')

$move_up: (vt board)
  $sx sx_of(vt)
  $sy sy_of(vt)
  $first_x first_x_of(vt)
  $last_x last_x_of(vt)
  $first_y first_y_of(vt)
  $last_y last_y_of(vt)
  dec &first_y
  dec &last_y
  !vt.first_y_of first_y
  !vt.last_y_of last_y
  $field_width 2*character_width_of(vt)
  $field_height line_height_of(vt)
  move # scroll down
    &vt sx sy+field_height
    sx sy
    (last_x-first_x+1)*field_width (last_y-first_y)*field_height
  draw_text vt sx sy # first row
    map_reduce
      range(board(first_y) first_x last_x)
      : (chr)
	if
	  width_of(chr) == 2
	  -> string(chr)
	  -> string(chr chr)

$move_down: (vt board)
  $sx sx_of(vt)
  $sy sy_of(vt)
  $first_x first_x_of(vt)
  $last_x last_x_of(vt)
  $first_y first_y_of(vt)
  $last_y last_y_of(vt)
  inc &first_y
  inc &last_y
  !vt.first_y_of first_y
  !vt.last_y_of last_y
  $field_width 2*character_width_of(vt)
  $field_height line_height_of(vt)
  move # scroll up
    &vt sx sy
    sx sy+field_height
    (last_x-first_x+1)*field_width (last_y-first_y)*field_height
  draw_text vt sx sy+(last_y-first_y)*field_height # last row
    map_reduce
      range(board(last_y) first_x last_x)
      : (chr)
	if
	  width_of(chr) == 2
	  -> string(chr)
	  -> string(chr chr)

$initialize_vt: (vt player_x player_y)
  $vt_width width_of(vt)
  $vt_height height_of(vt)
  $field_width 2*character_width_of(vt)
  $field_height line_height_of(vt)
  $horizontal_field_count
    min(floor(vt_width/field_width).to_integer BOARD_WIDTH)
  $vertical_field_count
    min(floor(vt_height/field_height).to_integer BOARD_HEIGHT)
  $sx floor((vt_width-horizontal_field_count*field_width)/2).to_integer+1
  $sy floor((vt_height-vertical_field_count*field_height)/2).to_integer+1
  $first_x
    min
      max(player_x-(horizontal_field_count .div. 2) 1)
      BOARD_WIDTH-horizontal_field_count+1
  $last_x first_x+horizontal_field_count-1
  $first_y
    min
      max(player_y-(vertical_field_count .div. 2) 1)
      BOARD_HEIGHT-vertical_field_count+1
  $last_y first_y+vertical_field_count-1
  ->
    vt
      .sx_of sx
      .sy_of sy
      .first_x_of first_x
      .first_y_of first_y
      .last_x_of last_x
      .last_y_of last_y

$draw_board: (vt board)
  $sx sx_of(vt)
  $sy sy_of(vt)
  $first_x first_x_of(vt)
  $first_y first_y_of(vt)
  $last_x last_x_of(vt)
  $last_y last_y_of(vt)
  $field_height line_height_of(vt)
  set_clear_colour &vt GREEN
  clear &vt
  set_clear_colour &vt WHITE
  set_draw_colour &vt BLACK
  from_to first_y last_y
    : (y)
      $row board(y)
      $buf ""
      from_to first_x last_x
	: (x)
	  $chr row(x)
	  if
	    width_of(chr) > 1:
	      push &buf chr
	      next
	    :
	      push &buf chr
	      push &buf chr
	      next
	:
	  draw_text &vt sx sy+(y-first_y)*field_height buf
	  next
    -> vt
