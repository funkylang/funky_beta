#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or print to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
  Topic: Errors

  In Funky errors are handled via so-called error objects.

  In the case an error occurs:

  * if a function would return a single value, it returns an error object
    instead

  * if a function would return several values, it returns the expected number
    of results, replacing each result with the error object

  * if a function would return no value at all, it **will** return a single
    error object to its caller, which results in an error in the caller and
    leads to propagation of the error

  Error objects contain only very few and special methods. Any attempt to
  access other methods will propagate the error.

  To check whether a value is an error object or not, use <std::is_an_error>.

  Example:

    load $buf filename
    on buf.is_an_error: Error "
      Could not load file "@(filename)"!

$std::Error:
  #
    displays an error message and terminates the program

    All arguments are converted to strings, concatenated and printed to stderr.

    Afterwards the program terminates with exit code <EXIT_FAILURE>.

    This function needs I/O-access rights.

    Topic: Errors

    See also: exit
  (
    args*
  )
  eprintln! "ERROR: " create_string(args) .without_suffix. '@nl;'
  exit! EXIT_FAILURE

$std::to_error_message_string:
  (
    err # the error object
  )
  $str error_message_text_of(err)
  $errno errno_of(err)
  $details error_details_of(err)
  update_if errno.is_defined &str -> append(str " - " strerror(errno))
  if
    details.is_undefined
    -> str
    :
      if
	details.is_a_string
	-> "
	  @(str) ("@(details)")@
	:
	  to_string &details
	  if
	    details.is_an_error
	    -> str
	    -> "@(str) (@(details))"

$std::unreachable:
  #
    This function is called if the program flow reaches a point that should
    never be reached.
  error "
    control flow reached "unreachable" point
