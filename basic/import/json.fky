#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
  Topic: Data Exchange

$std::from_json: (text)
  $lines split_into_lines(text)
  $tokens map_reduce(lines tokenize)
  extract &tokens $obj
  if
    tokens.is_empty
    -> obj
    : error PARSE_ERROR "text contains multiple objects" tokens

$tokenize: (line)
  $tokens empty_list
  $i 1
  $n length_of(line)
  loop:
    if
      i > n
      -> tokens
      :
	$chr line(i)
	if
	  chr <= ' ':
	    !i i+1
	    next
	  :
	    case chr
	      '@quot;' handle_string
	      '-', '0'..'9' handle_number
	      ',', ':', '{', '}', '[', ']' handle_simple_token
	      't' handle_true
	      'f' handle_false
	      'n' handle_null
	      : error PARSE_ERROR "unexpected input" range(line i -1)

	    $handle_simple_token:
	      push &tokens chr
	      !i i+1
	      next

	    $handle_true:
	      if
		i+3 <= n && range(line i+1 i+3) == "rue":
		  !i i+4
		  push &tokens true
		  next
		: error PARSE_ERROR "invalid identifier" range(line i -1)

	    $handle_false:
	      if
		i+4 <= n && range(line i+1 i+4) == "alse":
		  !i i+5
		  push &tokens false
		  next
		: error PARSE_ERROR "invalid identifier" range(line i -1)

	    $handle_null:
	      if
		i+3 <= n && range(line i+1 i+3) == "ull":
		  !i i+4
		  push &tokens undefined
		  next
		: error PARSE_ERROR "invalid identifier" range(line i -1)

	    $handle_number:
	      $number range(line i -1)
	      parse_number &number $value
	      if
		value.is_defined:
		  !i n+1-length_of(number)
		  push &tokens value
		  next
		: error PARSE_ERROR "invalid numeric literal" number

	    $handle_string:
	      $s i
	      !i i+1
	      $str ""
	      loop handle_string_character next

	      $handle_string_character:
		if
		  i > n:
		    error PARSE_ERROR
		      "Missing closing quote in string literal"
		      range(line s -1)
		  :
		    $str_chr line(i)
		    case str_chr
		      '@quot;':
			!i i+1
			push &tokens str
			break
		      '\':
			if
			  i+1 > n
			  invalid_special_character
			  :
			    $spec_chr line(i+1)
			    case spec_chr
			      'b':
				push &str '@bs;'
				!i i+2
				next
			      'f':
				push &str '@ff;'
				!i i+2
				next
			      'n':
				push &str '@nl;'
				!i i+2
				next
			      'r':
				push &str '@cr;'
				!i i+2
				next
			      't':
				push &str '@ht;'
				!i i+2
				next
			      'u':
				if
				  i+5 <= n:
				    parse_hex range(line i+2 i+5) $rest $code
				    if
				      code.is_defined && rest.is_empty:
					push &str character(code)
					!i i+6
					next
				      invalid_special_character
				  invalid_special_character

			      'v':
				push &str '@vt;'
				!i i+2
				next
			      :
				push &str spec_chr
				!i i+2
				next

			$invalid_special_character:
			  error PARSE_ERROR
			    "Invalid special character in string literal"
			    range(line i -1)
		      :
			push &str str_chr
			!i i+1
			next

$is_simple ()

$std_types::object.is_simple false
$std_types::number.is_simple true
$std_types::string.is_simple true
$std_types::true.is_simple true
$std_types::false.is_simple true
$std_types::undefined.is_simple true

$extract: (tokens)
  $token tokens(1)
  range &tokens 2 -1
  if
    token.is_simple
    -> tokens token
    :
      case token
	'{' extract_object
	'[' extract_array
	: error PARSE_ERROR "Unexpected token" tokens

  $extract_object:
    $attributes empty_insert_order_table
    if
      tokens.is_empty
      missing_closing_brace
      :
	if
	  tokens(1) == '}'
	  -> range(tokens 2 -1) attributes
	  :
	    loop:
	      if
		length_of(tokens) < 3
		invalid_attribute
		:
		  $key tokens(1)
		  if_not
		    key.is_a_string && tokens(2) == ':'
		    invalid_attribute
		    :
		      range &tokens 3 -1
		      extract &tokens $value
		      !attributes(key) value
		      if
			tokens.is_empty
			missing_closing_brace
			:
			  case tokens(1)
			    ',':
			      range &tokens 2 -1
			      next
			    '}' -> range(tokens 2 -1) attributes
			    missing_closing_brace

    $missing_closing_brace:
      error PARSE_ERROR "Closing brace expected" tokens

    $invalid_attribute:
      error PARSE_ERROR "Invalid attribute" tokens

  $extract_array:
    if
      tokens.is_empty
      missing_closing_bracket
      :
	$items empty_list
	if
	  tokens(1) == ']'
	  -> range(tokens 2 -1) items
	  :
	    loop:
	      extract &tokens $item
	      push &items item
	      if
		tokens.is_empty
		missing_closing_bracket
		:
		  case tokens(1)
		    ',':
		      range &tokens 2 -1
		      next
		    ']' -> range(tokens 2 -1) items
		    missing_closing_bracket

    $missing_closing_bracket:
      error PARSE_ERROR "Closing bracket expected" tokens
