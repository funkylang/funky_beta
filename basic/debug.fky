#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
  Topic: Debugging

  **Attention**: Functions in the namespace "debug" are not available in
  production code.

  They can access object details via introspection which is not available in
  production code.

  These functions can also write to stderr without needing I/O-acccess rights!
  To do so they prevent parallel code execution.

  Related topics: Errors, Input-Output

$debug::to_string ()

$std_types::object/debug::to_string:
  (
    self
    indent = 0
    depth = 1
  )
  if
    is_a_plain_object(self):
      $typename debug::object_type(self)
      if
	depth == 0
	-> "
	  <@(typename)>
	:
	  $attr_indent indent+2
	  $value_indent indent+4
	  $attributes debug::object_attributes(self)
	  $buf append("@nl;" tabs_and_spaces(indent) typename "@nl;")
	  from_to_by 1 length_of(attributes) 2
	    : (i)
	      $attr_text append(tabs_and_spaces(attr_indent) attributes(i))
	      $value_text debug::to_string(attributes(i+1) value_indent depth-1)
	      append &buf
		if
		  value_text(1) == '@nl;'
		  -> "@(attr_text) =@(value_text)"
		  -> "@(attr_text) = @(value_text)"
	      next
	    -> buf
    -> debug::string(self indent depth)

$std_types::undefined/debug::to_string:
  (
    _self
    _indent = 0
    _depth = 1
  )
  -> "undefined@nl;"

$std_types::error/debug::to_string:
  (
    self
    _indent = 0
    _depth = 1
  )
  -> "@(self.to_error_message_string)@nl;"

$debug::print:
  (
    str # the string to print
  )
  debug::write str.to_utf8

$debug::println:
  #
    writes the given string and a newline character to stderr

    The function always prints the whole string and may block until *stderr* is
    ready to accept new data.

    The function can be called without I/O-access rights.

    The supplied string is converted to utf-8 before beeing written.

    Topic: Debugging

    See also: debug::print, debug::dump, debug::dump_object, debug::hexdump

    Example:

      debug::println "success"

    Error output:

      success
  (
    str # the string to print
  )
  debug::print str
  debug::print "@nl;"

#$debug::dump:
  #
    writes a string representation of an object to stderr

    The function displays a label and the object's attribute via introspection.

    The function can be called without I/O-access rights.

    The string representation is converted to utf-8 before beeing written.

    The optional *depth* argument specifies the maximum recursion depth used to
    display the object's attributes.

    Topic: Debugging

    See also: debug::dump_object, debug::println, debug::print

    Example:

      $name_of ()
      $age_of ()
      $obj
	std_types::object
	  .name_of "Albert"
	  .age_of 42
      debug::dump 2 `obj

    Error output:

      obj: object
	name_of: "Albert"
	age_of: 42
  (
    depth = 1 # the desired level of detail (recursion depth)
    label # the label to use for the expression
    expr # the expression
  )
  debug::print label
  debug::print ": "
  debug::dump_object depth expr

$debug::dump: (args*)
  $depth 1
  update_if args(1).is_an_integer &depth &args
    -> args(1) range(args 2 -1)
  $i 1
  $n length_of(args)
  loop:
    if
      i < n:
	$label args(i)
	$expr args(i+1)
	!i i+2
	$text debug::to_string(expr 2 depth)
	if
	  text(1) == '@nl;':
	    debug::print "@(label):@(text)"
	    next
	  :
	    debug::print "@(label): @(text)"
	    next
      break

$debug::dump_one:
  #
    writes a string representation of an object to stderr

    The function displays a label and the object's attribute via introspection.

    The function can be called without I/O-access rights.

    The string representation is converted to utf-8 before beeing written.

    The optional *depth* argument specifies the maximum recursion depth used to
    display the object's attributes.

    Topic: Debugging

    See also: debug::dump_object, debug::println, debug::print

    Example:

      $name_of ()
      $age_of ()
      $obj
	std_types::object
	  .name_of "Albert"
	  .age_of 42
      debug::dump_one 2 `obj

    Error output:

      obj: object
	name_of: "Albert"
	age_of: 42
  (
    depth = 1 # the desired level of detail (recursion depth)
    label # the label to use for the expression
    expr # the expression
  )
  debug::print label
  debug::print ": "
  debug::dump_object depth expr

$dump_args_to: (fd args)
  $i 1
  $n length_of(args)
  loop:
    if
      i < n:
	$name args(i)
	$expr args(i+1)
	!i i+2
	print_to! fd name ": "
	if
	  expr.is_an_error:
	    println_to! fd error_message_text_of(expr)
	    next!
	  :
	    print_to! fd serialize(expr 0)
	    next!
      break

$std::dump_to:
  #
    writes a string representation of some objects to the given file descriptor

    **Attention**: This function must be called with I/O-access rights!

    The function displays a label before each object.

    To display an object's details the function uses serialization.

    The string representation is converted to utf-8 before beeing written.

    Topic: Debugging

    See also: std::dump, std::edump, debug::dump, debug::dump_object

    Example:

      $fruits list("apple" "banana" "cherry")
      dump_to! STDOUT_FILENO `fruits

    Output:

      fruits: list <3>
	"apple"
	"banana"
	"cherry"
  (
    fd # the file descriptor to write to
    args* # an alternating sequence of labels and objects
  )
  dump_args_to! fd args

$std::dump:
  #
    writes a string representation of some objects to stdout

    **Attention**: This function must be called with I/O-access rights!

    The function displays a label before each object.

    To display an object's details the function uses serialization.

    The string representation is converted to utf-8 before beeing written.

    Topic: Debugging

    See also: std::edump, std::dump_to, debug::dump, debug::dump_object

    Example:

      $fruits list("apple" "banana" "cherry")
      dump `fruits

    Output:

      fruits: list <3>
	"apple"
	"banana"
	"cherry"

    Example:

      $value_1 27
      $value_2 list("Peter" 'x' list(47 11))
      dump! `value_1 `value_2 `(2*sqrt(9))

    Output:

      value_1: 27
      value_2: list <3>
	"Peter"
	'x'
	list <2>
	  47
	  11
      (2*sqrt(9)): 6.0
  (
    args* # an alternating sequence of labels and values
  )
  dump_args_to! STDOUT_FILENO args

$std::edump:
  #
    print an object dump to stderr

    Dumps its arguments consisting of an alternating sequence of
    expression labels and expression values using <print>. The expression values
    are converted into strings using <debug::string>.

    The depth to which debug strings shall be generated can be provided as an
    optional first argument; the default depth is 1.

    Topic: Input-Output, Debugging

    See also: debug::dump, debug::string

    Example:

      $value_1 27
      $value_2 list("Peter" 'x' list(47 11))
      edump! `value_1 `value_2 `(2*sqrt(9))

    Error output:

      value_1: 27
      value_2: list <3>
	"Peter"
	'x'
	list <2>
	  47
	  11
      (2*sqrt(9)): 6.0
  (
    args* # an alternating sequence of labels and values
  )
  dump_args_to! STDERR_FILENO args

$std::hexdump_to:
  #
    writes a hexdump of the given string to the given file descriptor

    **Attention**: This function must be called with I/O-access rights!

    The function displays the string's hexadecimal representation.

    Topic: Debugging

    See also: std::hexdump, std::ehexdump, debug::hexdump, std::dump_to

    Example:

      $data "Hello, world!"
      hexdump_to! STDOUT_FILENO data

    Output:

      00000000: 48 65 6c 6c 6f 2c 20 77 6f 72 6c 64 21
  (
    fd # the file descriptor to write to
    str # the string to dump
  )
  $i 0
  $n length_of(str)
  loop:
    if
      i >= n:
	on (i .mod. 16) != 0: print_to! fd "@nl;"
      :
	on (i .mod. 16) == 0:
	  print_to! fd hex(i 8)
	  print_to! fd ":"
	inc &i
	print_to! fd " "
	print_to! fd hex(str(i).to_integer 2)
	on (i .mod. 16) == 0: print_to! fd "@nl;"
	next!

$std::hexdump:
  #
    writes a hexdump of the given string to stdout

    **Attention**: This function must be called with I/O-access rights!

    The function displays the string's hexadecimal representation.

    Topic: Debugging

    See also: std::ehexdump, std::hexdump_to, std::dump, debug::hexdump

    Example:

      $data "Hello, world!"
      hexdump! data

    Output:

      00000000: 48 65 6c 6c 6f 2c 20 77 6f 72 6c 64 21
  (
    str # the string to dump
  )
  hexdump_to! STDOUT_FILENO str

$std::ehexdump:
  #
    writes a hexdump of the given string to stderr

    **Attention**: This function must be called with I/O-access rights!

    The function displays the string's hexadecimal representation.

    Topic: Debugging

    See also: std::hexdump, std::hexdump_to, debug::hexdump

    Example:

      $data "Hello, world!"
      ehexdump! data

    Error output:

      00000000: 48 65 6c 6c 6f 2c 20 77 6f 72 6c 64 21
  (
    str # the string to dump
  )
  hexdump_to! STDERR_FILENO str

$debug::hexdump:
  #
    writes a hexdump of the given string to stderr

    The function displays the string's hexadecimal representation.

    The function can be called without I/O-access rights.

    Topic: Debugging

    See also: std::hexdump, std::ehexdump, std::hexdump_to, debug::dump

    Example:

      $data "Hello, world!"
      debug::hexdump data

    Error output:

      00000000: 48 65 6c 6c 6f 2c 20 77 6f 72 6c 64 21
  (
    str # the string to dump
  )
  $i 0
  $n length_of(str)
  loop:
    if
      i >= n:
	on (i .mod. 16) != 0: debug::print! "@nl;"
      :
	on (i .mod. 16) == 0:
	  debug::print! hex(i 8)
	  debug::print! ":"
	inc &i
	debug::print! " "
	debug::print! hex(str(i).to_integer 2)
	on (i .mod. 16) == 0: debug::print! "@nl;"
	next!
