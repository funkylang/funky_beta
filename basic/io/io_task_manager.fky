#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or print to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
  Topic: Input-Output Task Manager

  **ATTENTION**: This module might be deprecated!

  Related topics: Input-Output, Input-Output Events

###
# Phases

  Phase 1 (parallel execution possible)

    * update the list of children (due to tasks removed in Phase 6)

    * all (ready) tasks do their computations

  Phase 2 (sequential execution guaranteed)

    * all sent messages are collected (into a "global" table)

    * all cancel requests are collected (into a "global" table)

    * all log-messages are collected

    * fork new tasks (they are not yet added)

  Phase 3 (parallel execution possible)

    * store the received messages in the task object

    * mark task if it was cancelled

  Phase 4 (sequential execution guaranteed, I/O access rights granted)

    * queue the collected log-messages for writing

    * each non-cancelled task may start an I/O operation

    * each cancelled task cancels pending I/O operations

  Phase 5 (parallel execution of checks possible)

    * if all tasks have been removed and all log-messages have been written
      then exit the program

    * if at least one task is ready then get & check I/O events without waiting

    * if no task is ready then get & check I/O events with unlimited timeout

  Phase 6 (sequential execution guaranteed, I/O access rights granted)

    * complete I/O requests

    * add new tasks

    * tasks that wish to exit are removed

    * cancelled tasks without a cancel-handler are removed, too

###
# Remarks

  Errors returned from <close()> are always ignored:

    When the open was successful and all reads and/or writes were succesful -
    how should close fail? What should/could be done?


$std::log_level 1
  #
    the used log-level

    0: no logging
    1: just print the log messages
    2: prefix the log messages with the task no.
    3: add iteration separator lines to the log output
    4: log the creation and deletion of tasks

###
# for tasks in phase 1 (compute)

# the following functions end the compute phase

$std::perform_io () # self body arguments continuation
  # start an I/O-operation

$std::pause () # self continuation
  # pause a computation to give other tasks the opportunity for I/O

$std::wait_for_message () # self continuation
  # waits until at least one message is ready to be received

# the following functions can be called within the compute phase

$std::fork () # &self task start_function

#$std::log () # &self text
  #
    the arguments are converted into a single string;
    a newline character is added if not already supplied by the caller

$std::send () # &self destination message
  # send a message to one or more tasks

#$std::cancel () # &self task_ids
  # cancels the specified tasks

$std::receive () # &self !message

$std::on_error () # &self handler

$std::on_cancel () # &self handler

###
# for tasks in phase 4 (start I/O)

$std::check_io () # self io body arguments
  # an I/O-operation has been initiated; its result must be checked

$std::on_exit () # &self handler arguments

###
# for tasks in phase 4 & 6 (start & complete I/O)

$std::performed_io () # self io arguments
  # the I/O-operation has been completed

###
#  for tasks in phase 5 (check I/O)

$std::recheck_io () # self body arguments
  # the check must be repeated

$std::complete_io () # self body arguments
  # the check must be completed in the "handle I/O"-state

$std::checked_io () # self arguments
  # the I/O-operation has been completed

###
# I/O actions

# the following actions call <perform_io>

#
  load
  save
  read
  write
  join_process
  catch_signal

$std::catch_signal ()

###
# public task methods

$std::task_id_of ()
$std::parent_of ()
$std::children_of ()

###
# private task fields

$log_messages_of ()
$exit_handlers_of ()
$error_handler_of ()
$cancel_handler_of ()
$id_of ()
$parent_id_of ()
$child_ids_of ()
$inbound_messages_of ()
$outbound_messages_of ()
$fork_requests_of ()
$cancel_requests_of ()
$is_cancelled ()

###
# REQUESTS

  A request is a tuple consisting of

  * the task object
  * the current mode
  * an I/O-function
  * the request-argument (maybe a tuple)
  * the continuation function

###
# Modes

$COMPUTE .
$WAIT .
$START_IO .
$CHECK_IO .
$COMPLETE_IO .
$EXIT .

$std::additional_error_information_of ()

$std_types::error.additional_error_information_of undefined

$std::generate_error_message ()

$std_types::error/generate_error_message: (self)
  $message error_message_text_of(self)
  $errno errno_of(self)
  update_if errno.is_defined &message:
    append &message " - "
    append message strerror(errno)
  $failed_attribute failed_attribute_of(self)
  update_if failed_attribute.is_defined &message:
    append &message " - "
    append message failed_attribute
  $additional_information additional_error_information_of(self)
  update_if additional_information.is_defined message:
    append &message " ("
    append &message additional_information
    push message ')'

$std_types::io_task std_types::object

$std_types::io_task.log_messages_of empty_list
$std_types::io_task.exit_handlers_of empty_list
$std_types::io_task.error_handler_of undefined
$std_types::io_task.cancel_handler_of undefined
$std_types::io_task.parent_id_of 0
$std_types::io_task.child_ids_of empty_list
$std_types::io_task.inbound_messages_of empty_list
$std_types::io_task.outbound_messages_of empty_list
$std_types::io_task.fork_requests_of empty_list
$std_types::io_task.cancel_requests_of empty_list
$std_types::io_task.is_cancelled false

$std_types::io_task/task_id_of: (self) -> id_of(self)
$std_types::io_task/parent_of: (self)
  $id parent_id_of(self)
  if
    id != 0
    -> id
    -> undefined

$std_types::io_task/children_of: (self) -> child_ids_of(self)

$std_types::io_task/perform_io:
  (
    self
    body
    argument = undefined
    continuation
  )
  tuple self START_IO body argument continuation

$std_types::io_task/pause: (self continuation)
  tuple self COMPUTE undefined undefined continuation

$std_types::io_task/wait_for_message: (self continuation)
  if
    inbound_messages_of(self).is_empty
    -> tuple(self WAIT undefined undefined continuation)
    -> tuple(self COMPUTE undefined undefined continuation)

$std_types::io_task/check_io: (self io body argument)
  -> CHECK_IO self io body argument

$std_types::io_task/performed_io:
  (
    self
    io
    argument = undefined
  )
  -> COMPUTE self io undefined argument

$std_types::io_task/recheck_io: (self body argument)
  -> CHECK_IO self body argument

$std_types::io_task/complete_io: (self body argument)
  -> COMPLETE_IO self body argument

$std_types::io_task/checked_io: (self argument)
  -> COMPUTE self undefined argument

$std_types::io_task/log: (self argument*)
  $str create_string(argument)
  !str
    if
      str .has_suffix. '@nl;'
      -> str
      -> push(str '@nl;')
  push &self.log_messages_of str
  -> self

$std_types::io_task/send: (self receiver message)
  if
    receiver.is_a_list && receiver.is_empty
    -> self
    :
      push &self.outbound_messages_of tuple(receiver message)
      -> self

$std_types::io_task/receive: (self)
  if
    inbound_messages_of(self).is_empty
    -> self undefined
    :
      get &self.inbound_messages_of $message
      -> self message

$std_types::io_task/cancel:
  (
    self
    task_id
  )
  if
    task_id.is_an_integer:
      push &self.cancel_requests_of task_id
      -> self
    :
      append &self.cancel_requests_of task_id.to_list
      -> self

$std_types::io_task/on_exit:
  (
    self
    handler
    argument = undefined
  )
  put &self.exit_handlers_of tuple(handler argument)
  -> self

$std_types::io_task/on_error: (self handler)
  !self.error_handler_of handler
  -> self

$std_types::io_task/on_cancel: (self handler)
  !self.cancel_handler_of handler
  -> self

###

$std_types::io_task/load: (self my_filename continuation)
  perform_io self load_request my_filename continuation

  $load_request: (task io filename)
    if
      task.is_cancelled: # we must not start an I/O operation!
	performed_io task io "" # we didn't read a single byte ...
      :
	open! $fd filename "r"
	if
	  fd.is_an_error:
	    !fd.additional_error_information_of "
	      load "@(filename)"@
	    performed_io task io fd
	  :
	    start_reading_from &io fd
	    check_io task io check_load_request tuple(fd "")

  $check_load_request: (task events argument)
    argument $fd $buf
    if
      task.is_cancelled: # we are called as a start-I/O-handler!
	$io events
	stop_reading_from &io fd
	try $_ignore_error: close! fd
	performed_io task io buf # return the partial read data
      :
	for_each events
	  : (event)
	    event $type $efd $data
	    case type
	      READ:
		if
		  efd == fd:
		    if
		      data == "":
			complete_io task complete_load_request argument
		      :
			recheck_io
			  task check_load_request tuple(fd append(buf data))
		  next
	      READ_FAILED:
		if
		  efd == fd:
		    complete_io task try_close_file tuple(fd data)
		  next
	      next
	  :
	    recheck_io task check_load_request argument

  $complete_load_request: (task io argument)
    argument $fd $buf
    stop_reading_from &io fd
    try $_ignore_error: close! fd
    performed_io task io buf

  $try_close_file: (task io argument)
    argument $fd $READ_FAILED
    stop_reading_from &io fd
    try $_ignore_error: close! fd
    performed_io task io READ_FAILED # return the error returned from <read>

$std_types::io_task/save: (self my_filename my_data continuation)
  perform_io self save_request tuple(my_filename my_data) continuation

  $save_request: (task io argument)
    argument $filename $data
    if
      task.is_cancelled: # we must not start an I/O operation!
	performed_io task io data # we didn't write a single byte ...
      :
	open! $fd filename "w"
	if
	  fd.is_an_error:
	    !fd.additional_error_information_of "
	      save "@(filename)"@
	    performed_io task io fd
	  :
	    write &io fd data
	    check_io task io check_save_request fd

  $check_save_request: (task events fd)
    if
      task.is_cancelled: # we are called as a start-I/O-handler!
	$io events
	cancel_write &io $unwritten_text fd
	try $_ignore_error: close! fd
	performed_io task io unwritten_text # return the not yet written text
      :
	for_each events
	  : (event)
	    event $type $efd $data
	    case type
	      WRITE_COMPLETED:
		if
		  efd == fd:
		    complete_io task complete_save_request fd
		  next
	      WRITE_FAILED:
		if
		  efd == fd:
		    complete_io task try_close_file tuple(fd data)
		  next
	      next
	  :
	    recheck_io task check_save_request fd

  $complete_save_request: (task io fd)
    try $_ignore_error: close! fd
    performed_io task io undefined

  $try_close_file: (task io argument)
    argument $fd $WRITE_FAILED
    try $_ignore_error: close! fd
    performed_io task io WRITE_FAILED # return the error returned from <write>

$std_types::io_task/read:
  #
    reads at least the specified number of octets
  (
    self
    my_fd
    my_length
    continuation
  )
  perform_io self start_read_request tuple(my_fd my_length) continuation

  $start_read_request: (task io argument)
    if
      task.is_cancelled: # we must not start an I/O operation!
	performed_io task io "" # we didn't read a single byte ...
      :
	argument $fd $length
	start_reading_from &io fd
	check_io task io check_read_request tuple(fd length "")

  $check_read_request: (task events argument)
    argument $fd $length $buf
    if
      task.is_cancelled: # we are called as a start-I/O-handler!
	$io events
	stop_reading_from &io fd
	performed_io task io buf # return the partial read data
      :
	for_each events
	  : (event)
	    event $type $efd $data
	    if_not
	      type == READ && efd == fd next:
		if
		  data == "":
		    complete_io task complete_read_request tuple(fd buf)
		  :
		    append &buf data
		    if
		      length_of(buf) >= length:
			complete_io task complete_read_request tuple(fd buf)
		      :
			recheck_io task check_read_request tuple(fd length buf)
	  :
	    recheck_io task check_read_request argument

  $complete_read_request: (task io argument)
    argument $fd $buf
    stop_reading_from &io fd
    performed_io task io buf

$std_types::io_task/write: (self my_fd my_text continuation)
  perform_io self write_request tuple(my_fd my_text) continuation

  $write_request: (task io argument)
    argument $fd $text
    if
      task.is_cancelled: # we must not start an I/O operation!
	performed_io task io text # we didn't write a single byte ...
      :
	write &io fd text
	check_io task io check_write_request fd

  $check_write_request: (task events fd)
    if
      task.is_cancelled: # we are called as a start-I/O-handler!
	$io events
	cancel_write &io $unwritten_text fd
	performed_io task io unwritten_text # return the not yet written text
      :
	for_each events
	  : (event)
	    event $type $efd $_data
	    if
	      type == WRITE_COMPLETED && efd == fd:
		checked_io task undefined
	      next
	  :
	    recheck_io task check_write_request fd

$std_types::io_task/join_process: (self my_pid continuation)
  perform_io self join_process_request my_pid continuation

  $join_process_request: (task io pid)
    join_process &io pid
    check_io task io join_process_request_pending pid

  $join_process_request_pending: (task events pid)
    for_each events
      : (event)
	event $type $epid $status
	if
	  type == PROCESS_JOINED && epid == pid:
	    checked_io task status
	  next
      :
	recheck_io task join_process_request_pending pid

$std_types::io_task/catch_signal: (self continuation)
  perform_io self catch_signal_request undefined continuation

  $catch_signal_request: (task io _arguments)
    start_catching_signals &io
    check_io task io catch_signal_request_pending undefined

  $catch_signal_request_pending: (task events _arguments)
    if
      task.is_cancelled:
	complete_io task cancel_catch_signal_request undefined
      :
	$signals empty_list
	for_each events
	  : (event)
	    event $type $_dummy $signal
	    if
	      type == SIGNAL:
		push &signals signal
		next
	      next
	  :
	    if
	      signals.is_empty:
		recheck_io task catch_signal_request_pending undefined
	      :
		complete_io task catch_signal_request_completed signals

  $cancel_catch_signal_request: (task io _arguments)
    stop_catching_signals &io
    performed_io task io

  $catch_signal_request_completed: (task io signals)
    stop_catching_signals &io
    performed_io task io signals

$std_types::io_task/fork:
  (
    self
    task
    continuation
    argument = undefined
  )
  push &self.fork_requests_of tuple(task continuation argument)
  -> self

$std_types::io_task/exit:
  (
    self
    status = EXIT_SUCCESS
  )
  tuple self EXIT undefined status undefined

$std::io_task_manager:
  #
    starts the main loop of the io-task manager

  (
    first_task
    start
    start_arguments = undefined
  )
  $exit_status EXIT_SUCCESS
  $io std_types::io
  $updated_requests empty_list
  $new_requests empty_list
  $cancellations empty_key_order_set
  $sent_messages empty_key_order_table
  $removed_children empty_key_order_table
  $log_message ""
  $events empty_list
  $requests
    list(tuple(first_task(.id_of 1) COMPUTE undefined start_arguments start))
  $current_task_id 1
  $iteration_no 0

  # Main Loop

  loop:
    # Phase 1

    inc &iteration_no
    map &requests compute
    update_if log_level >= 4 && removed_children.is_not_empty &log_message:
      for_each removed_children
	: (parent_id children)
	  for_each children: (child_id)
	    $parent
	      if
		parent_id != 0
		-> " (parent: @(parent_id))@nl;"
		-> "@nl;"
	    append &log_message "REMOVED TASK @(child_id)@(parent)"
	    next
	-> log_message
    !removed_children empty_key_order_table

    # Phase 2

    for_each &requests
      !current_task_id
      !new_requests
      !sent_messages
      !cancellations
      !log_message
      : (request)
	request $task $mode $body $argument $continuation
	collect_messages &task !sent_messages
	collect_cancel_requests &task !cancellations
	collect_log_messages &task !log_message
	create_new_tasks &task !current_task_id !new_requests
	push &updated_requests tuple(task mode body argument continuation)
	next
      ->
	updated_requests
	current_task_id
	new_requests
	sent_messages
	cancellations
	log_message

    # Phase 3

    $do_receive_messages not(sent_messages.is_empty)
    $do_cancel_tasks not(cancellations.is_empty)
    map &requests: (request)
      update_if do_receive_messages &request -> receive_messages(request)
      update_if do_cancel_tasks &request -> maybe_mark_as_cancelled(request)
      -> request
    !sent_messages empty_key_order_table
    !cancellations empty_key_order_set

    # Phase 4

    queue_log_message_write !io
    !log_message ""
    for_each &requests !io
      : (request)
	start_io_operation! &request !io
	push &updated_requests request
	next!
      -> updated_requests io
    !updated_requests empty_list

    # Phase 5

    $something_to_do
      ||
	new_requests.is_not_empty
	any_of(requests has_something_to_do)
    maybe_exit! something_to_do
    get_and_check_events! !requests !io something_to_do

    # Phase 6

    for_each &requests !io !removed_children !log_message !exit_status
      : (request)
	request $task $mode $body $argument $continuation
	case mode
	  COMPLETE_IO: # a task in the complete-I/O phase cannot be cancelled!
	    complete_io_operation!
	  EXIT:
	    update_if argument == EXIT_FAILURE &exit_status -> EXIT_FAILURE
	    exit_task! task !io !exit_status !removed_children
	    next!
	  COMPUTE:
	    if
	      argument.is_an_error:
		handle_error!
	      :
		maybe_cancel_task!
	  :
	    maybe_cancel_task!

	$complete_io_operation:
	  if
	    parameter_count_of(body) == 3:
	      body! !mode &task &io !body &argument
	      check_for_error!
	    :
	      body! !mode &task &io !body !argument
	      check_for_error!

	$check_for_error:
	  if
	    argument.is_an_error:
	      handle_error!
	    :
	      push &updated_requests tuple(task mode body argument continuation)
	      next!

	$handle_error:
	  $error_handler error_handler_of(task)
	  if
	    error_handler.is_defined:
	      push &updated_requests
		tuple(task COMPUTE undefined argument error_handler)
	      next!
	    :
	      !exit_status EXIT_FAILURE
	      $message generate_error_message(argument)
	      append_log_entry !log_message task push(message '@nl;')
	      exit_task! task !io !exit_status !removed_children
	      next!

	$maybe_cancel_task:
	  if
	    task.is_cancelled:
	      $cancel_handler cancel_handler_of(task)
	      if
		cancel_handler.is_defined:
		  request !task !mode !body !argument !continuation
		  !task.is_cancelled false
		  push &updated_requests
		    tuple(task COMPUTE undefined argument cancel_handler)
		  next!
		:
		  exit_task! task !io !exit_status !removed_children
		  next!
	    :
	      push &updated_requests request
	      next!

      -> updated_requests io removed_children log_message exit_status
    append &requests new_requests
    !new_requests empty_list

    # restart with phase 1

    next!

  ##########

  # Phase 1 Functions

  $compute: (request)
    request $task $mode $body $argument $continuation
    $removed removed_children(id_of(task))
    update_if removed.is_defined &request &task:
      filter &task.child_ids_of: (id) -> not(removed(id))
      -> tuple(task mode body argument continuation) task
    if
      mode == COMPUTE:
	if
	  parameter_count_of(continuation) == 2:
	    !request continuation(task argument)
	    check_request
	  :
	    !request continuation(task)
	    check_request

	$check_request:
	  if
	    request.is_an_error:
	      log &task generate_error_message(request)
	      -> tuple(task EXIT undefined EXIT_FAILURE undefined)
	    -> request
      -> request

  # Phase 2 Functions

  $collect_messages: (task)
    for_each outbound_messages_of(task)
      : (entry)
	entry $receiver $message
	if
	  receiver.is_an_integer:
	    send_message! receiver
	  :
	    for_each! receiver send_message

	$send_message: (the_receiver)
	  $messages default_value(sent_messages(the_receiver) empty_list)
	  push &messages message
	  !sent_messages(the_receiver) messages
	  next!
      :
	!task.outbound_messages_of empty_list
	-> task sent_messages

  $collect_cancel_requests: (task)
    for_each cancel_requests_of(task)
      : (id)
	!cancellations(id) true
	next!
      :
	!task.cancel_requests_of empty_list
	-> task cancellations

  $collect_log_messages: (task)
    if
      log_level == 0
      -> task log_message
      :
	for_each log_messages_of(task)
	  : (message)
	    append_log_entry !log_message task message
	    !task.log_messages_of empty_list
	    next!
	  -> task log_message

  $append_log_entry: (task message)
    append log_message
      if
	log_level >= 2
	-> string(id_of(task) ": " message)
	-> message

  $create_new_tasks: (task)
    if
      fork_requests_of(task).is_empty
      -> task current_task_id new_requests
      :
	for_each fork_requests_of(task)
	  : (fork_request)
	    fork_request $new_task $continuation $argument

	    # clean the new task (might be a clone of an existing one)

	    !new_task.log_messages_of empty_list
	    !new_task.exit_handlers_of empty_list
	    !new_task.error_handler_of undefined
	    !new_task.cancel_handler_of undefined
	    !new_task.child_ids_of empty_list
	    !new_task.inbound_messages_of empty_list
	    !new_task.outbound_messages_of empty_list
	    !new_task.fork_requests_of empty_list
	    !new_task.cancel_requests_of empty_list
	    !new_task.is_cancelled false

	    # now initialize the task

	    inc &current_task_id
	    !new_task.id_of current_task_id
	    !new_task.parent_id_of id_of(task)

	    # update the parent task

	    push &task.child_ids_of current_task_id

	    # add a compute-request for the new task

	    push &new_requests
	      tuple(new_task COMPUTE undefined argument continuation)
	    next
	  :
	    !task.fork_requests_of empty_list
	    -> task current_task_id new_requests

  # Phase 3 Functions

  $receive_messages: (request)
    request $task $mode $body $argument $continuation
    $messages sent_messages(id_of(task))
    if
      messages.is_defined:
	append &task.inbound_messages_of messages
	update_if mode == WAIT &mode -> COMPUTE
	-> tuple(task mode body argument continuation)
      -> request

  $maybe_mark_as_cancelled: (request)
    request $task $mode $body $argument $continuation
    if
      cancellations(id_of(task)):
	!task.is_cancelled true
	-> tuple(task mode body argument continuation)
      -> request

  # Phase 4 Functions

  $queue_log_message_write:
    update_if log_level >= 4 &log_message:
      for_each new_requests
	: (request)
	  request $task $_mode $_body $_arguments $_continuation
	  append &log_message "
	    CREATED TASK @(id_of(task)) (parent: @(parent_id_of(task)))
	  next
	-> log_message
    if
      log_message.is_empty
      -> io
      : # any events caused by these writes are ignored
	update_if log_level >= 3 &io:
	  write io STDERR_FILENO "
	    ---[@(iteration_no)]---------------------------
	write &io STDERR_FILENO log_message.to_utf8
	-> io

  $start_io_operation: (request)
    request $task $mode $body $argument $continuation
    if
      ||
	mode == START_IO
	task.is_cancelled && mode == CHECK_IO
      :
	if
	  parameter_count_of(body) == 3:
	    body! !mode &task &io !body &argument
	    -> tuple(task mode body argument continuation) io
	  :
	    body! !mode &task &io !body !argument
	    -> tuple(task mode body argument continuation) io
      -> request io

  # Phase 5 Functions

  $has_something_to_do: (request)
    request $_task $mode $_body $_arguments $_continuation
    -> mode == COMPUTE || mode == EXIT

  $maybe_exit: (something_to_do)
    if
      io.is_empty:
	if
	  requests.is_empty:
	    exit! exit_status # no more requests and no more pending log-writes
	  :
	    if
	      something_to_do
	      pass
	      :
		write! $_bytes_written STDERR_FILENO "
		  NO TASK IS READY AND NO I/O OPERATIONS ARE PENDING!
		exit! EXIT_FAILURE
      pass

  $get_and_check_events: (something_to_do)
    if
      io.is_empty
      -> requests io
      :
	$timeout
	  if
	    something_to_do
	    -> 0 # poll
	    -> undefined # wait "forever"
	get_events! &io !events timeout
	map &requests check_events
	!events empty_list
	-> requests io

  $check_events: (request)
    request $task $mode $body $argument $continuation
    if
      mode == CHECK_IO:
	body !mode &task events !body &argument
	-> tuple(task mode body argument continuation)
      -> request

  # Phase 6 Functions

  $exit_task: (task)
    $parent_id parent_id_of(task)
    $removed default_value(removed_children(parent_id) empty_key_order_set)
    !removed(id_of(task)) true
    !removed_children(parent_id) removed
    for_each exit_handlers_of(task)
      : (item)
	item $handler $handler_arguments
	if
	  parameter_count_of(handler) == 3:
	    handler! task &io $success handler_arguments
	    update_if success.is_an_error &exit_status -> EXIT_FAILURE
	    next!
	  :
	    handler! task &io $success
	    update_if success.is_an_error &exit_status -> EXIT_FAILURE
	    next!
      -> io exit_status removed_children
