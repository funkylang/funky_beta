#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,

#
  Topic: Inout-Output Jobs

$std::schedule ()
$std::cancel ()
$std::handle_jobs ()

$jobs_of ()
$job_no_of ()

$std_types::io.jobs_of empty_list
$std_types::io.job_no_of 0

$std_types::io/schedule:
  (
    io # the input-output object
    time # timeout or point in time
    function # the function to schedule
    data = undefined # the data to pass to the function
  )
  $rc result_count()
  update_if time.is_a_number &time -> current_time_of(io)+time
  $jobs jobs_of(io)
  $job_no job_no_of(io)
  inc &job_no
  !io.job_no_of job_no
  insert &jobs tuple(time job_no function data)
  !io.job_no_of job_no
  !io.jobs_of jobs
  set_timeout &io time
  if
    rc == 2
    -> io job_no
    -> io

$std_types::io/cancel:
  (
    io # the input-output object
    job_no # the job number to cancel
  )
  $jobs jobs_of(io)
  for_each jobs
    : (idx job)
      job $_time $no
      if
	no == job_no:
	  !io.jobs_of append(range(jobs 1 idx-1) range(jobs idx+1 -1))
	  -> io
	next
    -> io

$std_types::io/handle_jobs:
  (
    io # the input-output object
  )
  split jobs_of(io) current_time_of(io) $now_jobs $remaining_jobs
  for_each remaining_jobs
    : (job)
      job $time
      set_timeout &io time
      next
    :
      !io.jobs_of remaining_jobs
      for_each now_jobs
	: (job)
	  job $_time $_no $function $data
	  if
	    data.is_defined:
	      function &io data
	      next
	    :
	      function &io
	      next
	-> io

$insert: (jobs job)
  if
    jobs.is_empty
    -> list(job)
    :
      job $time
      $last_job jobs(-1)
      last_job $last_time
      if
	time >= last_time # an optimization for the common case
	-> push(jobs job)
	:
	  from_to_by length_of(jobs)-1 1 -1
	    : (idx)
	      jobs(idx) $idx_time
	      if
		time >= idx_time:
		  append
		    push(range(jobs 1 idx) job)
		    range(jobs idx+1 -1)
		next
	    -> put(jobs job)

$split: (jobs time)
  #
    split *jobs* into jobs with a scheduled time <= *time* and jobs with a
    scheduled time > *time*
  $s 1
  $n length_of(jobs)
  $e n
  loop:
    if
      s > e
      -> range(jobs 1 e) range(jobs s -1)
      :
	$m s+e .div. 2
	jobs(m) $job_time
	if
	  job_time > time:
	    !e m-1
	    next
	  :
	    !s m+1
	    next
