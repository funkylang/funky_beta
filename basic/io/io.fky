#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or print to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
  Topic: Input-Output

  Input/Output is handled in a special way in Funky.

  I/O-functions must be called with so-called *I/O-access rights*.

  To call a function with I/O-access rights one

  * must already have *I/O-access rights*

  and

  * give them to the called function

  To give *I/O-access rights* to a function it is called with a "!"-suffix.

  Related topics: Input-Output Events, POSIX, Input-Output Task Manager

  Example:

    println! "Hello, world!"

  Output:

    Hello, world!

#
  Topic: POSIX

  The Funky-API includes most POSIX-function calls.

  The are wrapped in a Funky-style API.

  Funky uses mainly blocking I/O but makes heavy use of the <std::pselect>
  function to make I/O-calls only when non-blocking behaviour is guaranteed.

  In most cases it will be more appropriate to use the <@Input-Output>-API than
  the POSIX-API.

  Related topics: Input-Output

# File Operations

$std::load () # loads a file in some way; returns a string

$std::save () # saves a file in some way

$std::update ()

# Directory Entry Attributes

$std::is_a_directory ()

$std::sleep:
  (
    duration # sleep time in seconds
  )
  on duration > 0: usleep! (1'000'000*duration).to_integer

$std::write_string_to:
  (
    fd
    str
  )
  $len length_of(str)
  loop
    :
      write! $bytes_written fd str
      if
	bytes_written.is_an_error
	bytes_written
	:
	  if
	    bytes_written < len:
	      range &str bytes_written+1 -1
	      next!
	    break
    pass

$std::write_to:
  (
    fd
    args*
  )
  write_string_to! fd create_string(args)

$std::writeln_to:
  (
    fd
    args*
  )
  write_string_to! fd push(create_string(args) '@nl;')

$std::print_string_to:
  (
    fd
    str
  )
  write_string_to! fd str.to_utf8

$std::print_to ()

$std_types::file_descriptor/print_to:
  (
    fd
    args*
  )
  write_string_to! fd create_string(args).to_utf8

$std::println_to:
  (
    fd
    args*
  )
  write_string_to! fd push(create_string(args).to_utf8 '@nl;')

$std::print_string:
  (
    str
  )
  write_string_to! STDOUT_FILENO str.to_utf8

$std::print:
  (
    args*
  )
  print_string! create_string(args)

$std::println:
  (
    args*
  )
  print_string! push(create_string(args) '@nl;')

$std::eprint_string:
  (
    str
  )
  write_string_to! STDERR_FILENO str.to_utf8

$std::eprint:
  (
    args*
  )
  eprint_string! create_string(args)

$std::eprintln:
  (
    args*
  )
  eprint_string! push(create_string(args) '@nl;')

$std::read_from:
  (
    fd
    length
  )
  $data ""
  loop:
    read! $buf fd length
    cond
      -> buf.is_an_error -> buf
      -> buf.is_empty -> data
      -> true:
	append &data buf
	minus &length length_of(buf)
	next!

$std::read_from_until:
  (
    fd
    sentinel
    nth = 1
  )
  $data ""
  loop:
    read! $buf fd 1
    cond
      -> buf.is_an_error -> buf
      -> buf.is_empty -> data
      -> true:
	append &data buf
	if!
	  data .has_suffix. sentinel:
	    dec &nth
	    if!
	      nth > 0
	      next
	      -> data
	  next

$std::readln_from:
  (
    fd
  )
  read_from_until! fd '@nl;'

$std::read_all_from:
  (
    fd
  )
  $data ""
  loop:
    read! $buf fd 0x100000
    cond
      -> buf.is_an_error -> buf
      -> buf.is_empty -> data
      -> true:
	append &data buf
	next!

$std::get_from_until:
  (
    fd
    sentinel
    nth = 1
  )
  read_from_until! $data fd sentinel nth
  -> data.from_utf8

$std::getln_from:
  (
    fd
  )
  get_from_until! fd '@nl;'

$std::get_until:
  (
    sentinel
  )
  get_from_until! STDIN_FILENO sentinel

$std::getln:
  getln_from! STDIN_FILENO

$std_types::string/load:
  #
    Example:

      load! $buf "test.dat"

    Example:

      load! $buf "/dev/sda" 512 # load first sector of /dev/sda
  (
    filename
    max_length = undefined
  )
  open! $fd filename "r"
  check fd
  if
    max_length.is_defined:
      read_from! $data fd max_length
      close! fd
      -> data
    :
      load! fd

$std_types::string/save:
  (
    filename
    data
  )
  open! $fh filename "w+"
  check fh
  write_to! fh data
  close! fh

$std_types::file_descriptor/load:
  (
    fd
  )
  read_all_from! $data fd
  check data
  close! fd
  -> data

$load_buffer_of ()
$max_length_of ()
$id_of ()
$info_of ()

$std_types::io.load_buffer_of empty_hash_table
$std_types::io.max_length_of empty_hash_table
$std_types::io.id_of empty_hash_table
$std_types::io.info_of empty_hash_table

$std_types::io/load:
  (
    io
    id
    filename
    max_length = undefined
    context = filename
  )
  run io load_file id filename max_length context

$load_file: (io id filename max_length data)
  open! $fd filename "r"
  if
    fd.is_an_error
    -> io tuple(JOB_FAILED id fd data)
    :
      start_reading_from &io fd true max_length
      !io.load_buffer_of(fd) ""
      !io.max_length_of(fd) max_length
      !io.id_of(fd) id
      register_handlers &io fd
	READ = read_data
	READ_FAILED = tuple(read_failed data)
	CLOSED = tuple(file_closed_after_reading data)
      -> io undefined

$read_data: (io fd data)
  $buf load_buffer_of(io)(fd)
  $max_length max_length_of(io)(fd)
  append &buf data
  if
    max_length.is_defined && length_of(buf) >= max_length:
      deregister_all_handlers &io fd
      $id id_of(io)(fd)
      !io.load_buffer_of(fd) undefined
      !io.max_length_of(fd) undefined
      !io.id_of(fd) undefined
      -> io tuple(JOB_COMPLETED id buf)
    :
      !io.load_buffer_of(fd) buf
      -> io undefined

$read_failed: (io fd err data)
  deregister_all_handlers &io fd
  !io.load_buffer_of(fd) undefined
  !io.max_length_of(fd) undefined
  !io.id_of(fd) undefined
  -> io tuple(JOB_FAILED fd err data)

$file_closed_after_reading: (io fd _dummy data)
  deregister_all_handlers &io fd
  $buf load_buffer_of(io)(fd)
  $id id_of(io)(fd)
  !io.load_buffer_of(fd) undefined
  !io.max_length_of(fd) undefined
  !io.id_of(fd) undefined
  -> io tuple(JOB_COMPLETED id buf data)

$std_types::io/save:
  (
    io
    id
    filename
    data
    context = undefined
  )
  run io save_file id filename data context

$save_file: (io id filename data context)
  open! $fd filename "w"
  if
    fd.is_an_error
    -> io tuple(JOB_FAILED id fd filename)
    :
      write &io fd data
      !io.id_of(fd) id
      update_if context.is_undefined &context -> filename
      register_handlers &io fd
	WRITE_COMPLETED = tuple(write_completed context)
	WRITE_FAILED = tuple(write_failed context)
      -> io undefined

$write_completed: (io fd _dummy context)
  run &io close_file_after_writing fd context
  -> io undefined

$close_file_after_writing: (io fd context)
  close! fd
  deregister_all_handlers &io fd
  $id id_of(io)(fd)
  !io.id_of(fd) undefined
  -> io tuple(JOB_COMPLETED id undefined context)

$write_failed: (io fd err context)
  deregister_all_handlers &io fd
  $id id_of(io)(fd)
  !io.id_of(fd) undefined
  -> io tuple(JOB_FAILED id err context)

$std::try:
  #
    Example:

      $buf undefined
      try $success: load! !buf "test.dat"
      if
	buf.is_an_error:
	  println! "Failed to load test.dat"
	:
	  # successfully loaded "test.dat"
	  ...
  (
    body
  )
  body!
  -> undefined

$std::check:
  (
    argument
  )
  if
    argument.is_an_error
    -> argument
    pass

$std::file_exists:
  #
    Example:

      file_exists! $does_exist "test.dat"
      if
	does_exist:
	  println! "test.dat exists"
	:
	  println! "test.dat does not exist"
  (
    filename
  )
  stat! $info filename
  -> not(info.is_an_error)

$std::directory:
  #
    Example:

      directory! $entries "/usr/bin"
      for_each entries
	: (entry)
	  println! name_of(entry)
	  next!
	pass
  (
    options*
    pathname
  )
  get_options options
    SORT = false $do_sort
  $entries empty_list
  opendir! $dir pathname
  loop:
    readdir! $entry dir
    if
      entry.is_an_error:
	closedir! dir
	if
	  do_sort:
	    sort entries: (left right) -> name_of(left) < name_of(right)
	  -> entries
      :
	push &entries entry
	next!

$std_types::stat/is_a_directory: (self)
  -> mode_of(self)(1) == 'd'

$std_types::dirent/is_a_directory: (self)
  -> type_of(self) == DIRECTORY

$std::call ()

$std_types::object/call:
  (
    cmd
    args
  )
  $rc result_count()
  $do_return_error_code (rc >= 1)
  $do_collect_output (rc >= 2)
  $do_collect_error_output (rc == 3)
  map &args to_string
  $env_vars empty_list
  for_each environment !env_vars
    : (key value)
      push &env_vars "@(key)=@(value)"
      next
    -> env_vars
  create_process! $pid $in_fd $out_fd $err_fd cmd args env_vars
  close! in_fd
  $io std_types::io
  join_process &io pid
  start_reading_from &io out_fd
  start_reading_from &io err_fd

  $out ""
  $err ""
  loop:
    get_events! &io $events
    for_each events
      : (event)
	event $type $fd $data
	case type
	  READ:
	    if
	      data == ""
	      next
	      :
		case fd
		  out_fd:
		    if
		      do_collect_output:
			append &out data
			next!
		      :
			write_to! STDOUT_FILENO data
			next!
		  err_fd:
		    if
		      do_collect_error_output:
			append &err data
			next!
		      :
			write_to! STDERR_FILENO data
			next!
		  :
		    next!
	  PROCESS_JOINED:
	    $ret data
	    if
	      do_return_error_code:
		if
		  do_collect_output:
		    if
		      do_collect_error_output
		      -> ret out err
		      -> ret out
		  -> ret
	      :
		if
		  ret == 0
		  pass
		  :
		    error "CALLING PROCESS FAILED"
	  : # ignore all other signals
	    next!
      next

$std_types::io/call:
  (
    io
    id
    cmd
    args
    context = undefined
  )
  run io start_process id cmd args context

$start_process: (io id cmd args context)
  map &args to_string
  $env_vars empty_list
  for_each environment !env_vars
    : (key value)
      push &env_vars "@(key)=@(value)"
      next
    -> env_vars
  create_process! $pid $in_fd $out_fd $err_fd cmd args env_vars
  close! in_fd
  join_process &io pid
  start_reading_from &io out_fd
  start_reading_from &io err_fd
  !io.id_of(pid) id
  !io.info_of(out_fd) ""
  !io.info_of(err_fd) ""
  !io.info_of(pid) tuple(out_fd err_fd)
  register_handlers &io out_fd
    READ = read_process_output
    READ_FAILED = read_from_process_failed
    CLOSED = ignore_close
  register_handlers &io err_fd
    READ = read_process_output
    READ_FAILED = read_from_process_failed
    CLOSED = ignore_close
  register_handlers &io pid
    PROCESS_JOINED = tuple(process_finished context)
  -> io undefined

$read_process_output: (io fd data)
  append &io.info_of(fd) data
  -> io undefined

$read_from_process_failed: (io fd _err)
  deregister_all_handlers &io fd
  -> io undefined

$ignore_close: (io _fd _data)
  -> io undefined

$process_finished: (io pid status context)
  log &io 4 "process finished with status @(status)"
  deregister_all_handlers &io pid
  $id id_of(io)(pid)
  !io.id_of(pid) undefined
  info_of(io)(pid) $out_fd $err_fd
  $out info_of(io)(out_fd)
  $err info_of(io)(err_fd)
  !io.info_of(pid) undefined
  !io.info_of(out_fd) undefined
  !io.info_of(err_fd) undefined
  if
    status == 0
    -> io tuple(JOB_COMPLETED id tuple(out err) context)
    -> io tuple(JOB_FAILED id tuple(status out err) context)

$std::terminate:
  exit! EXIT_SUCCESS

$std::is_a_file_descriptor ()
$std_types::object.is_a_file_descriptor false
$std_types::file_descriptor.is_a_file_descriptor true

$std_types::file_descriptor.serialization_tag_of "file_descriptor"

$std_types::file_descriptor/serialize:
  (
    self
    indent = undefined
  )
  $str "
    file_descriptor @(self.to_integer)
  if
    indent.is_defined
    -> append(tabs_and_spaces(indent) str)
    -> str

$std_types::file_descriptor.deserializer_of:
  (
    _tag
    argument
  )
  -> file_descriptor(integer(argument))

register_type &deserializers std_types::file_descriptor

$std::is_a_process_id ()
$std_types::object/is_a_process_id false
$std_types::process_id/is_a_process_id true

$std_types::process_id.serialization_tag_of "process_id"

$std_types::process_id/serialize:
  (
    self
    indent = undefined
  )
  $str "
    process_id @(self.to_integer)
  if
    indent.is_defined
    -> append(tabs_and_spaces(indent) str)
    -> str

$std_types::process_id.deserializer_of:
  (
    _tag
    argument
  )
  -> process_id(integer(argument))

register_type &deserializers std_types::process_id

$command_of ()

$extern_call:
  (
    myself^
    arguments*
  )
  call! command_of(myself) map(flatten(arguments) to_string)

$extern_call.command_of undefined

$std::pipe:
  (
    args*
  )
  $i 1
  $n length_of(args)
  $in_fd undefined
  $feed undefined
  $commands empty_list
  $head undefined
  $arguments undefined
  $first_arg args(1)
  if
    first_arg.is_a_string:
      !feed first_arg
      !i 2
      build_commands!
    :
      if
	first_arg.is_a_file_descriptor:
	  !in_fd first_arg
	  !i 2
	  build_commands!
	build_commands

  $build_commands:
    loop
      :
	if
	  i > n break
	  :
	    $arg args(i)
	    if
	      arg.is_a_function:
		update_if head.is_defined &commands:
		  push commands tuple(head map(flatten(arguments) to_string))
		!head command_of(arg)
		!arguments empty_list
		inc &i
		next!
	      :
		push &arguments arg
		inc &i
		next!
      :
	update_if head.is_defined &commands:
	  push commands tuple(head map(flatten(arguments) to_string))
	run_pipe! in_fd feed commands

$std::pipe_commands:
  (
    feed_or_fd = undefined
    commands
  )
  if
    feed_or_fd.is_defined:
      if
	feed_or_fd.is_a_file_descriptor:
	  run_pipe! feed_or_fd undefined commands
	:
	  run_pipe! undefined feed_or_fd commands
    :
      run_pipe! undefined undefined commands

$run_pipe:
  (
    in_fd
    feed
    commands
  )
  $pids empty_hash_table
  $err_fds empty_hash_table
  $out_fd in_fd
  $env_vars undefined
  update_if environment.is_defined &env_vars:
    !env_vars empty_list
    for_each environment
      : (key value)
	push &env_vars "@(key)=@(value)"
	next
      -> env_vars
  for_each commands
    : (idx command)
      command $head $arguments
      map &arguments to_utf8
      $pid undefined
      $err_fd undefined
      if
	idx == 1 && in_fd.is_undefined:
	  create_process! !pid !in_fd !out_fd !err_fd head arguments env_vars
	  store_pid_and_err_fd!
	:
	  create_process! !pid !out_fd !err_fd head arguments env_vars out_fd
	  store_pid_and_err_fd!

      $store_pid_and_err_fd:
	!pids(pid) idx
	!err_fds(err_fd) idx
	next!
    :
      $ret dup(list(undefined) length_of(commands))
      $out ""
      $err dup(list("") length_of(commands))
      if
	feed.is_defined
	manage_io
	:
	  close! in_fd
	  !in_fd undefined
	  manage_io!

      $manage_io:
	loop:
	  $read_descriptor_list keys_of(err_fds)
	  $write_descriptor_list
	    if
	      in_fd.is_defined
	      -> list(in_fd)
	      -> empty_list
	  update_if out_fd.is_defined &read_descriptor_list:
	    push read_descriptor_list out_fd
	  pselect!
	    $signals
	    $read_descriptors read_descriptor_list
	    $write_descriptors write_descriptor_list
	    $_out_of_band_descriptors empty_list
	  for_each signals
	    : (signal)
	      if
		signal == SIGCHLD:
		  loop
		    :
		      wait! $rpid $status
		      if
			rpid.is_defined:
			  !ret(pids(rpid)) status
			  !pids(rpid) undefined
			  if!
			    pids.is_empty
			    break
			    next
			break
		    next
		next
	    :
	      for_each write_descriptors
		: (write_descriptor) # must be <in_fd>
		  write! $bytes_written write_descriptor feed
		  range &feed bytes_written+1 -1
		  if
		    feed.is_empty:
		      close! in_fd
		      !in_fd undefined
		      next!
		    next
		:
		  for_each read_descriptors
		    : (read_descriptor)
		      read! $buf read_descriptor 0x100000
		      if
			buf.is_empty: # closed from the other side
			  close! read_descriptor
			  if
			    read_descriptor == out_fd:
			      !out_fd undefined
			      next!
			    :
			      !err_fds(read_descriptor) undefined
			      next!
			:
			  if
			    read_descriptor == out_fd:
			      append &out buf
			      next!
			    :
			      append &err(err_fds(read_descriptor)) buf
			      next!
		    :
		      if!
			pids.is_empty && out_fd.is_undefined && err_fds.is_empty
			-> ret out err
			next

$std::which:
  (
    name
  )
  for_each split(environment("PATH") ':')
    : (pathname)
      $filename append(pathname "/" name)
      file_exists! filename $does_exist
      if! does_exist
	-> filename
	next
    -> undefined

$std::find_first_process: (name)
  opendir! $dir "/proc"
  loop:
    readdir! $entry dir
    if
      entry.is_an_error:
	closedir! dir
	-> undefined
      :
	$proc_num name_of(entry)
	if
	  proc_num .matches. many(DIGIT):
	    load! $buf "/proc/@(proc_num)/cmdline"
	    if
	      buf.is_empty
	      next
	      :
		$proc_name buf .truncate_from. '@0;'
		truncate_until &proc_name '/' -1
		if!
		  proc_name .matches. name
		  -> proc_num.to_integer
		  next
	  next

$std::find_processes: (name)
  opendir! $dir "/proc"
  $pids empty_list
  loop:
    readdir! $entry dir
    if
      entry.is_an_error:
	closedir! dir
	-> pids
      :
	$proc_num name_of(entry)
	if
	  proc_num .matches. many(DIGIT):
	    load! $buf "/proc/@(proc_num)/cmdline"
	    if
	      buf.is_empty
	      next
	      :
		$proc_name buf .truncate_from. '@0;'
		truncate_until &proc_name '/' -1
		if
		  proc_name .matches. name:
		    push &pids proc_num.to_integer
		    next!
		  next
	  next

$std::get_process_name: (pid)
  load! $buf "/proc/@(pid)/cmdline"
  if
    buf.is_an_error
    -> undefined
    -> buf .truncate_from. '@0;'

$std::get_mac_address:
  get_first_mac_address! $mac
  if
    mac.is_defined: map_reduce mac: (chr) -> hex(chr.to_integer 2)
    -> undefined

$std::extern:
  (
    command
  )
  -> extern_call(.command_of command)
