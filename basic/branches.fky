#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
  Topic: Branches

  There are no builtin branch instructions in the Funky language.

  Branch "instructions" are functions that are supplied some form of *condition*
  and two or more functions. Based upon the evaluation of the condition, one of
  the supplied functions is called.

  The basic branch instructions of the standard library use polymorphic dispatch
  on the truth values <true> and <false> to implement <if> and <if_not>.

  More complex branches like <cond> or <case> use <if> to check their
  conditions.

  Related topics: Loops

$std::cond:
  #
    a multiway conditional expression or statement

    Results:
      results # whatever the selected function returns

    Each argument is a function that returns two results:

    * a boolean value (<true> or <false>)

    and

    * a function (statement sequence)

    The arguments are evaluated in order and as soon as an argument returns
    <true> the corresponding function is called.

    If none of the arguments returns <true> no function is called.

    Topic: Branches, Input-Output

    See also: std::if, std::case

    Example:

      $chr '7'
      cond
	-> chr >= 'a' && chr <= 'z':
	  println! "lower case character"
	-> chr >= 'A' && chr <= 'Z':
	  println! "upper case character"
	-> chr == '_':
	  println! "underscore"
	-> chr >= '0' && chr <= '9':
	  println! "digit"
	-> true:
	  println! "neither character nor digit nor underscore"

    Output:

      digit
  (
    args* # a sequence of functions that return a boolean and a function
  )
  $i 1
  $n length_of(args)
  check!

  $check:
    if
      i <= n:
	args(i) $cond $body
	if
	  cond
	  :
	    body!
	  :
	    !i i+1
	    check!
      pass

$std::case:
  #
    a multiway conditional expression or statement

    Results:
      results # whatever the selected function returns

    The first argument is a value that is compared to the values of the
    following arguments.

    The arguments are an alternating sequence of values and functions
    (statement sequences).

    The values are compared to the first argument in the order they appear.

    If a value matches the first argument, the corresponding function is called.

    If no value matches the first argument, the last function (if any) is
    called.

    Topic: Branches

    See also: std::if, std::cond

    Example:

      $chr 'H'
      case chr
	'a' .. 'z':
	  println! "lower case character"
	'A' .. 'Z':
	  println! "upper case character"
	'_':
	  println! "underscore"
	'0' .. '9':
	  println! "digit"
	:
	  println! "neither character nor digit nor underscore"

    Output:

      upper case character
  (
    expr # the first argument
    values_and_bodies*
      # an alternating sequence of case-values and statement sequences
  )
  $n length_of(values_and_bodies)
  $i 1
  if
    values_and_bodies(1).is_a_function:
      !test_function values_and_bodies(1)
      inc &i
      check!

      $check:
	if
	  i > n
	  pass
	  :
	    if
	      i == n:
		values_and_bodies(n)!
	      :
		$value values_and_bodies(i)
		if
		  passes_test(value expr):
		    values_and_bodies(i+1)!
		  :
		    plus &i 2
		    check!
    :
      check!

      $check:
	if
	  i > n
	  pass
	  :
	    if
	      i == n:
		values_and_bodies(n)!
	      :
		$value values_and_bodies(i)
		if
		  ||
		    value.is_defined && does_match(value expr)
		    value.is_undefined && expr.is_undefined
		  :
		    values_and_bodies(i+1)!
		  :
		    plus &i 2
		    check!

$does_match ()

$std_types::object/does_match equal

$std_types::value_range/does_match: (self expr)
  self $lower_bound $upper_bound
  -> expr >= lower_bound && expr <= upper_bound

$std_types::sequence/does_match: (self expr)
  for_each self
    : (item)
      if
	does_match(item expr)
	-> true
	next
    -> false

$test_function undefined

$passes_test ()

$std_types::object/passes_test: (self expr) -> test_function(expr self)

$std_types::sequence/passes_test: (self expr)
  for_each self
    : (item)
      if
	test_function(expr item)
	-> true
	next
    -> false
