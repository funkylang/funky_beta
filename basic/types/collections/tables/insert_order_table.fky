#
  Copyright (C) 2022 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Topics: Tables, Collections

$std::is_an_insert_order_table () # obvious

$std_types::object.is_an_insert_order_table false # obvious
$std_types::insert_order_table.is_an_insert_order_table true # obvious

$NONE .

$keys_of ()
$values_of ()
$index_table_of ()

$std_types::insert_order_table std_types::table
  #
    the prototype object for all insert-order tables

$std_types::insert_order_table.keys_of empty_list
$std_types::insert_order_table.values_of empty_list
$std_types::insert_order_table.index_table_of empty_hash_table

$std::empty_insert_order_table std_types::insert_order_table
  #
    an empty insert-order table

$std_types::insert_order_table/:
  #
    retrieve or add an item
  (
    myself^
    key
    value = NONE
  )
  $values values_of(myself)
  $index_table index_table_of(myself)
  $index index_table(key)
  if
    NONE == value
    :
      if
	index.is_defined
	-> values(index)
	-> undefined
    :
      if
	value.is_defined:
	  if
	    index.is_defined: # update entry
	      !values(index) value
	      -> myself(.values_of values)
	    : # add a new entry
	      $keys keys_of(myself)
	      push &keys key
	      push &values value
	      !index_table(key) length_of(values)
	      ->
		myself
		  .keys_of keys
		  .values_of values
		  .index_table_of index_table
	: # remove entry
	  # ATTENTION: This code is nonsense and cannot work!!!
	  if
	    index.is_defined:
	      $keys keys_of(myself)
	      !keys
		append(range(keys 1 index-1) range(keys index+1 -1))
	      !values
		append(range(values 1 index-1) range(values index+1 -1))
	      !index_table(key) undefined
	      ->
		myself
		  .keys_of keys
		  .values_of values
		  .index_table_of index_table
	    -> myself

$std_types::insert_order_table/length_of: (self)
  -> length_of(values_of(self))

$std_types::insert_order_table/for_each:
  #
    invokes the specified callback for each item of the table
  (
    self # the hash table to iterate over
    body # the statement sequence to execute for each item
    finally = next # called after all items have been iterated over
  )
  $values values_of(self)
  if
    parameter_count_of(body) == 2:
      $keys keys_of(self)
      for_each! values
	: (index _value)
	  body! keys(index) values(index)
	:
	  finally!
    :
      for_each! values body finally

###
# retrieve keys

$std_types::insert_order_table/first_key_of:
  #
    returns the first key of a non-empty <insert_order_table>
  (
    self
  )
  -> key_of(self)(1)

$std_types::insert_order_table/last_key_of:
  #
    returns the last key of a non-empty <insert_order_table>
  (
    self
  )
  -> key_of(self)(-1)

###
# retrieve values

$std_types::insert_order_table/first_item_of:
  #
    returns the first value of a non-empty <insert_order_table>
  (
    self
  )
  -> values_of(self)(1)

$std_types::insert_order_table/last_item_of:
  #
    returns the last value of a non-empty <insert_order_table>
  (
    self
  )
  -> values_of(self)(-1)

###
# map

$std_types::insert_order_table/map:
  #
    applies a function to all values of the insert order table

    A hash table containing the "mapped" items is returned.

    See also: reduce, map_reduce
  (
    self # the association list which values will be mapped
    function # the function to apply to each element of the table
  )
  if
    parameter_count_of(function) == 1:
      map &self.values_of function
      -> self
    :
      $keys keys_of(self)
      map &self.values_of: (idx value) function keys(idx) value
      -> self

###
# reduce

###
# map_reduce

$std_types::insert_order_table/map_reduce:
  #
    combines a map and a reduce operation into a single operation

    Does not create an intermediate table to hold the "mapped" values.

    Topic: Tables

    See also: map, reduce
  (
    self # the table to work on
    map_function # the function to apply to each element of the table
    reduce_function = append # the function to apply to pairs of values
    unit = undefined # the value to return for empty tables
  )
  if
    self.is_empty
    -> unit
    :
      if
	parameter_count_of(map_function) == 2:
	  $keys keys_of(self)
	  $values values_of(self)
	  map_reduce 1 length_of(self)

	  $map_reduce: (s e)
	    if
	      s < e:
		$m (s+e) >> 1
		reduce_function
		  map_reduce(s m)
		  map_reduce(m+1 e)
	      -> map_function(keys(s) values(s))
	:
	  map_reduce values_of(self) map_function reduce_function unit

###
# constructor

$std::insert_order_table:
  (
    pairs*
  )
  $table empty_insert_order_table
  for_each pairs
    : (pair)
      pair $key $value
      !table(key) value
      next
    -> table

###
# serialization

$std_types::insert_order_table.serialization_tag_of "insert_order_table"
$std_types::insert_order_table.empty_collection_of empty_insert_order_table

register_type &deserializers std_types::insert_order_table
