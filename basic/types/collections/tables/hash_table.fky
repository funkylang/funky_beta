#
  Copyright (C) 2023 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Topics: Tables, Collections

# internal attributes:

$contents_of ()

# internal methods:

$retrieve ()
$insert ()
$delete ()

$std::is_a_hash_table () # obvious
$std_types::object.is_a_hash_table false # obvious
$std_types::hash_table.is_a_hash_table true # obvious

$is_an_empty_entry ()
$std_types::object.is_an_empty_entry false
$empty_hash_table_entry.is_an_empty_entry true
$empty_collision_list_entry.is_an_empty_entry true

$std::to_hash_table ()

$std_types::hash_table std_types::table
  #
    a table for fast random access of items

    All items stored in the table must support the following methods:

    * <hash>

    * <equal>

    Topic: Collections

    See also: std_types::table, std_types::key_order_table,
	      std_types::association_list

$std::empty_hash_table std_types::hash_table
  #
    an empty hash table

    Topic: Collections

    See also: std_types::hash_table

$std_types::hash_table.contents_of empty_hash_table_entry

$std_types::hash_table.length_of 0
  #
    returns the number of items in the hash table

$empty_hash_table_entry std_types::object

$hash_table_leaf tuple(undefined undefined undefined)

$empty_collision_list_entry std_types::object

$collision_list_entry tuple(undefined undefined undefined)

$hash_table_node
  list
    empty_hash_table_entry
    empty_hash_table_entry
    empty_hash_table_entry
    empty_hash_table_entry
    empty_hash_table_entry
    empty_hash_table_entry
    empty_hash_table_entry
    empty_hash_table_entry

$NONE .

$std_types::hash_table/:
  # --> std_types::table
  (
    myself^
    key
    value = NONE
  )
  $hash_index hash(key) | 0xc000'0000 # add sentinel hash index (3)
  $contents contents_of(myself)
  if
    NONE == value
    -> retrieve(contents hash_index key)
    :
      if
	value.is_defined:
	  insert &contents $success hash_index key value
	  if
	    success
	    ->
	      myself
		.contents_of contents
		.length_of length_of(myself)+1
	    -> myself(.contents_of contents)
	:
	  delete &contents $success hash_index key
	  if
	    success
	    ->
	      myself
		.contents_of contents
		.length_of length_of(myself)-1
	    -> myself

# retrieve

$empty_hash_table_entry/retrieve: (_self _hash_index _key) -> undefined

$hash_table_leaf/retrieve: (self _hash_index key)
  self $_my_hash_index $my_key $my_value
  if
    key == my_key
    -> my_value
    -> undefined

$empty_collision_list_entry/retrieve: (_self _dummy _key) -> undefined

$collision_list_entry/retrieve: (self _dummy key)
  self $my_key $my_value $my_link
  if
    key == my_key
    -> my_value
    : retrieve my_link undefined key

$hash_table_node/retrieve: (self hash_index key)
  $idx (hash_index & 7)+1
  retrieve self(idx) hash_index >> 3 key

# insert

$empty_hash_table_entry/insert: (_self hash_index key value)
  if
    hash_index == 3
    -> typed_tuple(collision_list_entry key value empty_collision_list_entry) true
    -> typed_tuple(hash_table_leaf hash_index key value) true

$hash_table_leaf/insert: (self hash_index key value)
  self $my_hash_index $my_key $my_value
  if
    key == my_key
    -> typed_tuple(self my_hash_index key value) false
    :
      insert hash_table_node $new_node $_did_insert
	my_hash_index my_key my_value
      insert new_node hash_index key value

$empty_collision_list_entry/insert: (self _dummy key value)
  -> typed_tuple(collision_list_entry key value self) true

$collision_list_entry/insert: (self _dummy key value)
  delete &self $did_delete undefined key
  -> typed_tuple(collision_list_entry key value self) not(did_delete)

$hash_table_node/insert: (self hash_index key value)
  $idx (hash_index & 7)+1
  insert &self(idx) $did_insert hash_index >> 3 key value
  -> self did_insert

# delete

#
  After deletion some single-entry branches can remain.

  The biggest problem is to recompute the hash_index of this single entry
  when it is moved up the tree. One possibility would be to remove such an
  entry completely and reinsert it.

  Branches containing no entries are deleted.

$empty_hash_table_entry/delete: (self _hash_index _key) -> self false

$hash_table_leaf/delete: (self _hash_index key)
  self $_my_hash_index $my_key $_my_value
  if
    key == my_key
    -> empty_hash_table_entry true
    -> self false

$empty_collision_list_entry/delete: (self _dummy _key) -> self false

$collision_list_entry/delete: (self _dummy key)
  self $my_key $my_value $my_link
  if
    key == my_key
    :
      -> my_link true
    :
      delete &my_link undefined key $did_delete
      -> typed_tuple(collision_list_entry my_key my_value my_link) did_delete

$hash_table_node/delete: (self hash_index key)
  $idx (hash_index & 7)+1
  delete &self(idx) $success hash_index >> 3 key
  if
    success
    :
      if
	all_of(self is_an_empty_entry)
	-> empty_hash_table_entry true
	-> self true
    -> self false

# for_each

$for_each_1 ()
$for_each_2 ()

$empty_hash_table_entry/for_each_1: (_self)
  next!

$empty_hash_table_entry/for_each_2: (_self)
  next!

$collision_list_entry/for_each_1: (self)
  $saved_context
    tuple
      next
      break
      basic_loops::self

  !basic_loops::self self

  new !break basic_types::break_function: (myself^)
    basic_loops::saved_context_of(myself)
      !next !break
      !basic_loops::self
    break!

  !break.basic_loops::saved_context_of saved_context

  !next:
    if
      basic_loops::self.is_an_empty_entry:
	basic_loops::saved_context_of(break)
	  !next !break
	  !basic_loops::self
	next!
      :
	basic_loops::self $_key $value $link
	!basic_loops::self link
	basic_loops::body! value

  next!

$collision_list_entry/for_each_2: (self)
  $saved_context
    tuple
      next
      break
      basic_loops::self

  !basic_loops::self self

  new !break basic_types::break_function: (myself^)
    basic_loops::saved_context_of(myself)
      !next !break
      !basic_loops::self
    break!

  !break.basic_loops::saved_context_of saved_context

  !next:
    if
      basic_loops::self.is_an_empty_entry:
	basic_loops::saved_context_of(break)
	  !next !break
	  !basic_loops::self
	next!
      :
	basic_loops::self $key $value $link
	!basic_loops::self link
	basic_loops::body! key value

  next!

$hash_table_leaf/for_each_1: (self)
  self $_hash $_key $value
  basic_loops::body! value

$hash_table_leaf/for_each_2: (self)
  self $_hash $key $value
  basic_loops::body! key value

$hash_table_node/for_each_1: (self)
  $saved_context
    tuple
      next
      break
      basic_loops::from
      basic_loops::self

  !basic_loops::from 1
  !basic_loops::self self

  new !break basic_types::break_function: (myself^)
    basic_loops::saved_context_of(myself)
      !next !break
      !basic_loops::from !basic_loops::self
    break!

  !break.basic_loops::saved_context_of saved_context

  !next:
    $idx basic_loops::from
    if
      idx <= 8:
	!basic_loops::from idx+1
	for_each_1! basic_loops::self(idx)
      :
	basic_loops::saved_context_of(break)
	  !next !break
	  !basic_loops::from !basic_loops::self
	next!

  next!

$hash_table_node/for_each_2: (self)
  $saved_context
    tuple
      next
      break
      basic_loops::from
      basic_loops::self

  !basic_loops::from 1
  !basic_loops::self self

  new !break basic_types::break_function: (myself^)
    basic_loops::saved_context_of(myself)
      !next !break
      !basic_loops::from !basic_loops::self
    break!

  !break.basic_loops::saved_context_of saved_context

  !next:
    $idx basic_loops::from
    if
      idx <= 8:
	!basic_loops::from idx+1
	for_each_2! basic_loops::self(idx)
      :
	basic_loops::saved_context_of(break)
	  !next !break
	  !basic_loops::from !basic_loops::self
	next!

  next!

$std_types::hash_table/for_each:
  (
    self # the hash table to iterate over
    body # the statement sequence to execute for each item
    finally = next # called after all items have been iterated over
  )
  $saved_context
    tuple
      next
      break
      basic_loops::body
      basic_loops::finally

  !basic_loops::body body
  !basic_loops::finally finally

  new !break basic_types::break_function: (myself^)
    !finally basic_loops::finally
    basic_loops::saved_context_of(myself)
      !next !break
      !basic_loops::body !basic_loops::finally
    finally!

  !break.basic_loops::saved_context_of saved_context
  !next break

  if
    parameter_count_of(body) == 2:
      for_each_2! contents_of(self)
    :
      for_each_1! contents_of(self)

# map

$map_1 ()
$map_2 ()

$mapping_function undefined

$empty_hash_table_entry/map_1: (self) -> self
$empty_hash_table_entry/map_2: (self) -> self

$hash_table_leaf/map_1: (self)
  self $my_hash_index $my_key $my_value
  typed_tuple self my_hash_index my_key mapping_function(my_value)

$hash_table_leaf/map_2: (self)
  self $my_hash_index $my_key $my_value
  typed_tuple self my_hash_index my_key mapping_function(my_key my_value)

$empty_collision_list_entry/map_1: (self) -> self
$empty_collision_list_entry/map_2: (self) -> self

$collision_list_entry/map_1: (self)
  self $my_key $my_value $my_link
  typed_tuple self my_key mapping_function(my_value) map_1(my_link)

$collision_list_entry/map_2: (self)
  self $my_key $my_value $my_link
  typed_tuple self my_key mapping_function(my_key my_value) map_2(my_link)

$hash_table_node/map_1: (self)
  typed_tuple self map(self map_1)

$hash_table_node/map_2: (self)
  typed_tuple self map(self map_2)

$std_types::hash_table/map:
  #
    applies a function to all values of the hash table

    A hash table containing the "mapped" items is returned.

    See also: reduce, map_reduce
  (
    self # the table which values will be mapped
    function # the function to apply to each element of the table
  )
  !mapping_function function
  if
    parameter_count_of(function) == 2:
      map_2 &self.contents_of
      -> self
    :
      map_1 &self.contents_of
      -> self

# reduce

$UNIT .

$reduce_1 ()

$reduction_function undefined

$empty_hash_table_entry/reduce_1: (_self) -> UNIT

$hash_table_leaf/reduce_1: (self)
  self $_my_hash_index $_my_key $my_value
  -> my_value

$empty_collision_list_entry/reduce_1: (_self) -> UNIT

$collision_list_entry/reduce_1: (self)
  self $my_key $my_value $my_link
  my_reduce
    mapping_function(my_key my_value)
    reduce_1(my_link)

$hash_table_node/reduce_1: (self)
  $r12 my_reduce(reduce_1(self(1)) reduce_1(self(2)))
  $r34 my_reduce(reduce_1(self(3)) reduce_1(self(4)))
  $r56 my_reduce(reduce_1(self(5)) reduce_1(self(6)))
  $r78 my_reduce(reduce_1(self(7)) reduce_1(self(8)))
  $r1234 my_reduce(r12 r34)
  $r5678 my_reduce(r56 r78)
  -> my_reduce(r1234 r5678)

$my_reduce: (left right)
  if
    UNIT == left
    -> right
    :
      if
	UNIT == right
	-> left
	-> reduction_function(left right)

$std_types::hash_table/reduce:
  #
    computes a kind of sum from the values stored in the table

    There is no guarantee in which order the values will be reduced (folded).

    So the reduction function must obey to the law of assosiativity!

    Topic: Tables

    See also: map, map_reduce
  (
    self # the table to work on
    function # the function to apply to pairs of values
    unit = undefined # the value to return for empty tables
  )
  if
    length_of(self) == 0
    -> unit
    :
      !reduction_function function
      reduce_1 contents_of(self)

# map_reduce

$map_reduce_1 ()
$map_reduce_2 ()

$empty_hash_table_entry/map_reduce_1: (_self) -> UNIT
$empty_hash_table_entry/map_reduce_2: (_self) -> UNIT

$hash_table_leaf/map_reduce_1: (self)
  self $_my_hash_index $_my_key $my_value
  -> mapping_function(my_value)

$hash_table_leaf/map_reduce_2: (self)
  self $_my_hash_index $my_key $my_value
  -> mapping_function(my_key my_value)

$empty_collision_list_entry/map_reduce_1: (_self) -> UNIT
$empty_collision_list_entry/map_reduce_2: (_self) -> UNIT

$collision_list_entry/map_reduce_1: (self)
  self $my_key $my_value $my_link
  my_reduce
    mapping_function(my_key my_value)
    map_reduce_1(my_link)

$collision_list_entry/map_reduce_2: (self)
  self $my_key $my_value $my_link
  my_reduce
    mapping_function(my_key my_value)
    map_reduce_2(my_link)

$hash_table_node/map_reduce_1: (self)
  $r12 my_reduce(map_reduce_1(self(1)) map_reduce_1(self(2)))
  $r34 my_reduce(map_reduce_1(self(3)) map_reduce_1(self(4)))
  $r56 my_reduce(map_reduce_1(self(5)) map_reduce_1(self(6)))
  $r78 my_reduce(map_reduce_1(self(7)) map_reduce_1(self(8)))
  $r1234 my_reduce(r12 r34)
  $r5678 my_reduce(r56 r78)
  -> my_reduce(r1234 r5678)

$hash_table_node/map_reduce_2: (self)
  $r12 my_reduce(map_reduce_2(self(1)) map_reduce_2(self(2)))
  $r34 my_reduce(map_reduce_2(self(3)) map_reduce_2(self(4)))
  $r56 my_reduce(map_reduce_2(self(5)) map_reduce_2(self(6)))
  $r78 my_reduce(map_reduce_2(self(7)) map_reduce_2(self(8)))
  $r1234 my_reduce(r12 r34)
  $r5678 my_reduce(r56 r78)
  -> my_reduce(r1234 r5678)

$std_types::hash_table/map_reduce:
  #
    combines a map and a reduce operation into a single operation

    Does not create an intermediate table to hold the "mapped" values.

    Topic: Tables

    See also: map, reduce
  (
    self # the table to work on
    map_function # the function to apply to each element of the table
    reduce_function = append # the function to apply to pairs of values
    unit = undefined # the value to return for empty tables
  )
  if
    length_of(self) == 0
    -> unit
    :
      !mapping_function map_function
      !reduction_function reduce_function
      if
	parameter_count_of(map_function) == 2:
	  map_reduce_2 contents_of(self)
	:
	  map_reduce_1 contents_of(self)

# filter

$filter_function undefined

$filter_1 ()
$filter_2 ()

$empty_hash_table_entry/filter_1: (_self) -> empty_hash_table_entry 0
$empty_hash_table_entry/filter_2: (_self) -> empty_hash_table_entry 0

$hash_table_leaf/filter_1: (self)
  self $_my_hash_index $_my_key $my_value
  if
    filter_function(my_value)
    -> self 0
    -> empty_hash_table_entry 1

$hash_table_leaf/filter_2: (self)
  self $_my_hash_index $my_key $my_value
  if
    filter_function(my_key my_value)
    -> self 0
    -> empty_hash_table_entry 1

$empty_collision_list_entry/filter_1: (_self) -> empty_collision_list_entry 0
$empty_collision_list_entry/filter_2: (_self) -> empty_collision_list_entry 0

$collision_list_entry/filter_1: (self)
  self $my_key $my_value $my_link
  filter_1 $new_link $deleted my_link
  if
    filter_function(my_value):
      if
	deleted == 0
	-> self 0
	-> typed_tuple(collision_list_entry my_key my_value new_link) deleted
    -> new_link deleted+1

$collision_list_entry/filter_2: (self)
  self $my_key $my_value $my_link
  filter_2 $new_link $deleted my_link
  if
    filter_function(my_key my_value):
      if
	deleted == 0
	-> self 0
	-> typed_tuple(collision_list_entry my_key my_value new_link) deleted
    -> new_link deleted+1

$hash_table_node/filter_1: (self)
  filter_1 $node_1 $deleted_1 self(1)
  filter_1 $node_2 $deleted_2 self(2)
  filter_1 $node_3 $deleted_3 self(3)
  filter_1 $node_4 $deleted_4 self(4)
  filter_1 $node_5 $deleted_5 self(5)
  filter_1 $node_6 $deleted_6 self(6)
  filter_1 $node_7 $deleted_7 self(7)
  filter_1 $node_8 $deleted_8 self(8)
  $deleted
    +
      deleted_1
      deleted_2
      deleted_3
      deleted_4
      deleted_5
      deleted_6
      deleted_7
      deleted_8
  if
    deleted == 0
    -> self 0
    :
      if
	&&
	  node_1.is_an_empty_entry
	  node_2.is_an_empty_entry
	  node_3.is_an_empty_entry
	  node_4.is_an_empty_entry
	  node_5.is_an_empty_entry
	  node_6.is_an_empty_entry
	  node_7.is_an_empty_entry
	  node_8.is_an_empty_entry
	-> empty_hash_table_entry deleted
	->
	  typed_tuple
	    hash_table_node
	    list
	      node_1
	      node_2
	      node_3
	      node_4
	      node_5
	      node_6
	      node_7
	      node_8
	  deleted

$hash_table_node/filter_2: (self)
  filter_2 $node_1 $deleted_1 self(1)
  filter_2 $node_2 $deleted_2 self(2)
  filter_2 $node_3 $deleted_3 self(3)
  filter_2 $node_4 $deleted_4 self(4)
  filter_2 $node_5 $deleted_5 self(5)
  filter_2 $node_6 $deleted_6 self(6)
  filter_2 $node_7 $deleted_7 self(7)
  filter_2 $node_8 $deleted_8 self(8)
  $deleted
    +
      deleted_1
      deleted_2
      deleted_3
      deleted_4
      deleted_5
      deleted_6
      deleted_7
      deleted_8
  if
    deleted == 0
    -> self 0
    :
      if
	&&
	  node_1.is_an_empty_entry
	  node_2.is_an_empty_entry
	  node_3.is_an_empty_entry
	  node_4.is_an_empty_entry
	  node_5.is_an_empty_entry
	  node_6.is_an_empty_entry
	  node_7.is_an_empty_entry
	  node_8.is_an_empty_entry
	-> empty_hash_table_entry deleted
	->
	  typed_tuple
	    hash_table_node
	    list
	      node_1
	      node_2
	      node_3
	      node_4
	      node_5
	      node_6
	      node_7
	      node_8
	  deleted

$std_types::hash_table/filter:
  #
    returns a new hash table containing only the elements for which the
    given function returns true

    Result:

      table # the filtered table

    Topic: Tables

    See also: map, reduce, map_reduce
  (
    self # the table to work on
    function # the function to check for each element of the table
  )
  if
    length_of(self) == 0
    -> empty_hash_table
    :
      !filter_function function
      if $new_contents $deleted
	parameter_count_of(function) == 2:
	  filter_2 contents_of(self)
	:
	  filter_1 contents_of(self)
      if
	deleted == 0
	-> self
	->
	  self
	    .length_of length_of(self)-deleted
	    .contents_of new_contents

# Constructor

$std::hash_table:
  (
    pairs*
  )
  to_hash_table pairs

$std_types::list/to_hash_table:
  #
    converts a list containing key-value-pairs into a hash table

    Topic: Tables

    See also: hash_table
  (
    items # the list to convert
  )
  $table empty_hash_table
  for_each items
    : (item)
      item $key $value
      !table(key) value
      next
    -> table

# Serialization

$std_types::hash_table.serialization_tag_of "hash_table"
$std_types::hash_table.empty_collection_of empty_hash_table

register_type &deserializers std_types::hash_table
