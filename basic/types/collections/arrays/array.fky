#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

<using std>

#
  Topic: Arrays

  An array is a fixed-size collection of elements. It can have more than one
  dimension.

  The elements are accessed using one-based indexing.

  Negative indices are supported and are interpreted as counting from the right
  end of the array dimension.

  In a pure functional language, arrays are immutable. So it would be very
  inefficient to update a single element. Therefor update operations are
  stored in a log buffer and executed in a batch.

  Example:

    $a array(3 2) # 3 rows, 2 columns

    # initialize array

    from_to !a 1 3
      : (row)
	from_to 1 2
	  : (column)
	    !a(row column) row*column
	    next
	  next
      -> a

    from_to 1 3
      : (row)
	from_to 1 2
	  : (column)
	    println! "a(" row ", " column ") = " a(row column)
	    next!
	  next
      pass

  Output:

    a(1, 1) = 1
    a(1, 2) = 2
    a(2, 1) = 2
    a(2, 2) = 4
    a(3, 1) = 3
    a(3, 2) = 6

$std::is_an_array () # obvious

$std_types::object.is_an_array false
  #
    obvious

    Topic: Objects

$std_types::generic_array.is_an_array true
  #
    obvious

    Topic: Lists

$std_types::generic_array/for_each:
  #
    iterates over all items of the array

    For each item the statement sequence supplied as *body* is called
    with one or two arguments (depending on *body*'s parameter count).

    If called with two arguments the first argument is the position number
    of the item within the array.

    To start the next iteration of the loop a tail call to the *next*-function
    has to be performed.

    The loop is exited when the end of the loop is reached without calling
    the *next*-function.

    This is a sequential loop.
  (
    self # the array to iterate over
    body # the statement sequence to execute for each item
    finally = next # called after all items have been iterated over
  )
  $saved_context
    tuple
      next
      break
      basic_loops::from
      basic_loops::to
      basic_loops::self
      basic_loops::body
      basic_loops::finally

  !basic_loops::from 1 # the first ...
  !basic_loops::to length_of(self) # ... and last index of the array
  !basic_loops::self self
  !basic_loops::body body
  !basic_loops::finally finally

  $iterate_1:
    if
      basic_loops::from <= basic_loops::to # another item available?
      :
	basic_loops::body basic_loops::self(basic_loops::from)
	  # supply only the value of each item
      break

  $iterate_2:
    if
      basic_loops::from <= basic_loops::to # another item available?
      :
	basic_loops::body basic_loops::from basic_loops::self(basic_loops::from)
	  # supply index *and* value of each item
      break

  new !break basic_types::break_function: (myself^)
    !finally basic_loops::finally
    basic_loops::saved_context_of(myself)
      !next !break
      !basic_loops::from !basic_loops::to !basic_loops::self
      !basic_loops::body !basic_loops::finally
    finally

  !break.basic_loops::saved_context_of saved_context

  if
    parameter_count_of(body) == 2:
      !next:
	!basic_loops::from basic_loops::from+1 # increase the array index
	iterate_2 # start the next iteration
      iterate_2 # start the first iteration
    :
      !next:
	!basic_loops::from basic_loops::from+1 # increase the array index
	iterate_1 # start the next iteration
      iterate_1 # start the first iteration

$std_types::generic_array/map:
  #
    applies a function to each element of an array, producing a new array

    Topic: Arrays

    See also: map_reduce, reduce
  (
    self # the array to work on
    map_function # the function to apply to each element of the array
  )
  $d dimension_count_of(self)
  case d
    1:
      $new_array create_empty_array(self)
      if
	parameter_count_of(map_function) == 1:
	  from_to 1 length_of(self)
	    : (i)
	      !new_array(i) map_function(self(i))
	      next
	    -> new_array
	:
	  from_to 1 length_of(self)
	    : (i)
	      !new_array(i) map_function(i self(i))
	      next
	    -> new_array
    2:
      $n length_of(self 1)
      $m length_of(self 2)
      $new_array create_empty_array(self)
      from_to 1 n
	: (i)
	  if
	    parameter_count_of(map_function) == 1:
	      from_to 1 m
		: (j)
		  !new_array(i j) map_function(self(i j))
		  next
		next
	    :
	      from_to 1 m
		: (j)
		  !new_array(i j) map_function(i j self(i j))
		  next
		next
	-> new_array
    3:
      $n length_of(self 1)
      $m length_of(self 2)
      $k length_of(self 3)
      $new_array create_empty_array(self)
      from_to 1 n
	: (i)
	  from_to 1 m
	    : (j)
	      if
		parameter_count_of(map_function) == 1:
		  from_to 1 k
		    : (k)
		      !new_array(i j k) map_function(self(i j k))
		      next
		    next
		:
		  from_to 1 k
		    : (k)
		      !new_array(i j k) map_function(i j k self(i j k))
		      next
		    next
	    next
	-> new_array
    :
      Error "
	<map> is not yet defined for arrays with more than three dimensions

$std_types::generic_array/reduce:
  #
    applies a function to the elements of an array, returning a single result

    Topic: Arrays

    See also: map_reduce
  (
    self # the array to work on
    reduce_function = append # the function to apply to pairs of values
    _unit = undefined # the value to return for empty arrays
  )
  $d dimension_count_of(self)
  case d
    1:
      $reduce: (s e)
	if
	  s < e:
	    $m (s+e) >> 1
	    reduce_function
	      reduce(s m)
	      reduce(m+1 e)
	  -> self(s)
      reduce 1 length_of(self)
    2:
      $n length_of(self 1)
      $m length_of(self 2)
      $acc neutral_element_of(self(1 1))
      from_to 1 n
	: (i)
	  from_to 1 m
	    : (j)
	      reduce_function &acc self(i j)
	      next
	    next
	-> acc
    3:
      $n length_of(self 1)
      $m length_of(self 2)
      $k length_of(self 3)
      $acc neutral_element_of(self(1 1 1))
      from_to 1 n
	: (i)
	  from_to 1 m
	    : (j)
	      from_to 1 k
		: (k)
		  reduce_function &acc self(i j k)
		  next
		next
	    next
	-> acc
    :
      Error "
	<reduce> is not yet defined for arrays with more than three dimensions

$std_types::generic_array/map_reduce:
  #
    combines a map and a reduce operation into a single operation

    Does not create an intermediate array to hold the "mapped" values.

    Topic: Arrays

    See also: map, reduce
  (
    self # the array to work on
    map_function # the function to apply to each element of the array
    reduce_function = append # the function to apply to pairs of values
    _unit = undefined # the value to return for empty arrays
  )
  $d dimension_count_of(self)
  case d
    1:
      $map_reduce
	if
	  parameter_count_of(map_function) == 1
	  ->
	    : (s e)
	      if
		s < e:
		  $m (s+e) >> 1
		  reduce_function
		    map_reduce(s m)
		    map_reduce(m+1 e)
		-> map_function(self(s))
	  ->
	    : (s e)
	      if
		s < e:
		  $m (s+e) >> 1
		  reduce_function
		    map_reduce(s m)
		    map_reduce(m+1 e)
		-> map_function(s self(s))
      map_reduce 1 length_of(self)
    2:
      $n length_of(self 1)
      $m length_of(self 2)
      $acc neutral_element_of(map_function(self(1 1)))
      from_to 1 n
	: (i)
	  if
	    parameter_count_of(map_function) == 1:
	      from_to 1 m
		: (j)
		  reduce_function &acc map_function(self(i j))
		  next
		next
	    :
	      from_to 1 m
		: (j)
		  reduce_function &acc map_function(i j self(i j))
		  next
		next
	-> acc
    3:
      $n length_of(self 1)
      $m length_of(self 2)
      $k length_of(self 3)
      $acc neutral_element_of(map_function(self(1 1 1)))
      from_to 1 n
	: (i)
	  from_to 1 m
	    : (j)
	      if
		parameter_count_of(map_function) == 1:
		  from_to 1 k
		    : (k)
		      reduce_function &acc map_function(self(i j k))
		      next
		    next
		:
		  from_to 1 k
		    : (k)
		      reduce_function &acc map_function(i j k self(i j k))
		      next
		    next
	    next
	-> acc
    :
      Error "
	<map_reduce> is not yet defined for arrays with more than three dimensions

###
# serialization

$std_types::array.serialization_tag_of "array"
$std_types::boolean_array.serialization_tag_of "boolean_array"
$std_types::character_array.serialization_tag_of "character_array"
$std_types::int8_array.serialization_tag_of "int8_array"
$std_types::uint8_array.serialization_tag_of "uint8_array"
$std_types::int16_array.serialization_tag_of "int16_array"
$std_types::uint16_array.serialization_tag_of "uint16_array"
$std_types::int32_array.serialization_tag_of "int32_array"
$std_types::uint32_array.serialization_tag_of "uint32_array"
$std_types::int64_array.serialization_tag_of "int64_array"
$std_types::uint64_array.serialization_tag_of "uint64_array"
$std_types::float32_array.serialization_tag_of "float32_array"
$std_types::float64_array.serialization_tag_of "float64_array"

$std_types::generic_array/serialize:
  (
    self
    indent = undefined
  )
  $n dimension_count_of(self)
  $dimensions map_reduce(1..n : (i) -> append(" " length_of(self i).to_string))
  $indentation
    if
      indent.is_defined
      -> tabs_and_spaces(indent+2)
      -> ""
  append
    if
      indent.is_defined
      -> tabs_and_spaces(indent)
      -> ""
    serialization_tag_of(self)
    dimensions
    "@nl;"
    map_reduce(self: (item) -> append(indentation item.to_string "@nl;"))
