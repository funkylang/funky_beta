#
  Copyright (C) 2023 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Topics: Sets, Collections

$std::is_an_insert_order_set () # obvious

$std_types::object.is_an_insert_order_set false # obvious
$std_types::insert_order_set.is_an_insert_order_set true # obvious

$NONE .

$items_of () # a hash tree of tuples <previous_key next_key>

$std_types::insert_order_set std_types::set
  #
    the prototype object for all insert-order sets

$std::empty_insert_order_set std_types::insert_order_set
  #
    an empty insert-order set

$std_types::insert_order_set.items_of empty_hash_table
$std_types::insert_order_set.first_item_of undefined
$std_types::insert_order_set.last_item_of undefined

$std_types::insert_order_set/:
  #
    retrieve or add an item
  (
    myself^
    key
    value = NONE
  )
  $items items_of(myself)
  $item items(key)
  if
    NONE == value
    -> item.is_defined
    :
      if
	value:
	  if
	    item.is_defined # already set
	    -> myself
	    : # add a new entry
	      $last_key last_item_of(myself)
	      !items(key) tuple(last_key undefined)
	      if
		last_key.is_defined:
		  !items(last_key) tuple(first(items(last_key)) key)
		  ->
		    myself
		      .items_of items
		      .last_item_of key
		->
		  myself
		    .items_of items
		    .first_item_of key
		    .last_item_of key
	: # remove entry
	  if
	    item.is_undefined # not set
	    -> myself
	    :
	      item $previous_key $next_key
	      $first_key first_item_of(myself)
	      $last_key last_item_of(myself)
	      !items(key) undefined
	      if
		previous_key.is_defined:
		  !items(previous_key)
		    tuple(first(items(previous_key)) next_key)
		  check_next_key
		:
		  !first_key next_key
		  check_next_key

	      $check_next_key:
		if
		  next_key.is_defined:
		    !items(next_key)
		      tuple(previous_key second(items(next_key)))
		    return
		  :
		    !last_key previous_key
		    return

	      $return
		->
		  myself
		    .items_of items
		    .first_item_of first_key
		    .last_item_of last_key

$std_types::insert_order_set/length_of: (self)
  -> length_of(items_of(self))

$std_types::insert_order_set/to_list:
  #
    converts the insert-order-set into a list
  (
    self
  )
  $items items_of(self)
  $keys empty_list
  add_keys first_item_of(self)

  $add_keys: (key)
    if
      key.is_undefined
      -> keys
      :
	push &keys key
	add_keys second(items(key))

$std_types::insert_order_set/for_each:
  #
    invokes the specified callback for each item of the set
  (
    self # the hash set to iterate over
    body # the statement sequence to execute for each item
    finally = next # called after all items have been iterated over
  )
  for_each! self.to_list body finally

###
# map_reduce

$std_types::insert_order_set/map_reduce:
  #
    combines a map and a reduce operation into a single operation

    Does not create an intermediate table to hold the "mapped" values.

    Topic: Sets

    See also: map, reduce
  (
    self # the set to work on
    map_function # the function to apply to each element of the set
    reduce_function = append # the function to apply to each member of the set
    unit = undefined # the value to return for empty sets
  )
  map_reduce self.to_list map_function reduce_function unit

###
# constructor

$std::insert_order_set:
  (
    keys*
  )
  $set empty_insert_order_set
  for_each keys
    : (key)
      !set(key) true
      next
    -> set

###
# serialization

$std_types::insert_order_set.serialization_tag_of "insert_order_set"
$std_types::insert_order_set.empty_collection_of empty_insert_order_set

register_type &deserializers std_types::insert_order_set
