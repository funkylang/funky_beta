#
  Copyright (C) 2023 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Topic: Collections

#
  Topics: Sets

##########
# set
##########

$std::is_a_set () # obvious
$std_types::object.is_a_set false # obvious
$std_types::set.is_a_set true # obvious

$std_types::set std_types::collection
  #
    the prototype object for all kinds of sets

    Topic: Collections

    See also: std_types::hash_set, std_types::key_order_set

$std_types::set/merge:
  #
    merges the two sets
  (
    self # the base set
    other # the set to merge
  )
  for_each other
    : (key)
      !self(key) true
      next
    -> self

$std_types::set/intersection:
  #
    returns the intersection of the two sets
  (
    self # the base set
    other # the set to intersect
  )
  $result empty_collection_of(self)
  for_each self
    : (key)
      if
	other(key):
	  !result(key) true
	  next
	next
    -> result

$std_types::set/equal:
  # checks if the two sets are equal
  (
    self
    other
  )
  if
    length_of(self) != length_of(other)
    -> false
    :
      for_each self
	: (item)
	  if
	    other(item)
	    next
	    -> false
	-> true

$std_types::set/contains:
  # checks if the set contains all items of the other set
  (
    self
    other
  )
  for_each other
    : (item)
      if
	self(item)
	next
	-> false
    -> true

$std_types::set/to_list:
  #
    returns a list of all elements in the set
  (
    self # the set
  )
  $items empty_list
  for_each self
    : (item)
      push &items item
      next
    -> items

# grammar functions

$std_types::set/match:
  #
    matches the start of a string with the set's characters

    Result:
      len # 1 if any character in the set matches the start of the string

    If the match is unsuccessful, then *len* is <undefined>.

    Use the <std::set>-function to construct a set of characters.

    Topic: Strings

    See also: std::set, std::match_back, std::search

    Example:

      $str "[abc]"
      $len match(set('(' '[' '{') str)
      dump! `len

    Output:

      len: 1

    Example:

      $str "abc"
      $len match(set('(' ']' '}') str)
      dump! `len

    Output:

      len: <undefined>
  (
    self # a set of characters
    str # the string which's start is matched
  )
  $rc result_count
  if
    str.is_empty
    fail
    :
      if
	self(str(1)):
	  if
	    rc == 1
	    -> 1
	    -> 1 undefined
	fail

  $fail:
    if
      rc == 1
      -> undefined
      -> undefined undefined

$std_types::set/match_back:
  #
    matches the end of a string with the set's characters

    Result:
      len # 1 if any character in the set matches the end of the string

    If the match is unsuccessful, then *len* is <undefined>.

    Use the <std::set>-function to construct a set of characters.

    Topic: Strings

    See also: std::set, setd::match, std::search

    Example:

      $str "[abc]"
      $len match_back(set(')' ']' '}') str)
      dump! `len

    Output:

      len: 1

    Example:

      $str "abc"
      $len match_back(set(')' ']' '}') str)
      dump! `len

    Output:

      len: <undefined>
  (
    self # a set of characters
    str # the string which's end is matched
  )
  if
    str.is_empty
    -> undefined
    :
      if
	self(str(-1))
	-> 1
	-> undefined

$std_types::set/search:
  #
    searches for one of the alternatives from the start or the end of a string

    Results:
      pos # the position of the first occurrence of a matching character
      len # 1 if successful

    If a matching character is not found, then *pos* and *len* are <undefined>.

    Topic: Strings

    See also: match, match_back

    Example:

      println! "std_types::integer/std::minus" .before. set('.' '/')

    Output:

      std_types::integer
  (
    self # a set of characters
    stream # the string to search in
    nth = 1 # search for the nth occurrence; negative value search backwards
  )
  $i undefined
  $n length_of(stream)
  if
    nth < 0:
      !i n
      search_backwards
    :
      !i 1
      search_forwards

  $search_forwards:
    if
      i <= n:
	if
	  self(stream(i)):
	    if
	      nth > 1:
		dec &nth
		inc &i
		search_forwards
	      -> i 1
	  :
	    inc &i
	    search_forwards
      -> undefined undefined

  $search_backwards:
    if
      i >= 1
      :
	if
	  self(stream(i)):
	    if
	      nth < -1:
		inc &nth
		dec &i
		search_backwards
	      -> i 1
	  :
	    dec &i
	    search_backwards
      -> undefined undefined

# Debugging

$std_types::set/debug::to_string:
  (
    self
    indent = 0
    depth = 1
  )
  $tag serialization_tag_of(self)
  cond
    -> self.is_empty -> "empty_@(tag)@nl;"
    -> depth <= 1:
      $len length_of(self)
      if
	len == 1
	-> "<@(tag) with 1 item>@nl;"
	-> "<@(tag) with @(len) items>@nl;"
    -> true:
      $new_indent indent+2
      map_reduce $contents
	self: (value)
	  append
	    tabs_and_spaces(new_indent)
	    debug::to_string(value new_indent depth-1)
	append
	""
      append append("@nl;" tabs_and_spaces(indent) tag "@nl;") contents

# Serialization

$std_types::set/serialize:
  (
    self
    indent = undefined
  )
  $new_indent
    if
      indent.is_defined
      -> indent+2
      -> undefined
  map_reduce $contents
    self: (value) -> serialize(value new_indent)
    append
    ""
  $header
    "
      @(serialization_tag_of(self)) <@(length_of(self))>
  update_if indent.is_defined &header -> append(tabs_and_spaces(indent) header)
  append header contents

$std_types::set.deserializer_of:
  (
    type
    items
  )
  $obj empty_collection_of(type)
  for_each items
    : (item)
      !obj(item) true
      next
    -> obj
