#
  This file was automatically generated by the script
  "generate_tuple_methods.fky" - do not edit!

#
  Copyright (C) 2023 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, or
  (at your option) version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files GPLv2.txt and GLPv3.txt or
  http://www.gnu.org/licenses/gpl-2.0.html
  http://www.gnu.org/licenses/gpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Topics: Tuples, Collections

$std::to_binop ()

$operators_of ()

$equal2 ()

$builtin_types::tuple2/equal: (left right)
  equal2 right left

$std_types::object/equal2: (_left _right) -> false

$builtin_types::tuple2/equal2: (right left)
  left $lv1 $lv2
  right $rv1 $rv2
  ->
    &&
      lv1 == rv1
      lv2 == rv2

$builtin_types::tuple2/less: (left right)
  left $lv1 $lv2
  right $rv1 $rv2
  ->
    ||
      lv1 < rv1
      &&
	lv1 == rv1
	lv2 < rv2

$builtin_types::tuple2/hash: (self)
  self $v1 $v2
  ->
    ^
      hash(v1)
      hash(v2)

$builtin_types::tuple2/to_binop: (self) -> binop2(.operators_of self)

$binop2: (myself^ left right)
  operators_of(myself) $op1 $op2
  left $lv1 $lv2
  right $rv1 $rv2
  tuple
    op1(lv1 rv1)
    op2(lv2 rv2)

$binop2.operators_of undefined

$equal3 ()

$builtin_types::tuple3/equal: (left right)
  equal3 right left

$std_types::object/equal3: (_left _right) -> false

$builtin_types::tuple3/equal3: (right left)
  left $lv1 $lv2 $lv3
  right $rv1 $rv2 $rv3
  ->
    &&
      lv1 == rv1
      lv2 == rv2
      lv3 == rv3

$builtin_types::tuple3/less: (left right)
  left $lv1 $lv2 $lv3
  right $rv1 $rv2 $rv3
  ->
    ||
      lv1 < rv1
      &&
	lv1 == rv1
	||
	  lv2 < rv2
	  &&
	    lv2 == rv2
	    lv3 < rv3

$builtin_types::tuple3/hash: (self)
  self $v1 $v2 $v3
  ->
    ^
      hash(v1)
      hash(v2)
      hash(v3)

$builtin_types::tuple3/to_binop: (self) -> binop3(.operators_of self)

$binop3: (myself^ left right)
  operators_of(myself) $op1 $op2 $op3
  left $lv1 $lv2 $lv3
  right $rv1 $rv2 $rv3
  tuple
    op1(lv1 rv1)
    op2(lv2 rv2)
    op3(lv3 rv3)

$binop3.operators_of undefined

$equal4 ()

$builtin_types::tuple4/equal: (left right)
  equal4 right left

$std_types::object/equal4: (_left _right) -> false

$builtin_types::tuple4/equal4: (right left)
  left $lv1 $lv2 $lv3 $lv4
  right $rv1 $rv2 $rv3 $rv4
  ->
    &&
      lv1 == rv1
      lv2 == rv2
      lv3 == rv3
      lv4 == rv4

$builtin_types::tuple4/less: (left right)
  left $lv1 $lv2 $lv3 $lv4
  right $rv1 $rv2 $rv3 $rv4
  ->
    ||
      lv1 < rv1
      &&
	lv1 == rv1
	||
	  lv2 < rv2
	  &&
	    lv2 == rv2
	    ||
	      lv3 < rv3
	      &&
		lv3 == rv3
		lv4 < rv4

$builtin_types::tuple4/hash: (self)
  self $v1 $v2 $v3 $v4
  ->
    ^
      hash(v1)
      hash(v2)
      hash(v3)
      hash(v4)

$builtin_types::tuple4/to_binop: (self) -> binop4(.operators_of self)

$binop4: (myself^ left right)
  operators_of(myself) $op1 $op2 $op3 $op4
  left $lv1 $lv2 $lv3 $lv4
  right $rv1 $rv2 $rv3 $rv4
  tuple
    op1(lv1 rv1)
    op2(lv2 rv2)
    op3(lv3 rv3)
    op4(lv4 rv4)

$binop4.operators_of undefined

$equal5 ()

$builtin_types::tuple5/equal: (left right)
  equal5 right left

$std_types::object/equal5: (_left _right) -> false

$builtin_types::tuple5/equal5: (right left)
  left $lv1 $lv2 $lv3 $lv4 $lv5
  right $rv1 $rv2 $rv3 $rv4 $rv5
  ->
    &&
      lv1 == rv1
      lv2 == rv2
      lv3 == rv3
      lv4 == rv4
      lv5 == rv5

$builtin_types::tuple5/less: (left right)
  left $lv1 $lv2 $lv3 $lv4 $lv5
  right $rv1 $rv2 $rv3 $rv4 $rv5
  ->
    ||
      lv1 < rv1
      &&
	lv1 == rv1
	||
	  lv2 < rv2
	  &&
	    lv2 == rv2
	    ||
	      lv3 < rv3
	      &&
		lv3 == rv3
		||
		  lv4 < rv4
		  &&
		    lv4 == rv4
		    lv5 < rv5

$builtin_types::tuple5/hash: (self)
  self $v1 $v2 $v3 $v4 $v5
  ->
    ^
      hash(v1)
      hash(v2)
      hash(v3)
      hash(v4)
      hash(v5)

$builtin_types::tuple5/to_binop: (self) -> binop5(.operators_of self)

$binop5: (myself^ left right)
  operators_of(myself) $op1 $op2 $op3 $op4 $op5
  left $lv1 $lv2 $lv3 $lv4 $lv5
  right $rv1 $rv2 $rv3 $rv4 $rv5
  tuple
    op1(lv1 rv1)
    op2(lv2 rv2)
    op3(lv3 rv3)
    op4(lv4 rv4)
    op5(lv5 rv5)

$binop5.operators_of undefined

$equal6 ()

$builtin_types::tuple6/equal: (left right)
  equal6 right left

$std_types::object/equal6: (_left _right) -> false

$builtin_types::tuple6/equal6: (right left)
  left $lv1 $lv2 $lv3 $lv4 $lv5 $lv6
  right $rv1 $rv2 $rv3 $rv4 $rv5 $rv6
  ->
    &&
      lv1 == rv1
      lv2 == rv2
      lv3 == rv3
      lv4 == rv4
      lv5 == rv5
      lv6 == rv6

$builtin_types::tuple6/less: (left right)
  left $lv1 $lv2 $lv3 $lv4 $lv5 $lv6
  right $rv1 $rv2 $rv3 $rv4 $rv5 $rv6
  ->
    ||
      lv1 < rv1
      &&
	lv1 == rv1
	||
	  lv2 < rv2
	  &&
	    lv2 == rv2
	    ||
	      lv3 < rv3
	      &&
		lv3 == rv3
		||
		  lv4 < rv4
		  &&
		    lv4 == rv4
		    ||
		      lv5 < rv5
		      &&
			lv5 == rv5
			lv6 < rv6

$builtin_types::tuple6/hash: (self)
  self $v1 $v2 $v3 $v4 $v5 $v6
  ->
    ^
      hash(v1)
      hash(v2)
      hash(v3)
      hash(v4)
      hash(v5)
      hash(v6)

$builtin_types::tuple6/to_binop: (self) -> binop6(.operators_of self)

$binop6: (myself^ left right)
  operators_of(myself) $op1 $op2 $op3 $op4 $op5 $op6
  left $lv1 $lv2 $lv3 $lv4 $lv5 $lv6
  right $rv1 $rv2 $rv3 $rv4 $rv5 $rv6
  tuple
    op1(lv1 rv1)
    op2(lv2 rv2)
    op3(lv3 rv3)
    op4(lv4 rv4)
    op5(lv5 rv5)
    op6(lv6 rv6)

$binop6.operators_of undefined

$equal7 ()

$builtin_types::tuple7/equal: (left right)
  equal7 right left

$std_types::object/equal7: (_left _right) -> false

$builtin_types::tuple7/equal7: (right left)
  left $lv1 $lv2 $lv3 $lv4 $lv5 $lv6 $lv7
  right $rv1 $rv2 $rv3 $rv4 $rv5 $rv6 $rv7
  ->
    &&
      lv1 == rv1
      lv2 == rv2
      lv3 == rv3
      lv4 == rv4
      lv5 == rv5
      lv6 == rv6
      lv7 == rv7

$builtin_types::tuple7/less: (left right)
  left $lv1 $lv2 $lv3 $lv4 $lv5 $lv6 $lv7
  right $rv1 $rv2 $rv3 $rv4 $rv5 $rv6 $rv7
  ->
    ||
      lv1 < rv1
      &&
	lv1 == rv1
	||
	  lv2 < rv2
	  &&
	    lv2 == rv2
	    ||
	      lv3 < rv3
	      &&
		lv3 == rv3
		||
		  lv4 < rv4
		  &&
		    lv4 == rv4
		    ||
		      lv5 < rv5
		      &&
			lv5 == rv5
			||
			  lv6 < rv6
			  &&
			    lv6 == rv6
			    lv7 < rv7

$builtin_types::tuple7/hash: (self)
  self $v1 $v2 $v3 $v4 $v5 $v6 $v7
  ->
    ^
      hash(v1)
      hash(v2)
      hash(v3)
      hash(v4)
      hash(v5)
      hash(v6)
      hash(v7)

$builtin_types::tuple7/to_binop: (self) -> binop7(.operators_of self)

$binop7: (myself^ left right)
  operators_of(myself) $op1 $op2 $op3 $op4 $op5 $op6 $op7
  left $lv1 $lv2 $lv3 $lv4 $lv5 $lv6 $lv7
  right $rv1 $rv2 $rv3 $rv4 $rv5 $rv6 $rv7
  tuple
    op1(lv1 rv1)
    op2(lv2 rv2)
    op3(lv3 rv3)
    op4(lv4 rv4)
    op5(lv5 rv5)
    op6(lv6 rv6)
    op7(lv7 rv7)

$binop7.operators_of undefined

$equal8 ()

$builtin_types::tuple8/equal: (left right)
  equal8 right left

$std_types::object/equal8: (_left _right) -> false

$builtin_types::tuple8/equal8: (right left)
  left $lv1 $lv2 $lv3 $lv4 $lv5 $lv6 $lv7 $lv8
  right $rv1 $rv2 $rv3 $rv4 $rv5 $rv6 $rv7 $rv8
  ->
    &&
      lv1 == rv1
      lv2 == rv2
      lv3 == rv3
      lv4 == rv4
      lv5 == rv5
      lv6 == rv6
      lv7 == rv7
      lv8 == rv8

$builtin_types::tuple8/less: (left right)
  left $lv1 $lv2 $lv3 $lv4 $lv5 $lv6 $lv7 $lv8
  right $rv1 $rv2 $rv3 $rv4 $rv5 $rv6 $rv7 $rv8
  ->
    ||
      lv1 < rv1
      &&
	lv1 == rv1
	||
	  lv2 < rv2
	  &&
	    lv2 == rv2
	    ||
	      lv3 < rv3
	      &&
		lv3 == rv3
		||
		  lv4 < rv4
		  &&
		    lv4 == rv4
		    ||
		      lv5 < rv5
		      &&
			lv5 == rv5
			||
			  lv6 < rv6
			  &&
			    lv6 == rv6
			    ||
			      lv7 < rv7
			      &&
				lv7 == rv7
				lv8 < rv8

$builtin_types::tuple8/hash: (self)
  self $v1 $v2 $v3 $v4 $v5 $v6 $v7 $v8
  ->
    ^
      hash(v1)
      hash(v2)
      hash(v3)
      hash(v4)
      hash(v5)
      hash(v6)
      hash(v7)
      hash(v8)

$builtin_types::tuple8/to_binop: (self) -> binop8(.operators_of self)

$binop8: (myself^ left right)
  operators_of(myself) $op1 $op2 $op3 $op4 $op5 $op6 $op7 $op8
  left $lv1 $lv2 $lv3 $lv4 $lv5 $lv6 $lv7 $lv8
  right $rv1 $rv2 $rv3 $rv4 $rv5 $rv6 $rv7 $rv8
  tuple
    op1(lv1 rv1)
    op2(lv2 rv2)
    op3(lv3 rv3)
    op4(lv4 rv4)
    op5(lv5 rv5)
    op6(lv6 rv6)
    op7(lv7 rv7)
    op8(lv8 rv8)

$binop8.operators_of undefined
