#
  Copyright (C) 2020 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Topics: Tuples, Collections

$std::lower_bound_of ()
$std::upper_bound_of ()

$std_types::value_range.subtype_of "value_range"

$std::is_a_value_range ()

$std_types::object.is_a_value_range false # obvious
$std_types::value_range.is_a_value_range true # obvious

$std_types::value_range/lower_bound_of:
  (
    self
  )
  self $lower_bound $_upper_bound
  -> lower_bound

$std_types::value_range/upper_bound_of:
  (
    self
  )
  self $_lower_bound $upper_bound
  -> upper_bound

$std_types::value_range/length_of:
  (
    self
  )
  self $lower_bound $upper_bound
  -> upper_bound+1-lower_bound

$std_types::value_range/match:
  #
    Example:

      $range 'a'..'z'
      match range "@" $len
      dump! `len

    Output:

      len: <undefined>

    Example:

      $range 'a'..'z'
      match range "xyz" $len
      dump! `len

    Output:

      len: 1
  (
    expr
    str
  )
  $rc result_count()
  if
    str.is_empty
    fail
    :
      $chr str(1)
      if
	chr >= lower_bound_of(expr) && chr <= upper_bound_of(expr):
	  if
	    rc == 1
	    -> 1
	    -> 1 undefined
	fail

  $fail:
    if
      rc == 1
      -> undefined
      -> undefined undefined

$std_types::value_range/match_back:
  #
    Example:

      $range 'a'..'z'
      match_back range "@" $len
      dump! `len

    Output:

      len: <undefined>

    Example:

      $range 'a'..'z'
      match_back range "xyz" $len
      dump! `len

    Output:

      len: 1
  (
    expr
    str
  )
  if
    str.is_empty
    -> undefined
    :
      $chr str(-1)
      if
	chr >= lower_bound_of(expr) && chr <= upper_bound_of(expr)
	-> 1
	-> undefined

$std_types::value_range/search:
  #
    Example:

      $range 'a'..'z'
      search range "123xyz" 2 $pos $len
      dump! `pos `len

    Output:

      pos: 5
      len: 1
  (
    expr # the grammar object
    str # the string to search
    nth = 1 # the nth occurrence to search for
  )
  $low lower_bound_of(expr)
  $high upper_bound_of(expr)
  $len length_of(str)
  if
    nth < 0
    search_backwards
    search_forwards

  $search_forwards:
    $i 0
    loop:
      inc &i
      if
	i > len
	-> undefined undefined
	:
	  $chr str(i)
	  if
	    chr >= low && chr <= high:
	      if
		nth > 1:
		  dec &nth
		  next
		-> i 1
	    next

  $search_backwards:
    $i len+1
    loop:
      dec &i
      if
	i < 1
	-> undefined undefined
	:
	  $chr str(i)
	  if
	    chr >= low && chr <= high:
	      if
		nth < -1:
		  inc &nth
		  next
		-> i 1
	    next

$std_types::value_range/for_each:
  (
    self
    body
    finally
  )
  self $low $high
  from_to! low high body finally

$std_types::value_range/map:
  #
    applies a function to all values and returns a list of the results

    See also: reduce, map_reduce
  (
    self # the value-range which items will be mapped
    function # the function to apply to each element of the value-range
  )
  $map: (from to)
    $n to+1-from
    if
      n >= 2:
	$m n >> 1
	append
	  map(from from+m-1)
	  map(from+m to)
      :
	if
	  n == 1
	  : list function(from)
	  -> empty_list

  self $lower_bound $upper_bound
  map lower_bound upper_bound

$std_types::value_range/std::reduce:
  (
    self # the value-range to build the "sum" from
    function # the function to apply to pairs of values
  )
  $reduce: (from to)
    $n to+1-from
    if
      n >= 2:
	$m n >> 1
	function
	  reduce(from from+m-1)
	  reduce(from+m to)
      -> from

  self $lower_bound $upper_bound
  reduce lower_bound upper_bound

$std_types::value_range/map_reduce:
  (
    self
    map_function
    reduce_function = append
  )
  $map_reduce: (from to)
    $n to+1-from
    if
      n >= 2:
	$m n >> 1
	reduce_function
	  map_reduce(from from+m-1)
	  map_reduce(from+m to)
      -> map_function(from)

  self $lower_bound $upper_bound
  map_reduce lower_bound upper_bound

$std::value_range:
  (
    lower_bound # the first value in the value-range
    upper_bound # the last value in the value-range
  )
  typed_tuple std_types::value_range lower_bound upper_bound

$std_types::value_range.serialization_tag_of "value_range"

register_type &deserializers std_types::value_range
