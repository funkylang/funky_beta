#
  Copyright (C) 2021 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Topic: Random Numbers, Iterators

$index_of ()
$state_of ()

$STATE_VECTOR_LENGTH 624
$STATE_VECTOR_M 397
$UPPER_MASK 0x80000000
$LOWER_MASK 0x7fffffff
$TEMPERING_MASK_B 0x9d2c5680
$TEMPERING_MASK_C 0xefc60000

$std_types::mersenne_twister std_types::random_number_generator
$std_types::mersenne_twister.index_of undefined
$std_types::mersenne_twister.state_of undefined

$std_types::mersenne_twister.modulus_of 0x100000000

$std_types::mersenne_twister/next_raw_value: (self)
  $state state_of(self)
  $index index_of(self)
  $mag list(0x0 0x9908b0df)
  if !state !index
    index > STATE_VECTOR_LENGTH:
      $new_state empty_list
      from_to !new_state
	1 STATE_VECTOR_LENGTH-STATE_VECTOR_M
	: (kk)
	  $x
	    |
	      state(kk) & UPPER_MASK
	      state(kk+1) & LOWER_MASK
	  push &new_state state(kk+STATE_VECTOR_M) ^ (x >> 1) ^ mag((x & 1)+1)
	  next
	-> new_state
      from_to !new_state
	STATE_VECTOR_LENGTH+1-STATE_VECTOR_M
	STATE_VECTOR_LENGTH-1
	: (kk)
	  $x
	    |
	      state(kk) & UPPER_MASK
	      state(kk+1) & LOWER_MASK
	  push
	    &new_state
	    ^
	      new_state(kk+STATE_VECTOR_M-STATE_VECTOR_LENGTH)
	      x >> 1
	      mag((x & 1)+1)
	  next
	-> new_state
      do:
	$x
	  |
	    state(STATE_VECTOR_LENGTH) & UPPER_MASK
	    new_state(1) & LOWER_MASK
	push &new_state new_state(STATE_VECTOR_M) ^ (x >> 1) ^ mag((x & 1)+1)
	-> new_state 1
    :
      -> state index
  $y state(index)
  inc &index
  !y y ^ (y >> 11)
  !y y ^ ((y << 7) & TEMPERING_MASK_B)
  !y y ^ ((y << 15) & TEMPERING_MASK_C)
  !y y ^ (y >> 18)
  ->
    self
      .state_of state
      .index_of index
    y

$std::mersenne_twister:
  #
    creates a pseudo random number generator
  (
    seed
  )
  $initial_state list(seed & 0xffffffff)
  repeat !initial_state STATE_VECTOR_LENGTH-1
    :
      push &initial_state 6069*initial_state(-1) & 0xffffffff
      next
    -> initial_state
  ->
    std_types::mersenne_twister
      .state_of initial_state
      .index_of STATE_VECTOR_LENGTH+1
