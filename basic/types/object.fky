#
  Copyright (C) 2021 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
  Topic: Basics

  The standard library provides many functions and "types". There are no
  types in Funky, but it is common to abbreviate *prototype objects* as
  *types*.

  The standard libraries use the namespace "std_types" for prototype objects.

  The namespace "std_types" is reserved for definitions by the standard
  libraries.

  For most "types" there is a constructor function, or, if the type describes
  a *singleton*, a single object with the same name, but in the namespace "std".

  The namespace "std" is also reserved for definitions by the standard
  libraries.

  An example:

  <std_types::list>

  is the prototype for lists.

  and

  <std::list>

  is the constructor function for lists.

  Another example:

  <std_types::true>

  is the type of the boolean value "true" and

  <std::true>

  *is* the boolean value "true".

  There are three root objects. All other objects are derived from one of these
  objects.

  These root objects are:

$std::is_defined ()
  # true for all "normal" objects" and false for <undefined>

$std_types::object.is_defined true

$std::is_a_plain_object ()
  #
    a plain object is a object without any "builtin" attributes;
    numbers, characters, strings, etc. are *no* plain objects

$std_types::object.is_a_plain_object true

$std_types::number.is_a_plain_object false
$std_types::true.is_a_plain_object false
$std_types::false.is_a_plain_object false
$std_types::string.is_a_plain_object false
$std_types::tuple.is_a_plain_object false
$std_types::generic_array.is_a_plain_object false
$std_types::unique_item.is_a_plain_object false
$std_types::function.is_a_plain_object false
$std_types::polymorphic_function.is_a_plain_object false
$std_types::character.is_a_plain_object false
$std_types::date_and_time.is_a_plain_object false
$std_types::terminal_attributes.is_a_plain_object false
$std_types::file_type.is_a_plain_object false
$std_types::file_descriptor.is_a_plain_object false
$std_types::shutdown_type.is_a_plain_object false
$std_types::seek_type.is_a_plain_object false
$std_types::device_id.is_a_plain_object false
$std_types::directory.is_a_plain_object false
$std_types::group_id.is_a_plain_object false
$std_types::inode_number.is_a_plain_object false
$std_types::process_id.is_a_plain_object false
$std_types::user_id.is_a_plain_object false
$std_types::error_number.is_a_plain_object false

# Serialization

$std::serialization_fields_of ()

$std_types::object.serialization_tag_of "object"
$std_types::object.serialization_fields_of empty_list

$std_types::object/serialize:
  (
    obj
    indent = undefined
  )
  $new_indent
    if
      indent.is_defined
      -> indent+2
      -> undefined
  $fieldnames_and_getters serialization_fields_of(obj)
  $i 1
  $len length_of(fieldnames_and_getters)
  $buf ""
  loop:
    if
      i < len:
	$field fieldnames_and_getters(i+1)(obj)
	if
	  field.is_defined:
	    $fieldname fieldnames_and_getters(i)
	    append &buf serialize(fieldname new_indent)
	    append &buf serialize(field new_indent)
	    !i i+2
	    next
	  :
	    !i i+2
	    next
      :
	append string(serialization_tag_of(obj) " <" len ">@nl;") &buf
	update_if indent.is_defined &buf -> append(tabs_and_spaces(indent) buf)
	-> buf

$std_types::object.deserializer_of:
  (
    prototype
    items
  )
  $tab serialization_fields_of(prototype).to_table
  $i 1
  $n length_of(items) >> 1
  loop:
    if
      i <= n:
	$key items(2*i-1)
	$value items(2*i)
	inc &i
	$setter tab(key)
	if
	  setter.is_defined:
	    setter &prototype value
	    next
	  next
      -> prototype

register_type &deserializers std_types::object


$to_table: (fields)
  $i 1
  $n length_of(fields)
  $tab empty_key_order_table
  loop:
    if
      i < n:
	$key fields(i)
	$value fields(i+1)
	!tab(key) value
	!i i+2
	next
      -> tab
