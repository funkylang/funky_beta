#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

<namespace basic_loops>

$basic_types::break_function std_types::function
$basic_types::break_function.basic_loops::saved_context_of undefined

$basic_loops::saved_context_of ()

$basic_loops::body undefined
$basic_loops::from undefined
$basic_loops::to undefined
$basic_loops::by undefined
$basic_loops::finally undefined

#
  Topic: Loops

  There are **no** *loop* instructions in Funky and it isn't really possible to
  "loop" over some code.

  But there are a lot of functions that offer anonymous recursion that look and
  work a lot like loops.

  The make use of the dynamic variables of Funky that can be redefined in inner
  scopes.

  A "loop" consists of a *body* and a *finally* function. The
  *finally* function is called after the last "iteration" of the loop and is
  responsible to return any results from the "loop". Due to the fact that the
  "loop" is a normal function it cannot make any changes to its caller's
  variables directly.

  All "loops" redefine the function <next> to start the next iteration of the
  "loop". This <next> function must be called at the end of each "iteration".

  Some loops also offer a <break> function which can be used to stop
  "iterating" and calls the *finally* function immediately.

  Some "loops" define the no-op function <pass> as the default function for
  *finally*.

  Instead of calling <next> or <break> a loop's body can direct return one or
  more results.

  Due to some clever context saving and restoring "loops" can be nested to any
  level.

  The most basic "loop" is <loop>.

  Practically all <@Collections> support <for_each>.

$std::next pass
  #
    starts the next "iteration" of a "loop"

    All "loops" redefine this function to call the next "iteration" of the loop.

    *next* should **always** be called in tail position!

    Topic: Loops

    See also: std::break, std::loop

$std::break undefined
  #
    cancels the current "loop"

    *break* calls the *finally* function of the loop.

    Topic: Loops

    See also: std::next, std::loop

$std::loop:
  #
    a simple "loop"

    The "loop" construct replaces loops like *while*, *do_while* and *forever*.

    To start the next iteration of the "loop" use the <next>-function.

    <next> and <break> **must** be called in tail position!

    A "loop" is exited via <break> or through returning one or more results.

    Topic: Loops

    See also: std::repeat, std::from_to, std::from_to_by, std::next, std::break

    Example:

      $buf ""
      $a 1
      loop !buf
	: # "while" style
	  if
	    a <= 3:
	      $b 1
	      loop
		: # "do while" style
		  append &buf "
		    @(a) * @(b) = @(a*b)
		  inc &b
		  if
		    b <= 2
		    next
		    break
		:
		  inc &a
		  next
	    -> buf

      print! buf

    Output:

      1*1 = 1
      1*2 = 2
      2*1 = 2
      2*2 = 4
      3*1 = 3
      3*2 = 6

    Example:

      $sum 0
      $i 0
      println! "sum = "
	loop
	  :
	    inc &i
	    plus &sum i
	    if
	      i < 5
	      next
	      break
	  -> sum

    Output:

      sum = 15
  (
    body # the function to execute for each "iteration" of the "loop"
    finally = pass # the function to execute after the last "iteration"
  )
  $saved_context tuple(next break basic_loops::finally)

  !basic_loops::finally finally

  !next body

  new !break basic_types::break_function: (myself^)
    !finally basic_loops::finally
    basic_loops::saved_context_of(myself) !next !break !basic_loops::finally
    finally!

  !break.basic_loops::saved_context_of saved_context

  next!

$std::while:
  #
    a "while" loop

    This is just a simply layer around <loop>:

    Example:

      $while: (condition body finally)
	loop: if condition() body finally

    Topic: Loops

    See also: std::while_not, std::loop, std::repeat, std::from_to,
	      std::from_to_by
  (
    condition # the condition to check for each "iteration"
    body # the function to execute for each "iteration"
    finally = pass # the function to execute after the last "iteration"
  )
  loop: if condition() body finally

$std::while_not:
  #
    a "while" loop

    This is just a simply layer around <loop>:

    Example:

      $while_not: (condition body finally)
	loop: if not condition() body finally

    Topic: Loops

    See also: std::while, std::loop, std::repeat, std::from_to,
	      std::from_to_by
  (
    condition # the condition to check for each "iteration"
    body # the function to execute for each "iteration"
    finally = pass # the function to execute after the last "iteration"
  )
  loop: if_not condition() body finally

$std::repeat:
  #
    invoke a statement sequence for a specific number of times

    The statement sequence *body* is invoked exactly *n* times.

    *n* must be a numeric value. If it is not greater than 0 than *body* will
    not be called at all. *n* might also be a negative number (in which case
    *body* will not be called).

    To start the next iteration of the loop a tail call to the *next*-function
    has to be performed.

    To exit from the loop a tail call to the *break*-function has to be
    performed or one or more results have to be returned.

    Topic: Loops

    See also: std::loop, std::while, std::while_not, std::from_to,
	      std::from_to_by

    Example:

      repeat 10:
	print! '*'
	next!
      println!

    Output:

      **********

    Example:

      $value 1
      $n 1
      $result
	repeat
	  10
	  :
	    inc &n
	    times &value n
	    if
	      value > 100
	      -> value
	      next
	  -> value
      println! result

    Output:

      120

    Example:

      $value 1
      $n 1
      $result
	repeat
	  10
	  :
	    inc &n
	    times &value n
	    if
	      value > 1'000'000
	      -> value
	      next
	  -> value
      println! result

    Output:

      3628800
  (
    n # how often to invoke *body*
    body # the statement sequence to invoke
    finally = pass # a function to return selected variables to the caller
  )
  $saved_context
    tuple
      next
      break
      basic_loops::from
      basic_loops::body
      basic_loops::finally

  !basic_loops::from n
  !basic_loops::body body
  !basic_loops::finally finally

  $iterate:
    if
      basic_loops::from > 0:
	basic_loops::body!
      :
	break!

  !next:
    !basic_loops::from basic_loops::from-1
    iterate!

  new !break basic_types::break_function: (myself^)
    !finally basic_loops::finally
    basic_loops::saved_context_of(myself)
      !next !break
      !basic_loops::from !basic_loops::body !basic_loops::finally
    finally!

  !break.basic_loops::saved_context_of saved_context

  iterate!

$std::from_to:
  #
    a loop iterating over a sequence of values

    The starting value is incremented by one after each invocation of *body*.

    The type of the first and last value need not be integers but can be
    of arbitrary types that support adding the integer value 1.

    The loop terminates as soon as the current value is greater than *last*.
    (The *body* will only be called for values that are less than or equal to
    *last*.)

    If *first* is greater than *last* then the loop body will *not* be called at
    all!

    The *body* is called with a single argument (the current value).

    To start the next iteration of the loop a tail call to the *next*-function
    has to be performed.

    To exit from the loop a tail call to the *break*-function has to be
    performed or one or more results have to be returned.

    Topic: Loops

    See also: std::loop, std::while, std::while_not, std::repeat,
	      std::from_to_by

    Example:

      from_to 1 10: (i)
	println! i " x " i " = " i*i
	next!

    Output:

      1 x 1 = 1
      2 x 2 = 4
      3 x 3 = 9
      4 x 4 = 16
      5 x 5 = 25
      6 x 6 = 36
      7 x 7 = 49
      8 x 8 = 64
      9 x 9 = 81
      10 x 10 = 100

    Example:

      $sum 0
      from_to !sum 1 10
	: (i)
	  plus &sum i*i
	  next
	-> sum
      println! "sum: " sum

    Output:

      sum: 385

    Example:

      $sum 0
      from_to !sum 1 10
	: (i)
	  plus &sum i*i
	  if sum < 100 next break
	-> sum
      println! "sum: " sum

    Output:

      sum: 140
  (
    from # the value to use for the first invocation of *body*
    to # the value to use for the last invocation of *body*
    body # the statement sequence to execute for each value
    finally = pass # code to execute after the last iteration
  )
  $saved_context
    tuple
      next
      break
      basic_loops::from
      basic_loops::to
      basic_loops::body
      basic_loops::finally

  !basic_loops::from from
  !basic_loops::to to
  !basic_loops::body body
  !basic_loops::finally finally

  $iterate:
    if
      basic_loops::from <= basic_loops::to:
	basic_loops::body! basic_loops::from
      :
	break!

  !next:
    !basic_loops::from basic_loops::from+1
    iterate!

  new !break basic_types::break_function: (myself^)
    !finally basic_loops::finally
    basic_loops::saved_context_of(myself)
      !next !break
      !basic_loops::from !basic_loops::to !basic_loops::body !basic_loops::finally
    finally!

  !break.basic_loops::saved_context_of saved_context

  iterate!

$std::from_to_by:
  #
    a loop iterating over a sequence of values

    The starting value is incremented by the given step after each invocation
    of *body*.

    The type of the first and last value need not be integers but can be of
    arbitrary types that support adding the given step value.

    The loop terminates as soon as the current value is greater than *last*.
    (The *body* will only be called for values that are less than or equal to
    *last*.)

    If *first* is greater than *last* then the loop body will *not* be called at
    all!

    The *body* is called with a single argument (the current value).

    To start the next iteration of the loop a tail call to the *next*-function
    has to be performed.

    To exit from the loop a tail call to the *break*-function has to be
    performed or one or more results have to be returned.

    Topic: Loops

    See also: std::loop, std::while, std::while_not, std::repeat, std::from_to

    Example:

      from_to_by 1 10 2: (i)
	println! i " x " i " = " i*i
	next!

    Output:

      1 x 1 = 1
      3 x 3 = 9
      5 x 5 = 25
      7 x 7 = 49
      9 x 9 = 81
  (
    from # the value to use for the first invocation of *body*
    to # the value to use for the last invocation of *body*
    by # the incrementation/decrementation value
    body # the statement sequence to execute for each value
    finally = pass # code to execute after the last iteration
  )
  $saved_context
    tuple
      next
      break
      basic_loops::from
      basic_loops::to
      basic_loops::by
      basic_loops::body
      basic_loops::finally

  !basic_loops::from from
  !basic_loops::to to
  !basic_loops::by by
  !basic_loops::body body
  !basic_loops::finally finally

  $iterate
    if
      by < 0
      -> :
	if
	  basic_loops::from >= basic_loops::to:
	    basic_loops::body! basic_loops::from
	  :
	    break!
      -> :
	if
	  basic_loops::from <= basic_loops::to:
	    basic_loops::body! basic_loops::from
	  :
	    break!

  !next:
    !basic_loops::from basic_loops::from+basic_loops::by
    iterate!

  new !break basic_types::break_function: (myself^)
    !finally basic_loops::finally
    basic_loops::saved_context_of(myself)
      !next !break
      !basic_loops::from !basic_loops::to !basic_loops::by
      !basic_loops::body !basic_loops::finally
    finally!

  !break.basic_loops::saved_context_of saved_context

  iterate!
