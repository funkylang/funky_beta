#
  Copyright (C) 2024 by
  Dipl.-Ing. Michael Niederle

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License, version 2, or
  (at your option) under the terms of the GNU Lesser General Public License,
  version 3.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser (Library) General Public License for more details.

  For details of the GNU General Public License see the accompanying
  files LGPLv2.txt and LGLPv3.txt or
  http://www.gnu.org/licenses/lgpl-2.0.html
  http://www.gnu.org/licenses/lgpl-3.0.html
  or write to the
  Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Topic: Numbers

$std::bin:
  #
    converts a positive integer value into a string consisting of binary digits

    Result:
      string # a string consisting of binary digits

    The optional second parameter specifies the minimum length of the resulting
    string. If there are fewer binary digits than the specified length, the
    strint is left-padded with zeros.

    Topic: Math, Strings

    See also: hex, oct, to_string

    Example:

      println! bin(123)

    Output:

      1111011

    Example:

      println! bin(123 8)

    Output:

      01111011
  (
    val # the value to convert
    size = undefined # the optional minimum length
  )
  if
    val == 0:
      if
	size.is_defined
	-> dup("0" size)
	-> "0"
    :
      $str ""
      loop !str:
	if
	  val > 0:
	    put &str '0'+(val & 1)
	    !val val >> 1
	    next
	  -> str
      if
	size.is_defined
	-> pad_left(str size "0")
	-> str

$std::oct:
  #
    converts a positive integer value into a string consisting of octal digits

    The optional second parameter specifies the minimum length of the resulting
    string. If there are fewer octal digits than the specified length, the
    string is left-padded with zeros.

    Result:
      string # a string consisting of octal digits

    Topic: Math, Strings

    See also: bin, hex, to_string

    Example:

      println! oct(123)

    Output:

      173

    Example:

      println! oct(123 4)

    Output:

      0173
  (
    val # the value to convert
    size = undefined # the optional minimum length
  )
  if
    val == 0:
      if
	size.is_defined
	-> dup("0" size)
	-> "0"
    :
      $str ""
      loop !str:
	if
	  val > 0:
	    put &str '0'+(val & 0x07)
	    !val val >> 3
	    next
	  -> str
      if
	size.is_defined
	-> pad_left(str size "0")
	-> str

$std::hex:
  #
    converts a positive integer value into a string consisting of hexadecimal
    digits

    Result:
      string # a string consisting of hexadecimal digits

    The optional second parameter specifies the minimum length of the resulting
    string. If there are fewer hexadecimal digits than the specified length,
    the string is left-padded with zeros.

    Topic: Math, Strings

    See also: bin, oct, to_string

    Example:

      println! hex(123)

    Output:

      7b

    Example:

      println! hex(123 4)

    Output:

      007b
  (
    val # the value to convert
    size = undefined # the optional minimum length
  )
  if
    val == 0:
      if
	size.is_defined
	-> dup("0" size)
	-> "0"
    :
      $str ""
      loop !str:
	if
	  val > 0:
	    $hex_digit val & 0x0f
	    put &str
	      if
		hex_digit >= 10
		-> 'a'+hex_digit-10
		-> '0'+hex_digit
	    !val val >> 4
	    next
	  -> str
      if
	size.is_defined
	-> pad_left(str size "0")
	-> str

$std::inc:
  #
    adds the number 1 to the specified value

    Result:
      value # the value increased by 1

    Topic: Math

    See also: dec, plus

    Example:

      println! inc(123)

    Output:

      124
  (
    value # the value to increase
  )
  plus value 1

$std::dec:
  #
    subtracts the number 1 from the specified value

    Result:
      value # the value decreased by 1

    Topic: Math

    See also: inc, minus

    Example:

      println! dec(123)

    Output:

     122
  (
    value # the value to decrease
  )
  minus value 1

$std::abs:
  #
    returns the absolute value of its (numerical) argument

    Topic: Math

    See also: sgn

    Example:

      println! abs(-123)

    Output:

      123
  (
    value # the value to take the absolute value of
  )
  if
    value < 0
    -> negate(value)
    -> value

$std::sgn:
  #
    returns the sign of its (numerical) argument

    Result:
      result # -1, 0, or 1

    If the argument is less than zero then *-1* is returned.

    If the argument equals zero then *0* is returned.

    If the argument is greater than zero then *1* is returned.

    Topic: Math

    See also: abs

    Example:

      println! sgn(-123)

    Output:

      -1

    Example:

      println! sgn(0)

    Output:

      0

    Example:

      println! sgn(123)

    Output:

      1
  (
    value # the value to determine the sign of
  )
  cond
    -> value > 0 -> 1
    -> value < 0 -> -1
    -> true -> 0

$std::is_odd:
  #
    returns true if the specified value is odd, false otherwise

    Result:
      success # true or false

    Topic: Math

    See also: is_even

    Example:

      dump! `is_odd(123)

    Output:

      is_odd(123): <true>

    Example:

      dump! `is_odd(124)

    Output:

      is_odd(124): <false>
  (
    n # the value to check
  )
  -> n & 1 == 1

$std::is_even:
  #
    returns true if the specified value is even, false otherwise

    Result:
      success # true or false

    Topic: Math

    See also: is_odd

    Example:

      dump! `is_even(124)

    Output:

      is_even(124): <true>

    Example:

      dump! `is_even(123)

    Output:

      is_even(123): <false>
  (
    n # the value to check
  )
  -> n & 1 == 0

$std::sqr:
  #
    returns the square of its (numerical) argument

    Result:
      value # the square of the argument

    Topic: Math

    See also: pow, sqrt, isqrt

    Example:

      println! sqr(4)

    Output:

      16
  (
    value # the value to square
  )
  -> value*value

$std::min:
  #
    returns the smallest of its (potentially) many arguments

    Result:
      value # the smallest of the arguments

    Topic: Math

    See also: max, min_max

    Example:

      println! min(47 11 32)

    Output:

      11
  (
    args* # the arguments to compare
  )
  $result args(1)
  for_each range(args 2 -1)
    : (arg)
      if
	arg < result:
	  !result arg
	  next
	next
    -> result

$std::max:
  #
    returns the largest of its (potentially) many arguments

    Result:
      value # the largest of the arguments
    Topic: Math

    See also: min, min_max

    Example:

      println! max(47 11 32)

    Output:

      47
  (
    args* # the arguments to compare
  )
  $result args(1)
  for_each range(args 2 -1)
    : (arg)
      if
	arg > result:
	  !result arg
	  next
	next
    -> result

$std::min_max:
  #
    returns the smaller and the larger of its two arguments

    Result:
      min # the smaller of the arguments
      max # the larger of the arguments

    Topic: Math

    See also: min, max

    Example:

      $a 47
      $b 11
      min_max &a &b
      println! "min: " a
      println! "max: " b

    Output:

      min: 11
      max: 47
  (
    first_value # the first argument
    second_value # the second argument
  )
  if
    first_value <= second_value
    -> first_value second_value
    -> second_value first_value

$std::isqrt:
  #
    returns the integer square root of its argument

    Topic: Math

    See also: sqr, pow
  (
    n
  )
  if
    n < 0
    -> undefined
    :
      $x n
      $y 1
      loop:
	if
	  x > y
	  :
	    !x (x+y) >> 1
	    !y n .div. x
	    next
	  -> x

$std::PI 3.1415926535897932846
  #
    the mathematical constant PI

    Topic: Math

    See also: cos, sin, tan, asin, acos, atan
